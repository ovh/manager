name: recommended-checks-tests
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: mschilde/auto-label-merge-conflicts@master
        name: Auto label merge conflicts
        with:
          CONFLICT_LABEL_NAME: "has conflicts"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAX_RETRIES: 5
          WAIT_MS: 5000
      - name: Checkout latest code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Run the actual merge conflict finder
      - name: Merge Conflict finder
        uses: olivernybroe/action-conflict-finder@v4.0
        with:
          exclude_dir: "node_modules/**,**/node_modules/**"
      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: Restore/create node_modules cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install repository
        run: yarn install --frozen-lockfile
      - name: Build covered packages and dependencies
        run: |
          yarn exec turbo -- run build --filter="./packages/manager/core/*" --concurrency=5
          yarn exec turbo -- run build --filter="./packages/manager-react-components"
          yarn exec turbo -- run build --filter="./packages/manager/modules/order"
          yarn exec turbo -- run build --filter="./packages/manager/modules/common-api"
          yarn exec turbo -- run build --filter="./packages/manager/modules/common-translations"
          yarn exec turbo -- run build --filter="./packages/manager/modules/vcd-api"
          yarn exec turbo -- run build --filter="./packages/manager/modules/manager-pci-common"
          yarn exec turbo -- run build --filter="./packages/manager/modules/network-common"
          yarn exec turbo -- run build --filter="./packages/components/ovh-payment-method"
      - name: Run tests on changed packages
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "My branch is $BRANCH"
          BASE_BRANCH=$(gh pr view --json baseRefName -q ".baseRefName")

          if [[ -z "$BASE_BRANCH" ]]; then
            export BASE_BRANCH="master"
            export CURRENT_BRANCH=${BRANCH}
            echo "NO PR FOUND for branch $BRANCH from ${BASE_BRANCH}"
          else
            echo "Base Branch is $BASE_BRANCH"
            echo "current Branch is ${BRANCH}"
            export BASE_BRANCH="${BASE_BRANCH//\"/}"
            export CURRENT_BRANCH="${BRANCH//\"/}"
            echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
            echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          fi
          yarn exec turbo -- run test --concurrency=1 --filter=[origin/${BASE_BRANCH}...origin/${BRANCH}]

      - name: GetChangedPackages
        id: changed
        run: |
          get_changed_packages() {
            echo "Base Branch is $BASE_BRANCH"
            echo "current Branch: ${CURRENT_BRANCH}"
            echo "[INFO] Dry run to determine which packages will be built..."
            yarn turbo run build --dry-run=json --filter=...[origin/${BASE_BRANCH}...origin/${CURRENT_BRANCH}] > output.json
      
            # Clean JSON
            tail -n +3 output.json > tmpfile.json && mv tmpfile.json output.json
            head -n -1 output.json > temp.json && mv temp.json output.json
      
            # Extract packages
            jq -r '.packages[]' output.json
          }
          CHANGED_PACKAGES=$(get_changed_packages)
          echo "Changed packages:"
          echo "$CHANGED_PACKAGES"
      
          # Safe multiline output for next step
          echo "changed_packages<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show duplicate translations
        run: |
          echo "Changed packages:"
          echo "Output was: ${{ steps.changed.outputs.changed_packages }}"
          available_apps=$(yarn manager-cli --list | grep -E '^\s+- ' | sed -E 's/^\s+- //')
          readarray -t apps_array <<< "$available_apps"

          # Read the changed packages into a bash array
          while IFS= read -r line; do
            # Skip empty lines and '//' lines
            if [[ "$line" == "//" || -z "$line" ]]; then
              continue
            fi
           
            # Remove prefix and suffix
            cleaned_package="${line#@ovh-ux/manager-}"   # remove prefix
            cleaned_package="${cleaned_package%-app}"    # remove suffix if exist
            echo "Checking: $cleaned_package"
      
            # Check if cleaned_package is in available_apps
            if printf "%s\n" "${apps_array[@]}" | grep -qx "$cleaned_package"; then
              echo "âœ… Found: $cleaned_package"
              yarn manager-cli duplicated-translations --app $cleaned_package
            fi
            

          done <<< "${{ steps.changed.outputs.changed_packages }}"

      - name: Check regions metadata
        run: ./scripts/regions/check-regions.sh
        shell: bash
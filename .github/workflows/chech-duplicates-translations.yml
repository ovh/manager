name: Duplicate translation
on: [push]

jobs:
  duplicate-translation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: GetGitVars
        id: gate
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          CURRENT_BRANCH=$(git branch --show-current)
          echo "My branch is $CURRENT_BRANCH"
          if [[ "$CURRENT_BRANCH" == "master" ]]; then
            echo "My branch is master and no unit test to run, exit..."
            echo "should_continue=false" >> $GITHUB_OUTPUT
          fi
          BASE_BRANCH=$(gh pr view --json baseRefName -q ".baseRefName")
          echo "Base Branch is $BASE_BRANCH"

          PR_JSON=$(gh pr list --repo ovh/manager --head $CURRENT_BRANCH --base $BASE_BRANCH --json number)
          NUMBER_PULL=$(echo "$PR_JSON" | jq -r '.[0].number')
          labels=$(gh pr view $NUMBER_PULL --repo ovh/manager --json labels --jq '.labels[].name')

          if echo "$labels" | grep -wq "translation required"; then
            echo "✅ Translation required: Check the duplicate translation pls!..."
  
          else
            echo "❌ Translation label does not exist, exit..."
            SHOULD_CONTINUE=false
            echo "should_continue<<EOF" >> $GITHUB_OUTPUT
            echo "$SHOULD_CONTINUE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          # Safe multiline output for next step
          echo "current_branch<<EOF" >> $GITHUB_OUTPUT
          echo "$CURRENT_BRANCH" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "base_branch<<EOF" >> $GITHUB_OUTPUT
          echo "$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Restore/create node_modules cache
        if: steps.gate.outputs.should_continue == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.gate.outputs.should_continue == 'true'
        run: yarn install --frozen-lockfile
        
      - name: GetChangedPackages
        if: steps.gate.outputs.should_continue == 'true'
        id: changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          get_changed_packages() {
            BASE_BRANCH=${{ steps.gate.outputs.base_branch }}
            CURRENT_BRANCH=${{ steps.gate.outputs.current_branch }}
            yarn turbo run build --dry-run=json --filter=...[origin/${BASE_BRANCH}...origin/${CURRENT_BRANCH}] > output.json
      
            # Clean JSON
            tail -n +3 output.json > tmpfile.json && mv tmpfile.json output.json
            head -n -1 output.json > temp.json && mv temp.json output.json
      
            # Extract packages
            jq -r '.packages[]' output.json
          }
          echo "[INFO] Dry run to determine which packages will be built..."
          CHANGED_PACKAGES=$(get_changed_packages)
          echo "Changed packages:"
          echo "$CHANGED_PACKAGES"
      
          # Safe multiline output for next step
          echo "changed_packages<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show duplicate translations
        if: steps.gate.outputs.should_continue == 'true'
        run: |
          echo "Changed packages:"
          echo "Output was: ${{ steps.changed.outputs.changed_packages }}"
          available_apps=$(yarn manager-cli --list | grep -E '^\s+- ' | sed -E 's/^\s+- //')
          readarray -t apps_array <<< "$available_apps"

          # Read the changed packages into a bash array
          while IFS= read -r line; do
            # Skip empty lines and '//' lines
            if [[ "$line" == "//" || -z "$line" ]]; then
              continue
            fi
           
            # Remove prefix and suffix
            cleaned_package="${line#@ovh-ux/manager-}"   # remove prefix
            cleaned_package="${cleaned_package%-app}"    # remove suffix if exist
            echo "Checking: $cleaned_package"
      
            # Check if cleaned_package is in available_apps
            if printf "%s\n" "${apps_array[@]}" | grep -qx "$cleaned_package"; then
              echo "✅ Found: $cleaned_package"
              yarn manager-cli duplicated-translations --app $cleaned_package
            fi
            

          done <<< "${{ steps.changed.outputs.changed_packages }}"
{"version":3,"file":"tiles-input.stories-421a25f7.js","sources":["../../src/components/input/tiles/components/SimpleTilesInput.component.tsx","../../src/components/input/tiles/TilesInput.component.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { OsdsText, OsdsTile } from '@ovhcloud/ods-components/react';\nimport { clsx } from 'clsx';\nimport {\n  ODS_THEME_COLOR_INTENT,\n  ODS_THEME_TYPOGRAPHY_LEVEL,\n  ODS_THEME_TYPOGRAPHY_SIZE,\n} from '@ovhcloud/ods-common-theming';\nimport { hashCode } from '../../../../utils';\n\nconst uniqBy = function uniqBy<I, U>(items: I[], cb: (item: I) => U): I[] {\n  return [\n    ...items\n      .reduce((map: Map<U, I>, item?: I) => {\n        if (!map.has(cb(item))) map.set(cb(item), item);\n\n        return map;\n      }, new Map())\n      .values(),\n  ];\n};\n\nconst stackItems = function stackItems<I, U>(\n  items: I[],\n  cb: (item: I) => U,\n): Map<U, I[]> {\n  const stacks = new Map<U, I[]>();\n\n  if (cb) {\n    const uniques = uniqBy<I, U>(items, cb);\n    uniques.forEach((unique) => {\n      const key = cb(unique);\n      stacks.set(key, []);\n      stacks.get(key).push(...items.filter((item) => Object.is(key, cb(item))));\n    });\n  } else {\n    stacks.set(undefined, items);\n  }\n\n  return stacks;\n};\n\nexport type TSimpleProps<T, S = void> = {\n  id?: (() => string) | string;\n  items: T[];\n  value: T;\n  onInput: (value: T) => void;\n  label: (item: T) => JSX.Element | string;\n  tileClass?: {\n    active?: string;\n    inactive?: string;\n  };\n  stack?: {\n    by: (item: T) => S;\n    label: (stack: S, items: T[]) => JSX.Element | string;\n    title: (stack: S, items: T[]) => JSX.Element | string;\n    value?: S;\n    onChange?: (stack: S) => void;\n  };\n};\n\ntype IState<T, S> = {\n  stacks: Map<S, T[]>;\n  selectedStack: S;\n  activeClass: string;\n  inactiveClass: string;\n};\n\nexport const SimpleTilesInputComponent = function SimpleTilesInputComponent<\n  T,\n  S\n>({\n  items,\n  value,\n  onInput,\n  label,\n  tileClass,\n  stack,\n  id,\n}: TSimpleProps<T, S>): JSX.Element {\n  const [state, setState] = useState<IState<T, S>>({\n    stacks: stackItems(items, stack?.by),\n    selectedStack: stack?.value,\n    activeClass: `cursor-pointer font-bold bg-[--ods-color-blue-100] border-[--ods-color-blue-600] ${tileClass?.active}`,\n    inactiveClass: `cursor-pointer border-[--ods-color-blue-100] hover:bg-[--ods-color-blue-100] hover:border-[--ods-color-blue-600] ${tileClass?.inactive}`,\n  });\n\n  const set = {\n    selectedStack: (s: S) => {\n      setState((prev) => ({ ...prev, selectedStack: s }));\n    },\n    value: (t: T) => onInput(t),\n  };\n\n  const is = {\n    stack: {\n      checked: useCallback(\n        (s: S) =>\n          state.stacks?.get(s)?.length > 1\n            ? Object.is(state.selectedStack, s)\n            : Object.is(state.stacks.get(s)[0], value),\n        [state.stacks, state.selectedStack, value],\n      ),\n      singleton: useCallback((s: S) => state.stacks.get(s)?.length === 1, [\n        state.stacks,\n      ]),\n    },\n  };\n\n  // Update stacks from props\n  useEffect(() => {\n    setState((prev) => ({ ...prev, stacks: stackItems(items, stack?.by) }));\n  }, [items, stack]);\n\n  // Update active/inactive class from props\n  useEffect(() => {\n    if (tileClass) {\n      setState((prev) => ({\n        ...prev,\n        activeClass: `cursor-pointer font-bold bg-[--ods-color-blue-100] border-[--ods-color-blue-600] ${tileClass?.active}`,\n        inactiveClass: `cursor-pointer border-[--ods-color-blue-100] hover:bg-[--ods-color-blue-100] hover:border-[--ods-color-blue-600] ${tileClass?.inactive}`,\n      }));\n    }\n  }, [tileClass]);\n\n  // Warn parent on stack change\n  useEffect(() => {\n    if (typeof stack?.onChange === 'function') {\n      stack.onChange(state.selectedStack);\n    }\n  }, [state.selectedStack]);\n\n  // Update selected stack from value\n  useEffect(() => {\n    if (stack) {\n      set.selectedStack(value ? stack.by(value) : undefined);\n    }\n  }, [value]);\n\n  // Update value from selected stack\n  useEffect(() => {\n    if (\n      stack &&\n      state.stacks.get(state.selectedStack)?.length &&\n      !Object.is(state.selectedStack, stack.by(value))\n    ) {\n      set.value(state.stacks.get(state.selectedStack)[0]);\n    }\n  }, [state.selectedStack]);\n\n  return (\n    <div id={typeof id === 'function' ? id() : id}>\n      <ul className=\"grid gap-6 list-none p-6 m-0 grid-cols-1 md:grid-cols-3\">\n        {stack\n          ? [...state.stacks.keys()].map((key) => (\n              <li className=\"w-full px-1\" key={hashCode(key)}>\n                <OsdsTile\n                  checked={is.stack.checked(key)}\n                  onClick={() =>\n                    is.stack.singleton(key)\n                      ? set.value(state.stacks.get(key)[0])\n                      : set.selectedStack(key)\n                  }\n                  className={clsx(\n                    is.stack.checked(key)\n                      ? state.activeClass\n                      : state.inactiveClass,\n                  )}\n                >\n                  {is.stack.singleton(key)\n                    ? label(state.stacks.get(key)[0])\n                    : stack?.label(key, state.stacks.get(key))}\n                </OsdsTile>\n              </li>\n            ))\n          : items.map((item: T) => (\n              <li className=\"w-full px-1\" key={hashCode(item)}>\n                <OsdsTile\n                  checked={Object.is(value, item)}\n                  onClick={() => set.value(item)}\n                  className={clsx(\n                    Object.is(value, item)\n                      ? state.activeClass\n                      : state.inactiveClass,\n                  )}\n                >\n                  {label(item)}\n                </OsdsTile>\n              </li>\n            ))}\n      </ul>\n      {state.selectedStack &&\n        state.stacks.get(state.selectedStack)?.length > 1 && (\n          <>\n            <div className=\"mt-6 ml-8\">\n              <OsdsText\n                level={ODS_THEME_TYPOGRAPHY_LEVEL.heading}\n                size={ODS_THEME_TYPOGRAPHY_SIZE._200}\n                color={ODS_THEME_COLOR_INTENT.text}\n              >\n                {stack.title(\n                  state.selectedStack,\n                  state.stacks.get(state.selectedStack),\n                )}\n              </OsdsText>\n            </div>\n            <SimpleTilesInputComponent\n              value={value}\n              items={state.stacks.get(state.selectedStack)}\n              label={label}\n              onInput={onInput}\n              tileClass={tileClass}\n            />\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { TabsComponent } from '../../container/tabs/Tabs.component';\nimport {\n  SimpleTilesInputComponent,\n  TSimpleProps,\n} from './components/SimpleTilesInput.component';\n\ntype TProps<T, S = void, G = void> = TSimpleProps<T, S> & {\n  group?: {\n    by: (item: T) => G;\n    label: (group: G, items: T[]) => JSX.Element | string;\n    value?: G;\n    showAllTab: boolean;\n    onChange?: (group: G) => void;\n  };\n};\n\ntype TState<T, S, G> = {\n  groups: Map<G, T[]>;\n  selectedGroup: G;\n  selectedStack: S;\n};\n\nexport const TilesInputComponent = function TilesInputComponent<T, S, G>({\n  id,\n  items,\n  value,\n  onInput,\n  label,\n  tileClass,\n  stack,\n  group,\n}: TProps<T, S, G>): JSX.Element {\n  const [state, setState] = useState<TState<T, S, G>>({\n    groups: new Map<G, T[]>(),\n    selectedGroup: group?.value,\n    selectedStack: stack?.value,\n  });\n\n  useEffect(() => {\n    if (group && typeof group.by === 'function') {\n      const groups = new Map<G, T[]>();\n\n      if (group.showAllTab) {\n        groups.set(undefined, [...items]);\n      }\n\n      items.forEach((item) => {\n        const groupId = group.by(item);\n        if (!groups.has(groupId)) {\n          groups.set(groupId, []);\n        }\n        groups.get(groupId).push(item);\n      });\n\n      setState((prev) => ({ ...prev, groups }));\n    }\n  }, [items, group]);\n\n  useEffect(() => {\n    if (group && group.onChange) {\n      group.onChange(state.selectedGroup);\n    }\n  }, [state.selectedGroup]);\n\n  return (\n    <>\n      {group ? (\n        <TabsComponent<G>\n          id={'t'}\n          items={[...state.groups?.keys()]}\n          titleElement={(key) => group.label(key, state.groups.get(key))}\n          contentElement={(item: G) => (\n            <SimpleTilesInputComponent\n              id={id}\n              items={state.groups.get(item) || []}\n              value={value}\n              onInput={onInput}\n              label={label}\n              tileClass={tileClass}\n              stack={\n                stack\n                  ? {\n                      ...stack,\n                      onChange: (s) => {\n                        setState((prev) => ({ ...prev, selectedStack: s }));\n                        if (stack?.onChange) stack?.onChange(s);\n                      },\n                    }\n                  : undefined\n              }\n            />\n          )}\n          onChange={(g) => {\n            setState((prev) => ({ ...prev, selectedGroup: g }));\n          }}\n        />\n      ) : (\n        <SimpleTilesInputComponent<T, S>\n          id={id}\n          items={items}\n          value={value}\n          onInput={onInput}\n          label={label}\n          tileClass={tileClass}\n          stack={stack}\n        />\n      )}\n    </>\n  );\n};\n\nexport default TilesInputComponent;\n"],"names":["uniqBy","items","cb","map","item","stackItems","stacks","unique","key","SimpleTilesInputComponent","SimpleTilesInputComponent2","value","onInput","label","tileClass","stack","id","state","setState","useState","set","s","prev","t","is","useCallback","_b","_a","useEffect","jsxs","jsx","OsdsTile","clsx","hashCode","Fragment","OsdsText","ODS_THEME_TYPOGRAPHY_LEVEL","ODS_THEME_TYPOGRAPHY_SIZE","ODS_THEME_COLOR_INTENT","TilesInputComponent","group","groups","groupId","TabsComponent","g","TilesInputComponent$1"],"mappings":"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"}
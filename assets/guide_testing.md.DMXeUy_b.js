import{_ as e,c as s,o as t,a4 as i}from"./chunks/framework.DS9aQWEr.js";const g=JSON.parse('{"title":"Testing","description":"","frontmatter":{},"headers":[],"relativePath":"guide/testing.md","filePath":"guide/testing.md","lastUpdated":1738594936000}'),a={name:"guide/testing.md"},n=i(`<h1 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">â€‹</a></h1><p>Our testing configuration allows to test <code>.js;.ts;.jsx;.tsx</code> extensions. The configuration is already available at the root folder.</p><p>We use <a href="https://cucumber.io/docs/gherkin/reference/" target="_blank" rel="noreferrer">Gherkin</a> to help keep our tests readable and maintainable. Each test is related to a feature file that looks like this:</p><div class="language-gherkin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gherkin</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Shell client</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scenario</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Plugin method invokation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Given </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">I have one plugin registered in my shell</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  And </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">My shell and shell client are configured with a direct message bus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  When </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">I invoke a method from my plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  Then </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">The invokation should be resolved with the method result</span></span></code></pre></div><p>We use the package <a href="https://github.com/bencompton/jest-cucumber" target="_blank" rel="noreferrer"><code>jest-cucumber</code></a> to link our test files <code>.spec.ts</code> with our features to ensure we did follow the BDD method and didn&#39;t forget any test case that we were planning on doing.</p><p>You can check out examples by clicking on this <a href="https://github.com/ovh/manager/blob/master/packages/components/ovh-shell/__tests__/client/shell-client.spec.ts" target="_blank" rel="noreferrer">link</a></p><p>To run all your tests, you can use the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:jest</span></span></code></pre></div><p>You can also run a specific test from the root by specifying the part of a part of the path:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This will run container tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:jest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This will only run the shell test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:jest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell.spec.ts</span></span></code></pre></div><p>To write a unit test:</p><ul><li>Write your use cases in a <code>.feature</code> file.</li><li>Link your feature to your test using the method <code>loadFeature</code> from <code>jest-cucumber</code>.</li><li>Start writing your use cases with the <code>given</code>, <code>when</code>, <code>then</code> methods exposed by the <code>test</code> method from <code>jest-cucumber</code>.</li></ul><p>Everything that is new should be tested. There is no coverage minimum but make sure that your main features don&#39;t break. It is appreciated if you can go further than that.</p><p>If you are using <code>React</code>, you can test your UI by using <a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noreferrer"><code>@testing-library/react</code></a>. You can either use Gherkin to test your logic, or, if you want to test that your UI doesn&#39;t change, use snapshot testing features provided by jest.</p><p>You can find examples under the <code>container</code> app.</p>`,15),l=[n];function h(o,r,p,c,d,k){return t(),s("div",null,l)}const y=e(a,[["render",h]]);export{g as __pageData,y as default};

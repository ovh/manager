#!/usr/bin/env node
import path from 'node:path';

import { EMOJIS, MUK_COMPONENTS_SRC, ODS_EXCLUDED_COMPONENTS } from '../config/muk-config.js';
import {
  buildComponentsIndexTemplate,
  buildSubcomponentSpecTemplate,
  buildSubcomponentTemplate,
  getComponentTemplates,
} from '../config/muk-template-config.js';
import { groupComponentsDynamically } from '../core/component-utils.js';
import { createFile, ensureDir, readFile, toPascalCase, writeFile } from '../core/file-utils.js';
import { detectHasChildrenFromTarball, extractOdsTarball } from '../core/ods-tarball-utils.js';
import { runPostUpdateChecks } from '../core/tasks-utils.js';
import { logger } from '../utils/log-manager.js';
import { checkComponents } from './check-components.js';

/**
 * Safely update the Manager React Components index.ts exports.
 *
 * @param {string[]} createdComponents - List of new components (PascalCase or kebab-case)
 */
async function updateComponentsIndexExports(createdComponents) {
  if (!createdComponents?.length) return;

  const indexFile = path.join(MUK_COMPONENTS_SRC, 'index.ts');
  let content = readFile(indexFile, false);

  // üß© If index.ts doesn‚Äôt exist or empty ‚Üí use template
  if (!content.trim()) {
    content = buildComponentsIndexTemplate();
  }

  const newExports = [];

  for (const comp of createdComponents) {
    const baseName = comp.replace(/\s*\(.*\)$/, '');
    const folderName = baseName.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
    const exportLine = `export * from './${folderName}';`;

    if (!content.includes(exportLine)) newExports.push(exportLine);
  }

  if (newExports.length === 0) {
    logger.info(`${EMOJIS.info} No new exports needed in components index.`);
    return;
  }

  const finalContent = content.trimEnd() + '\n' + newExports.join('\n') + '\n';
  writeFile(indexFile, finalContent);

  logger.success(
    `${EMOJIS.check} Added ${newExports.length} new export${newExports.length > 1 ? 's' : ''} to index.ts`,
  );
}

/**
 * Build all file and directory paths for a given component.
 * File contents are generated by muk-template-config.js.
 *
 * @param {string} component - kebab-case component name
 * @param {boolean} [hasChildren=false] - Whether the component supports children
 * @returns {{
 *   compName: string,
 *   folderName: string,
 *   dirs: Record<string, string>,
 *   files: Record<string, { path: string, content: string }>
 * }}
 */
function buildComponentFiles(component, hasChildren = false) {
  const folderName = component.toLowerCase();
  const testFolderName = '__tests__';
  const compDir = path.join(MUK_COMPONENTS_SRC, folderName);
  const testsDir = path.join(compDir, testFolderName);
  const snapshotDir = path.join(testsDir, 'snapshot');
  const compName = toPascalCase(component);
  const templates = getComponentTemplates(compName, hasChildren);

  return {
    compName,
    folderName,
    testFolderName,
    dirs: {
      base: compDir,
      tests: testsDir,
      snapshot: snapshotDir,
    },
    files: {
      component: {
        path: path.join(compDir, `${compName}.component.tsx`),
        content: templates.component,
      },
      props: {
        path: path.join(compDir, `${compName}.props.ts`),
        content: templates.props,
      },
      test: {
        path: path.join(testsDir, `${compName}.snapshot.test.tsx`),
        content: templates.test,
      },
      index: {
        path: path.join(compDir, 'index.ts'),
        content: templates.index,
      },
      gitkeep: {
        path: path.join(snapshotDir, '.gitkeep'),
        content: '',
      },
    },
  };
}

/**
 * Generate folder structure and files for a parent component and its subcomponents.
 *
 * Reuses buildComponentFiles() for the base component.
 *
 * @param {string} parent - kebab-case parent component name
 * @param {string[]} children - list of subcomponent names (kebab-case)
 * @returns {Promise<void>}
 */
async function generateComponentStructure(parent, children = []) {
  const hasChildren = await detectHasChildrenFromTarball(parent);
  const { compName, testFolderName, dirs, files } = buildComponentFiles(parent, hasChildren);

  // üèó Create base structure for parent
  Object.values(dirs).forEach(ensureDir);
  Object.values(files).forEach(({ path: filePath, content }) => createFile(filePath, content));

  // üìÅ Generate subcomponents under parent, no per-subcomponent index.ts
  for (const sub of children) {
    const subDir = path.join(dirs.base, sub);
    ensureDir(subDir);
    const subTestsDir = path.join(subDir, testFolderName);
    ensureDir(subTestsDir);

    const subCompName = sub
      .split('-')
      .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
      .join('');

    const subComponentContent = buildSubcomponentTemplate(subCompName, compName);
    const subSpecContent = buildSubcomponentSpecTemplate(subCompName);

    createFile(path.join(subDir, `${subCompName}.component.tsx`), subComponentContent);
    createFile(path.join(subTestsDir, `${subCompName}.component.spec.tsx`), subSpecContent);

    logger.info(`üìÅ Created subcomponent: ${sub} (with __tests__ and shared props)`);
  }

  // üîó Add all subcomponent exports in parent index.ts (single consolidated place)
  if (children.length > 0) {
    const parentIndexPath = files.index.path;
    let parentIndexContent = readFile(parentIndexPath, false).trimEnd();

    const newExports = children
      .map((sub) => {
        const subCompName = sub
          .split('-')
          .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
          .join('');
        return `export { ${subCompName} } from './${sub}/${subCompName}.component';`;
      })
      .join('\n');

    if (!parentIndexContent.includes(newExports)) {
      const finalContent = `${parentIndexContent}\n\n${newExports}\n`;
      writeFile(parentIndexPath, finalContent);
      logger.info(`üîó Linked ${children.length} subcomponents in ${parent}/index.ts`);
    }
  }

  logger.success(`‚úî Created base structure for ${compName}`);
}

/**
 * Step 1: Dynamically create folder structure and files for missing ODS components.
 */
async function createComponentsStructure() {
  logger.info(`${EMOJIS.info} Starting ODS ‚Üí Manager component sync (structure only)...`);

  const { missingComponents = [] } = await checkComponents({ returnOnly: true });
  const filteredComponents = missingComponents.filter(
    (component) => !ODS_EXCLUDED_COMPONENTS.includes(component),
  );

  if (!filteredComponents.length) {
    logger.success('‚úÖ All relevant ODS components are already present.');
    return [];
  }

  logger.warn(`‚ö† ${filteredComponents.length} missing components detected. Creating folders...`);

  // Extract ODS tarball and infer grouping
  const odsFiles = await extractOdsTarball();
  const componentFolders = [
    ...new Set(
      [...odsFiles.keys()].map((f) => f.match(/src\/components\/([^/]+)/)?.[1]).filter(Boolean),
    ),
  ];

  const grouped = groupComponentsDynamically(
    componentFolders.filter((c) => filteredComponents.includes(c)),
  );

  const createdComponents = [];

  for (const [parent, children] of Object.entries(grouped)) {
    await generateComponentStructure(parent, children);
    createdComponents.push(parent);
  }

  logger.success(`üéâ Folder structure created for ${createdComponents.length} components.`);
  return createdComponents;
}

/**
 * Public command: updateComponents
 *
 * - Step 1: Create folder structure for missing components
 * - Step 2: Populate base template content
 * - Step 3: Add exports to manager-ui-kit index.ts
 * - Step 4: (TODO) Export ODS enums/types if applicable
 */
export async function updateComponents() {
  logger.info(`${EMOJIS.info} Running component sync pipeline...`);

  const createdComponents = await createComponentsStructure();

  if (createdComponents.length === 0) {
    logger.success('‚úÖ No new components to add.');
    return;
  }

  await updateComponentsIndexExports(createdComponents);

  // Future extensions
  // await syncTypesFromODS(created);

  // Run validation tasks
  runPostUpdateChecks();

  logger.success(
    `üèÅ Component update process completed. ${createdComponents.length} new folders created.`,
  );
}

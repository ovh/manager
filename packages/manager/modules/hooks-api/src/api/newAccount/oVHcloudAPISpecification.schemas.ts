/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetNewAccountLegalformParams = {
country: NichandleCountryEnumOVH;
};

export type GetNewAccountCorporationTypeParams = {
country: NichandleCountryEnumOVH;
};

export type GetNewAccountAreaParams = {
country: NichandleCountryEnumOVH;
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * A contract
 */
export interface OrderContractOVH {
  content?: string;
  name?: string;
  url?: string;
}

/**
 * Phone Type a nichandle can have
 */
export type NichandlePhoneTypeEnumOVH = typeof NichandlePhoneTypeEnumOVH[keyof typeof NichandlePhoneTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandlePhoneTypeEnumOVH = {
  landline: 'landline',
  mobile: 'mobile',
} as const;

/**
 * OVH subsidiaries
 */
export type NichandleOvhSubsidiaryEnumOVH = typeof NichandleOvhSubsidiaryEnumOVH[keyof typeof NichandleOvhSubsidiaryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleOvhSubsidiaryEnumOVH = {
  ASIA: 'ASIA',
  AU: 'AU',
  CA: 'CA',
  CZ: 'CZ',
  DE: 'DE',
  ES: 'ES',
  EU: 'EU',
  FI: 'FI',
  FR: 'FR',
  GB: 'GB',
  IE: 'IE',
  IN: 'IN',
  IT: 'IT',
  LT: 'LT',
  MA: 'MA',
  NL: 'NL',
  PL: 'PL',
  PT: 'PT',
  QC: 'QC',
  SG: 'SG',
  SN: 'SN',
  TN: 'TN',
  US: 'US',
  WE: 'WE',
  WS: 'WS',
} as const;

/**
 * OVH companies
 */
export type NichandleOvhCompanyEnumOVH = typeof NichandleOvhCompanyEnumOVH[keyof typeof NichandleOvhCompanyEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleOvhCompanyEnumOVH = {
  kimsufi: 'kimsufi',
  ovh: 'ovh',
  soyoustart: 'soyoustart',
} as const;

export type GetNewAccountCreationRulesParams = {
country: NichandleCountryEnumOVH;
legalform: NichandleLegalFormEnumOVH;
ovhCompany: NichandleOvhCompanyEnumOVH;
ovhSubsidiary: NichandleOvhSubsidiaryEnumOVH;
};

export type GetNewAccountCountriesParams = {
ovhCompany: NichandleOvhCompanyEnumOVH;
ovhSubsidiary: NichandleOvhSubsidiaryEnumOVH;
};

export type GetNewAccountContractsParams = {
company: NichandleOvhCompanyEnumOVH;
subsidiary: NichandleOvhSubsidiaryEnumOVH;
};

export type PostNewAccountBody = {
  address?: string;
  area?: string;
  birthCity?: string;
  birthDay?: string;
  city?: string;
  companyNationalIdentificationNumber?: string;
  corporationType?: string;
  country: NichandleCountryEnumOVH;
  email: string;
  fax?: string;
  firstname?: string;
  italianSDI?: string;
  language?: NichandleLanguageEnumOVH;
  legalform: NichandleLegalFormEnumOVH;
  name?: string;
  nationalIdentificationNumber?: string;
  organisation?: string;
  ovhCompany: NichandleOvhCompanyEnumOVH;
  ovhSubsidiary: NichandleOvhSubsidiaryEnumOVH;
  phone?: string;
  phoneCountry?: NichandleCountryEnumOVH;
  phoneType?: NichandlePhoneTypeEnumOVH;
  purposeOfPurchase?: string;
  sex?: NichandleGenderEnumOVH;
  spareEmail?: string;
  vat?: string;
  zip?: string;
};

/**
 * Newly created OVH identifier and a login token for the API
 */
export interface NichandleNewAccountAndTokenOVH {
  /** @nullable */
  consumerKey?: string | null;
  ovhIdentifier?: string;
}

/**
 * Legal forms a nichandle can be registered as
 */
export type NichandleLegalFormEnumOVH = typeof NichandleLegalFormEnumOVH[keyof typeof NichandleLegalFormEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleLegalFormEnumOVH = {
  administration: 'administration',
  association: 'association',
  corporation: 'corporation',
  individual: 'individual',
  other: 'other',
  personalcorporation: 'personalcorporation',
} as const;

/**
 * Languages a nichandle can choose
 */
export type NichandleLanguageEnumOVH = typeof NichandleLanguageEnumOVH[keyof typeof NichandleLanguageEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleLanguageEnumOVH = {
  cs_CZ: 'cs_CZ',
  de_DE: 'de_DE',
  en_AU: 'en_AU',
  en_CA: 'en_CA',
  en_GB: 'en_GB',
  en_IE: 'en_IE',
  en_US: 'en_US',
  es_ES: 'es_ES',
  fi_FI: 'fi_FI',
  fr_CA: 'fr_CA',
  fr_FR: 'fr_FR',
  fr_MA: 'fr_MA',
  fr_SN: 'fr_SN',
  fr_TN: 'fr_TN',
  it_IT: 'it_IT',
  lt_LT: 'lt_LT',
  nl_NL: 'nl_NL',
  pl_PL: 'pl_PL',
  pt_PT: 'pt_PT',
} as const;

/**
 * All genders a person can choose
 */
export type NichandleGenderEnumOVH = typeof NichandleGenderEnumOVH[keyof typeof NichandleGenderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleGenderEnumOVH = {
  female: 'female',
  male: 'male',
} as const;

/**
 * Action a nichandle can perform on his account.
 */
export type NichandleCreationRulesActionEnumOVH = typeof NichandleCreationRulesActionEnumOVH[keyof typeof NichandleCreationRulesActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleCreationRulesActionEnumOVH = {
  create: 'create',
  update: 'update',
} as const;

/**
 * Describe all rules for a given field
 */
export interface NichandleCreationRuleOVH {
  /**
   * Default value of the field
   * @nullable
   */
  defaultValue?: string | null;
  /**
   * Examples of values for the fields
   * @nullable
   */
  examples?: string[] | null;
  /**
   * Name of the field
   * @nullable
   */
  fieldName?: string | null;
  /**
   * List of allowed values for the field
   * @nullable
   */
  in?: string[] | null;
  /** Whether the field is mandatory */
  mandatory?: boolean;
  /**
   * Maximum length of the field
   * @nullable
   */
  maxLength?: number | null;
  /**
   * Minimum length of the field
   * @nullable
   */
  minLength?: number | null;
  /**
   * Prefix of the field value
   * @nullable
   */
  prefix?: string | null;
  /**
   * Regular expression to validate the field value
   * @nullable
   */
  regularExpression?: string | null;
}

/**
 * Describe rules foreach field in order to create a nic
 */
export interface NichandleCreationRulesOVH {
  address?: NichandleCreationRuleOVH;
  area?: NichandleCreationRuleOVH;
  birthCity?: NichandleCreationRuleOVH;
  birthDay?: NichandleCreationRuleOVH;
  city?: NichandleCreationRuleOVH;
  companyNationalIdentificationNumber?: NichandleCreationRuleOVH;
  corporationType?: NichandleCreationRuleOVH;
  country?: NichandleCreationRuleOVH;
  email?: NichandleCreationRuleOVH;
  fax?: NichandleCreationRuleOVH;
  firstname?: NichandleCreationRuleOVH;
  italianSDI?: NichandleCreationRuleOVH;
  language?: NichandleCreationRuleOVH;
  legalform?: NichandleCreationRuleOVH;
  name?: NichandleCreationRuleOVH;
  nationalIdentificationNumber?: NichandleCreationRuleOVH;
  organisation?: NichandleCreationRuleOVH;
  ovhCompany?: NichandleCreationRuleOVH;
  ovhSubsidiary?: NichandleCreationRuleOVH;
  phone?: NichandleCreationRuleOVH;
  phoneCountry?: NichandleCreationRuleOVH;
  phoneType?: NichandleCreationRuleOVH;
  purposeOfPurchase?: NichandleCreationRuleOVH;
  sex?: NichandleCreationRuleOVH;
  spareEmail?: NichandleCreationRuleOVH;
  vat?: NichandleCreationRuleOVH;
  zip?: NichandleCreationRuleOVH;
}

/**
 * Countries a nichandle can choose
 */
export type NichandleCountryEnumOVH = typeof NichandleCountryEnumOVH[keyof typeof NichandleCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleCountryEnumOVH = {
  AC: 'AC',
  AD: 'AD',
  AE: 'AE',
  AF: 'AF',
  AG: 'AG',
  AI: 'AI',
  AL: 'AL',
  AM: 'AM',
  AO: 'AO',
  AQ: 'AQ',
  AR: 'AR',
  AS: 'AS',
  AT: 'AT',
  AU: 'AU',
  AW: 'AW',
  AX: 'AX',
  AZ: 'AZ',
  BA: 'BA',
  BB: 'BB',
  BD: 'BD',
  BE: 'BE',
  BF: 'BF',
  BG: 'BG',
  BH: 'BH',
  BI: 'BI',
  BJ: 'BJ',
  BL: 'BL',
  BM: 'BM',
  BN: 'BN',
  BO: 'BO',
  BQ: 'BQ',
  BR: 'BR',
  BS: 'BS',
  BT: 'BT',
  BW: 'BW',
  BY: 'BY',
  BZ: 'BZ',
  CA: 'CA',
  CC: 'CC',
  CD: 'CD',
  CF: 'CF',
  CG: 'CG',
  CH: 'CH',
  CI: 'CI',
  CK: 'CK',
  CL: 'CL',
  CM: 'CM',
  CN: 'CN',
  CO: 'CO',
  CR: 'CR',
  CU: 'CU',
  CV: 'CV',
  CW: 'CW',
  CX: 'CX',
  CY: 'CY',
  CZ: 'CZ',
  DE: 'DE',
  DG: 'DG',
  DJ: 'DJ',
  DK: 'DK',
  DM: 'DM',
  DO: 'DO',
  DZ: 'DZ',
  EA: 'EA',
  EC: 'EC',
  EE: 'EE',
  EG: 'EG',
  EH: 'EH',
  ER: 'ER',
  ES: 'ES',
  ET: 'ET',
  FI: 'FI',
  FJ: 'FJ',
  FK: 'FK',
  FM: 'FM',
  FO: 'FO',
  FR: 'FR',
  GA: 'GA',
  GB: 'GB',
  GD: 'GD',
  GE: 'GE',
  GF: 'GF',
  GG: 'GG',
  GH: 'GH',
  GI: 'GI',
  GL: 'GL',
  GM: 'GM',
  GN: 'GN',
  GP: 'GP',
  GQ: 'GQ',
  GR: 'GR',
  GS: 'GS',
  GT: 'GT',
  GU: 'GU',
  GW: 'GW',
  GY: 'GY',
  HK: 'HK',
  HN: 'HN',
  HR: 'HR',
  HT: 'HT',
  HU: 'HU',
  IC: 'IC',
  ID: 'ID',
  IE: 'IE',
  IL: 'IL',
  IM: 'IM',
  IN: 'IN',
  IO: 'IO',
  IQ: 'IQ',
  IR: 'IR',
  IS: 'IS',
  IT: 'IT',
  JE: 'JE',
  JM: 'JM',
  JO: 'JO',
  JP: 'JP',
  KE: 'KE',
  KG: 'KG',
  KH: 'KH',
  KI: 'KI',
  KM: 'KM',
  KN: 'KN',
  KP: 'KP',
  KR: 'KR',
  KW: 'KW',
  KY: 'KY',
  KZ: 'KZ',
  LA: 'LA',
  LB: 'LB',
  LC: 'LC',
  LI: 'LI',
  LK: 'LK',
  LR: 'LR',
  LS: 'LS',
  LT: 'LT',
  LU: 'LU',
  LV: 'LV',
  LY: 'LY',
  MA: 'MA',
  MC: 'MC',
  MD: 'MD',
  ME: 'ME',
  MF: 'MF',
  MG: 'MG',
  MH: 'MH',
  MK: 'MK',
  ML: 'ML',
  MM: 'MM',
  MN: 'MN',
  MO: 'MO',
  MP: 'MP',
  MQ: 'MQ',
  MR: 'MR',
  MS: 'MS',
  MT: 'MT',
  MU: 'MU',
  MV: 'MV',
  MW: 'MW',
  MX: 'MX',
  MY: 'MY',
  MZ: 'MZ',
  NA: 'NA',
  NC: 'NC',
  NE: 'NE',
  NF: 'NF',
  NG: 'NG',
  NI: 'NI',
  NL: 'NL',
  NO: 'NO',
  NP: 'NP',
  NR: 'NR',
  NU: 'NU',
  NZ: 'NZ',
  OM: 'OM',
  PA: 'PA',
  PE: 'PE',
  PF: 'PF',
  PG: 'PG',
  PH: 'PH',
  PK: 'PK',
  PL: 'PL',
  PM: 'PM',
  PN: 'PN',
  PR: 'PR',
  PS: 'PS',
  PT: 'PT',
  PW: 'PW',
  PY: 'PY',
  QA: 'QA',
  RE: 'RE',
  RO: 'RO',
  RS: 'RS',
  RU: 'RU',
  RW: 'RW',
  SA: 'SA',
  SB: 'SB',
  SC: 'SC',
  SD: 'SD',
  SE: 'SE',
  SG: 'SG',
  SH: 'SH',
  SI: 'SI',
  SJ: 'SJ',
  SK: 'SK',
  SL: 'SL',
  SM: 'SM',
  SN: 'SN',
  SO: 'SO',
  SR: 'SR',
  SS: 'SS',
  ST: 'ST',
  SV: 'SV',
  SX: 'SX',
  SY: 'SY',
  SZ: 'SZ',
  TA: 'TA',
  TC: 'TC',
  TD: 'TD',
  TF: 'TF',
  TG: 'TG',
  TH: 'TH',
  TJ: 'TJ',
  TK: 'TK',
  TL: 'TL',
  TM: 'TM',
  TN: 'TN',
  TO: 'TO',
  TR: 'TR',
  TT: 'TT',
  TV: 'TV',
  TW: 'TW',
  TZ: 'TZ',
  UA: 'UA',
  UG: 'UG',
  UM: 'UM',
  UNKNOWN: 'UNKNOWN',
  US: 'US',
  UY: 'UY',
  UZ: 'UZ',
  VA: 'VA',
  VC: 'VC',
  VE: 'VE',
  VG: 'VG',
  VI: 'VI',
  VN: 'VN',
  VU: 'VU',
  WF: 'WF',
  WS: 'WS',
  XK: 'XK',
  YE: 'YE',
  YT: 'YT',
  ZA: 'ZA',
  ZM: 'ZM',
  ZW: 'ZW',
} as const;

export type PostNewAccountRulesBody = {
  action?: NichandleCreationRulesActionEnumOVH;
  address?: string;
  area?: string;
  birthCity?: string;
  birthDay?: string;
  city?: string;
  companyNationalIdentificationNumber?: string;
  corporationType?: string;
  country?: NichandleCountryEnumOVH;
  email?: string;
  fax?: string;
  firstname?: string;
  italianSDI?: string;
  language?: NichandleLanguageEnumOVH;
  legalform?: NichandleLegalFormEnumOVH;
  name?: string;
  nationalIdentificationNumber?: string;
  organisation?: string;
  ovhCompany?: NichandleOvhCompanyEnumOVH;
  ovhSubsidiary?: NichandleOvhSubsidiaryEnumOVH;
  phone?: string;
  phoneCountry?: NichandleCountryEnumOVH;
  phoneType?: NichandlePhoneTypeEnumOVH;
  purposeOfPurchase?: string;
  sex?: NichandleGenderEnumOVH;
  spareEmail?: string;
  vat?: string;
  zip?: string;
};

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


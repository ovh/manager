/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetNewAccountAreaParams,
  GetNewAccountContractsParams,
  GetNewAccountCorporationTypeParams,
  GetNewAccountCountriesParams,
  GetNewAccountCreationRulesParams,
  GetNewAccountLegalformParams,
  NichandleCountryEnumOVH,
  NichandleCreationRuleOVH,
  NichandleCreationRulesOVH,
  NichandleNewAccountAndTokenOVH,
  OrderContractOVH,
  PostNewAccountBody,
  PostNewAccountRulesBody
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create a new OVH identifier
 */
export const postNewAccount = (
    postNewAccountBody: PostNewAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleNewAccountAndTokenOVH>(
      {url: `/newAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postNewAccountBody, signal
    },
      options);
    }
  


export const getPostNewAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNewAccount>>, TError,{data: PostNewAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postNewAccount>>, TError,{data: PostNewAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNewAccount>>, {data: PostNewAccountBody}> = (props) => {
          const {data} = props ?? {};

          return  postNewAccount(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNewAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postNewAccount>>>
    export type PostNewAccountMutationBody = PostNewAccountBody
    export type PostNewAccountMutationError = unknown

    /**
 * @summary Create a new OVH identifier
 */
export const usePostNewAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNewAccount>>, TError,{data: PostNewAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postNewAccount>>,
        TError,
        {data: PostNewAccountBody},
        TContext
      > => {

      const mutationOptions = getPostNewAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary All available areas for a given country
 */
export const getNewAccountArea = (
    params: GetNewAccountAreaParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/newAccount/area`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNewAccountAreaQueryKey = (params: GetNewAccountAreaParams,) => {
    return [`/newAccount/area`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewAccountAreaQueryOptions = <TData = Awaited<ReturnType<typeof getNewAccountArea>>, TError = unknown>(params: GetNewAccountAreaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountArea>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewAccountAreaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewAccountArea>>> = ({ signal }) => getNewAccountArea(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewAccountArea>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNewAccountAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getNewAccountArea>>>
export type GetNewAccountAreaQueryError = unknown


export function useGetNewAccountArea<TData = Awaited<ReturnType<typeof getNewAccountArea>>, TError = unknown>(
 params: GetNewAccountAreaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountArea>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountArea>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountArea<TData = Awaited<ReturnType<typeof getNewAccountArea>>, TError = unknown>(
 params: GetNewAccountAreaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountArea>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountArea>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountArea<TData = Awaited<ReturnType<typeof getNewAccountArea>>, TError = unknown>(
 params: GetNewAccountAreaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountArea>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All available areas for a given country
 */

export function useGetNewAccountArea<TData = Awaited<ReturnType<typeof getNewAccountArea>>, TError = unknown>(
 params: GetNewAccountAreaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountArea>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNewAccountAreaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the contracts that governs the creation of an OVH identifier
 */
export const getNewAccountContracts = (
    params: GetNewAccountContractsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderContractOVH[]>(
      {url: `/newAccount/contracts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNewAccountContractsQueryKey = (params: GetNewAccountContractsParams,) => {
    return [`/newAccount/contracts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewAccountContractsQueryOptions = <TData = Awaited<ReturnType<typeof getNewAccountContracts>>, TError = unknown>(params: GetNewAccountContractsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountContracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewAccountContractsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewAccountContracts>>> = ({ signal }) => getNewAccountContracts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewAccountContracts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNewAccountContractsQueryResult = NonNullable<Awaited<ReturnType<typeof getNewAccountContracts>>>
export type GetNewAccountContractsQueryError = unknown


export function useGetNewAccountContracts<TData = Awaited<ReturnType<typeof getNewAccountContracts>>, TError = unknown>(
 params: GetNewAccountContractsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountContracts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountContracts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountContracts<TData = Awaited<ReturnType<typeof getNewAccountContracts>>, TError = unknown>(
 params: GetNewAccountContractsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountContracts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountContracts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountContracts<TData = Awaited<ReturnType<typeof getNewAccountContracts>>, TError = unknown>(
 params: GetNewAccountContractsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountContracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the contracts that governs the creation of an OVH identifier
 */

export function useGetNewAccountContracts<TData = Awaited<ReturnType<typeof getNewAccountContracts>>, TError = unknown>(
 params: GetNewAccountContractsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountContracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNewAccountContractsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All available corporation types for a given country
 */
export const getNewAccountCorporationType = (
    params: GetNewAccountCorporationTypeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/newAccount/corporationType`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNewAccountCorporationTypeQueryKey = (params: GetNewAccountCorporationTypeParams,) => {
    return [`/newAccount/corporationType`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewAccountCorporationTypeQueryOptions = <TData = Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError = unknown>(params: GetNewAccountCorporationTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewAccountCorporationTypeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewAccountCorporationType>>> = ({ signal }) => getNewAccountCorporationType(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNewAccountCorporationTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getNewAccountCorporationType>>>
export type GetNewAccountCorporationTypeQueryError = unknown


export function useGetNewAccountCorporationType<TData = Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError = unknown>(
 params: GetNewAccountCorporationTypeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountCorporationType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountCorporationType<TData = Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError = unknown>(
 params: GetNewAccountCorporationTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountCorporationType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountCorporationType<TData = Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError = unknown>(
 params: GetNewAccountCorporationTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All available corporation types for a given country
 */

export function useGetNewAccountCorporationType<TData = Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError = unknown>(
 params: GetNewAccountCorporationTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCorporationType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNewAccountCorporationTypeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All available countries for an ovh company and an ovh subsidiary
 */
export const getNewAccountCountries = (
    params: GetNewAccountCountriesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleCountryEnumOVH[]>(
      {url: `/newAccount/countries`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNewAccountCountriesQueryKey = (params: GetNewAccountCountriesParams,) => {
    return [`/newAccount/countries`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewAccountCountriesQueryOptions = <TData = Awaited<ReturnType<typeof getNewAccountCountries>>, TError = unknown>(params: GetNewAccountCountriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCountries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewAccountCountriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewAccountCountries>>> = ({ signal }) => getNewAccountCountries(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCountries>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNewAccountCountriesQueryResult = NonNullable<Awaited<ReturnType<typeof getNewAccountCountries>>>
export type GetNewAccountCountriesQueryError = unknown


export function useGetNewAccountCountries<TData = Awaited<ReturnType<typeof getNewAccountCountries>>, TError = unknown>(
 params: GetNewAccountCountriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCountries>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountCountries>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountCountries<TData = Awaited<ReturnType<typeof getNewAccountCountries>>, TError = unknown>(
 params: GetNewAccountCountriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCountries>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountCountries>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountCountries<TData = Awaited<ReturnType<typeof getNewAccountCountries>>, TError = unknown>(
 params: GetNewAccountCountriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCountries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All available countries for an ovh company and an ovh subsidiary
 */

export function useGetNewAccountCountries<TData = Awaited<ReturnType<typeof getNewAccountCountries>>, TError = unknown>(
 params: GetNewAccountCountriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCountries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNewAccountCountriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give all the rules to follow in order to create an OVH identifier
 */
export const getNewAccountCreationRules = (
    params: GetNewAccountCreationRulesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleCreationRulesOVH>(
      {url: `/newAccount/creationRules`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNewAccountCreationRulesQueryKey = (params: GetNewAccountCreationRulesParams,) => {
    return [`/newAccount/creationRules`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewAccountCreationRulesQueryOptions = <TData = Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError = unknown>(params: GetNewAccountCreationRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewAccountCreationRulesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewAccountCreationRules>>> = ({ signal }) => getNewAccountCreationRules(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNewAccountCreationRulesQueryResult = NonNullable<Awaited<ReturnType<typeof getNewAccountCreationRules>>>
export type GetNewAccountCreationRulesQueryError = unknown


export function useGetNewAccountCreationRules<TData = Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError = unknown>(
 params: GetNewAccountCreationRulesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountCreationRules>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountCreationRules<TData = Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError = unknown>(
 params: GetNewAccountCreationRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountCreationRules>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountCreationRules<TData = Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError = unknown>(
 params: GetNewAccountCreationRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give all the rules to follow in order to create an OVH identifier
 */

export function useGetNewAccountCreationRules<TData = Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError = unknown>(
 params: GetNewAccountCreationRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountCreationRules>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNewAccountCreationRulesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All available legal forms for a given country
 */
export const getNewAccountLegalform = (
    params: GetNewAccountLegalformParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/newAccount/legalform`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNewAccountLegalformQueryKey = (params: GetNewAccountLegalformParams,) => {
    return [`/newAccount/legalform`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNewAccountLegalformQueryOptions = <TData = Awaited<ReturnType<typeof getNewAccountLegalform>>, TError = unknown>(params: GetNewAccountLegalformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountLegalform>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewAccountLegalformQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewAccountLegalform>>> = ({ signal }) => getNewAccountLegalform(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNewAccountLegalform>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNewAccountLegalformQueryResult = NonNullable<Awaited<ReturnType<typeof getNewAccountLegalform>>>
export type GetNewAccountLegalformQueryError = unknown


export function useGetNewAccountLegalform<TData = Awaited<ReturnType<typeof getNewAccountLegalform>>, TError = unknown>(
 params: GetNewAccountLegalformParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountLegalform>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountLegalform>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountLegalform<TData = Awaited<ReturnType<typeof getNewAccountLegalform>>, TError = unknown>(
 params: GetNewAccountLegalformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountLegalform>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAccountLegalform>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNewAccountLegalform<TData = Awaited<ReturnType<typeof getNewAccountLegalform>>, TError = unknown>(
 params: GetNewAccountLegalformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountLegalform>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All available legal forms for a given country
 */

export function useGetNewAccountLegalform<TData = Awaited<ReturnType<typeof getNewAccountLegalform>>, TError = unknown>(
 params: GetNewAccountLegalformParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewAccountLegalform>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNewAccountLegalformQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give all the rules to follow in order to create and update an OVH identifier
 */
export const postNewAccountRules = (
    postNewAccountRulesBody: PostNewAccountRulesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleCreationRuleOVH[]>(
      {url: `/newAccount/rules`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postNewAccountRulesBody, signal
    },
      options);
    }
  


export const getPostNewAccountRulesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNewAccountRules>>, TError,{data: PostNewAccountRulesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postNewAccountRules>>, TError,{data: PostNewAccountRulesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNewAccountRules>>, {data: PostNewAccountRulesBody}> = (props) => {
          const {data} = props ?? {};

          return  postNewAccountRules(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostNewAccountRulesMutationResult = NonNullable<Awaited<ReturnType<typeof postNewAccountRules>>>
    export type PostNewAccountRulesMutationBody = PostNewAccountRulesBody
    export type PostNewAccountRulesMutationError = unknown

    /**
 * @summary Give all the rules to follow in order to create and update an OVH identifier
 */
export const usePostNewAccountRules = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postNewAccountRules>>, TError,{data: PostNewAccountRulesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postNewAccountRules>>,
        TError,
        {data: PostNewAccountRulesBody},
        TContext
      > => {

      const mutationOptions = getPostNewAccountRulesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

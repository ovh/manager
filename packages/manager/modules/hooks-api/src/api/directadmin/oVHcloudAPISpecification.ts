/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseDirectadminOrderableVersionsParams,
  GetLicenseDirectadminParams,
  GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams,
  GetLicenseDirectadminServiceNameTasksParams,
  IpBlockOVH,
  LicenseChangeIpStatusOVH,
  LicenseDirectAdminOrderConfigurationOVH,
  LicenseDirectadminDirectAdminOVH,
  LicenseDirectadminDirectAdminWithIAMOVH,
  LicenseTaskOVH,
  PostLicenseDirectadminServiceNameChangeIpBody,
  PostLicenseDirectadminServiceNameChangeOsBody,
  PostLicenseDirectadminServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseDirectadmin = (
    params?: GetLicenseDirectadminParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/directadmin`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseDirectadminQueryKey = (params?: GetLicenseDirectadminParams,) => {
    return [`/license/directadmin`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseDirectadminQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError = unknown>(params?: GetLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadmin>>> = ({ signal }) => getLicenseDirectadmin(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadmin>>>
export type GetLicenseDirectadminQueryError = unknown


export function useGetLicenseDirectadmin<TData = Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError = unknown>(
 params: undefined |  GetLicenseDirectadminParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadmin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadmin<TData = Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError = unknown>(
 params?: GetLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadmin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadmin<TData = Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError = unknown>(
 params?: GetLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseDirectadmin<TData = Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError = unknown>(
 params?: GetLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadmin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable DirectAdmin versions
 */
export const getLicenseDirectadminOrderableVersions = (
    params: GetLicenseDirectadminOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseDirectAdminOrderConfigurationOVH[]>(
      {url: `/license/directadmin/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseDirectadminOrderableVersionsQueryKey = (params: GetLicenseDirectadminOrderableVersionsParams,) => {
    return [`/license/directadmin/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseDirectadminOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError = unknown>(params: GetLicenseDirectadminOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>> = ({ signal }) => getLicenseDirectadminOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>>
export type GetLicenseDirectadminOrderableVersionsQueryError = unknown


export function useGetLicenseDirectadminOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError = unknown>(
 params: GetLicenseDirectadminOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError = unknown>(
 params: GetLicenseDirectadminOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError = unknown>(
 params: GetLicenseDirectadminOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable DirectAdmin versions
 */

export function useGetLicenseDirectadminOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError = unknown>(
 params: GetLicenseDirectadminOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseDirectadminServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseDirectadminDirectAdminWithIAMOVH>(
      {url: `/license/directadmin/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseDirectadminServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/directadmin/${serviceName}`] as const;
    }

    
export const getGetLicenseDirectadminServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>> = ({ signal }) => getLicenseDirectadminServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>>
export type GetLicenseDirectadminServiceNameQueryError = unknown


export function useGetLicenseDirectadminServiceName<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceName<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceName<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseDirectadminServiceName<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseDirectadminServiceName = (
    serviceName: string,
    licenseDirectadminDirectAdminOVH: NonReadonly<LicenseDirectadminDirectAdminOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/directadmin/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseDirectadminDirectAdminOVH
    },
      options);
    }
  


export const getPutLicenseDirectadminServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseDirectadminServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseDirectadminDirectAdminOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseDirectadminServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseDirectadminDirectAdminOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseDirectadminServiceName>>, {serviceName: string;data: NonReadonly<LicenseDirectadminDirectAdminOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseDirectadminServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseDirectadminServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseDirectadminServiceName>>>
    export type PutLicenseDirectadminServiceNameMutationBody = NonReadonly<LicenseDirectadminDirectAdminOVH>
    export type PutLicenseDirectadminServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseDirectadminServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseDirectadminServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseDirectadminDirectAdminOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseDirectadminServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseDirectadminDirectAdminOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseDirectadminServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns an array of ips where the license can be moved to
 */
export const getLicenseDirectadminServiceNameAllowedDestinationIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/license/directadmin/${serviceName}/allowedDestinationIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseDirectadminServiceNameAllowedDestinationIpQueryKey = (serviceName: string,) => {
    return [`/license/directadmin/${serviceName}/allowedDestinationIp`] as const;
    }

    
export const getGetLicenseDirectadminServiceNameAllowedDestinationIpQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminServiceNameAllowedDestinationIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>> = ({ signal }) => getLicenseDirectadminServiceNameAllowedDestinationIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminServiceNameAllowedDestinationIpQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>>
export type GetLicenseDirectadminServiceNameAllowedDestinationIpQueryError = unknown


export function useGetLicenseDirectadminServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns an array of ips where the license can be moved to
 */

export function useGetLicenseDirectadminServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminServiceNameAllowedDestinationIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Will tell if the ip can accept the license
 */
export const getLicenseDirectadminServiceNameCanLicenseBeMovedTo = (
    serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseChangeIpStatusOVH>(
      {url: `/license/directadmin/${serviceName}/canLicenseBeMovedTo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseDirectadminServiceNameCanLicenseBeMovedToQueryKey = (serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams,) => {
    return [`/license/directadmin/${serviceName}/canLicenseBeMovedTo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseDirectadminServiceNameCanLicenseBeMovedToQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError = unknown>(serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminServiceNameCanLicenseBeMovedToQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>> = ({ signal }) => getLicenseDirectadminServiceNameCanLicenseBeMovedTo(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminServiceNameCanLicenseBeMovedToQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>>
export type GetLicenseDirectadminServiceNameCanLicenseBeMovedToQueryError = unknown


export function useGetLicenseDirectadminServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Will tell if the ip can accept the license
 */

export function useGetLicenseDirectadminServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseDirectadminServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminServiceNameCanLicenseBeMovedToQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move this license to another Ip
 */
export const postLicenseDirectadminServiceNameChangeIp = (
    serviceName: string,
    postLicenseDirectadminServiceNameChangeIpBody: PostLicenseDirectadminServiceNameChangeIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/directadmin/${serviceName}/changeIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseDirectadminServiceNameChangeIpBody, signal
    },
      options);
    }
  


export const getPostLicenseDirectadminServiceNameChangeIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameChangeIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeIp>>, {serviceName: string;data: PostLicenseDirectadminServiceNameChangeIpBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseDirectadminServiceNameChangeIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseDirectadminServiceNameChangeIpMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeIp>>>
    export type PostLicenseDirectadminServiceNameChangeIpMutationBody = PostLicenseDirectadminServiceNameChangeIpBody
    export type PostLicenseDirectadminServiceNameChangeIpMutationError = unknown

    /**
 * @summary Move this license to another Ip
 */
export const usePostLicenseDirectadminServiceNameChangeIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeIp>>,
        TError,
        {serviceName: string;data: PostLicenseDirectadminServiceNameChangeIpBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseDirectadminServiceNameChangeIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the Operating System for a license
 */
export const postLicenseDirectadminServiceNameChangeOs = (
    serviceName: string,
    postLicenseDirectadminServiceNameChangeOsBody: PostLicenseDirectadminServiceNameChangeOsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/directadmin/${serviceName}/changeOs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseDirectadminServiceNameChangeOsBody, signal
    },
      options);
    }
  


export const getPostLicenseDirectadminServiceNameChangeOsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeOs>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameChangeOsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeOs>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameChangeOsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeOs>>, {serviceName: string;data: PostLicenseDirectadminServiceNameChangeOsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseDirectadminServiceNameChangeOs(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseDirectadminServiceNameChangeOsMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeOs>>>
    export type PostLicenseDirectadminServiceNameChangeOsMutationBody = PostLicenseDirectadminServiceNameChangeOsBody
    export type PostLicenseDirectadminServiceNameChangeOsMutationError = unknown

    /**
 * @summary Change the Operating System for a license
 */
export const usePostLicenseDirectadminServiceNameChangeOs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeOs>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameChangeOsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseDirectadminServiceNameChangeOs>>,
        TError,
        {serviceName: string;data: PostLicenseDirectadminServiceNameChangeOsBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseDirectadminServiceNameChangeOsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseDirectadminServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseDirectadminServiceNameConfirmTerminationBody: PostLicenseDirectadminServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/directadmin/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseDirectadminServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseDirectadminServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseDirectadminServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseDirectadminServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseDirectadminServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameConfirmTermination>>>
    export type PostLicenseDirectadminServiceNameConfirmTerminationMutationBody = PostLicenseDirectadminServiceNameConfirmTerminationBody
    export type PostLicenseDirectadminServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseDirectadminServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseDirectadminServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseDirectadminServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseDirectadminServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseDirectadminServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseDirectadminServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/directadmin/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseDirectadminServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/directadmin/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseDirectadminServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>> = ({ signal }) => getLicenseDirectadminServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>>
export type GetLicenseDirectadminServiceNameServiceInfosQueryError = unknown


export function useGetLicenseDirectadminServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseDirectadminServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseDirectadminServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/directadmin/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseDirectadminServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseDirectadminServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseDirectadminServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseDirectadminServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseDirectadminServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseDirectadminServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseDirectadminServiceNameServiceInfos>>>
    export type PutLicenseDirectadminServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseDirectadminServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseDirectadminServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseDirectadminServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseDirectadminServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseDirectadminServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary tasks linked to this license
 */
export const getLicenseDirectadminServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseDirectadminServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/directadmin/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseDirectadminServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseDirectadminServiceNameTasksParams,) => {
    return [`/license/directadmin/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseDirectadminServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseDirectadminServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>> = ({ signal }) => getLicenseDirectadminServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>>
export type GetLicenseDirectadminServiceNameTasksQueryError = unknown


export function useGetLicenseDirectadminServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseDirectadminServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseDirectadminServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseDirectadminServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary tasks linked to this license
 */

export function useGetLicenseDirectadminServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseDirectadminServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseDirectadminServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/directadmin/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseDirectadminServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/directadmin/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseDirectadminServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseDirectadminServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>> = ({ signal }) => getLicenseDirectadminServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseDirectadminServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>>
export type GetLicenseDirectadminServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseDirectadminServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseDirectadminServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseDirectadminServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseDirectadminServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseDirectadminServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseDirectadminServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/directadmin/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseDirectadminServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseDirectadminServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseDirectadminServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameTerminate>>>
    
    export type PostLicenseDirectadminServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseDirectadminServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseDirectadminServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseDirectadminServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseDirectadminServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

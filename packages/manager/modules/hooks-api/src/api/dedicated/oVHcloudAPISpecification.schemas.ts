/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostCdnDedicatedServiceNameSslUpdateBody = {
  /** certificate */
  certificate: string;
  /** certificate chain */
  chain?: string;
  /** certificate key */
  key: string;
};

export type GetCdnDedicatedServiceNameSslTasksParams = {
/**
 * Filter the value of function property (=)
 */
function?: CdnanycastTaskFunctionEnumOVH;
/**
 * Filter the value of status property (=)
 */
status?: CdnanycastTaskStateEnumOVH;
};

export type PostCdnDedicatedServiceNameSslBody = {
  /** certificate (empty for lets encrypt generation) */
  certificate?: string;
  /** certificate chain (empty for lets encrypt generation) */
  chain?: string;
  /** certificate key (empty for lets encrypt generation) */
  key?: string;
  /** ssl name to add on CDN */
  name: string;
};

export type GetCdnDedicatedServiceNameQuotaParams = {
period: CdnanycastStatsPeriodEnumOVH;
};

export type GetCdnDedicatedServiceNameDomainsDomainStatisticsParams = {
period: CdnanycastStatsPeriodEnumOVH;
type: CdnanycastStatsTypeEnumOVH;
value: CdnanycastStatsValueEnumOVH;
};

export type PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody = {
  /** Type of cache rule to add to the domain */
  cacheType: CdnanycastCacheRuleCacheTypeEnumOVH;
  /** File match for cache rule to add to the domain */
  fileMatch: string;
  /** File type for cache rule to add to the domain */
  fileType: CdnanycastCacheRuleFileTypeEnumOVH;
  /** ttl for cache rule to add to the domain */
  ttl: number;
};

export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams = {
/**
 * Filter the value of fileMatch property (like)
 */
fileMatch?: string;
};

export type PostCdnDedicatedServiceNameDomainsDomainBackendsBody = {
  /** IP to add to backends list */
  ip: string;
};

export type PostCdnDedicatedServiceNameDomainsBody = {
  /** domain name to add on CDN */
  domain: string;
};

export type PostCdnDedicatedServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetCdnDedicatedParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * All states a CDN task can be in
 */
export type CdnanycastTaskStateEnumOVH = typeof CdnanycastTaskStateEnumOVH[keyof typeof CdnanycastTaskStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastTaskStateEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * All function CDN task can be
 */
export type CdnanycastTaskFunctionEnumOVH = typeof CdnanycastTaskFunctionEnumOVH[keyof typeof CdnanycastTaskFunctionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastTaskFunctionEnumOVH = {
  flush: 'flush',
  flushAll: 'flushAll',
  generateSsl: 'generateSsl',
  installSsl: 'installSsl',
  reinstallSsl: 'reinstallSsl',
  removeDomain: 'removeDomain',
  uninstallSsl: 'uninstallSsl',
  updateCacheRule: 'updateCacheRule',
} as const;

/**
 * Task on a CDN
 */
export interface CdnanycastTaskOVH {
  /** @nullable */
  readonly comment?: string | null;
  readonly function?: CdnanycastTaskFunctionEnumOVH;
  readonly status?: CdnanycastTaskStateEnumOVH;
  readonly taskId?: number;
}

/**
 * Value bandwidth or request
 */
export type CdnanycastStatsValueEnumOVH = typeof CdnanycastStatsValueEnumOVH[keyof typeof CdnanycastStatsValueEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastStatsValueEnumOVH = {
  bandwidth: 'bandwidth',
  request: 'request',
} as const;

/**
 * Type of statistics related to cache
 */
export type CdnanycastStatsTypeEnumOVH = typeof CdnanycastStatsTypeEnumOVH[keyof typeof CdnanycastStatsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastStatsTypeEnumOVH = {
  backend: 'backend',
  cdn: 'cdn',
  threat: 'threat',
} as const;

/**
 * Period of the statistics
 */
export type CdnanycastStatsPeriodEnumOVH = typeof CdnanycastStatsPeriodEnumOVH[keyof typeof CdnanycastStatsPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastStatsPeriodEnumOVH = {
  day: 'day',
  month: 'month',
  week: 'week',
} as const;

/**
 * A structure describing type of a stats hash
 */
export interface CdnanycastStatsDataTypeOVH {
  date?: string;
  /** @nullable */
  value?: number | null;
}

/**
 * All states a CDN SSL can be in
 */
export type CdnanycastSslStateEnumOVH = typeof CdnanycastSslStateEnumOVH[keyof typeof CdnanycastSslStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastSslStateEnumOVH = {
  checking: 'checking',
  creating: 'creating',
  error: 'error',
  off: 'off',
  on: 'on',
  removing: 'removing',
  updating: 'updating',
  uploading: 'uploading',
} as const;

/**
 * CDN Ssl
 */
export interface CdnanycastSslOVH {
  /** Provider of the certificate installed on CDN */
  readonly certificateProvider?: string;
  /** @nullable */
  readonly certificateValidFrom?: string | null;
  /** @nullable */
  readonly certificateValidTo?: string | null;
  /** @nullable */
  readonly cn?: string | null;
  readonly name?: string;
  readonly status?: CdnanycastSslStateEnumOVH;
}

/**
 * All Pop status
 */
export type CdnanycastPopStatusEnumOVH = typeof CdnanycastPopStatusEnumOVH[keyof typeof CdnanycastPopStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastPopStatusEnumOVH = {
  down: 'down',
  ok: 'ok',
  rerouted: 'rerouted',
  unknown: 'unknown',
} as const;

/**
 * CDN Pop
 */
export interface CdnanycastPopOVH {
  readonly city?: string;
  readonly comment?: string;
  /** Name of the pop */
  readonly name?: string;
  readonly status?: CdnanycastPopStatusEnumOVH;
}

/**
 * URL to real time logs
 */
export interface CdnanycastLogsURLOVH {
  /** URL expiration date */
  expirationDate?: string;
  /** URL to logs */
  url?: string;
}

/**
 * All type of Domain
 */
export type CdnanycastDomainTypeEnumOVH = typeof CdnanycastDomainTypeEnumOVH[keyof typeof CdnanycastDomainTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastDomainTypeEnumOVH = {
  plain: 'plain',
  ssl: 'ssl',
} as const;

/**
 * All states a status can be in
 */
export type CdnanycastDomainStatusEnumOVH = typeof CdnanycastDomainStatusEnumOVH[keyof typeof CdnanycastDomainStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastDomainStatusEnumOVH = {
  error: 'error',
  off: 'off',
  on: 'on',
  removing: 'removing',
} as const;

/**
 * Domain on CDN
 */
export interface CdnanycastDomainOVH {
  readonly cacheRuleUse?: number;
  readonly cname?: string;
  /** Domain of this object */
  readonly domain?: string;
  status?: CdnanycastDomainStatusEnumOVH;
  readonly type?: CdnanycastDomainTypeEnumOVH;
}

/**
 * All states a status can be in
 */
export type CdnanycastCacheRuleStatusEnumOVH = typeof CdnanycastCacheRuleStatusEnumOVH[keyof typeof CdnanycastCacheRuleStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastCacheRuleStatusEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  error: 'error',
  off: 'off',
  on: 'on',
  updating: 'updating',
} as const;

/**
 * All states an anycast pool can be in
 */
export type CdnanycastCacheRuleFileTypeEnumOVH = typeof CdnanycastCacheRuleFileTypeEnumOVH[keyof typeof CdnanycastCacheRuleFileTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastCacheRuleFileTypeEnumOVH = {
  extension: 'extension',
  file: 'file',
  folder: 'folder',
} as const;

/**
 * All type a cache can be in
 */
export type CdnanycastCacheRuleCacheTypeEnumOVH = typeof CdnanycastCacheRuleCacheTypeEnumOVH[keyof typeof CdnanycastCacheRuleCacheTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CdnanycastCacheRuleCacheTypeEnumOVH = {
  forceCache: 'forceCache',
  noCache: 'noCache',
} as const;

/**
 * CacheRules for a domain
 */
export interface CdnanycastCacheRuleOVH {
  /** Id for this cache rule */
  readonly cacheRuleId?: number;
  readonly cacheType?: CdnanycastCacheRuleCacheTypeEnumOVH;
  readonly domain?: string;
  readonly fileMatch?: string;
  readonly fileType?: CdnanycastCacheRuleFileTypeEnumOVH;
  status?: CdnanycastCacheRuleStatusEnumOVH;
  ttl?: number;
}

/**
 * Backend for a domain
 */
export interface CdnanycastBackendOVH {
  readonly ip?: Ipv4OVH;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type CdnanycastAnycastWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Anycast IP of a CDN customer
 */
export interface CdnanycastAnycastWithIAMOVH {
  readonly anycast?: Ipv4OVH;
  readonly backendLimit?: number;
  readonly backendUse?: number;
  readonly cacheRuleLimitPerDomain?: number;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: CdnanycastAnycastWithIAMOVHIam;
  /** @nullable */
  readonly lastQuotaOrder?: string | null;
  /** URL for downloading daily log of your CDN */
  readonly logUrl?: string;
  /** @nullable */
  readonly offer?: string | null;
  readonly quota?: number;
  /** The internal name of your CDN offer */
  readonly service?: string;
}

/**
 * Anycast IP of a CDN customer
 */
export interface CdnanycastAnycastOVH {
  readonly anycast?: Ipv4OVH;
  readonly backendLimit?: number;
  readonly backendUse?: number;
  readonly cacheRuleLimitPerDomain?: number;
  /** @nullable */
  readonly lastQuotaOrder?: string | null;
  /** URL for downloading daily log of your CDN */
  readonly logUrl?: string;
  /** @nullable */
  readonly offer?: string | null;
  readonly quota?: number;
  /** The internal name of your CDN offer */
  readonly service?: string;
}


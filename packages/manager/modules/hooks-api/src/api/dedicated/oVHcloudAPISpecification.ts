/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CdnanycastAnycastWithIAMOVH,
  CdnanycastBackendOVH,
  CdnanycastCacheRuleOVH,
  CdnanycastDomainOVH,
  CdnanycastLogsURLOVH,
  CdnanycastPopOVH,
  CdnanycastSslOVH,
  CdnanycastStatsDataTypeOVH,
  CdnanycastTaskOVH,
  GetCdnDedicatedParams,
  GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams,
  GetCdnDedicatedServiceNameDomainsDomainStatisticsParams,
  GetCdnDedicatedServiceNameQuotaParams,
  GetCdnDedicatedServiceNameSslTasksParams,
  Ipv4OVH,
  PostCdnDedicatedServiceNameChangeContactBody,
  PostCdnDedicatedServiceNameDomainsBody,
  PostCdnDedicatedServiceNameDomainsDomainBackendsBody,
  PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody,
  PostCdnDedicatedServiceNameSslBody,
  PostCdnDedicatedServiceNameSslUpdateBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getCdnDedicated = (
    params?: GetCdnDedicatedParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cdn/dedicated`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCdnDedicatedQueryKey = (params?: GetCdnDedicatedParams,) => {
    return [`/cdn/dedicated`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCdnDedicatedQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicated>>, TError = unknown>(params?: GetCdnDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicated>>> = ({ signal }) => getCdnDedicated(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicated>>>
export type GetCdnDedicatedQueryError = unknown


export function useGetCdnDedicated<TData = Awaited<ReturnType<typeof getCdnDedicated>>, TError = unknown>(
 params: undefined |  GetCdnDedicatedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicated<TData = Awaited<ReturnType<typeof getCdnDedicated>>, TError = unknown>(
 params?: GetCdnDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicated<TData = Awaited<ReturnType<typeof getCdnDedicated>>, TError = unknown>(
 params?: GetCdnDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetCdnDedicated<TData = Awaited<ReturnType<typeof getCdnDedicated>>, TError = unknown>(
 params?: GetCdnDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of CDN Pops
 */
export const getCdnDedicatedPops = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cdn/dedicated/pops`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedPopsQueryKey = () => {
    return [`/cdn/dedicated/pops`] as const;
    }

    
export const getGetCdnDedicatedPopsQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedPopsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedPops>>> = ({ signal }) => getCdnDedicatedPops(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedPopsQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedPops>>>
export type GetCdnDedicatedPopsQueryError = unknown


export function useGetCdnDedicatedPops<TData = Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedPops>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedPops<TData = Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedPops>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedPops<TData = Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of CDN Pops
 */

export function useGetCdnDedicatedPops<TData = Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPops>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedPopsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getCdnDedicatedPopsName = (
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastPopOVH>(
      {url: `/cdn/dedicated/pops/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedPopsNameQueryKey = (name: string,) => {
    return [`/cdn/dedicated/pops/${name}`] as const;
    }

    
export const getGetCdnDedicatedPopsNameQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError = unknown>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedPopsNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>> = ({ signal }) => getCdnDedicatedPopsName(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedPopsNameQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>>
export type GetCdnDedicatedPopsNameQueryError = unknown


export function useGetCdnDedicatedPopsName<TData = Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError = unknown>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedPopsName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedPopsName<TData = Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedPopsName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedPopsName<TData = Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedPopsName<TData = Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedPopsName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedPopsNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastAnycastWithIAMOVH>(
      {url: `/cdn/dedicated/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameQueryKey = (serviceName: string,) => {
    return [`/cdn/dedicated/${serviceName}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>> = ({ signal }) => getCdnDedicatedServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>>
export type GetCdnDedicatedServiceNameQueryError = unknown


export function useGetCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postCdnDedicatedServiceNameChangeContact = (
    serviceName: string,
    postCdnDedicatedServiceNameChangeContactBody: PostCdnDedicatedServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/cdn/dedicated/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCdnDedicatedServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameChangeContact>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameChangeContact>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameChangeContact>>, {serviceName: string;data: PostCdnDedicatedServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postCdnDedicatedServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameChangeContact>>>
    export type PostCdnDedicatedServiceNameChangeContactMutationBody = PostCdnDedicatedServiceNameChangeContactBody
    export type PostCdnDedicatedServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostCdnDedicatedServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameChangeContact>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostCdnDedicatedServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Domains associated to this anycast
 */
export const getCdnDedicatedServiceNameDomains = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cdn/dedicated/${serviceName}/domains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsQueryKey = (serviceName: string,) => {
    return [`/cdn/dedicated/${serviceName}/domains`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>> = ({ signal }) => getCdnDedicatedServiceNameDomains(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>>
export type GetCdnDedicatedServiceNameDomainsQueryError = unknown


export function useGetCdnDedicatedServiceNameDomains<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomains<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomains<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domains associated to this anycast
 */

export function useGetCdnDedicatedServiceNameDomains<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a domain on CDN
 */
export const postCdnDedicatedServiceNameDomains = (
    serviceName: string,
    postCdnDedicatedServiceNameDomainsBody: PostCdnDedicatedServiceNameDomainsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastDomainOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCdnDedicatedServiceNameDomainsBody, signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameDomainsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomains>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameDomainsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomains>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameDomainsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomains>>, {serviceName: string;data: PostCdnDedicatedServiceNameDomainsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postCdnDedicatedServiceNameDomains(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameDomainsMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomains>>>
    export type PostCdnDedicatedServiceNameDomainsMutationBody = PostCdnDedicatedServiceNameDomainsBody
    export type PostCdnDedicatedServiceNameDomainsMutationError = unknown

    /**
 * @summary Add a domain on CDN
 */
export const usePostCdnDedicatedServiceNameDomains = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomains>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameDomainsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomains>>,
        TError,
        {serviceName: string;data: PostCdnDedicatedServiceNameDomainsBody},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameDomainsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove a domain from the CDN
 */
export const deleteCdnDedicatedServiceNameDomainsDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCdnDedicatedServiceNameDomainsDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomain>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  deleteCdnDedicatedServiceNameDomainsDomain(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCdnDedicatedServiceNameDomainsDomainMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomain>>>
    
    export type DeleteCdnDedicatedServiceNameDomainsDomainMutationError = unknown

    /**
 * @summary Remove a domain from the CDN
 */
export const useDeleteCdnDedicatedServiceNameDomainsDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomain>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getDeleteCdnDedicatedServiceNameDomainsDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameDomainsDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastDomainOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomain(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>>
export type GetCdnDedicatedServiceNameDomainsDomainQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomain<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomain<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomain<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameDomainsDomain<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putCdnDedicatedServiceNameDomainsDomain = (
    serviceName: string,
    domain: string,
    cdnanycastDomainOVH: NonReadonly<CdnanycastDomainOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: cdnanycastDomainOVH
    },
      options);
    }
  


export const getPutCdnDedicatedServiceNameDomainsDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<CdnanycastDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<CdnanycastDomainOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomain>>, {serviceName: string;domain: string;data: NonReadonly<CdnanycastDomainOVH>}> = (props) => {
          const {serviceName,domain,data} = props ?? {};

          return  putCdnDedicatedServiceNameDomainsDomain(serviceName,domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCdnDedicatedServiceNameDomainsDomainMutationResult = NonNullable<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomain>>>
    export type PutCdnDedicatedServiceNameDomainsDomainMutationBody = NonReadonly<CdnanycastDomainOVH>
    export type PutCdnDedicatedServiceNameDomainsDomainMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutCdnDedicatedServiceNameDomainsDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<CdnanycastDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomain>>,
        TError,
        {serviceName: string;domain: string;data: NonReadonly<CdnanycastDomainOVH>},
        TContext
      > => {

      const mutationOptions = getPutCdnDedicatedServiceNameDomainsDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Backend associated to the domain
 */
export const getCdnDedicatedServiceNameDomainsDomainBackends = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/backends`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainBackendsQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/backends`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainBackendsQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainBackendsQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainBackends(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainBackendsQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>>
export type GetCdnDedicatedServiceNameDomainsDomainBackendsQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainBackends<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainBackends<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainBackends<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Backend associated to the domain
 */

export function useGetCdnDedicatedServiceNameDomainsDomainBackends<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackends>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainBackendsQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a backend IP
 */
export const postCdnDedicatedServiceNameDomainsDomainBackends = (
    serviceName: string,
    domain: string,
    postCdnDedicatedServiceNameDomainsDomainBackendsBody: PostCdnDedicatedServiceNameDomainsDomainBackendsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastBackendOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/backends`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCdnDedicatedServiceNameDomainsDomainBackendsBody, signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameDomainsDomainBackendsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainBackends>>, TError,{serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainBackendsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainBackends>>, TError,{serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainBackendsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainBackends>>, {serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainBackendsBody}> = (props) => {
          const {serviceName,domain,data} = props ?? {};

          return  postCdnDedicatedServiceNameDomainsDomainBackends(serviceName,domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameDomainsDomainBackendsMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainBackends>>>
    export type PostCdnDedicatedServiceNameDomainsDomainBackendsMutationBody = PostCdnDedicatedServiceNameDomainsDomainBackendsBody
    export type PostCdnDedicatedServiceNameDomainsDomainBackendsMutationError = unknown

    /**
 * @summary Add a backend IP
 */
export const usePostCdnDedicatedServiceNameDomainsDomainBackends = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainBackends>>, TError,{serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainBackendsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainBackends>>,
        TError,
        {serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainBackendsBody},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameDomainsDomainBackendsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove a backend IP
 */
export const deleteCdnDedicatedServiceNameDomainsDomainBackendsIp = (
    serviceName: string,
    domain: string,
    ip: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<Ipv4OVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/backends/${ip}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCdnDedicatedServiceNameDomainsDomainBackendsIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError,{serviceName: string;domain: string;ip: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError,{serviceName: string;domain: string;ip: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainBackendsIp>>, {serviceName: string;domain: string;ip: Ipv4OVH}> = (props) => {
          const {serviceName,domain,ip} = props ?? {};

          return  deleteCdnDedicatedServiceNameDomainsDomainBackendsIp(serviceName,domain,ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCdnDedicatedServiceNameDomainsDomainBackendsIpMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainBackendsIp>>>
    
    export type DeleteCdnDedicatedServiceNameDomainsDomainBackendsIpMutationError = unknown

    /**
 * @summary Remove a backend IP
 */
export const useDeleteCdnDedicatedServiceNameDomainsDomainBackendsIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError,{serviceName: string;domain: string;ip: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainBackendsIp>>,
        TError,
        {serviceName: string;domain: string;ip: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getDeleteCdnDedicatedServiceNameDomainsDomainBackendsIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameDomainsDomainBackendsIp = (
    serviceName: string,
    domain: string,
    ip: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastBackendOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/backends/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainBackendsIpQueryKey = (serviceName: string,
    domain: string,
    ip: Ipv4OVH,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/backends/${ip}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainBackendsIpQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError = unknown>(serviceName: string,
    domain: string,
    ip: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainBackendsIpQueryKey(serviceName,domain,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainBackendsIp(serviceName,domain,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainBackendsIpQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>>
export type GetCdnDedicatedServiceNameDomainsDomainBackendsIpQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainBackendsIp<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError = unknown>(
 serviceName: string,
    domain: string,
    ip: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainBackendsIp<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError = unknown>(
 serviceName: string,
    domain: string,
    ip: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainBackendsIp<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError = unknown>(
 serviceName: string,
    domain: string,
    ip: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameDomainsDomainBackendsIp<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError = unknown>(
 serviceName: string,
    domain: string,
    ip: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainBackendsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainBackendsIpQueryOptions(serviceName,domain,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cache rules associated to the domain
 */
export const getCdnDedicatedServiceNameDomainsDomainCacheRules = (
    serviceName: string,
    domain: string,
    params?: GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesQueryKey = (serviceName: string,
    domain: string,
    params?: GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError = unknown>(serviceName: string,
    domain: string,
    params?: GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainCacheRulesQueryKey(serviceName,domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainCacheRules(serviceName,domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>>
export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainCacheRules<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params: undefined |  GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRules<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params?: GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRules<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params?: GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Cache rules associated to the domain
 */

export function useGetCdnDedicatedServiceNameDomainsDomainCacheRules<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params?: GetCdnDedicatedServiceNameDomainsDomainCacheRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainCacheRulesQueryOptions(serviceName,domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a cache rule to a domain
 */
export const postCdnDedicatedServiceNameDomainsDomainCacheRules = (
    serviceName: string,
    domain: string,
    postCdnDedicatedServiceNameDomainsDomainCacheRulesBody: PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastCacheRuleOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCdnDedicatedServiceNameDomainsDomainCacheRulesBody, signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameDomainsDomainCacheRulesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError,{serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError,{serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRules>>, {serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody}> = (props) => {
          const {serviceName,domain,data} = props ?? {};

          return  postCdnDedicatedServiceNameDomainsDomainCacheRules(serviceName,domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameDomainsDomainCacheRulesMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRules>>>
    export type PostCdnDedicatedServiceNameDomainsDomainCacheRulesMutationBody = PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody
    export type PostCdnDedicatedServiceNameDomainsDomainCacheRulesMutationError = unknown

    /**
 * @summary Add a cache rule to a domain
 */
export const usePostCdnDedicatedServiceNameDomainsDomainCacheRules = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRules>>, TError,{serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRules>>,
        TError,
        {serviceName: string;domain: string;data: PostCdnDedicatedServiceNameDomainsDomainCacheRulesBody},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameDomainsDomainCacheRulesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove cache rule
 */
export const deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId = (
    serviceName: string,
    domain: string,
    cacheRuleId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError,{serviceName: string;domain: string;cacheRuleId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError,{serviceName: string;domain: string;cacheRuleId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, {serviceName: string;domain: string;cacheRuleId: number}> = (props) => {
          const {serviceName,domain,cacheRuleId} = props ?? {};

          return  deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId(serviceName,domain,cacheRuleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>>
    
    export type DeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationError = unknown

    /**
 * @summary Remove cache rule
 */
export const useDeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError,{serviceName: string;domain: string;cacheRuleId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>,
        TError,
        {serviceName: string;domain: string;cacheRuleId: number},
        TContext
      > => {

      const mutationOptions = getDeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId = (
    serviceName: string,
    domain: string,
    cacheRuleId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastCacheRuleOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdQueryKey = (serviceName: string,
    domain: string,
    cacheRuleId: number,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError = unknown>(serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdQueryKey(serviceName,domain,cacheRuleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId(serviceName,domain,cacheRuleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain && cacheRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>>
export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdQueryOptions(serviceName,domain,cacheRuleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId = (
    serviceName: string,
    domain: string,
    cacheRuleId: number,
    cdnanycastCacheRuleOVH: NonReadonly<CdnanycastCacheRuleOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: cdnanycastCacheRuleOVH
    },
      options);
    }
  


export const getPutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError,{serviceName: string;domain: string;cacheRuleId: number;data: NonReadonly<CdnanycastCacheRuleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError,{serviceName: string;domain: string;cacheRuleId: number;data: NonReadonly<CdnanycastCacheRuleOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, {serviceName: string;domain: string;cacheRuleId: number;data: NonReadonly<CdnanycastCacheRuleOVH>}> = (props) => {
          const {serviceName,domain,cacheRuleId,data} = props ?? {};

          return  putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId(serviceName,domain,cacheRuleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>>
    export type PutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationBody = NonReadonly<CdnanycastCacheRuleOVH>
    export type PutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>, TError,{serviceName: string;domain: string;cacheRuleId: number;data: NonReadonly<CdnanycastCacheRuleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleId>>,
        TError,
        {serviceName: string;domain: string;cacheRuleId: number;data: NonReadonly<CdnanycastCacheRuleOVH>},
        TContext
      > => {

      const mutationOptions = getPutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Flush the cache
 */
export const postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush = (
    serviceName: string,
    domain: string,
    cacheRuleId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}/flush`, method: 'POST', signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush>>, TError,{serviceName: string;domain: string;cacheRuleId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush>>, TError,{serviceName: string;domain: string;cacheRuleId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush>>, {serviceName: string;domain: string;cacheRuleId: number}> = (props) => {
          const {serviceName,domain,cacheRuleId} = props ?? {};

          return  postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush(serviceName,domain,cacheRuleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush>>>
    
    export type PostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushMutationError = unknown

    /**
 * @summary Flush the cache
 */
export const usePostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush>>, TError,{serviceName: string;domain: string;cacheRuleId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlush>>,
        TError,
        {serviceName: string;domain: string;cacheRuleId: number},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Task associated to the cache rule
 */
export const getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks = (
    serviceName: string,
    domain: string,
    cacheRuleId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}/tasks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksQueryKey = (serviceName: string,
    domain: string,
    cacheRuleId: number,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}/tasks`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError = unknown>(serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksQueryKey(serviceName,domain,cacheRuleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks(serviceName,domain,cacheRuleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain && cacheRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>>
export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Task associated to the cache rule
 */

export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksQueryOptions(serviceName,domain,cacheRuleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId = (
    serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdQueryKey = (serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/cacheRules/${cacheRuleId}/tasks/${taskId}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError = unknown>(serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdQueryKey(serviceName,domain,cacheRuleId,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId(serviceName,domain,cacheRuleId,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain && cacheRuleId && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>>
export type GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    cacheRuleId: number,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdQueryOptions(serviceName,domain,cacheRuleId,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Flush all cache
 */
export const postCdnDedicatedServiceNameDomainsDomainFlush = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/flush`, method: 'POST', signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameDomainsDomainFlushMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainFlush>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainFlush>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainFlush>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  postCdnDedicatedServiceNameDomainsDomainFlush(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameDomainsDomainFlushMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainFlush>>>
    
    export type PostCdnDedicatedServiceNameDomainsDomainFlushMutationError = unknown

    /**
 * @summary Flush all cache
 */
export const usePostCdnDedicatedServiceNameDomainsDomainFlush = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainFlush>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainFlush>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameDomainsDomainFlushMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate URL to real time logs
 */
export const postCdnDedicatedServiceNameDomainsDomainLogs = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastLogsURLOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/logs`, method: 'POST', signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameDomainsDomainLogsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainLogs>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainLogs>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainLogs>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  postCdnDedicatedServiceNameDomainsDomainLogs(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameDomainsDomainLogsMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainLogs>>>
    
    export type PostCdnDedicatedServiceNameDomainsDomainLogsMutationError = unknown

    /**
 * @summary Generate URL to real time logs
 */
export const usePostCdnDedicatedServiceNameDomainsDomainLogs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainLogs>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameDomainsDomainLogs>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameDomainsDomainLogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return stats about a domain
 */
export const getCdnDedicatedServiceNameDomainsDomainStatistics = (
    serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastStatsDataTypeOVH[]>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainStatisticsQueryKey = (serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError = unknown>(serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainStatisticsQueryKey(serviceName,domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainStatistics(serviceName,domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>>
export type GetCdnDedicatedServiceNameDomainsDomainStatisticsQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainStatistics<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainStatistics<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainStatistics<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return stats about a domain
 */

export function useGetCdnDedicatedServiceNameDomainsDomainStatistics<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError = unknown>(
 serviceName: string,
    domain: string,
    params: GetCdnDedicatedServiceNameDomainsDomainStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainStatisticsQueryOptions(serviceName,domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Task associated to the domain
 */
export const getCdnDedicatedServiceNameDomainsDomainTasks = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/tasks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainTasksQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/tasks`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainTasksQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainTasksQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainTasks(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>>
export type GetCdnDedicatedServiceNameDomainsDomainTasksQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Task associated to the domain
 */

export function useGetCdnDedicatedServiceNameDomainsDomainTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainTasksQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameDomainsDomainTasksTaskId = (
    serviceName: string,
    domain: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/domains/${domain}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameDomainsDomainTasksTaskIdQueryKey = (serviceName: string,
    domain: string,
    taskId: number,) => {
    return [`/cdn/dedicated/${serviceName}/domains/${domain}/tasks/${taskId}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameDomainsDomainTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError = unknown>(serviceName: string,
    domain: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameDomainsDomainTasksTaskIdQueryKey(serviceName,domain,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>> = ({ signal }) => getCdnDedicatedServiceNameDomainsDomainTasksTaskId(serviceName,domain,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameDomainsDomainTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>>
export type GetCdnDedicatedServiceNameDomainsDomainTasksTaskIdQueryError = unknown


export function useGetCdnDedicatedServiceNameDomainsDomainTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameDomainsDomainTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameDomainsDomainTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError = unknown>(
 serviceName: string,
    domain: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameDomainsDomainTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameDomainsDomainTasksTaskIdQueryOptions(serviceName,domain,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate URL to real time logs
 */
export const postCdnDedicatedServiceNameLogs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastLogsURLOVH>(
      {url: `/cdn/dedicated/${serviceName}/logs`, method: 'POST', signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameLogsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameLogs>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameLogs>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameLogs>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postCdnDedicatedServiceNameLogs(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameLogsMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameLogs>>>
    
    export type PostCdnDedicatedServiceNameLogsMutationError = unknown

    /**
 * @summary Generate URL to real time logs
 */
export const usePostCdnDedicatedServiceNameLogs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameLogs>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameLogs>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameLogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return quota history
 */
export const getCdnDedicatedServiceNameQuota = (
    serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastStatsDataTypeOVH[]>(
      {url: `/cdn/dedicated/${serviceName}/quota`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameQuotaQueryKey = (serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams,) => {
    return [`/cdn/dedicated/${serviceName}/quota`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCdnDedicatedServiceNameQuotaQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError = unknown>(serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameQuotaQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>> = ({ signal }) => getCdnDedicatedServiceNameQuota(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameQuotaQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>>
export type GetCdnDedicatedServiceNameQuotaQueryError = unknown


export function useGetCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return quota history
 */

export function useGetCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameQuotaQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getCdnDedicatedServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/cdn/dedicated/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/cdn/dedicated/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetCdnDedicatedServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>> = ({ signal }) => getCdnDedicatedServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>>
export type GetCdnDedicatedServiceNameServiceInfosQueryError = unknown


export function useGetCdnDedicatedServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetCdnDedicatedServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putCdnDedicatedServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/cdn/dedicated/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutCdnDedicatedServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCdnDedicatedServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putCdnDedicatedServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCdnDedicatedServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putCdnDedicatedServiceNameServiceInfos>>>
    export type PutCdnDedicatedServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutCdnDedicatedServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutCdnDedicatedServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCdnDedicatedServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putCdnDedicatedServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutCdnDedicatedServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove SSL of the CDN
 */
export const deleteCdnDedicatedServiceNameSsl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/ssl`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCdnDedicatedServiceNameSslMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameSsl>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameSsl>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameSsl>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteCdnDedicatedServiceNameSsl(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCdnDedicatedServiceNameSslMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameSsl>>>
    
    export type DeleteCdnDedicatedServiceNameSslMutationError = unknown

    /**
 * @summary Remove SSL of the CDN
 */
export const useDeleteCdnDedicatedServiceNameSsl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameSsl>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCdnDedicatedServiceNameSsl>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteCdnDedicatedServiceNameSslMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameSsl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastSslOVH>(
      {url: `/cdn/dedicated/${serviceName}/ssl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameSslQueryKey = (serviceName: string,) => {
    return [`/cdn/dedicated/${serviceName}/ssl`] as const;
    }

    
export const getGetCdnDedicatedServiceNameSslQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameSslQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>> = ({ signal }) => getCdnDedicatedServiceNameSsl(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameSslQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>>
export type GetCdnDedicatedServiceNameSslQueryError = unknown


export function useGetCdnDedicatedServiceNameSsl<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameSsl<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameSsl<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameSsl<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameSslQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a SSL on CDN or Generate a Lets Encrypt certificate
 */
export const postCdnDedicatedServiceNameSsl = (
    serviceName: string,
    postCdnDedicatedServiceNameSslBody: PostCdnDedicatedServiceNameSslBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastSslOVH>(
      {url: `/cdn/dedicated/${serviceName}/ssl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCdnDedicatedServiceNameSslBody, signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameSslMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSsl>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameSslBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSsl>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameSslBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSsl>>, {serviceName: string;data: PostCdnDedicatedServiceNameSslBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postCdnDedicatedServiceNameSsl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameSslMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSsl>>>
    export type PostCdnDedicatedServiceNameSslMutationBody = PostCdnDedicatedServiceNameSslBody
    export type PostCdnDedicatedServiceNameSslMutationError = unknown

    /**
 * @summary Add a SSL on CDN or Generate a Lets Encrypt certificate
 */
export const usePostCdnDedicatedServiceNameSsl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSsl>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameSslBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameSsl>>,
        TError,
        {serviceName: string;data: PostCdnDedicatedServiceNameSslBody},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameSslMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Task associated to the ssl
 */
export const getCdnDedicatedServiceNameSslTasks = (
    serviceName: string,
    params?: GetCdnDedicatedServiceNameSslTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/cdn/dedicated/${serviceName}/ssl/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameSslTasksQueryKey = (serviceName: string,
    params?: GetCdnDedicatedServiceNameSslTasksParams,) => {
    return [`/cdn/dedicated/${serviceName}/ssl/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCdnDedicatedServiceNameSslTasksQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError = unknown>(serviceName: string,
    params?: GetCdnDedicatedServiceNameSslTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameSslTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>> = ({ signal }) => getCdnDedicatedServiceNameSslTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameSslTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>>
export type GetCdnDedicatedServiceNameSslTasksQueryError = unknown


export function useGetCdnDedicatedServiceNameSslTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetCdnDedicatedServiceNameSslTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameSslTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetCdnDedicatedServiceNameSslTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameSslTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetCdnDedicatedServiceNameSslTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Task associated to the ssl
 */

export function useGetCdnDedicatedServiceNameSslTasks<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetCdnDedicatedServiceNameSslTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameSslTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getCdnDedicatedServiceNameSslTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/ssl/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCdnDedicatedServiceNameSslTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/cdn/dedicated/${serviceName}/ssl/tasks/${taskId}`] as const;
    }

    
export const getGetCdnDedicatedServiceNameSslTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCdnDedicatedServiceNameSslTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>> = ({ signal }) => getCdnDedicatedServiceNameSslTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCdnDedicatedServiceNameSslTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>>
export type GetCdnDedicatedServiceNameSslTasksTaskIdQueryError = unknown


export function useGetCdnDedicatedServiceNameSslTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameSslTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCdnDedicatedServiceNameSslTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetCdnDedicatedServiceNameSslTasksTaskId<TData = Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCdnDedicatedServiceNameSslTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCdnDedicatedServiceNameSslTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing SSL with a custom certificate
 */
export const postCdnDedicatedServiceNameSslUpdate = (
    serviceName: string,
    postCdnDedicatedServiceNameSslUpdateBody: PostCdnDedicatedServiceNameSslUpdateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnanycastTaskOVH>(
      {url: `/cdn/dedicated/${serviceName}/ssl/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCdnDedicatedServiceNameSslUpdateBody, signal
    },
      options);
    }
  


export const getPostCdnDedicatedServiceNameSslUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSslUpdate>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameSslUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSslUpdate>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameSslUpdateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSslUpdate>>, {serviceName: string;data: PostCdnDedicatedServiceNameSslUpdateBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postCdnDedicatedServiceNameSslUpdate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCdnDedicatedServiceNameSslUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSslUpdate>>>
    export type PostCdnDedicatedServiceNameSslUpdateMutationBody = PostCdnDedicatedServiceNameSslUpdateBody
    export type PostCdnDedicatedServiceNameSslUpdateMutationError = unknown

    /**
 * @summary Update an existing SSL with a custom certificate
 */
export const usePostCdnDedicatedServiceNameSslUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCdnDedicatedServiceNameSslUpdate>>, TError,{serviceName: string;data: PostCdnDedicatedServiceNameSslUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCdnDedicatedServiceNameSslUpdate>>,
        TError,
        {serviceName: string;data: PostCdnDedicatedServiceNameSslUpdateBody},
        TContext
      > => {

      const mutationOptions = getPostCdnDedicatedServiceNameSslUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

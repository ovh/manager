/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedAvailabilitiesRawOVH,
  DedicatedBiosSettingsBiosSettingsOVH,
  DedicatedBiosSettingsSgxBiosSettingsSgxOVH,
  DedicatedDatacenterAvailabilityOVH,
  DedicatedDatacenterRawAvailabilityOVH,
  DedicatedExposedTaskOVH,
  DedicatedNetworkInterfaceControllerNetworkInterfaceControllerOVH,
  DedicatedPlannedInterventionTimeSlotOVH,
  DedicatedServerAccessOVH,
  DedicatedServerBMCOVH,
  DedicatedServerBackupBackupOfferOVH,
  DedicatedServerBackupBackupPasswordOVH,
  DedicatedServerBackupCloudOVH,
  DedicatedServerBackupFtpAclOVH,
  DedicatedServerBackupFtpOVH,
  DedicatedServerBackupStorageOrderableOVH,
  DedicatedServerBandwidthOrderableOVH,
  DedicatedServerBandwidthvRackOrderableOVH,
  DedicatedServerBillingAddonOVH,
  DedicatedServerBmcJavaKvmValueOVH,
  DedicatedServerBmcSshSolValueOVH,
  DedicatedServerBmcTestResultOVH,
  DedicatedServerBmcWebKvmValueOVH,
  DedicatedServerBmcWebSolValueOVH,
  DedicatedServerBootOptionEnumOVH,
  DedicatedServerDedicatedOVH,
  DedicatedServerDedicatedWithIAMOVH,
  DedicatedServerFirewallOVH,
  DedicatedServerHardwareRaidProfileOVH,
  DedicatedServerHardwareRaidSizeOVH,
  DedicatedServerHardwareSpecificationsOVH,
  DedicatedServerHardwareUpgradeTimeslotOVH,
  DedicatedServerInstallTemplateOVH,
  DedicatedServerInstallationProgressStatusOVH,
  DedicatedServerInterventionOVH,
  DedicatedServerIpCountryEnumOVH,
  DedicatedServerIpOrderableOVH,
  DedicatedServerIpmiAccessValueOVH,
  DedicatedServerIpmiOVH,
  DedicatedServerIpmiTestResultOVH,
  DedicatedServerKvmOVH,
  DedicatedServerMrtgTimestampValueOVH,
  DedicatedServerNetbootOVH,
  DedicatedServerNetbootOptionOVH,
  DedicatedServerNetworkSpecificationsOVH,
  DedicatedServerNetworkingOVH,
  DedicatedServerOperationOVH,
  DedicatedServerOptionEnumOVH,
  DedicatedServerOptionOVH,
  DedicatedServerPlannedInterventionOVH,
  DedicatedServerReinstallOVH,
  DedicatedServerScheduleUpgradePayloadOVH,
  DedicatedServerServerBurstOVH,
  DedicatedServerSplaOVH,
  DedicatedServerSupportLevelOrderableOVH,
  DedicatedServerTaskOVH,
  DedicatedServerTaskResponseOVH,
  DedicatedServerTrafficOrderableOVH,
  DedicatedServerUsbKeyOrderableDetailsOVH,
  DedicatedServerVirtualMacManagementOVH,
  DedicatedServerVirtualMacOVH,
  DedicatedServerVirtualNetworkInterfaceOVH,
  DedicatedStatusEnumOVH,
  DedicatedVirtualNetworkInterfaceVirtualNetworkInterfaceOVH,
  GetDedicatedServerDatacenterAvailabilitiesParams,
  GetDedicatedServerDatacenterAvailabilitiesRawParams,
  GetDedicatedServerOsAvailabilitiesParams,
  GetDedicatedServerParams,
  GetDedicatedServerServiceNameBootParams,
  GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams,
  GetDedicatedServerServiceNameFeaturesBmcSshSolParams,
  GetDedicatedServerServiceNameFeaturesBmcTestParams,
  GetDedicatedServerServiceNameFeaturesBmcWebKvmParams,
  GetDedicatedServerServiceNameFeaturesBmcWebSolParams,
  GetDedicatedServerServiceNameFeaturesIpmiAccessParams,
  GetDedicatedServerServiceNameFeaturesIpmiTestParams,
  GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams,
  GetDedicatedServerServiceNameInstallHardwareRaidSizeParams,
  GetDedicatedServerServiceNameIpCanBeMovedToParams,
  GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams,
  GetDedicatedServerServiceNameNetworkInterfaceControllerParams,
  GetDedicatedServerServiceNameOperationParams,
  GetDedicatedServerServiceNameOrderableFeatureParams,
  GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams,
  GetDedicatedServerServiceNameSplaParams,
  GetDedicatedServerServiceNameTaskParams,
  GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams,
  GetDedicatedServerServiceNameUpdatesAllowedParams,
  GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams,
  GetDedicatedServerServiceNameVirtualNetworkInterfaceParams,
  IpBlockOVH,
  Ipv4OVH,
  LicenseWindowsOsVersionEnumOVH,
  LicenseWindowsSqlVersionEnumOVH,
  MacAddressOVH,
  PostDedicatedServerServiceNameAntiDDosGameActivateBody,
  PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody,
  PostDedicatedServerServiceNameChangeContactBody,
  PostDedicatedServerServiceNameConfirmTerminationBody,
  PostDedicatedServerServiceNameFeaturesBackupCloudBody,
  PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody,
  PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody,
  PostDedicatedServerServiceNameFeaturesBmcSshSolBody,
  PostDedicatedServerServiceNameFeaturesBmcTestBody,
  PostDedicatedServerServiceNameFeaturesBmcWebKvmBody,
  PostDedicatedServerServiceNameFeaturesBmcWebSolBody,
  PostDedicatedServerServiceNameFeaturesIpmiAccessBody,
  PostDedicatedServerServiceNameFeaturesIpmiTestBody,
  PostDedicatedServerServiceNameInstallStartBody,
  PostDedicatedServerServiceNameIpBlockMergeBody,
  PostDedicatedServerServiceNameIpMoveBody,
  PostDedicatedServerServiceNameLicenseWindowsBody,
  PostDedicatedServerServiceNameNetworkingBody,
  PostDedicatedServerServiceNameOlaAggregationBody,
  PostDedicatedServerServiceNameOlaResetBody,
  PostDedicatedServerServiceNameReinstall400,
  PostDedicatedServerServiceNameReinstall403,
  PostDedicatedServerServiceNameReinstall404,
  PostDedicatedServerServiceNameReinstall409,
  PostDedicatedServerServiceNameReinstall500,
  PostDedicatedServerServiceNameReinstall501,
  PostDedicatedServerServiceNameSecondaryDnsDomainsBody,
  PostDedicatedServerServiceNameSplaBody,
  PostDedicatedServerServiceNameSupportReplaceCoolingBody,
  PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody,
  PostDedicatedServerServiceNameSupportReplaceMemoryBody,
  PostDedicatedServerServiceNameTaskTaskIdScheduleBody,
  PostDedicatedServerServiceNameVirtualMacBody,
  PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody,
  SecondaryDnsSecondaryDNSCheckFieldOVH,
  SecondaryDnsSecondaryDNSNameServerOVH,
  SecondaryDnsSecondaryDNSOVH,
  ServicesServiceOVH,
  SupportNewMessageInfoOVH,
  VrackDedicatedServerOVH,
  VrackTaskOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getDedicatedServer = (
    params?: GetDedicatedServerParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerQueryKey = (params?: GetDedicatedServerParams,) => {
    return [`/dedicated/server`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServer>>, TError = unknown>(params?: GetDedicatedServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServer>>> = ({ signal }) => getDedicatedServer(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServer>>>
export type GetDedicatedServerQueryError = unknown


export function useGetDedicatedServer<TData = Awaited<ReturnType<typeof getDedicatedServer>>, TError = unknown>(
 params: undefined |  GetDedicatedServerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServer<TData = Awaited<ReturnType<typeof getDedicatedServer>>, TError = unknown>(
 params?: GetDedicatedServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServer<TData = Awaited<ReturnType<typeof getDedicatedServer>>, TError = unknown>(
 params?: GetDedicatedServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetDedicatedServer<TData = Awaited<ReturnType<typeof getDedicatedServer>>, TError = unknown>(
 params?: GetDedicatedServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the availability of dedicated server
 */
export const getDedicatedServerAvailabilitiesRaw = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedAvailabilitiesRawOVH[]>(
      {url: `/dedicated/server/availabilities/raw`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerAvailabilitiesRawQueryKey = () => {
    return [`/dedicated/server/availabilities/raw`] as const;
    }

    
export const getGetDedicatedServerAvailabilitiesRawQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerAvailabilitiesRawQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>> = ({ signal }) => getDedicatedServerAvailabilitiesRaw(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerAvailabilitiesRawQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>>
export type GetDedicatedServerAvailabilitiesRawQueryError = unknown


export function useGetDedicatedServerAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the availability of dedicated server
 */

export function useGetDedicatedServerAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerAvailabilitiesRawQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the availability of dedicated server
 */
export const getDedicatedServerDatacenterAvailabilities = (
    params?: GetDedicatedServerDatacenterAvailabilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedDatacenterAvailabilityOVH[]>(
      {url: `/dedicated/server/datacenter/availabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerDatacenterAvailabilitiesQueryKey = (params?: GetDedicatedServerDatacenterAvailabilitiesParams,) => {
    return [`/dedicated/server/datacenter/availabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerDatacenterAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError = unknown>(params?: GetDedicatedServerDatacenterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerDatacenterAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>> = ({ signal }) => getDedicatedServerDatacenterAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerDatacenterAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>>
export type GetDedicatedServerDatacenterAvailabilitiesQueryError = unknown


export function useGetDedicatedServerDatacenterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError = unknown>(
 params: undefined |  GetDedicatedServerDatacenterAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerDatacenterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError = unknown>(
 params?: GetDedicatedServerDatacenterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerDatacenterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError = unknown>(
 params?: GetDedicatedServerDatacenterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the availability of dedicated server
 */

export function useGetDedicatedServerDatacenterAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError = unknown>(
 params?: GetDedicatedServerDatacenterAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerDatacenterAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the raw availability of dedicated server
 */
export const getDedicatedServerDatacenterAvailabilitiesRaw = (
    params?: GetDedicatedServerDatacenterAvailabilitiesRawParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedDatacenterRawAvailabilityOVH[]>(
      {url: `/dedicated/server/datacenter/availabilities/raw`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerDatacenterAvailabilitiesRawQueryKey = (params?: GetDedicatedServerDatacenterAvailabilitiesRawParams,) => {
    return [`/dedicated/server/datacenter/availabilities/raw`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerDatacenterAvailabilitiesRawQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError = unknown>(params?: GetDedicatedServerDatacenterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerDatacenterAvailabilitiesRawQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>> = ({ signal }) => getDedicatedServerDatacenterAvailabilitiesRaw(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerDatacenterAvailabilitiesRawQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>>
export type GetDedicatedServerDatacenterAvailabilitiesRawQueryError = unknown


export function useGetDedicatedServerDatacenterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError = unknown>(
 params: undefined |  GetDedicatedServerDatacenterAvailabilitiesRawParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerDatacenterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError = unknown>(
 params?: GetDedicatedServerDatacenterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerDatacenterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError = unknown>(
 params?: GetDedicatedServerDatacenterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the raw availability of dedicated server
 */

export function useGetDedicatedServerDatacenterAvailabilitiesRaw<TData = Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError = unknown>(
 params?: GetDedicatedServerDatacenterAvailabilitiesRawParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerDatacenterAvailabilitiesRaw>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerDatacenterAvailabilitiesRawQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the os available for a specified hardware reference
 */
export const getDedicatedServerOsAvailabilities = (
    params: GetDedicatedServerOsAvailabilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/osAvailabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerOsAvailabilitiesQueryKey = (params: GetDedicatedServerOsAvailabilitiesParams,) => {
    return [`/dedicated/server/osAvailabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerOsAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError = unknown>(params: GetDedicatedServerOsAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerOsAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>> = ({ signal }) => getDedicatedServerOsAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerOsAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>>
export type GetDedicatedServerOsAvailabilitiesQueryError = unknown


export function useGetDedicatedServerOsAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError = unknown>(
 params: GetDedicatedServerOsAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerOsAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError = unknown>(
 params: GetDedicatedServerOsAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerOsAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError = unknown>(
 params: GetDedicatedServerOsAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the os available for a specified hardware reference
 */

export function useGetDedicatedServerOsAvailabilities<TData = Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError = unknown>(
 params: GetDedicatedServerOsAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerOsAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerOsAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VirtualNetworkInterface details
 */
export const getDedicatedServerVirtualNetworkInterfaceUuid = (
    uuid: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerVirtualNetworkInterfaceOVH>(
      {url: `/dedicated/server/virtualNetworkInterface/${uuid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerVirtualNetworkInterfaceUuidQueryKey = (uuid: string,) => {
    return [`/dedicated/server/virtualNetworkInterface/${uuid}`] as const;
    }

    
export const getGetDedicatedServerVirtualNetworkInterfaceUuidQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError = unknown>(uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerVirtualNetworkInterfaceUuidQueryKey(uuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>> = ({ signal }) => getDedicatedServerVirtualNetworkInterfaceUuid(uuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(uuid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerVirtualNetworkInterfaceUuidQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>>
export type GetDedicatedServerVirtualNetworkInterfaceUuidQueryError = unknown


export function useGetDedicatedServerVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError = unknown>(
 uuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError = unknown>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError = unknown>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VirtualNetworkInterface details
 */

export function useGetDedicatedServerVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError = unknown>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerVirtualNetworkInterfaceUuid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerVirtualNetworkInterfaceUuidQueryOptions(uuid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerDedicatedWithIAMOVH>(
      {url: `/dedicated/server/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}`] as const;
    }

    
export const getGetDedicatedServerServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceName>>> = ({ signal }) => getDedicatedServerServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceName>>>
export type GetDedicatedServerServiceNameQueryError = unknown


export function useGetDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedServerServiceName = (
    serviceName: string,
    dedicatedServerDedicatedOVH: NonReadonly<DedicatedServerDedicatedOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerDedicatedOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceName>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerDedicatedOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceName>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerDedicatedOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceName>>, {serviceName: string;data: NonReadonly<DedicatedServerDedicatedOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedServerServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceName>>>
    export type PutDedicatedServerServiceNameMutationBody = NonReadonly<DedicatedServerDedicatedOVH>
    export type PutDedicatedServerServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedServerServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceName>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerDedicatedOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<DedicatedServerDedicatedOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable // Disable global filtering of anti DDoS Game protection on dedicated Game Server
 */
export const postDedicatedServerServiceNameAntiDDosGameActivate = (
    serviceName: string,
    postDedicatedServerServiceNameAntiDDosGameActivateBody: PostDedicatedServerServiceNameAntiDDosGameActivateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/antiDDosGame/activate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameAntiDDosGameActivateBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameAntiDDosGameActivateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameAntiDDosGameActivate>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameAntiDDosGameActivateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameAntiDDosGameActivate>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameAntiDDosGameActivateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameAntiDDosGameActivate>>, {serviceName: string;data: PostDedicatedServerServiceNameAntiDDosGameActivateBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameAntiDDosGameActivate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameAntiDDosGameActivateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameAntiDDosGameActivate>>>
    export type PostDedicatedServerServiceNameAntiDDosGameActivateMutationBody = PostDedicatedServerServiceNameAntiDDosGameActivateBody
    export type PostDedicatedServerServiceNameAntiDDosGameActivateMutationError = unknown

    /**
 * @summary Enable // Disable global filtering of anti DDoS Game protection on dedicated Game Server
 */
export const usePostDedicatedServerServiceNameAntiDDosGameActivate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameAntiDDosGameActivate>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameAntiDDosGameActivateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameAntiDDosGameActivate>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameAntiDDosGameActivateBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameAntiDDosGameActivateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get anti DDoS Game status
 */
export const getDedicatedServerServiceNameAntiDDosGameStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedStatusEnumOVH>(
      {url: `/dedicated/server/${serviceName}/antiDDosGame/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameAntiDDosGameStatusQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/antiDDosGame/status`] as const;
    }

    
export const getGetDedicatedServerServiceNameAntiDDosGameStatusQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameAntiDDosGameStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>> = ({ signal }) => getDedicatedServerServiceNameAntiDDosGameStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameAntiDDosGameStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>>
export type GetDedicatedServerServiceNameAntiDDosGameStatusQueryError = unknown


export function useGetDedicatedServerServiceNameAntiDDosGameStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameAntiDDosGameStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameAntiDDosGameStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get anti DDoS Game status
 */

export function useGetDedicatedServerServiceNameAntiDDosGameStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameAntiDDosGameStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameAntiDDosGameStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve secret to connect to the server / application
 */
export const postDedicatedServerServiceNameAuthenticationSecret = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerAccessOVH[]>(
      {url: `/dedicated/server/${serviceName}/authenticationSecret`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameAuthenticationSecretMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameAuthenticationSecret>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameAuthenticationSecret>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameAuthenticationSecret>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameAuthenticationSecret(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameAuthenticationSecretMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameAuthenticationSecret>>>
    
    export type PostDedicatedServerServiceNameAuthenticationSecretMutationError = unknown

    /**
 * @summary Retrieve secret to connect to the server / application
 */
export const usePostDedicatedServerServiceNameAuthenticationSecret = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameAuthenticationSecret>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameAuthenticationSecret>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameAuthenticationSecretMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get details on offered backup cloud if available for the current server
 */
export const getDedicatedServerServiceNameBackupCloudOfferDetails = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupBackupOfferOVH>(
      {url: `/dedicated/server/${serviceName}/backupCloudOfferDetails`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBackupCloudOfferDetailsQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/backupCloudOfferDetails`] as const;
    }

    
export const getGetDedicatedServerServiceNameBackupCloudOfferDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBackupCloudOfferDetailsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>> = ({ signal }) => getDedicatedServerServiceNameBackupCloudOfferDetails(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBackupCloudOfferDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>>
export type GetDedicatedServerServiceNameBackupCloudOfferDetailsQueryError = unknown


export function useGetDedicatedServerServiceNameBackupCloudOfferDetails<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBackupCloudOfferDetails<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBackupCloudOfferDetails<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details on offered backup cloud if available for the current server
 */

export function useGetDedicatedServerServiceNameBackupCloudOfferDetails<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBackupCloudOfferDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBackupCloudOfferDetailsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameBiosSettings = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedBiosSettingsBiosSettingsOVH>(
      {url: `/dedicated/server/${serviceName}/biosSettings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBiosSettingsQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/biosSettings`] as const;
    }

    
export const getGetDedicatedServerServiceNameBiosSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBiosSettingsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>> = ({ signal }) => getDedicatedServerServiceNameBiosSettings(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBiosSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>>
export type GetDedicatedServerServiceNameBiosSettingsQueryError = unknown


export function useGetDedicatedServerServiceNameBiosSettings<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBiosSettings<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBiosSettings<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameBiosSettings<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBiosSettingsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameBiosSettingsSgx = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedBiosSettingsSgxBiosSettingsSgxOVH>(
      {url: `/dedicated/server/${serviceName}/biosSettings/sgx`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBiosSettingsSgxQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/biosSettings/sgx`] as const;
    }

    
export const getGetDedicatedServerServiceNameBiosSettingsSgxQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBiosSettingsSgxQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>> = ({ signal }) => getDedicatedServerServiceNameBiosSettingsSgx(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBiosSettingsSgxQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>>
export type GetDedicatedServerServiceNameBiosSettingsSgxQueryError = unknown


export function useGetDedicatedServerServiceNameBiosSettingsSgx<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBiosSettingsSgx<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBiosSettingsSgx<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameBiosSettingsSgx<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBiosSettingsSgx>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBiosSettingsSgxQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Enable or disable SGX and configure PRMRR size. This will cause your server to reboot one or several time(s).
 * @summary Enable or disable SGX and configure PRMRR size
 */
export const postDedicatedServerServiceNameBiosSettingsSgxConfigure = (
    serviceName: string,
    postDedicatedServerServiceNameBiosSettingsSgxConfigureBody: PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/biosSettings/sgx/configure`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameBiosSettingsSgxConfigureBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameBiosSettingsSgxConfigureMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameBiosSettingsSgxConfigure>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameBiosSettingsSgxConfigure>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameBiosSettingsSgxConfigure>>, {serviceName: string;data: PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameBiosSettingsSgxConfigure(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameBiosSettingsSgxConfigureMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameBiosSettingsSgxConfigure>>>
    export type PostDedicatedServerServiceNameBiosSettingsSgxConfigureMutationBody = PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody
    export type PostDedicatedServerServiceNameBiosSettingsSgxConfigureMutationError = unknown

    /**
 * @summary Enable or disable SGX and configure PRMRR size
 */
export const usePostDedicatedServerServiceNameBiosSettingsSgxConfigure = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameBiosSettingsSgxConfigure>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameBiosSettingsSgxConfigure>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameBiosSettingsSgxConfigureBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameBiosSettingsSgxConfigureMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Server compatibles netboots
 */
export const getDedicatedServerServiceNameBoot = (
    serviceName: string,
    params?: GetDedicatedServerServiceNameBootParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/server/${serviceName}/boot`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBootQueryKey = (serviceName: string,
    params?: GetDedicatedServerServiceNameBootParams,) => {
    return [`/dedicated/server/${serviceName}/boot`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameBootQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedServerServiceNameBootParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBootQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>> = ({ signal }) => getDedicatedServerServiceNameBoot(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBootQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>>
export type GetDedicatedServerServiceNameBootQueryError = unknown


export function useGetDedicatedServerServiceNameBoot<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedServerServiceNameBootParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBoot<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameBootParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBoot<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameBootParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Server compatibles netboots
 */

export function useGetDedicatedServerServiceNameBoot<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameBootParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBoot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBootQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameBootBootId = (
    serviceName: string,
    bootId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerNetbootOVH>(
      {url: `/dedicated/server/${serviceName}/boot/${bootId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBootBootIdQueryKey = (serviceName: string,
    bootId: number,) => {
    return [`/dedicated/server/${serviceName}/boot/${bootId}`] as const;
    }

    
export const getGetDedicatedServerServiceNameBootBootIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError = unknown>(serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBootBootIdQueryKey(serviceName,bootId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>> = ({ signal }) => getDedicatedServerServiceNameBootBootId(serviceName,bootId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bootId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBootBootIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>>
export type GetDedicatedServerServiceNameBootBootIdQueryError = unknown


export function useGetDedicatedServerServiceNameBootBootId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError = unknown>(
 serviceName: string,
    bootId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBootBootId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError = unknown>(
 serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBootBootId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError = unknown>(
 serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameBootBootId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError = unknown>(
 serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBootBootIdQueryOptions(serviceName,bootId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Option used on this netboot
 */
export const getDedicatedServerServiceNameBootBootIdOption = (
    serviceName: string,
    bootId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBootOptionEnumOVH[]>(
      {url: `/dedicated/server/${serviceName}/boot/${bootId}/option`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBootBootIdOptionQueryKey = (serviceName: string,
    bootId: number,) => {
    return [`/dedicated/server/${serviceName}/boot/${bootId}/option`] as const;
    }

    
export const getGetDedicatedServerServiceNameBootBootIdOptionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError = unknown>(serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBootBootIdOptionQueryKey(serviceName,bootId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>> = ({ signal }) => getDedicatedServerServiceNameBootBootIdOption(serviceName,bootId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bootId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBootBootIdOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>>
export type GetDedicatedServerServiceNameBootBootIdOptionQueryError = unknown


export function useGetDedicatedServerServiceNameBootBootIdOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError = unknown>(
 serviceName: string,
    bootId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBootBootIdOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError = unknown>(
 serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBootBootIdOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError = unknown>(
 serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Option used on this netboot
 */

export function useGetDedicatedServerServiceNameBootBootIdOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError = unknown>(
 serviceName: string,
    bootId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBootBootIdOptionQueryOptions(serviceName,bootId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameBootBootIdOptionOption = (
    serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerNetbootOptionOVH>(
      {url: `/dedicated/server/${serviceName}/boot/${bootId}/option/${option}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBootBootIdOptionOptionQueryKey = (serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH,) => {
    return [`/dedicated/server/${serviceName}/boot/${bootId}/option/${option}`] as const;
    }

    
export const getGetDedicatedServerServiceNameBootBootIdOptionOptionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError = unknown>(serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBootBootIdOptionOptionQueryKey(serviceName,bootId,option);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>> = ({ signal }) => getDedicatedServerServiceNameBootBootIdOptionOption(serviceName,bootId,option, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && bootId && option), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBootBootIdOptionOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>>
export type GetDedicatedServerServiceNameBootBootIdOptionOptionQueryError = unknown


export function useGetDedicatedServerServiceNameBootBootIdOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError = unknown>(
 serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBootBootIdOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError = unknown>(
 serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBootBootIdOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError = unknown>(
 serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameBootBootIdOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError = unknown>(
 serviceName: string,
    bootId: number,
    option: DedicatedServerBootOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBootBootIdOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBootBootIdOptionOptionQueryOptions(serviceName,bootId,option,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameBurst = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerServerBurstOVH>(
      {url: `/dedicated/server/${serviceName}/burst`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameBurstQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/burst`] as const;
    }

    
export const getGetDedicatedServerServiceNameBurstQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameBurstQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>> = ({ signal }) => getDedicatedServerServiceNameBurst(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameBurstQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>>
export type GetDedicatedServerServiceNameBurstQueryError = unknown


export function useGetDedicatedServerServiceNameBurst<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBurst<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameBurst<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameBurst<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameBurst>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameBurstQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedServerServiceNameBurst = (
    serviceName: string,
    dedicatedServerServerBurstOVH: NonReadonly<DedicatedServerServerBurstOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/burst`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerServerBurstOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameBurstMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameBurst>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerServerBurstOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameBurst>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerServerBurstOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameBurst>>, {serviceName: string;data: NonReadonly<DedicatedServerServerBurstOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedServerServiceNameBurst(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameBurstMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameBurst>>>
    export type PutDedicatedServerServiceNameBurstMutationBody = NonReadonly<DedicatedServerServerBurstOVH>
    export type PutDedicatedServerServiceNameBurstMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedServerServiceNameBurst = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameBurst>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerServerBurstOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameBurst>>,
        TError,
        {serviceName: string;data: NonReadonly<DedicatedServerServerBurstOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameBurstMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postDedicatedServerServiceNameChangeContact = (
    serviceName: string,
    postDedicatedServerServiceNameChangeContactBody: PostDedicatedServerServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/server/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameChangeContact>>, {serviceName: string;data: PostDedicatedServerServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameChangeContact>>>
    export type PostDedicatedServerServiceNameChangeContactMutationBody = PostDedicatedServerServiceNameChangeContactBody
    export type PostDedicatedServerServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDedicatedServerServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postDedicatedServerServiceNameConfirmTermination = (
    serviceName: string,
    postDedicatedServerServiceNameConfirmTerminationBody: PostDedicatedServerServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/server/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameConfirmTermination>>, {serviceName: string;data: PostDedicatedServerServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameConfirmTermination>>>
    export type PostDedicatedServerServiceNameConfirmTerminationMutationBody = PostDedicatedServerServiceNameConfirmTerminationBody
    export type PostDedicatedServerServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostDedicatedServerServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Deactivate the cloud backup associated to the server. This does not delete container data.
 */
export const deleteDedicatedServerServiceNameFeaturesBackupCloud = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/features/backupCloud`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameFeaturesBackupCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupCloud>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupCloud>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupCloud>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteDedicatedServerServiceNameFeaturesBackupCloud(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameFeaturesBackupCloudMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupCloud>>>
    
    export type DeleteDedicatedServerServiceNameFeaturesBackupCloudMutationError = unknown

    /**
 * @summary Deactivate the cloud backup associated to the server. This does not delete container data.
 */
export const useDeleteDedicatedServerServiceNameFeaturesBackupCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupCloud>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupCloud>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameFeaturesBackupCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesBackupCloud = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupCloudOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupCloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBackupCloudQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/backupCloud`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBackupCloudQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBackupCloudQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBackupCloud(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBackupCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>>
export type GetDedicatedServerServiceNameFeaturesBackupCloudQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBackupCloud<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupCloud<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupCloud<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesBackupCloud<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBackupCloudQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new storage backup space associated to server
 */
export const postDedicatedServerServiceNameFeaturesBackupCloud = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBackupCloudBody: PostDedicatedServerServiceNameFeaturesBackupCloudBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupCloudOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupCloud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBackupCloudBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBackupCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloud>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupCloudBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloud>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupCloudBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloud>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupCloudBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBackupCloud(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBackupCloudMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloud>>>
    export type PostDedicatedServerServiceNameFeaturesBackupCloudMutationBody = PostDedicatedServerServiceNameFeaturesBackupCloudBody
    export type PostDedicatedServerServiceNameFeaturesBackupCloudMutationError = unknown

    /**
 * @summary Create a new storage backup space associated to server
 */
export const usePostDedicatedServerServiceNameFeaturesBackupCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloud>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupCloudBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloud>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupCloudBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBackupCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change your cloud account password
 */
export const postDedicatedServerServiceNameFeaturesBackupCloudPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupBackupPasswordOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupCloud/password`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBackupCloudPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloudPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloudPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloudPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBackupCloudPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBackupCloudPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloudPassword>>>
    
    export type PostDedicatedServerServiceNameFeaturesBackupCloudPasswordMutationError = unknown

    /**
 * @summary Change your cloud account password
 */
export const usePostDedicatedServerServiceNameFeaturesBackupCloudPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloudPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupCloudPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBackupCloudPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Terminate your Backup FTP service, ALL DATA WILL BE PERMANENTLY DELETED
 */
export const deleteDedicatedServerServiceNameFeaturesBackupFTP = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameFeaturesBackupFTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTP>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteDedicatedServerServiceNameFeaturesBackupFTP(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameFeaturesBackupFTPMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTP>>>
    
    export type DeleteDedicatedServerServiceNameFeaturesBackupFTPMutationError = unknown

    /**
 * @summary Terminate your Backup FTP service, ALL DATA WILL BE PERMANENTLY DELETED
 */
export const useDeleteDedicatedServerServiceNameFeaturesBackupFTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTP>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameFeaturesBackupFTPMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesBackupFTP = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupFtpOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBackupFTPQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/backupFTP`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBackupFTPQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBackupFTPQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBackupFTP(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBackupFTPQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>>
export type GetDedicatedServerServiceNameFeaturesBackupFTPQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesBackupFTP<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBackupFTPQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new Backup FTP space
 */
export const postDedicatedServerServiceNameFeaturesBackupFTP = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBackupFTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTP>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBackupFTP(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBackupFTPMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTP>>>
    
    export type PostDedicatedServerServiceNameFeaturesBackupFTPMutationError = unknown

    /**
 * @summary Create a new Backup FTP space
 */
export const usePostDedicatedServerServiceNameFeaturesBackupFTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTP>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTP>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBackupFTPMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of IP blocks (and protocols to allow on these blocks) authorized on your backup FTP
 */
export const getDedicatedServerServiceNameFeaturesBackupFTPAccess = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/access`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBackupFTPAccessQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/backupFTP/access`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBackupFTPAccessQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBackupFTPAccessQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBackupFTPAccess(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBackupFTPAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>>
export type GetDedicatedServerServiceNameFeaturesBackupFTPAccessQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of IP blocks (and protocols to allow on these blocks) authorized on your backup FTP
 */

export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBackupFTPAccessQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new Backup FTP ACL
 */
export const postDedicatedServerServiceNameFeaturesBackupFTPAccess = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBackupFTPAccessBody: PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBackupFTPAccessBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBackupFTPAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPAccess>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBackupFTPAccess(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBackupFTPAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPAccess>>>
    export type PostDedicatedServerServiceNameFeaturesBackupFTPAccessMutationBody = PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody
    export type PostDedicatedServerServiceNameFeaturesBackupFTPAccessMutationError = unknown

    /**
 * @summary Create a new Backup FTP ACL
 */
export const usePostDedicatedServerServiceNameFeaturesBackupFTPAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPAccess>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPAccess>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBackupFTPAccessBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBackupFTPAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke this ACL
 */
export const deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/access/${ipBlock}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, {serviceName: string;ipBlock: IpBlockOVH}> = (props) => {
          const {serviceName,ipBlock} = props ?? {};

          return  deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock(serviceName,ipBlock,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>>
    
    export type DeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationError = unknown

    /**
 * @summary Revoke this ACL
 */
export const useDeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>,
        TError,
        {serviceName: string;ipBlock: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupFtpAclOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/access/${ipBlock}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockQueryKey = (serviceName: string,
    ipBlock: IpBlockOVH,) => {
    return [`/dedicated/server/${serviceName}/features/backupFTP/access/${ipBlock}`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockQueryKey(serviceName,ipBlock);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock(serviceName,ipBlock, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipBlock), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>>
export type GetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockQueryOptions(serviceName,ipBlock,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
    dedicatedServerBackupFtpAclOVH: NonReadonly<DedicatedServerBackupFtpAclOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/access/${ipBlock}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerBackupFtpAclOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, {serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}> = (props) => {
          const {serviceName,ipBlock,data} = props ?? {};

          return  putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock(serviceName,ipBlock,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>>
    export type PutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationBody = NonReadonly<DedicatedServerBackupFtpAclOVH>
    export type PutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlock>>,
        TError,
        {serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all IP blocks that can be used in the ACL
 */
export const getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/authorizableBlocks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/backupFTP/authorizableBlocks`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>>
export type GetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all IP blocks that can be used in the ACL
 */

export function useGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change your Backup FTP password
 */
export const postDedicatedServerServiceNameFeaturesBackupFTPPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/backupFTP/password`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBackupFTPPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBackupFTPPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBackupFTPPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPPassword>>>
    
    export type PostDedicatedServerServiceNameFeaturesBackupFTPPasswordMutationError = unknown

    /**
 * @summary Change your Backup FTP password
 */
export const usePostDedicatedServerServiceNameFeaturesBackupFTPPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBackupFTPPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBackupFTPPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesBmc = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBMCOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBmcQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/bmc`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBmcQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBmcQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBmc(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBmcQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>>
export type GetDedicatedServerServiceNameFeaturesBmcQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBmc<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmc<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmc<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesBmc<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBmcQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the session credentials
 */
export const getDedicatedServerServiceNameFeaturesBmcJavaKvm = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBmcJavaKvmValueOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/javaKvm`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBmcJavaKvmQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams,) => {
    return [`/dedicated/server/${serviceName}/features/bmc/javaKvm`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBmcJavaKvmQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBmcJavaKvmQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBmcJavaKvm(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBmcJavaKvmQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>>
export type GetDedicatedServerServiceNameFeaturesBmcJavaKvmQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBmcJavaKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcJavaKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcJavaKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the session credentials
 */

export function useGetDedicatedServerServiceNameFeaturesBmcJavaKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcJavaKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBmcJavaKvmQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a Java KVM access
 */
export const postDedicatedServerServiceNameFeaturesBmcJavaKvm = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBmcJavaKvmBody: PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/javaKvm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBmcJavaKvmBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcJavaKvmMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcJavaKvm>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcJavaKvm(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcJavaKvmMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcJavaKvm>>>
    export type PostDedicatedServerServiceNameFeaturesBmcJavaKvmMutationBody = PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody
    export type PostDedicatedServerServiceNameFeaturesBmcJavaKvmMutationError = unknown

    /**
 * @summary Request a Java KVM access
 */
export const usePostDedicatedServerServiceNameFeaturesBmcJavaKvm = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcJavaKvm>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcJavaKvm>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcJavaKvmBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcJavaKvmMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Restart the BMC module
 */
export const postDedicatedServerServiceNameFeaturesBmcRestart = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/restart`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcRestartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRestart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRestart>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRestart>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcRestart(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRestart>>>
    
    export type PostDedicatedServerServiceNameFeaturesBmcRestartMutationError = unknown

    /**
 * @summary Restart the BMC module
 */
export const usePostDedicatedServerServiceNameFeaturesBmcRestart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRestart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRestart>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke access of all sessions related to this BMC
 */
export const postDedicatedServerServiceNameFeaturesBmcRevokeSessions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/revokeSessions`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcRevokeSessionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRevokeSessions>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRevokeSessions>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRevokeSessions>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcRevokeSessions(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcRevokeSessionsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRevokeSessions>>>
    
    export type PostDedicatedServerServiceNameFeaturesBmcRevokeSessionsMutationError = unknown

    /**
 * @summary Revoke access of all sessions related to this BMC
 */
export const usePostDedicatedServerServiceNameFeaturesBmcRevokeSessions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRevokeSessions>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcRevokeSessions>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcRevokeSessionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the session credentials
 */
export const getDedicatedServerServiceNameFeaturesBmcSshSol = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBmcSshSolValueOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/sshSol`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBmcSshSolQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams,) => {
    return [`/dedicated/server/${serviceName}/features/bmc/sshSol`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBmcSshSolQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBmcSshSolQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBmcSshSol(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBmcSshSolQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>>
export type GetDedicatedServerServiceNameFeaturesBmcSshSolQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBmcSshSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcSshSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcSshSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the session credentials
 */

export function useGetDedicatedServerServiceNameFeaturesBmcSshSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcSshSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcSshSol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBmcSshSolQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request an SSH SOL access
 */
export const postDedicatedServerServiceNameFeaturesBmcSshSol = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBmcSshSolBody: PostDedicatedServerServiceNameFeaturesBmcSshSolBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/sshSol`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBmcSshSolBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcSshSolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcSshSol>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcSshSolBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcSshSol>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcSshSolBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcSshSol>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcSshSolBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcSshSol(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcSshSolMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcSshSol>>>
    export type PostDedicatedServerServiceNameFeaturesBmcSshSolMutationBody = PostDedicatedServerServiceNameFeaturesBmcSshSolBody
    export type PostDedicatedServerServiceNameFeaturesBmcSshSolMutationError = unknown

    /**
 * @summary Request an SSH SOL access
 */
export const usePostDedicatedServerServiceNameFeaturesBmcSshSol = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcSshSol>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcSshSolBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcSshSol>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcSshSolBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcSshSolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Result of test on BMC interface
 */
export const getDedicatedServerServiceNameFeaturesBmcTest = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBmcTestResultOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/test`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBmcTestQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams,) => {
    return [`/dedicated/server/${serviceName}/features/bmc/test`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBmcTestQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBmcTestQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBmcTest(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBmcTestQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>>
export type GetDedicatedServerServiceNameFeaturesBmcTestQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBmcTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Result of test on BMC interface
 */

export function useGetDedicatedServerServiceNameFeaturesBmcTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcTest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBmcTestQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch basic test on BMC interface
 */
export const postDedicatedServerServiceNameFeaturesBmcTest = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBmcTestBody: PostDedicatedServerServiceNameFeaturesBmcTestBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBmcTestBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcTest>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcTestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcTest>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcTestBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcTest>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcTestBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcTest(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcTestMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcTest>>>
    export type PostDedicatedServerServiceNameFeaturesBmcTestMutationBody = PostDedicatedServerServiceNameFeaturesBmcTestBody
    export type PostDedicatedServerServiceNameFeaturesBmcTestMutationError = unknown

    /**
 * @summary Launch basic test on BMC interface
 */
export const usePostDedicatedServerServiceNameFeaturesBmcTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcTest>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcTestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcTest>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcTestBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the session credentials
 */
export const getDedicatedServerServiceNameFeaturesBmcWebKvm = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBmcWebKvmValueOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/webKvm`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBmcWebKvmQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams,) => {
    return [`/dedicated/server/${serviceName}/features/bmc/webKvm`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBmcWebKvmQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBmcWebKvmQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBmcWebKvm(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBmcWebKvmQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>>
export type GetDedicatedServerServiceNameFeaturesBmcWebKvmQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBmcWebKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcWebKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcWebKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the session credentials
 */

export function useGetDedicatedServerServiceNameFeaturesBmcWebKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebKvmParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBmcWebKvmQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a Web KVM access
 */
export const postDedicatedServerServiceNameFeaturesBmcWebKvm = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBmcWebKvmBody: PostDedicatedServerServiceNameFeaturesBmcWebKvmBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/webKvm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBmcWebKvmBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcWebKvmMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebKvmBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebKvmBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebKvm>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebKvmBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcWebKvm(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcWebKvmMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebKvm>>>
    export type PostDedicatedServerServiceNameFeaturesBmcWebKvmMutationBody = PostDedicatedServerServiceNameFeaturesBmcWebKvmBody
    export type PostDedicatedServerServiceNameFeaturesBmcWebKvmMutationError = unknown

    /**
 * @summary Request a Web KVM access
 */
export const usePostDedicatedServerServiceNameFeaturesBmcWebKvm = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebKvm>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebKvmBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebKvm>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebKvmBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcWebKvmMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the session credentials
 */
export const getDedicatedServerServiceNameFeaturesBmcWebSol = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBmcWebSolValueOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/webSol`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesBmcWebSolQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams,) => {
    return [`/dedicated/server/${serviceName}/features/bmc/webSol`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesBmcWebSolQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesBmcWebSolQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesBmcWebSol(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesBmcWebSolQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>>
export type GetDedicatedServerServiceNameFeaturesBmcWebSolQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesBmcWebSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcWebSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesBmcWebSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the session credentials
 */

export function useGetDedicatedServerServiceNameFeaturesBmcWebSol<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesBmcWebSolParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesBmcWebSol>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesBmcWebSolQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a Web SOL access
 */
export const postDedicatedServerServiceNameFeaturesBmcWebSol = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesBmcWebSolBody: PostDedicatedServerServiceNameFeaturesBmcWebSolBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/features/bmc/webSol`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesBmcWebSolBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesBmcWebSolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebSol>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebSolBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebSol>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebSolBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebSol>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebSolBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesBmcWebSol(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesBmcWebSolMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebSol>>>
    export type PostDedicatedServerServiceNameFeaturesBmcWebSolMutationBody = PostDedicatedServerServiceNameFeaturesBmcWebSolBody
    export type PostDedicatedServerServiceNameFeaturesBmcWebSolMutationError = unknown

    /**
 * @summary Request a Web SOL access
 */
export const usePostDedicatedServerServiceNameFeaturesBmcWebSol = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebSol>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebSolBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesBmcWebSol>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesBmcWebSolBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesBmcWebSolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesFirewall = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerFirewallOVH>(
      {url: `/dedicated/server/${serviceName}/features/firewall`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesFirewallQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/firewall`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesFirewallQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesFirewallQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesFirewall(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesFirewallQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>>
export type GetDedicatedServerServiceNameFeaturesFirewallQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesFirewall<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesFirewall<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesFirewall<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesFirewall<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesFirewallQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedServerServiceNameFeaturesFirewall = (
    serviceName: string,
    dedicatedServerFirewallOVH: NonReadonly<DedicatedServerFirewallOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/features/firewall`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerFirewallOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameFeaturesFirewallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesFirewall>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerFirewallOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesFirewall>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerFirewallOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesFirewall>>, {serviceName: string;data: NonReadonly<DedicatedServerFirewallOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedServerServiceNameFeaturesFirewall(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameFeaturesFirewallMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesFirewall>>>
    export type PutDedicatedServerServiceNameFeaturesFirewallMutationBody = NonReadonly<DedicatedServerFirewallOVH>
    export type PutDedicatedServerServiceNameFeaturesFirewallMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedServerServiceNameFeaturesFirewall = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesFirewall>>, TError,{serviceName: string;data: NonReadonly<DedicatedServerFirewallOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameFeaturesFirewall>>,
        TError,
        {serviceName: string;data: NonReadonly<DedicatedServerFirewallOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameFeaturesFirewallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesIpmi = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerIpmiOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesIpmiQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/ipmi`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesIpmiQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesIpmiQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesIpmi(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesIpmiQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>>
export type GetDedicatedServerServiceNameFeaturesIpmiQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesIpmi<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesIpmi<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesIpmi<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesIpmi<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesIpmiQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary IPMI access method
 */
export const getDedicatedServerServiceNameFeaturesIpmiAccess = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerIpmiAccessValueOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi/access`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesIpmiAccessQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams,) => {
    return [`/dedicated/server/${serviceName}/features/ipmi/access`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesIpmiAccessQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesIpmiAccessQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesIpmiAccess(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesIpmiAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>>
export type GetDedicatedServerServiceNameFeaturesIpmiAccessQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesIpmiAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesIpmiAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesIpmiAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary IPMI access method
 */

export function useGetDedicatedServerServiceNameFeaturesIpmiAccess<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiAccessParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesIpmiAccessQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request an acces on KVM IPMI interface
 */
export const postDedicatedServerServiceNameFeaturesIpmiAccess = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesIpmiAccessBody: PostDedicatedServerServiceNameFeaturesIpmiAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi/access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesIpmiAccessBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesIpmiAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiAccess>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiAccess>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiAccess>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiAccessBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesIpmiAccess(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesIpmiAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiAccess>>>
    export type PostDedicatedServerServiceNameFeaturesIpmiAccessMutationBody = PostDedicatedServerServiceNameFeaturesIpmiAccessBody
    export type PostDedicatedServerServiceNameFeaturesIpmiAccessMutationError = unknown

    /**
 * @summary Request an acces on KVM IPMI interface
 */
export const usePostDedicatedServerServiceNameFeaturesIpmiAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiAccess>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiAccess>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiAccessBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesIpmiAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset KVM IPMI interface
 */
export const postDedicatedServerServiceNameFeaturesIpmiResetInterface = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi/resetInterface`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesIpmiResetInterfaceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetInterface>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetInterface>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetInterface>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesIpmiResetInterface(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesIpmiResetInterfaceMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetInterface>>>
    
    export type PostDedicatedServerServiceNameFeaturesIpmiResetInterfaceMutationError = unknown

    /**
 * @summary Reset KVM IPMI interface
 */
export const usePostDedicatedServerServiceNameFeaturesIpmiResetInterface = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetInterface>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetInterface>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesIpmiResetInterfaceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset KVM IPMI sessions
 */
export const postDedicatedServerServiceNameFeaturesIpmiResetSessions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi/resetSessions`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesIpmiResetSessionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetSessions>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetSessions>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetSessions>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesIpmiResetSessions(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesIpmiResetSessionsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetSessions>>>
    
    export type PostDedicatedServerServiceNameFeaturesIpmiResetSessionsMutationError = unknown

    /**
 * @summary Reset KVM IPMI sessions
 */
export const usePostDedicatedServerServiceNameFeaturesIpmiResetSessions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetSessions>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiResetSessions>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesIpmiResetSessionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Result of http, ping and identification tests on IPMI interface
 */
export const getDedicatedServerServiceNameFeaturesIpmiTest = (
    serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerIpmiTestResultOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi/test`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesIpmiTestQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams,) => {
    return [`/dedicated/server/${serviceName}/features/ipmi/test`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesIpmiTestQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesIpmiTestQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesIpmiTest(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesIpmiTestQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>>
export type GetDedicatedServerServiceNameFeaturesIpmiTestQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesIpmiTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesIpmiTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesIpmiTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Result of http, ping and identification tests on IPMI interface
 */

export function useGetDedicatedServerServiceNameFeaturesIpmiTest<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameFeaturesIpmiTestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesIpmiTest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesIpmiTestQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch test on KVM IPMI interface
 */
export const postDedicatedServerServiceNameFeaturesIpmiTest = (
    serviceName: string,
    postDedicatedServerServiceNameFeaturesIpmiTestBody: PostDedicatedServerServiceNameFeaturesIpmiTestBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/features/ipmi/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameFeaturesIpmiTestBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameFeaturesIpmiTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiTest>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiTestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiTest>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiTestBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiTest>>, {serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiTestBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameFeaturesIpmiTest(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameFeaturesIpmiTestMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiTest>>>
    export type PostDedicatedServerServiceNameFeaturesIpmiTestMutationBody = PostDedicatedServerServiceNameFeaturesIpmiTestBody
    export type PostDedicatedServerServiceNameFeaturesIpmiTestMutationError = unknown

    /**
 * @summary Launch test on KVM IPMI interface
 */
export const usePostDedicatedServerServiceNameFeaturesIpmiTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiTest>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiTestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameFeaturesIpmiTest>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameFeaturesIpmiTestBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameFeaturesIpmiTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameFeaturesKvm = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerKvmOVH>(
      {url: `/dedicated/server/${serviceName}/features/kvm`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameFeaturesKvmQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/features/kvm`] as const;
    }

    
export const getGetDedicatedServerServiceNameFeaturesKvmQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameFeaturesKvmQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>> = ({ signal }) => getDedicatedServerServiceNameFeaturesKvm(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameFeaturesKvmQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>>
export type GetDedicatedServerServiceNameFeaturesKvmQueryError = unknown


export function useGetDedicatedServerServiceNameFeaturesKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameFeaturesKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameFeaturesKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameFeaturesKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameFeaturesKvmQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve compatible  install template partitions scheme
 */
export const getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes = (
    serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/${serviceName}/install/compatibleTemplatePartitionSchemes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams,) => {
    return [`/dedicated/server/${serviceName}/install/compatibleTemplatePartitionSchemes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>> = ({ signal }) => getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>>
export type GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesQueryError = unknown


export function useGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve compatible  install template partitions scheme
 */

export function useGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve compatible  install templates names
 */
export const getDedicatedServerServiceNameInstallCompatibleTemplates = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerInstallTemplateOVH>(
      {url: `/dedicated/server/${serviceName}/install/compatibleTemplates`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInstallCompatibleTemplatesQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/install/compatibleTemplates`] as const;
    }

    
export const getGetDedicatedServerServiceNameInstallCompatibleTemplatesQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInstallCompatibleTemplatesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>> = ({ signal }) => getDedicatedServerServiceNameInstallCompatibleTemplates(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInstallCompatibleTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>>
export type GetDedicatedServerServiceNameInstallCompatibleTemplatesQueryError = unknown


export function useGetDedicatedServerServiceNameInstallCompatibleTemplates<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallCompatibleTemplates<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallCompatibleTemplates<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve compatible  install templates names
 */

export function useGetDedicatedServerServiceNameInstallCompatibleTemplates<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallCompatibleTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInstallCompatibleTemplatesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve hardware RAID profile
 */
export const getDedicatedServerServiceNameInstallHardwareRaidProfile = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerHardwareRaidProfileOVH>(
      {url: `/dedicated/server/${serviceName}/install/hardwareRaidProfile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInstallHardwareRaidProfileQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/install/hardwareRaidProfile`] as const;
    }

    
export const getGetDedicatedServerServiceNameInstallHardwareRaidProfileQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInstallHardwareRaidProfileQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>> = ({ signal }) => getDedicatedServerServiceNameInstallHardwareRaidProfile(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInstallHardwareRaidProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>>
export type GetDedicatedServerServiceNameInstallHardwareRaidProfileQueryError = unknown


export function useGetDedicatedServerServiceNameInstallHardwareRaidProfile<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallHardwareRaidProfile<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallHardwareRaidProfile<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve hardware RAID profile
 */

export function useGetDedicatedServerServiceNameInstallHardwareRaidProfile<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInstallHardwareRaidProfileQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get hardware RAID size for a given configuration
 */
export const getDedicatedServerServiceNameInstallHardwareRaidSize = (
    serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerHardwareRaidSizeOVH>(
      {url: `/dedicated/server/${serviceName}/install/hardwareRaidSize`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInstallHardwareRaidSizeQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams,) => {
    return [`/dedicated/server/${serviceName}/install/hardwareRaidSize`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameInstallHardwareRaidSizeQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInstallHardwareRaidSizeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>> = ({ signal }) => getDedicatedServerServiceNameInstallHardwareRaidSize(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInstallHardwareRaidSizeQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>>
export type GetDedicatedServerServiceNameInstallHardwareRaidSizeQueryError = unknown


export function useGetDedicatedServerServiceNameInstallHardwareRaidSize<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallHardwareRaidSize<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallHardwareRaidSize<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hardware RAID size for a given configuration
 */

export function useGetDedicatedServerServiceNameInstallHardwareRaidSize<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameInstallHardwareRaidSizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallHardwareRaidSize>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInstallHardwareRaidSizeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Start an install
 */
export const postDedicatedServerServiceNameInstallStart = (
    serviceName: string,
    postDedicatedServerServiceNameInstallStartBody: PostDedicatedServerServiceNameInstallStartBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/install/start`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameInstallStartBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameInstallStartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameInstallStart>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameInstallStartBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameInstallStart>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameInstallStartBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameInstallStart>>, {serviceName: string;data: PostDedicatedServerServiceNameInstallStartBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameInstallStart(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameInstallStartMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameInstallStart>>>
    export type PostDedicatedServerServiceNameInstallStartMutationBody = PostDedicatedServerServiceNameInstallStartBody
    export type PostDedicatedServerServiceNameInstallStartMutationError = unknown

    /**
 * @summary Start an install
 */
export const usePostDedicatedServerServiceNameInstallStart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameInstallStart>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameInstallStartBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameInstallStart>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameInstallStartBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameInstallStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get installation status
 */
export const getDedicatedServerServiceNameInstallStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerInstallationProgressStatusOVH>(
      {url: `/dedicated/server/${serviceName}/install/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInstallStatusQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/install/status`] as const;
    }

    
export const getGetDedicatedServerServiceNameInstallStatusQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInstallStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>> = ({ signal }) => getDedicatedServerServiceNameInstallStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInstallStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>>
export type GetDedicatedServerServiceNameInstallStatusQueryError = unknown


export function useGetDedicatedServerServiceNameInstallStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInstallStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get installation status
 */

export function useGetDedicatedServerServiceNameInstallStatus<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInstallStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInstallStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary technical intervention history
 */
export const getDedicatedServerServiceNameIntervention = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/server/${serviceName}/intervention`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInterventionQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/intervention`] as const;
    }

    
export const getGetDedicatedServerServiceNameInterventionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInterventionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>> = ({ signal }) => getDedicatedServerServiceNameIntervention(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInterventionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>>
export type GetDedicatedServerServiceNameInterventionQueryError = unknown


export function useGetDedicatedServerServiceNameIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary technical intervention history
 */

export function useGetDedicatedServerServiceNameIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIntervention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInterventionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameInterventionInterventionId = (
    serviceName: string,
    interventionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerInterventionOVH>(
      {url: `/dedicated/server/${serviceName}/intervention/${interventionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameInterventionInterventionIdQueryKey = (serviceName: string,
    interventionId: number,) => {
    return [`/dedicated/server/${serviceName}/intervention/${interventionId}`] as const;
    }

    
export const getGetDedicatedServerServiceNameInterventionInterventionIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError = unknown>(serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameInterventionInterventionIdQueryKey(serviceName,interventionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>> = ({ signal }) => getDedicatedServerServiceNameInterventionInterventionId(serviceName,interventionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && interventionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameInterventionInterventionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>>
export type GetDedicatedServerServiceNameInterventionInterventionIdQueryError = unknown


export function useGetDedicatedServerServiceNameInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameInterventionInterventionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameInterventionInterventionIdQueryOptions(serviceName,interventionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Merge a splitted block and route it to the choosen server. You cannot undo this operation
 */
export const postDedicatedServerServiceNameIpBlockMerge = (
    serviceName: string,
    postDedicatedServerServiceNameIpBlockMergeBody: PostDedicatedServerServiceNameIpBlockMergeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/ipBlockMerge`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameIpBlockMergeBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameIpBlockMergeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpBlockMerge>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameIpBlockMergeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpBlockMerge>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameIpBlockMergeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpBlockMerge>>, {serviceName: string;data: PostDedicatedServerServiceNameIpBlockMergeBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameIpBlockMerge(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameIpBlockMergeMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpBlockMerge>>>
    export type PostDedicatedServerServiceNameIpBlockMergeMutationBody = PostDedicatedServerServiceNameIpBlockMergeBody
    export type PostDedicatedServerServiceNameIpBlockMergeMutationError = unknown

    /**
 * @summary Merge a splitted block and route it to the choosen server. You cannot undo this operation
 */
export const usePostDedicatedServerServiceNameIpBlockMerge = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpBlockMerge>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameIpBlockMergeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameIpBlockMerge>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameIpBlockMergeBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameIpBlockMergeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check if given IP can be moved to this server
 */
export const getDedicatedServerServiceNameIpCanBeMovedTo = (
    serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/ipCanBeMovedTo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameIpCanBeMovedToQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams,) => {
    return [`/dedicated/server/${serviceName}/ipCanBeMovedTo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameIpCanBeMovedToQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameIpCanBeMovedToQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>> = ({ signal }) => getDedicatedServerServiceNameIpCanBeMovedTo(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameIpCanBeMovedToQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>>
export type GetDedicatedServerServiceNameIpCanBeMovedToQueryError = unknown


export function useGetDedicatedServerServiceNameIpCanBeMovedTo<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIpCanBeMovedTo<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIpCanBeMovedTo<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if given IP can be moved to this server
 */

export function useGetDedicatedServerServiceNameIpCanBeMovedTo<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameIpCanBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCanBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameIpCanBeMovedToQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available country for IP order
 */
export const getDedicatedServerServiceNameIpCountryAvailable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerIpCountryEnumOVH[]>(
      {url: `/dedicated/server/${serviceName}/ipCountryAvailable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameIpCountryAvailableQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/ipCountryAvailable`] as const;
    }

    
export const getGetDedicatedServerServiceNameIpCountryAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameIpCountryAvailableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>> = ({ signal }) => getDedicatedServerServiceNameIpCountryAvailable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameIpCountryAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>>
export type GetDedicatedServerServiceNameIpCountryAvailableQueryError = unknown


export function useGetDedicatedServerServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available country for IP order
 */

export function useGetDedicatedServerServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIpCountryAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameIpCountryAvailableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move an Ip failover to this server
 */
export const postDedicatedServerServiceNameIpMove = (
    serviceName: string,
    postDedicatedServerServiceNameIpMoveBody: PostDedicatedServerServiceNameIpMoveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/ipMove`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameIpMoveBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameIpMoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpMove>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameIpMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpMove>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameIpMoveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpMove>>, {serviceName: string;data: PostDedicatedServerServiceNameIpMoveBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameIpMove(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameIpMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpMove>>>
    export type PostDedicatedServerServiceNameIpMoveMutationBody = PostDedicatedServerServiceNameIpMoveBody
    export type PostDedicatedServerServiceNameIpMoveMutationError = unknown

    /**
 * @summary Move an Ip failover to this server
 */
export const usePostDedicatedServerServiceNameIpMove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameIpMove>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameIpMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameIpMove>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameIpMoveBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameIpMoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all ip from server
 */
export const getDedicatedServerServiceNameIps = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/server/${serviceName}/ips`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameIpsQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/ips`] as const;
    }

    
export const getGetDedicatedServerServiceNameIpsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameIpsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>> = ({ signal }) => getDedicatedServerServiceNameIps(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameIpsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>>
export type GetDedicatedServerServiceNameIpsQueryError = unknown


export function useGetDedicatedServerServiceNameIps<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIps<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameIps<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all ip from server
 */

export function useGetDedicatedServerServiceNameIps<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameIpsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the windows license compliant with your server.
 */
export const getDedicatedServerServiceNameLicenseCompliantWindows = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseWindowsOsVersionEnumOVH[]>(
      {url: `/dedicated/server/${serviceName}/license/compliantWindows`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameLicenseCompliantWindowsQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/license/compliantWindows`] as const;
    }

    
export const getGetDedicatedServerServiceNameLicenseCompliantWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameLicenseCompliantWindowsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>> = ({ signal }) => getDedicatedServerServiceNameLicenseCompliantWindows(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameLicenseCompliantWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>>
export type GetDedicatedServerServiceNameLicenseCompliantWindowsQueryError = unknown


export function useGetDedicatedServerServiceNameLicenseCompliantWindows<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameLicenseCompliantWindows<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameLicenseCompliantWindows<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the windows license compliant with your server.
 */

export function useGetDedicatedServerServiceNameLicenseCompliantWindows<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameLicenseCompliantWindowsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the windows SQL server license compliant with your server.
 */
export const getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseWindowsSqlVersionEnumOVH[]>(
      {url: `/dedicated/server/${serviceName}/license/compliantWindowsSqlServer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/license/compliantWindowsSqlServer`] as const;
    }

    
export const getGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>> = ({ signal }) => getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>>
export type GetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerQueryError = unknown


export function useGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the windows SQL server license compliant with your server.
 */

export function useGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameLicenseCompliantWindowsSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Add your existing windows license serial to this dedicated server. Will be manageable in /license/windows.
 * @summary Add your existing windows license serial to this dedicated server
 */
export const postDedicatedServerServiceNameLicenseWindows = (
    serviceName: string,
    postDedicatedServerServiceNameLicenseWindowsBody: PostDedicatedServerServiceNameLicenseWindowsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/license/windows`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameLicenseWindowsBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameLicenseWindowsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameLicenseWindows>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameLicenseWindowsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameLicenseWindows>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameLicenseWindowsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameLicenseWindows>>, {serviceName: string;data: PostDedicatedServerServiceNameLicenseWindowsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameLicenseWindows(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameLicenseWindowsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameLicenseWindows>>>
    export type PostDedicatedServerServiceNameLicenseWindowsMutationBody = PostDedicatedServerServiceNameLicenseWindowsBody
    export type PostDedicatedServerServiceNameLicenseWindowsMutationError = unknown

    /**
 * @summary Add your existing windows license serial to this dedicated server
 */
export const usePostDedicatedServerServiceNameLicenseWindows = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameLicenseWindows>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameLicenseWindowsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameLicenseWindows>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameLicenseWindowsBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameLicenseWindowsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List server networkInterfaceController
 */
export const getDedicatedServerServiceNameNetworkInterfaceController = (
    serviceName: string,
    params?: GetDedicatedServerServiceNameNetworkInterfaceControllerParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MacAddressOVH[]>(
      {url: `/dedicated/server/${serviceName}/networkInterfaceController`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameNetworkInterfaceControllerQueryKey = (serviceName: string,
    params?: GetDedicatedServerServiceNameNetworkInterfaceControllerParams,) => {
    return [`/dedicated/server/${serviceName}/networkInterfaceController`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameNetworkInterfaceControllerQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedServerServiceNameNetworkInterfaceControllerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameNetworkInterfaceControllerQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>> = ({ signal }) => getDedicatedServerServiceNameNetworkInterfaceController(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameNetworkInterfaceControllerQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>>
export type GetDedicatedServerServiceNameNetworkInterfaceControllerQueryError = unknown


export function useGetDedicatedServerServiceNameNetworkInterfaceController<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedServerServiceNameNetworkInterfaceControllerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworkInterfaceController<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameNetworkInterfaceControllerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworkInterfaceController<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameNetworkInterfaceControllerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List server networkInterfaceController
 */

export function useGetDedicatedServerServiceNameNetworkInterfaceController<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameNetworkInterfaceControllerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceController>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameNetworkInterfaceControllerQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameNetworkInterfaceControllerMac = (
    serviceName: string,
    mac: MacAddressOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNetworkInterfaceControllerNetworkInterfaceControllerOVH>(
      {url: `/dedicated/server/${serviceName}/networkInterfaceController/${mac}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameNetworkInterfaceControllerMacQueryKey = (serviceName: string,
    mac: MacAddressOVH,) => {
    return [`/dedicated/server/${serviceName}/networkInterfaceController/${mac}`] as const;
    }

    
export const getGetDedicatedServerServiceNameNetworkInterfaceControllerMacQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError = unknown>(serviceName: string,
    mac: MacAddressOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameNetworkInterfaceControllerMacQueryKey(serviceName,mac);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>> = ({ signal }) => getDedicatedServerServiceNameNetworkInterfaceControllerMac(serviceName,mac, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && mac), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameNetworkInterfaceControllerMacQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>>
export type GetDedicatedServerServiceNameNetworkInterfaceControllerMacQueryError = unknown


export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMac>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameNetworkInterfaceControllerMacQueryOptions(serviceName,mac,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve traffic graph values
 */
export const getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg = (
    serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerMrtgTimestampValueOVH[]>(
      {url: `/dedicated/server/${serviceName}/networkInterfaceController/${mac}/mrtg`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgQueryKey = (serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams,) => {
    return [`/dedicated/server/${serviceName}/networkInterfaceController/${mac}/mrtg`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError = unknown>(serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgQueryKey(serviceName,mac,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>> = ({ signal }) => getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg(serviceName,mac,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && mac), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>>
export type GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgQueryError = unknown


export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve traffic graph values
 */

export function useGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError = unknown>(
 serviceName: string,
    mac: MacAddressOVH,
    params: GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworkInterfaceControllerMacMrtg>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgQueryOptions(serviceName,mac,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reset your network configuration
 */
export const deleteDedicatedServerServiceNameNetworking = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerNetworkingOVH>(
      {url: `/dedicated/server/${serviceName}/networking`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameNetworkingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameNetworking>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameNetworking>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameNetworking>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteDedicatedServerServiceNameNetworking(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameNetworkingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameNetworking>>>
    
    export type DeleteDedicatedServerServiceNameNetworkingMutationError = unknown

    /**
 * @summary Reset your network configuration
 */
export const useDeleteDedicatedServerServiceNameNetworking = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameNetworking>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameNetworking>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameNetworkingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameNetworking = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerNetworkingOVH>(
      {url: `/dedicated/server/${serviceName}/networking`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameNetworkingQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/networking`] as const;
    }

    
export const getGetDedicatedServerServiceNameNetworkingQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameNetworkingQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>> = ({ signal }) => getDedicatedServerServiceNameNetworking(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameNetworkingQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>>
export type GetDedicatedServerServiceNameNetworkingQueryError = unknown


export function useGetDedicatedServerServiceNameNetworking<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworking<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameNetworking<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameNetworking<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameNetworking>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameNetworkingQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Apply a new network configuration
 */
export const postDedicatedServerServiceNameNetworking = (
    serviceName: string,
    postDedicatedServerServiceNameNetworkingBody: PostDedicatedServerServiceNameNetworkingBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerNetworkingOVH>(
      {url: `/dedicated/server/${serviceName}/networking`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameNetworkingBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameNetworkingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameNetworking>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameNetworkingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameNetworking>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameNetworkingBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameNetworking>>, {serviceName: string;data: PostDedicatedServerServiceNameNetworkingBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameNetworking(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameNetworkingMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameNetworking>>>
    export type PostDedicatedServerServiceNameNetworkingMutationBody = PostDedicatedServerServiceNameNetworkingBody
    export type PostDedicatedServerServiceNameNetworkingMutationError = unknown

    /**
 * @summary Apply a new network configuration
 */
export const usePostDedicatedServerServiceNameNetworking = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameNetworking>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameNetworkingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameNetworking>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameNetworkingBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameNetworkingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary OLA : Group interfaces into an aggregation
 */
export const postDedicatedServerServiceNameOlaAggregation = (
    serviceName: string,
    postDedicatedServerServiceNameOlaAggregationBody: PostDedicatedServerServiceNameOlaAggregationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/ola/aggregation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameOlaAggregationBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameOlaAggregationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaAggregation>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameOlaAggregationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaAggregation>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameOlaAggregationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaAggregation>>, {serviceName: string;data: PostDedicatedServerServiceNameOlaAggregationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameOlaAggregation(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameOlaAggregationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaAggregation>>>
    export type PostDedicatedServerServiceNameOlaAggregationMutationBody = PostDedicatedServerServiceNameOlaAggregationBody
    export type PostDedicatedServerServiceNameOlaAggregationMutationError = unknown

    /**
 * @summary OLA : Group interfaces into an aggregation
 */
export const usePostDedicatedServerServiceNameOlaAggregation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaAggregation>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameOlaAggregationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaAggregation>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameOlaAggregationBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameOlaAggregationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary OLA : Reset interfaces to default configuration
 */
export const postDedicatedServerServiceNameOlaReset = (
    serviceName: string,
    postDedicatedServerServiceNameOlaResetBody: PostDedicatedServerServiceNameOlaResetBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/ola/reset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameOlaResetBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameOlaResetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaReset>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameOlaResetBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaReset>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameOlaResetBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaReset>>, {serviceName: string;data: PostDedicatedServerServiceNameOlaResetBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameOlaReset(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameOlaResetMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaReset>>>
    export type PostDedicatedServerServiceNameOlaResetMutationBody = PostDedicatedServerServiceNameOlaResetBody
    export type PostDedicatedServerServiceNameOlaResetMutationError = unknown

    /**
 * @summary OLA : Reset interfaces to default configuration
 */
export const usePostDedicatedServerServiceNameOlaReset = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaReset>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameOlaResetBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameOlaReset>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameOlaResetBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameOlaResetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary What is ongoing on this server
 */
export const getDedicatedServerServiceNameOngoing = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedExposedTaskOVH[]>(
      {url: `/dedicated/server/${serviceName}/ongoing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOngoingQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/ongoing`] as const;
    }

    
export const getGetDedicatedServerServiceNameOngoingQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOngoingQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>> = ({ signal }) => getDedicatedServerServiceNameOngoing(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOngoingQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>>
export type GetDedicatedServerServiceNameOngoingQueryError = unknown


export function useGetDedicatedServerServiceNameOngoing<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOngoing<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOngoing<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary What is ongoing on this server
 */

export function useGetDedicatedServerServiceNameOngoing<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOngoing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOngoingQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Dedicated server operation
 */
export const getDedicatedServerServiceNameOperation = (
    serviceName: string,
    params?: GetDedicatedServerServiceNameOperationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/${serviceName}/operation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOperationQueryKey = (serviceName: string,
    params?: GetDedicatedServerServiceNameOperationParams,) => {
    return [`/dedicated/server/${serviceName}/operation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameOperationQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedServerServiceNameOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOperationQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>> = ({ signal }) => getDedicatedServerServiceNameOperation(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>>
export type GetDedicatedServerServiceNameOperationQueryError = unknown


export function useGetDedicatedServerServiceNameOperation<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedServerServiceNameOperationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOperation<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOperation<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Dedicated server operation
 */

export function useGetDedicatedServerServiceNameOperation<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOperationQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameOperationOperationId = (
    serviceName: string,
    operationId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOperationOVH>(
      {url: `/dedicated/server/${serviceName}/operation/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOperationOperationIdQueryKey = (serviceName: string,
    operationId: string,) => {
    return [`/dedicated/server/${serviceName}/operation/${operationId}`] as const;
    }

    
export const getGetDedicatedServerServiceNameOperationOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError = unknown>(serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOperationOperationIdQueryKey(serviceName,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>> = ({ signal }) => getDedicatedServerServiceNameOperationOperationId(serviceName,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOperationOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>>
export type GetDedicatedServerServiceNameOperationOperationIdQueryError = unknown


export function useGetDedicatedServerServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError = unknown>(
 serviceName: string,
    operationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError = unknown>(
 serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError = unknown>(
 serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError = unknown>(
 serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOperationOperationIdQueryOptions(serviceName,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of dedicated server options
 */
export const getDedicatedServerServiceNameOption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOptionEnumOVH[]>(
      {url: `/dedicated/server/${serviceName}/option`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOptionQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/option`] as const;
    }

    
export const getGetDedicatedServerServiceNameOptionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>> = ({ signal }) => getDedicatedServerServiceNameOption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>>
export type GetDedicatedServerServiceNameOptionQueryError = unknown


export function useGetDedicatedServerServiceNameOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of dedicated server options
 */

export function useGetDedicatedServerServiceNameOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Release a given option
 */
export const deleteDedicatedServerServiceNameOptionOption = (
    serviceName: string,
    option: DedicatedServerOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/option/${option}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameOptionOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameOptionOption>>, TError,{serviceName: string;option: DedicatedServerOptionEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameOptionOption>>, TError,{serviceName: string;option: DedicatedServerOptionEnumOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameOptionOption>>, {serviceName: string;option: DedicatedServerOptionEnumOVH}> = (props) => {
          const {serviceName,option} = props ?? {};

          return  deleteDedicatedServerServiceNameOptionOption(serviceName,option,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameOptionOptionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameOptionOption>>>
    
    export type DeleteDedicatedServerServiceNameOptionOptionMutationError = unknown

    /**
 * @summary Release a given option
 */
export const useDeleteDedicatedServerServiceNameOptionOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameOptionOption>>, TError,{serviceName: string;option: DedicatedServerOptionEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameOptionOption>>,
        TError,
        {serviceName: string;option: DedicatedServerOptionEnumOVH},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameOptionOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameOptionOption = (
    serviceName: string,
    option: DedicatedServerOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerOptionOVH>(
      {url: `/dedicated/server/${serviceName}/option/${option}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOptionOptionQueryKey = (serviceName: string,
    option: DedicatedServerOptionEnumOVH,) => {
    return [`/dedicated/server/${serviceName}/option/${option}`] as const;
    }

    
export const getGetDedicatedServerServiceNameOptionOptionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError = unknown>(serviceName: string,
    option: DedicatedServerOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOptionOptionQueryKey(serviceName,option);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>> = ({ signal }) => getDedicatedServerServiceNameOptionOption(serviceName,option, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && option), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOptionOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>>
export type GetDedicatedServerServiceNameOptionOptionQueryError = unknown


export function useGetDedicatedServerServiceNameOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: DedicatedServerOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: DedicatedServerOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: DedicatedServerOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameOptionOption<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: DedicatedServerOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOptionOptionQueryOptions(serviceName,option,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the backup storage orderable with your server.
 */
export const getDedicatedServerServiceNameOrderableBackupStorage = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupStorageOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/backupStorage`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableBackupStorageQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/backupStorage`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableBackupStorageQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableBackupStorageQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>> = ({ signal }) => getDedicatedServerServiceNameOrderableBackupStorage(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableBackupStorageQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>>
export type GetDedicatedServerServiceNameOrderableBackupStorageQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableBackupStorage<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableBackupStorage<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableBackupStorage<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the backup storage orderable with your server.
 */

export function useGetDedicatedServerServiceNameOrderableBackupStorage<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBackupStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableBackupStorageQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get bandwidth orderable with your server.
 */
export const getDedicatedServerServiceNameOrderableBandwidth = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBandwidthOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/bandwidth`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableBandwidthQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/bandwidth`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableBandwidthQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableBandwidthQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>> = ({ signal }) => getDedicatedServerServiceNameOrderableBandwidth(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableBandwidthQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>>
export type GetDedicatedServerServiceNameOrderableBandwidthQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableBandwidth<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableBandwidth<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableBandwidth<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get bandwidth orderable with your server.
 */

export function useGetDedicatedServerServiceNameOrderableBandwidth<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableBandwidthQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get vRack bandwidth orderable with your server.
 */
export const getDedicatedServerServiceNameOrderableBandwidthvRack = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBandwidthvRackOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/bandwidthvRack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableBandwidthvRackQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/bandwidthvRack`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableBandwidthvRackQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableBandwidthvRackQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>> = ({ signal }) => getDedicatedServerServiceNameOrderableBandwidthvRack(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableBandwidthvRackQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>>
export type GetDedicatedServerServiceNameOrderableBandwidthvRackQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableBandwidthvRack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableBandwidthvRack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableBandwidthvRack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get vRack bandwidth orderable with your server.
 */

export function useGetDedicatedServerServiceNameOrderableBandwidthvRack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableBandwidthvRack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableBandwidthvRackQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Is this feature orderable with your server
 */
export const getDedicatedServerServiceNameOrderableFeature = (
    serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicated/server/${serviceName}/orderable/feature`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableFeatureQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams,) => {
    return [`/dedicated/server/${serviceName}/orderable/feature`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableFeatureQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableFeatureQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>> = ({ signal }) => getDedicatedServerServiceNameOrderableFeature(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableFeatureQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>>
export type GetDedicatedServerServiceNameOrderableFeatureQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableFeature<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableFeature<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableFeature<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Is this feature orderable with your server
 */

export function useGetDedicatedServerServiceNameOrderableFeature<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameOrderableFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableFeature>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableFeatureQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get IP orderable with your server.
 */
export const getDedicatedServerServiceNameOrderableIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerIpOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/ip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableIpQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/ip`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableIpQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>> = ({ signal }) => getDedicatedServerServiceNameOrderableIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableIpQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>>
export type GetDedicatedServerServiceNameOrderableIpQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get IP orderable with your server.
 */

export function useGetDedicatedServerServiceNameOrderableIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Is a KVM orderable with your server
 */
export const getDedicatedServerServiceNameOrderableKvm = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicated/server/${serviceName}/orderable/kvm`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableKvmQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/kvm`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableKvmQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableKvmQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>> = ({ signal }) => getDedicatedServerServiceNameOrderableKvm(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableKvmQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>>
export type GetDedicatedServerServiceNameOrderableKvmQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Is a KVM orderable with your server
 */

export function useGetDedicatedServerServiceNameOrderableKvm<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableKvmQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Is a KVM express orderable with your server
 */
export const getDedicatedServerServiceNameOrderableKvmExpress = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicated/server/${serviceName}/orderable/kvmExpress`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableKvmExpressQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/kvmExpress`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableKvmExpressQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableKvmExpressQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>> = ({ signal }) => getDedicatedServerServiceNameOrderableKvmExpress(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableKvmExpressQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>>
export type GetDedicatedServerServiceNameOrderableKvmExpressQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableKvmExpress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableKvmExpress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableKvmExpress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Is a KVM express orderable with your server
 */

export function useGetDedicatedServerServiceNameOrderableKvmExpress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableKvmExpress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableKvmExpressQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Is professional use orderable with your server
 */
export const getDedicatedServerServiceNameOrderableProfessionalUse = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/dedicated/server/${serviceName}/orderable/professionalUse`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableProfessionalUseQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/professionalUse`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableProfessionalUseQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableProfessionalUseQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>> = ({ signal }) => getDedicatedServerServiceNameOrderableProfessionalUse(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableProfessionalUseQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>>
export type GetDedicatedServerServiceNameOrderableProfessionalUseQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableProfessionalUse<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableProfessionalUse<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableProfessionalUse<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Is professional use orderable with your server
 */

export function useGetDedicatedServerServiceNameOrderableProfessionalUse<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableProfessionalUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableProfessionalUseQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get support level orderable for this server
 */
export const getDedicatedServerServiceNameOrderableSupportLevel = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerSupportLevelOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/supportLevel`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableSupportLevelQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/supportLevel`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableSupportLevelQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableSupportLevelQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>> = ({ signal }) => getDedicatedServerServiceNameOrderableSupportLevel(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableSupportLevelQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>>
export type GetDedicatedServerServiceNameOrderableSupportLevelQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableSupportLevel<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableSupportLevel<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableSupportLevel<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get support level orderable for this server
 */

export function useGetDedicatedServerServiceNameOrderableSupportLevel<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableSupportLevelQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get orderable traffic with your server.
 */
export const getDedicatedServerServiceNameOrderableTraffic = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTrafficOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/traffic`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableTrafficQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/traffic`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableTrafficQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableTrafficQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>> = ({ signal }) => getDedicatedServerServiceNameOrderableTraffic(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableTrafficQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>>
export type GetDedicatedServerServiceNameOrderableTrafficQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableTraffic<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableTraffic<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableTraffic<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get orderable traffic with your server.
 */

export function useGetDedicatedServerServiceNameOrderableTraffic<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableTrafficQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get USB keys orderable with your server
 */
export const getDedicatedServerServiceNameOrderableUsbKey = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerUsbKeyOrderableDetailsOVH>(
      {url: `/dedicated/server/${serviceName}/orderable/usbKey`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameOrderableUsbKeyQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/orderable/usbKey`] as const;
    }

    
export const getGetDedicatedServerServiceNameOrderableUsbKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameOrderableUsbKeyQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>> = ({ signal }) => getDedicatedServerServiceNameOrderableUsbKey(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameOrderableUsbKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>>
export type GetDedicatedServerServiceNameOrderableUsbKeyQueryError = unknown


export function useGetDedicatedServerServiceNameOrderableUsbKey<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableUsbKey<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameOrderableUsbKey<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get USB keys orderable with your server
 */

export function useGetDedicatedServerServiceNameOrderableUsbKey<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameOrderableUsbKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameOrderableUsbKeyQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Planned interventions for the server
 */
export const getDedicatedServerServiceNamePlannedIntervention = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/server/${serviceName}/plannedIntervention`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNamePlannedInterventionQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/plannedIntervention`] as const;
    }

    
export const getGetDedicatedServerServiceNamePlannedInterventionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNamePlannedInterventionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>> = ({ signal }) => getDedicatedServerServiceNamePlannedIntervention(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNamePlannedInterventionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>>
export type GetDedicatedServerServiceNamePlannedInterventionQueryError = unknown


export function useGetDedicatedServerServiceNamePlannedIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNamePlannedIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNamePlannedIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Planned interventions for the server
 */

export function useGetDedicatedServerServiceNamePlannedIntervention<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedIntervention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNamePlannedInterventionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNamePlannedInterventionInterventionId = (
    serviceName: string,
    interventionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerPlannedInterventionOVH>(
      {url: `/dedicated/server/${serviceName}/plannedIntervention/${interventionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNamePlannedInterventionInterventionIdQueryKey = (serviceName: string,
    interventionId: number,) => {
    return [`/dedicated/server/${serviceName}/plannedIntervention/${interventionId}`] as const;
    }

    
export const getGetDedicatedServerServiceNamePlannedInterventionInterventionIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError = unknown>(serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNamePlannedInterventionInterventionIdQueryKey(serviceName,interventionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>> = ({ signal }) => getDedicatedServerServiceNamePlannedInterventionInterventionId(serviceName,interventionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && interventionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNamePlannedInterventionInterventionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>>
export type GetDedicatedServerServiceNamePlannedInterventionInterventionIdQueryError = unknown


export function useGetDedicatedServerServiceNamePlannedInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNamePlannedInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNamePlannedInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNamePlannedInterventionInterventionId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError = unknown>(
 serviceName: string,
    interventionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNamePlannedInterventionInterventionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNamePlannedInterventionInterventionIdQueryOptions(serviceName,interventionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Hard reboot this server
 */
export const postDedicatedServerServiceNameReboot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/reboot`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameRebootMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameReboot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameReboot>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameReboot>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameReboot(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameRebootMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameReboot>>>
    
    export type PostDedicatedServerServiceNameRebootMutationError = unknown

    /**
 * @summary Hard reboot this server
 */
export const usePostDedicatedServerServiceNameReboot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameReboot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameReboot>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameRebootMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Install or reinstall an operating system on a dedicated server
 */
export const postDedicatedServerServiceNameReinstall = (
    serviceName: string,
    dedicatedServerReinstallOVH: DedicatedServerReinstallOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskResponseOVH>(
      {url: `/dedicated/server/${serviceName}/reinstall`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerReinstallOVH, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameReinstallMutationOptions = <TError = PostDedicatedServerServiceNameReinstall400 | PostDedicatedServerServiceNameReinstall403 | PostDedicatedServerServiceNameReinstall404 | PostDedicatedServerServiceNameReinstall409 | PostDedicatedServerServiceNameReinstall500 | PostDedicatedServerServiceNameReinstall501,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameReinstall>>, TError,{serviceName: string;data: DedicatedServerReinstallOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameReinstall>>, TError,{serviceName: string;data: DedicatedServerReinstallOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameReinstall>>, {serviceName: string;data: DedicatedServerReinstallOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameReinstall(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameReinstallMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameReinstall>>>
    export type PostDedicatedServerServiceNameReinstallMutationBody = DedicatedServerReinstallOVH
    export type PostDedicatedServerServiceNameReinstallMutationError = PostDedicatedServerServiceNameReinstall400 | PostDedicatedServerServiceNameReinstall403 | PostDedicatedServerServiceNameReinstall404 | PostDedicatedServerServiceNameReinstall409 | PostDedicatedServerServiceNameReinstall500 | PostDedicatedServerServiceNameReinstall501

    /**
 * @summary Install or reinstall an operating system on a dedicated server
 */
export const usePostDedicatedServerServiceNameReinstall = <TError = PostDedicatedServerServiceNameReinstall400 | PostDedicatedServerServiceNameReinstall403 | PostDedicatedServerServiceNameReinstall404 | PostDedicatedServerServiceNameReinstall409 | PostDedicatedServerServiceNameReinstall500 | PostDedicatedServerServiceNameReinstall501,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameReinstall>>, TError,{serviceName: string;data: DedicatedServerReinstallOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameReinstall>>,
        TError,
        {serviceName: string;data: DedicatedServerReinstallOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameReinstallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of secondary dns domain name
 */
export const getDedicatedServerServiceNameSecondaryDnsDomains = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsDomains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSecondaryDnsDomainsQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/secondaryDnsDomains`] as const;
    }

    
export const getGetDedicatedServerServiceNameSecondaryDnsDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSecondaryDnsDomainsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>> = ({ signal }) => getDedicatedServerServiceNameSecondaryDnsDomains(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSecondaryDnsDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>>
export type GetDedicatedServerServiceNameSecondaryDnsDomainsQueryError = unknown


export function useGetDedicatedServerServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of secondary dns domain name
 */

export function useGetDedicatedServerServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSecondaryDnsDomainsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a domain on secondary dns
 */
export const postDedicatedServerServiceNameSecondaryDnsDomains = (
    serviceName: string,
    postDedicatedServerServiceNameSecondaryDnsDomainsBody: PostDedicatedServerServiceNameSecondaryDnsDomainsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsDomains`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameSecondaryDnsDomainsBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameSecondaryDnsDomainsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSecondaryDnsDomains>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSecondaryDnsDomainsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSecondaryDnsDomains>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSecondaryDnsDomainsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameSecondaryDnsDomains>>, {serviceName: string;data: PostDedicatedServerServiceNameSecondaryDnsDomainsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameSecondaryDnsDomains(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameSecondaryDnsDomainsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameSecondaryDnsDomains>>>
    export type PostDedicatedServerServiceNameSecondaryDnsDomainsMutationBody = PostDedicatedServerServiceNameSecondaryDnsDomainsBody
    export type PostDedicatedServerServiceNameSecondaryDnsDomainsMutationError = unknown

    /**
 * @summary add a domain on secondary dns
 */
export const usePostDedicatedServerServiceNameSecondaryDnsDomains = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSecondaryDnsDomains>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSecondaryDnsDomainsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameSecondaryDnsDomains>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameSecondaryDnsDomainsBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameSecondaryDnsDomainsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this domain
 */
export const deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsDomains/${domain}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain>>>
    
    export type DeleteDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationError = unknown

    /**
 * @summary remove this domain
 */
export const useDeleteDedicatedServerServiceNameSecondaryDnsDomainsDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameSecondaryDnsDomainsDomain>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameSecondaryDnsDomainsDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSOVH>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsDomains/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/dedicated/server/${serviceName}/secondaryDnsDomains/${domain}`] as const;
    }

    
export const getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>> = ({ signal }) => getDedicatedServerServiceNameSecondaryDnsDomainsDomain(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSecondaryDnsDomainsDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>>
export type GetDedicatedServerServiceNameSecondaryDnsDomainsDomainQueryError = unknown


export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedServerServiceNameSecondaryDnsDomainsDomain = (
    serviceName: string,
    domain: string,
    secondaryDnsSecondaryDNSOVH: NonReadonly<SecondaryDnsSecondaryDNSOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsDomains/${domain}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: secondaryDnsSecondaryDNSOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, {serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}> = (props) => {
          const {serviceName,domain,data} = props ?? {};

          return  putDedicatedServerServiceNameSecondaryDnsDomainsDomain(serviceName,domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameSecondaryDnsDomainsDomain>>>
    export type PutDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationBody = NonReadonly<SecondaryDnsSecondaryDNSOVH>
    export type PutDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedServerServiceNameSecondaryDnsDomainsDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameSecondaryDnsDomainsDomain>>,
        TError,
        {serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameSecondaryDnsDomainsDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary domain name server informations
 */
export const getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSNameServerOVH>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsDomains/${domain}/dnsServer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/dedicated/server/${serviceName}/secondaryDnsDomains/${domain}/dnsServer`] as const;
    }

    
export const getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>> = ({ signal }) => getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>>
export type GetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerQueryError = unknown


export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary domain name server informations
 */

export function useGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary DNS field to temporarily add to your zone so that we can verify you are the owner of this domain
 */
export const getDedicatedServerServiceNameSecondaryDnsNameDomainToken = (
    serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSCheckFieldOVH>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsNameDomainToken`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSecondaryDnsNameDomainTokenQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams,) => {
    return [`/dedicated/server/${serviceName}/secondaryDnsNameDomainToken`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameSecondaryDnsNameDomainTokenQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSecondaryDnsNameDomainTokenQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>> = ({ signal }) => getDedicatedServerServiceNameSecondaryDnsNameDomainToken(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>>
export type GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenQueryError = unknown


export function useGetDedicatedServerServiceNameSecondaryDnsNameDomainToken<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsNameDomainToken<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsNameDomainToken<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary DNS field to temporarily add to your zone so that we can verify you are the owner of this domain
 */

export function useGetDedicatedServerServiceNameSecondaryDnsNameDomainToken<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameDomainToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSecondaryDnsNameDomainTokenQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Secondary nameServer available for your Server
 */
export const getDedicatedServerServiceNameSecondaryDnsNameServerAvailable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSNameServerOVH>(
      {url: `/dedicated/server/${serviceName}/secondaryDnsNameServerAvailable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSecondaryDnsNameServerAvailableQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/secondaryDnsNameServerAvailable`] as const;
    }

    
export const getGetDedicatedServerServiceNameSecondaryDnsNameServerAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSecondaryDnsNameServerAvailableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>> = ({ signal }) => getDedicatedServerServiceNameSecondaryDnsNameServerAvailable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSecondaryDnsNameServerAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>>
export type GetDedicatedServerServiceNameSecondaryDnsNameServerAvailableQueryError = unknown


export function useGetDedicatedServerServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Secondary nameServer available for your Server
 */

export function useGetDedicatedServerServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSecondaryDnsNameServerAvailableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getDedicatedServerServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicated/server/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedServerServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>> = ({ signal }) => getDedicatedServerServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>>
export type GetDedicatedServerServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedServerServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedServerServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedServerServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedServerServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameServiceInfos>>>
    export type PutDedicatedServerServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedServerServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedServerServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve hardware informations about this dedicated server
 */
export const getDedicatedServerServiceNameSpecificationsHardware = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerHardwareSpecificationsOVH>(
      {url: `/dedicated/server/${serviceName}/specifications/hardware`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSpecificationsHardwareQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/specifications/hardware`] as const;
    }

    
export const getGetDedicatedServerServiceNameSpecificationsHardwareQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSpecificationsHardwareQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>> = ({ signal }) => getDedicatedServerServiceNameSpecificationsHardware(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSpecificationsHardwareQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>>
export type GetDedicatedServerServiceNameSpecificationsHardwareQueryError = unknown


export function useGetDedicatedServerServiceNameSpecificationsHardware<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpecificationsHardware<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpecificationsHardware<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve hardware informations about this dedicated server
 */

export function useGetDedicatedServerServiceNameSpecificationsHardware<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSpecificationsHardwareQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve IP capabilities about this dedicated server
 */
export const getDedicatedServerServiceNameSpecificationsIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerIpOrderableOVH>(
      {url: `/dedicated/server/${serviceName}/specifications/ip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSpecificationsIpQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/specifications/ip`] as const;
    }

    
export const getGetDedicatedServerServiceNameSpecificationsIpQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSpecificationsIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>> = ({ signal }) => getDedicatedServerServiceNameSpecificationsIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSpecificationsIpQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>>
export type GetDedicatedServerServiceNameSpecificationsIpQueryError = unknown


export function useGetDedicatedServerServiceNameSpecificationsIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpecificationsIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpecificationsIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve IP capabilities about this dedicated server
 */

export function useGetDedicatedServerServiceNameSpecificationsIp<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSpecificationsIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve network informations about this dedicated server
 */
export const getDedicatedServerServiceNameSpecificationsNetwork = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerNetworkSpecificationsOVH>(
      {url: `/dedicated/server/${serviceName}/specifications/network`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSpecificationsNetworkQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/specifications/network`] as const;
    }

    
export const getGetDedicatedServerServiceNameSpecificationsNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSpecificationsNetworkQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>> = ({ signal }) => getDedicatedServerServiceNameSpecificationsNetwork(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSpecificationsNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>>
export type GetDedicatedServerServiceNameSpecificationsNetworkQueryError = unknown


export function useGetDedicatedServerServiceNameSpecificationsNetwork<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpecificationsNetwork<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpecificationsNetwork<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve network informations about this dedicated server
 */

export function useGetDedicatedServerServiceNameSpecificationsNetwork<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpecificationsNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSpecificationsNetworkQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your own SPLA licenses attached to this dedicated server
 */
export const getDedicatedServerServiceNameSpla = (
    serviceName: string,
    params?: GetDedicatedServerServiceNameSplaParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/server/${serviceName}/spla`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSplaQueryKey = (serviceName: string,
    params?: GetDedicatedServerServiceNameSplaParams,) => {
    return [`/dedicated/server/${serviceName}/spla`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameSplaQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedServerServiceNameSplaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSplaQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>> = ({ signal }) => getDedicatedServerServiceNameSpla(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSplaQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>>
export type GetDedicatedServerServiceNameSplaQueryError = unknown


export function useGetDedicatedServerServiceNameSpla<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedServerServiceNameSplaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpla<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameSplaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSpla<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameSplaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your own SPLA licenses attached to this dedicated server
 */

export function useGetDedicatedServerServiceNameSpla<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameSplaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSpla>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSplaQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new SPLA license
 */
export const postDedicatedServerServiceNameSpla = (
    serviceName: string,
    postDedicatedServerServiceNameSplaBody: PostDedicatedServerServiceNameSplaBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/dedicated/server/${serviceName}/spla`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameSplaBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameSplaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSpla>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSplaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSpla>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSplaBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameSpla>>, {serviceName: string;data: PostDedicatedServerServiceNameSplaBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameSpla(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameSplaMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameSpla>>>
    export type PostDedicatedServerServiceNameSplaMutationBody = PostDedicatedServerServiceNameSplaBody
    export type PostDedicatedServerServiceNameSplaMutationError = unknown

    /**
 * @summary Add a new SPLA license
 */
export const usePostDedicatedServerServiceNameSpla = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSpla>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSplaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameSpla>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameSplaBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameSplaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameSplaId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerSplaOVH>(
      {url: `/dedicated/server/${serviceName}/spla/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameSplaIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/dedicated/server/${serviceName}/spla/${id}`] as const;
    }

    
export const getGetDedicatedServerServiceNameSplaIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameSplaIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>> = ({ signal }) => getDedicatedServerServiceNameSplaId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameSplaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>>
export type GetDedicatedServerServiceNameSplaIdQueryError = unknown


export function useGetDedicatedServerServiceNameSplaId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSplaId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameSplaId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameSplaId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameSplaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameSplaIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedServerServiceNameSplaId = (
    serviceName: string,
    id: number,
    dedicatedServerSplaOVH: NonReadonly<DedicatedServerSplaOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/spla/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerSplaOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameSplaIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameSplaId>>, TError,{serviceName: string;id: number;data: NonReadonly<DedicatedServerSplaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameSplaId>>, TError,{serviceName: string;id: number;data: NonReadonly<DedicatedServerSplaOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameSplaId>>, {serviceName: string;id: number;data: NonReadonly<DedicatedServerSplaOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putDedicatedServerServiceNameSplaId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameSplaIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameSplaId>>>
    export type PutDedicatedServerServiceNameSplaIdMutationBody = NonReadonly<DedicatedServerSplaOVH>
    export type PutDedicatedServerServiceNameSplaIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedServerServiceNameSplaId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameSplaId>>, TError,{serviceName: string;id: number;data: NonReadonly<DedicatedServerSplaOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameSplaId>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<DedicatedServerSplaOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameSplaIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke an SPLA license
 */
export const postDedicatedServerServiceNameSplaIdRevoke = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/spla/${id}/revoke`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameSplaIdRevokeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSplaIdRevoke>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSplaIdRevoke>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameSplaIdRevoke>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postDedicatedServerServiceNameSplaIdRevoke(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameSplaIdRevokeMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameSplaIdRevoke>>>
    
    export type PostDedicatedServerServiceNameSplaIdRevokeMutationError = unknown

    /**
 * @summary Revoke an SPLA license
 */
export const usePostDedicatedServerServiceNameSplaIdRevoke = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSplaIdRevoke>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameSplaIdRevoke>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameSplaIdRevokeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for a cooling module replacement
 */
export const postDedicatedServerServiceNameSupportReplaceCooling = (
    serviceName: string,
    postDedicatedServerServiceNameSupportReplaceCoolingBody: PostDedicatedServerServiceNameSupportReplaceCoolingBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportNewMessageInfoOVH>(
      {url: `/dedicated/server/${serviceName}/support/replace/cooling`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameSupportReplaceCoolingBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameSupportReplaceCoolingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceCooling>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceCoolingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceCooling>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceCoolingBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceCooling>>, {serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceCoolingBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameSupportReplaceCooling(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameSupportReplaceCoolingMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceCooling>>>
    export type PostDedicatedServerServiceNameSupportReplaceCoolingMutationBody = PostDedicatedServerServiceNameSupportReplaceCoolingBody
    export type PostDedicatedServerServiceNameSupportReplaceCoolingMutationError = unknown

    /**
 * @summary Ask for a cooling module replacement
 */
export const usePostDedicatedServerServiceNameSupportReplaceCooling = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceCooling>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceCoolingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceCooling>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceCoolingBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameSupportReplaceCoolingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for a broken HDD replacement
 */
export const postDedicatedServerServiceNameSupportReplaceHardDiskDrive = (
    serviceName: string,
    postDedicatedServerServiceNameSupportReplaceHardDiskDriveBody: PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportNewMessageInfoOVH>(
      {url: `/dedicated/server/${serviceName}/support/replace/hardDiskDrive`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameSupportReplaceHardDiskDriveBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameSupportReplaceHardDiskDriveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceHardDiskDrive>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceHardDiskDrive>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceHardDiskDrive>>, {serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameSupportReplaceHardDiskDrive(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameSupportReplaceHardDiskDriveMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceHardDiskDrive>>>
    export type PostDedicatedServerServiceNameSupportReplaceHardDiskDriveMutationBody = PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody
    export type PostDedicatedServerServiceNameSupportReplaceHardDiskDriveMutationError = unknown

    /**
 * @summary Ask for a broken HDD replacement
 */
export const usePostDedicatedServerServiceNameSupportReplaceHardDiskDrive = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceHardDiskDrive>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceHardDiskDrive>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceHardDiskDriveBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameSupportReplaceHardDiskDriveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for a faulty RAM module replacement
 */
export const postDedicatedServerServiceNameSupportReplaceMemory = (
    serviceName: string,
    postDedicatedServerServiceNameSupportReplaceMemoryBody: PostDedicatedServerServiceNameSupportReplaceMemoryBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportNewMessageInfoOVH>(
      {url: `/dedicated/server/${serviceName}/support/replace/memory`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameSupportReplaceMemoryBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameSupportReplaceMemoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceMemory>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceMemoryBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceMemory>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceMemoryBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceMemory>>, {serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceMemoryBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameSupportReplaceMemory(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameSupportReplaceMemoryMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceMemory>>>
    export type PostDedicatedServerServiceNameSupportReplaceMemoryMutationBody = PostDedicatedServerServiceNameSupportReplaceMemoryBody
    export type PostDedicatedServerServiceNameSupportReplaceMemoryMutationError = unknown

    /**
 * @summary Ask for a faulty RAM module replacement
 */
export const usePostDedicatedServerServiceNameSupportReplaceMemory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceMemory>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceMemoryBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameSupportReplaceMemory>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameSupportReplaceMemoryBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameSupportReplaceMemoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Dedicated server todos
 */
export const getDedicatedServerServiceNameTask = (
    serviceName: string,
    params?: GetDedicatedServerServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/server/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameTaskQueryKey = (serviceName: string,
    params?: GetDedicatedServerServiceNameTaskParams,) => {
    return [`/dedicated/server/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedServerServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>> = ({ signal }) => getDedicatedServerServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>>
export type GetDedicatedServerServiceNameTaskQueryError = unknown


export function useGetDedicatedServerServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedServerServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Dedicated server todos
 */

export function useGetDedicatedServerServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/dedicated/server/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedServerServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>> = ({ signal }) => getDedicatedServerServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>>
export type GetDedicatedServerServiceNameTaskTaskIdQueryError = unknown


export function useGetDedicatedServerServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available time slots for intervention
 */
export const getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots = (
    serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedPlannedInterventionTimeSlotOVH[]>(
      {url: `/dedicated/server/${serviceName}/task/${taskId}/availableTimeslots`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsQueryKey = (serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams,) => {
    return [`/dedicated/server/${serviceName}/task/${taskId}/availableTimeslots`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError = unknown>(serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsQueryKey(serviceName,taskId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>> = ({ signal }) => getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots(serviceName,taskId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>>
export type GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsQueryError = unknown


export function useGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available time slots for intervention
 */

export function useGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    taskId: number,
    params: GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameTaskTaskIdAvailableTimeslots>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsQueryOptions(serviceName,taskId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary this action stop the task progression if it's possible
 */
export const postDedicatedServerServiceNameTaskTaskIdCancel = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/task/${taskId}/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameTaskTaskIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdCancel>>, TError,{serviceName: string;taskId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdCancel>>, TError,{serviceName: string;taskId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdCancel>>, {serviceName: string;taskId: number}> = (props) => {
          const {serviceName,taskId} = props ?? {};

          return  postDedicatedServerServiceNameTaskTaskIdCancel(serviceName,taskId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameTaskTaskIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdCancel>>>
    
    export type PostDedicatedServerServiceNameTaskTaskIdCancelMutationError = unknown

    /**
 * @summary this action stop the task progression if it's possible
 */
export const usePostDedicatedServerServiceNameTaskTaskIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdCancel>>, TError,{serviceName: string;taskId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdCancel>>,
        TError,
        {serviceName: string;taskId: number},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameTaskTaskIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Schedule intervention
 */
export const postDedicatedServerServiceNameTaskTaskIdSchedule = (
    serviceName: string,
    taskId: number,
    postDedicatedServerServiceNameTaskTaskIdScheduleBody: PostDedicatedServerServiceNameTaskTaskIdScheduleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/task/${taskId}/schedule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameTaskTaskIdScheduleBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameTaskTaskIdScheduleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdSchedule>>, TError,{serviceName: string;taskId: number;data: PostDedicatedServerServiceNameTaskTaskIdScheduleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdSchedule>>, TError,{serviceName: string;taskId: number;data: PostDedicatedServerServiceNameTaskTaskIdScheduleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdSchedule>>, {serviceName: string;taskId: number;data: PostDedicatedServerServiceNameTaskTaskIdScheduleBody}> = (props) => {
          const {serviceName,taskId,data} = props ?? {};

          return  postDedicatedServerServiceNameTaskTaskIdSchedule(serviceName,taskId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameTaskTaskIdScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdSchedule>>>
    export type PostDedicatedServerServiceNameTaskTaskIdScheduleMutationBody = PostDedicatedServerServiceNameTaskTaskIdScheduleBody
    export type PostDedicatedServerServiceNameTaskTaskIdScheduleMutationError = unknown

    /**
 * @summary Schedule intervention
 */
export const usePostDedicatedServerServiceNameTaskTaskIdSchedule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdSchedule>>, TError,{serviceName: string;taskId: number;data: PostDedicatedServerServiceNameTaskTaskIdScheduleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameTaskTaskIdSchedule>>,
        TError,
        {serviceName: string;taskId: number;data: PostDedicatedServerServiceNameTaskTaskIdScheduleBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameTaskTaskIdScheduleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postDedicatedServerServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/server/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedServerServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameTerminate>>>
    
    export type PostDedicatedServerServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostDedicatedServerServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all updates that can be performed on a dedicated server
 */
export const getDedicatedServerServiceNameUpdatesAllowed = (
    serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBillingAddonOVH[]>(
      {url: `/dedicated/server/${serviceName}/updates/allowed`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameUpdatesAllowedQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams,) => {
    return [`/dedicated/server/${serviceName}/updates/allowed`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameUpdatesAllowedQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameUpdatesAllowedQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>> = ({ signal }) => getDedicatedServerServiceNameUpdatesAllowed(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameUpdatesAllowedQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>>
export type GetDedicatedServerServiceNameUpdatesAllowedQueryError = unknown


export function useGetDedicatedServerServiceNameUpdatesAllowed<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameUpdatesAllowed<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameUpdatesAllowed<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all updates that can be performed on a dedicated server
 */

export function useGetDedicatedServerServiceNameUpdatesAllowed<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpdatesAllowedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpdatesAllowed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameUpdatesAllowedQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the available schedule for an hardware upgrade
 */
export const getDedicatedServerServiceNameUpgradeAvailableTimeslots = (
    serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerHardwareUpgradeTimeslotOVH[]>(
      {url: `/dedicated/server/${serviceName}/upgrade/availableTimeslots`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameUpgradeAvailableTimeslotsQueryKey = (serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams,) => {
    return [`/dedicated/server/${serviceName}/upgrade/availableTimeslots`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameUpgradeAvailableTimeslotsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError = unknown>(serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameUpgradeAvailableTimeslotsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>> = ({ signal }) => getDedicatedServerServiceNameUpgradeAvailableTimeslots(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameUpgradeAvailableTimeslotsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>>
export type GetDedicatedServerServiceNameUpgradeAvailableTimeslotsQueryError = unknown


export function useGetDedicatedServerServiceNameUpgradeAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameUpgradeAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameUpgradeAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the available schedule for an hardware upgrade
 */

export function useGetDedicatedServerServiceNameUpgradeAvailableTimeslots<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedServerServiceNameUpgradeAvailableTimeslotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameUpgradeAvailableTimeslots>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameUpgradeAvailableTimeslotsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Set the schedule of an hardware upgrade
 */
export const putDedicatedServerServiceNameUpgradeSchedule = (
    serviceName: string,
    dedicatedServerScheduleUpgradePayloadOVH: DedicatedServerScheduleUpgradePayloadOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/server/${serviceName}/upgrade/schedule`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerScheduleUpgradePayloadOVH
    },
      options);
    }
  


export const getPutDedicatedServerServiceNameUpgradeScheduleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameUpgradeSchedule>>, TError,{serviceName: string;data: DedicatedServerScheduleUpgradePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameUpgradeSchedule>>, TError,{serviceName: string;data: DedicatedServerScheduleUpgradePayloadOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedServerServiceNameUpgradeSchedule>>, {serviceName: string;data: DedicatedServerScheduleUpgradePayloadOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedServerServiceNameUpgradeSchedule(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedServerServiceNameUpgradeScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedServerServiceNameUpgradeSchedule>>>
    export type PutDedicatedServerServiceNameUpgradeScheduleMutationBody = DedicatedServerScheduleUpgradePayloadOVH
    export type PutDedicatedServerServiceNameUpgradeScheduleMutationError = unknown

    /**
 * @summary Set the schedule of an hardware upgrade
 */
export const usePutDedicatedServerServiceNameUpgradeSchedule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedServerServiceNameUpgradeSchedule>>, TError,{serviceName: string;data: DedicatedServerScheduleUpgradePayloadOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedServerServiceNameUpgradeSchedule>>,
        TError,
        {serviceName: string;data: DedicatedServerScheduleUpgradePayloadOVH},
        TContext
      > => {

      const mutationOptions = getPutDedicatedServerServiceNameUpgradeScheduleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Virtual MAC addresses of the server
 */
export const getDedicatedServerServiceNameVirtualMac = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/${serviceName}/virtualMac`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVirtualMacQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/virtualMac`] as const;
    }

    
export const getGetDedicatedServerServiceNameVirtualMacQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVirtualMacQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>> = ({ signal }) => getDedicatedServerServiceNameVirtualMac(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVirtualMacQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>>
export type GetDedicatedServerServiceNameVirtualMacQueryError = unknown


export function useGetDedicatedServerServiceNameVirtualMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Virtual MAC addresses of the server
 */

export function useGetDedicatedServerServiceNameVirtualMac<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMac>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVirtualMacQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a virtual mac to an IP address
 */
export const postDedicatedServerServiceNameVirtualMac = (
    serviceName: string,
    postDedicatedServerServiceNameVirtualMacBody: PostDedicatedServerServiceNameVirtualMacBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/virtualMac`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameVirtualMacBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameVirtualMacMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMac>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameVirtualMacBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMac>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameVirtualMacBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMac>>, {serviceName: string;data: PostDedicatedServerServiceNameVirtualMacBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedServerServiceNameVirtualMac(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameVirtualMacMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMac>>>
    export type PostDedicatedServerServiceNameVirtualMacMutationBody = PostDedicatedServerServiceNameVirtualMacBody
    export type PostDedicatedServerServiceNameVirtualMacMutationError = unknown

    /**
 * @summary Add a virtual mac to an IP address
 */
export const usePostDedicatedServerServiceNameVirtualMac = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMac>>, TError,{serviceName: string;data: PostDedicatedServerServiceNameVirtualMacBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMac>>,
        TError,
        {serviceName: string;data: PostDedicatedServerServiceNameVirtualMacBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameVirtualMacMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameVirtualMacMacAddress = (
    serviceName: string,
    macAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerVirtualMacOVH>(
      {url: `/dedicated/server/${serviceName}/virtualMac/${macAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVirtualMacMacAddressQueryKey = (serviceName: string,
    macAddress: string,) => {
    return [`/dedicated/server/${serviceName}/virtualMac/${macAddress}`] as const;
    }

    
export const getGetDedicatedServerServiceNameVirtualMacMacAddressQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError = unknown>(serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVirtualMacMacAddressQueryKey(serviceName,macAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>> = ({ signal }) => getDedicatedServerServiceNameVirtualMacMacAddress(serviceName,macAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && macAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVirtualMacMacAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>>
export type GetDedicatedServerServiceNameVirtualMacMacAddressQueryError = unknown


export function useGetDedicatedServerServiceNameVirtualMacMacAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMacMacAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMacMacAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameVirtualMacMacAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVirtualMacMacAddressQueryOptions(serviceName,macAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of IPs associated to this Virtual MAC
 */
export const getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress = (
    serviceName: string,
    macAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/dedicated/server/${serviceName}/virtualMac/${macAddress}/virtualAddress`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressQueryKey = (serviceName: string,
    macAddress: string,) => {
    return [`/dedicated/server/${serviceName}/virtualMac/${macAddress}/virtualAddress`] as const;
    }

    
export const getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError = unknown>(serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressQueryKey(serviceName,macAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>> = ({ signal }) => getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress(serviceName,macAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && macAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>>
export type GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressQueryError = unknown


export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of IPs associated to this Virtual MAC
 */

export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressQueryOptions(serviceName,macAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an IP to this Virtual MAC
 */
export const postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress = (
    serviceName: string,
    macAddress: string,
    postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody: PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/virtualMac/${macAddress}/virtualAddress`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody, signal
    },
      options);
    }
  


export const getPostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError,{serviceName: string;macAddress: string;data: PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError,{serviceName: string;macAddress: string;data: PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, {serviceName: string;macAddress: string;data: PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody}> = (props) => {
          const {serviceName,macAddress,data} = props ?? {};

          return  postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress(serviceName,macAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>>
    export type PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressMutationBody = PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody
    export type PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressMutationError = unknown

    /**
 * @summary Add an IP to this Virtual MAC
 */
export const usePostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>, TError,{serviceName: string;macAddress: string;data: PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedServerServiceNameVirtualMacMacAddressVirtualAddress>>,
        TError,
        {serviceName: string;macAddress: string;data: PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this ip from virtual mac , if you remove the last linked Ip, virtualmac will be deleted
 */
export const deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress = (
    serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/dedicated/server/${serviceName}/virtualMac/${macAddress}/virtualAddress/${ipAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError,{serviceName: string;macAddress: string;ipAddress: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError,{serviceName: string;macAddress: string;ipAddress: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, {serviceName: string;macAddress: string;ipAddress: Ipv4OVH}> = (props) => {
          const {serviceName,macAddress,ipAddress} = props ?? {};

          return  deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress(serviceName,macAddress,ipAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>>
    
    export type DeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressMutationError = unknown

    /**
 * @summary Remove this ip from virtual mac , if you remove the last linked Ip, virtualmac will be deleted
 */
export const useDeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError,{serviceName: string;macAddress: string;ipAddress: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>,
        TError,
        {serviceName: string;macAddress: string;ipAddress: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress = (
    serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerVirtualMacManagementOVH>(
      {url: `/dedicated/server/${serviceName}/virtualMac/${macAddress}/virtualAddress/${ipAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressQueryKey = (serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH,) => {
    return [`/dedicated/server/${serviceName}/virtualMac/${macAddress}/virtualAddress/${ipAddress}`] as const;
    }

    
export const getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError = unknown>(serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressQueryKey(serviceName,macAddress,ipAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>> = ({ signal }) => getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress(serviceName,macAddress,ipAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && macAddress && ipAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>>
export type GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressQueryError = unknown


export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError = unknown>(
 serviceName: string,
    macAddress: string,
    ipAddress: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressQueryOptions(serviceName,macAddress,ipAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List server VirtualNetworkInterfaces
 */
export const getDedicatedServerServiceNameVirtualNetworkInterface = (
    serviceName: string,
    params?: GetDedicatedServerServiceNameVirtualNetworkInterfaceParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/${serviceName}/virtualNetworkInterface`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVirtualNetworkInterfaceQueryKey = (serviceName: string,
    params?: GetDedicatedServerServiceNameVirtualNetworkInterfaceParams,) => {
    return [`/dedicated/server/${serviceName}/virtualNetworkInterface`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedServerServiceNameVirtualNetworkInterfaceQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedServerServiceNameVirtualNetworkInterfaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVirtualNetworkInterfaceQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>> = ({ signal }) => getDedicatedServerServiceNameVirtualNetworkInterface(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVirtualNetworkInterfaceQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>>
export type GetDedicatedServerServiceNameVirtualNetworkInterfaceQueryError = unknown


export function useGetDedicatedServerServiceNameVirtualNetworkInterface<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedServerServiceNameVirtualNetworkInterfaceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualNetworkInterface<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameVirtualNetworkInterfaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualNetworkInterface<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameVirtualNetworkInterfaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List server VirtualNetworkInterfaces
 */

export function useGetDedicatedServerServiceNameVirtualNetworkInterface<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedServerServiceNameVirtualNetworkInterfaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVirtualNetworkInterfaceQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameVirtualNetworkInterfaceUuid = (
    serviceName: string,
    uuid: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedVirtualNetworkInterfaceVirtualNetworkInterfaceOVH>(
      {url: `/dedicated/server/${serviceName}/virtualNetworkInterface/${uuid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVirtualNetworkInterfaceUuidQueryKey = (serviceName: string,
    uuid: string,) => {
    return [`/dedicated/server/${serviceName}/virtualNetworkInterface/${uuid}`] as const;
    }

    
export const getGetDedicatedServerServiceNameVirtualNetworkInterfaceUuidQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError = unknown>(serviceName: string,
    uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVirtualNetworkInterfaceUuidQueryKey(serviceName,uuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>> = ({ signal }) => getDedicatedServerServiceNameVirtualNetworkInterfaceUuid(serviceName,uuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && uuid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVirtualNetworkInterfaceUuidQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>>
export type GetDedicatedServerServiceNameVirtualNetworkInterfaceUuidQueryError = unknown


export function useGetDedicatedServerServiceNameVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError = unknown>(
 serviceName: string,
    uuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError = unknown>(
 serviceName: string,
    uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError = unknown>(
 serviceName: string,
    uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameVirtualNetworkInterfaceUuid<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError = unknown>(
 serviceName: string,
    uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVirtualNetworkInterfaceUuid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVirtualNetworkInterfaceUuidQueryOptions(serviceName,uuid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Server Vracks (LEGACY)
 */
export const getDedicatedServerServiceNameVrack = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/server/${serviceName}/vrack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVrackQueryKey = (serviceName: string,) => {
    return [`/dedicated/server/${serviceName}/vrack`] as const;
    }

    
export const getGetDedicatedServerServiceNameVrackQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVrackQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>> = ({ signal }) => getDedicatedServerServiceNameVrack(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>>
export type GetDedicatedServerServiceNameVrackQueryError = unknown


export function useGetDedicatedServerServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Server Vracks (LEGACY)
 */

export function useGetDedicatedServerServiceNameVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVrackQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary remove this server from this vrack (LEGACY)
 */
export const deleteDedicatedServerServiceNameVrackVrack = (
    serviceName: string,
    vrack: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/dedicated/server/${serviceName}/vrack/${vrack}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedServerServiceNameVrackVrackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVrackVrack>>, TError,{serviceName: string;vrack: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVrackVrack>>, TError,{serviceName: string;vrack: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVrackVrack>>, {serviceName: string;vrack: string}> = (props) => {
          const {serviceName,vrack} = props ?? {};

          return  deleteDedicatedServerServiceNameVrackVrack(serviceName,vrack,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedServerServiceNameVrackVrackMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVrackVrack>>>
    
    export type DeleteDedicatedServerServiceNameVrackVrackMutationError = unknown

    /**
 * @summary remove this server from this vrack (LEGACY)
 */
export const useDeleteDedicatedServerServiceNameVrackVrack = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVrackVrack>>, TError,{serviceName: string;vrack: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedServerServiceNameVrackVrack>>,
        TError,
        {serviceName: string;vrack: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedServerServiceNameVrackVrackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedServerServiceNameVrackVrack = (
    serviceName: string,
    vrack: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackDedicatedServerOVH>(
      {url: `/dedicated/server/${serviceName}/vrack/${vrack}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedServerServiceNameVrackVrackQueryKey = (serviceName: string,
    vrack: string,) => {
    return [`/dedicated/server/${serviceName}/vrack/${vrack}`] as const;
    }

    
export const getGetDedicatedServerServiceNameVrackVrackQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError = unknown>(serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedServerServiceNameVrackVrackQueryKey(serviceName,vrack);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>> = ({ signal }) => getDedicatedServerServiceNameVrackVrack(serviceName,vrack, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && vrack), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedServerServiceNameVrackVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>>
export type GetDedicatedServerServiceNameVrackVrackQueryError = unknown


export function useGetDedicatedServerServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedServerServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedServerServiceNameVrackVrack<TData = Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError = unknown>(
 serviceName: string,
    vrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedServerServiceNameVrackVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedServerServiceNameVrackVrackQueryOptions(serviceName,vrack,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





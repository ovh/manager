/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CdnAvailableOptionsOVH,
  CdnDomainAddOptionOVH,
  CdnDomainOVH,
  CdnDomainOptionOVH,
  CdnLogsOVH,
  CdnOperationOVH,
  ComplexTypeChartSerieComplexTypeChartTimestampValueOVH,
  DeleteHostingWebServiceNameAttachedDomainDomainParams,
  DeleteHostingWebServiceNameWebsiteIdParams,
  GetHostingWebAttachedDomainParams,
  GetHostingWebAvailableOfferParams,
  GetHostingWebLocalSeoDirectoriesListParams,
  GetHostingWebLocalSeoEmailAvailabilityParams,
  GetHostingWebLocalSeoVisibilityCheckResultParams,
  GetHostingWebModuleListParams,
  GetHostingWebOfferCapabilitiesParams,
  GetHostingWebParams,
  GetHostingWebServiceNameAttachedDomainParams,
  GetHostingWebServiceNameAvailableConfigurationsParams,
  GetHostingWebServiceNameBoostHistoryParams,
  GetHostingWebServiceNameCdnDomainDomainNameLogsParams,
  GetHostingWebServiceNameCronParams,
  GetHostingWebServiceNameDatabaseAvailableVersionParams,
  GetHostingWebServiceNameDatabaseNameDumpParams,
  GetHostingWebServiceNameDatabaseNameStatisticsParams,
  GetHostingWebServiceNameDatabaseParams,
  GetHostingWebServiceNameDumpParams,
  GetHostingWebServiceNameEmailBouncesParams,
  GetHostingWebServiceNameEnvVarParams,
  GetHostingWebServiceNameFreedomParams,
  GetHostingWebServiceNameIndyParams,
  GetHostingWebServiceNameLocalSeoAccountParams,
  GetHostingWebServiceNameLocalSeoEmailAvailabilityParams,
  GetHostingWebServiceNameOvhConfigParams,
  GetHostingWebServiceNameOwnLogsIdUserLogsParams,
  GetHostingWebServiceNameOwnLogsParams,
  GetHostingWebServiceNameRuntimeAvailableTypesParams,
  GetHostingWebServiceNameRuntimeParams,
  GetHostingWebServiceNameStatisticsParams,
  GetHostingWebServiceNameTasksParams,
  GetHostingWebServiceNameUserLogsTokenParams,
  GetHostingWebServiceNameUserParams,
  GetHostingWebServiceNameVcsWebhooksParams,
  GetHostingWebServiceNameWebsiteParams,
  HostingWebAttachedDomainDigStatusOVH,
  HostingWebAttachedDomainOVH,
  HostingWebAttachedDomainPublicAttachedDomainOVH,
  HostingWebBoostHistoryOVH,
  HostingWebCDNOVH,
  HostingWebCapabilitiesOVH,
  HostingWebConfigurationOVH,
  HostingWebConfigurationVersionEnumOVH,
  HostingWebCronOVH,
  HostingWebDatabaseAvailableVersionStructOVH,
  HostingWebDatabaseCopyOVH,
  HostingWebDatabaseCreationDatabaseCapabilitiesOVH,
  HostingWebDatabaseDatabaseCapabilitiesOVH,
  HostingWebDatabaseDatabaseTypeEnumOVH,
  HostingWebDatabaseDumpOVH,
  HostingWebDatabaseOVH,
  HostingWebDumpOVH,
  HostingWebEmailOVH,
  HostingWebEmailoptionOVH,
  HostingWebEnvVarInputOVH,
  HostingWebEnvVarOVH,
  HostingWebExtrasqlpersoOVH,
  HostingWebFreedomOVH,
  HostingWebIndyOVH,
  HostingWebKeyOVH,
  HostingWebLanguagesEnumOVH,
  HostingWebLocalSeoAccountOVH,
  HostingWebLocalSeoDirectoriesListOVH,
  HostingWebLocalSeoEmailAvailabilityOVH,
  HostingWebLocalSeoLocationOVH,
  HostingWebLocalSeoVisibilityCheckResponseOVH,
  HostingWebLocalSeoVisibilityCheckResultResponseOVH,
  HostingWebMailBounceOVH,
  HostingWebMailVolumeHistoryOVH,
  HostingWebMetricsTokenOVH,
  HostingWebModuleListOVH,
  HostingWebModuleOVH,
  HostingWebOfferEnumOVH,
  HostingWebOvhConfigCapabilitiesOVH,
  HostingWebOvhConfigOVH,
  HostingWebOvhConfigRecommendedValuesOVH,
  HostingWebOwnLogsOVH,
  HostingWebPublicTaskOVH,
  HostingWebRequestBoostInputOVH,
  HostingWebRuntimeOVH,
  HostingWebRuntimeTypeEnumOVH,
  HostingWebSSLInputOVH,
  HostingWebSSLOVH,
  HostingWebServiceOVH,
  HostingWebServiceWithIAMOVH,
  HostingWebSslReportOVH,
  HostingWebSupportedVcsEnumOVH,
  HostingWebTaskOVH,
  HostingWebUserLogsOVH,
  HostingWebUserOVH,
  HostingWebVcsWebhooksOVH,
  HostingWebWebsiteCreationCapabilitiesOVH,
  HostingWebWebsiteCreationRequestOVH,
  HostingWebWebsiteDeploymentLogsMessageOVH,
  HostingWebWebsiteDeploymentOVH,
  HostingWebWebsiteDeploymentRequestOVH,
  HostingWebWebsiteOVH,
  HostingWebWebsiteUpdateOVH,
  PostHostingWebLocalSeoVisibilityCheckBody,
  PostHostingWebServiceNameCdnDomainDomainNamePurgeParams,
  PostHostingWebServiceNameCdnServiceInfosUpdateBody,
  PostHostingWebServiceNameDatabaseBody,
  PostHostingWebServiceNameDatabaseNameChangePasswordBody,
  PostHostingWebServiceNameDatabaseNameCopyRestoreBody,
  PostHostingWebServiceNameDatabaseNameDumpBody,
  PostHostingWebServiceNameDatabaseNameImportBody,
  PostHostingWebServiceNameDatabaseNameRequestBody,
  PostHostingWebServiceNameDatabaseNameRestoreBody,
  PostHostingWebServiceNameEmailRequestBody,
  PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody,
  PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody,
  PostHostingWebServiceNameModuleBody,
  PostHostingWebServiceNameModuleIdUpgradeBody,
  PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody,
  PostHostingWebServiceNameOvhConfigIdRollbackBody,
  PostHostingWebServiceNameOwnLogsIdUserLogsBody,
  PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody,
  PostHostingWebServiceNameRequestBody,
  PostHostingWebServiceNameRestoreSnapshotBody,
  PostHostingWebServiceNameRuntimeBody,
  PostHostingWebServiceNameUserBody,
  PostHostingWebServiceNameUserLoginChangePasswordBody,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getHostingWeb = (
    params?: GetHostingWebParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebQueryKey = (params?: GetHostingWebParams,) => {
    return [`/hosting/web`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWeb>>, TError = unknown>(params?: GetHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWeb>>> = ({ signal }) => getHostingWeb(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWeb>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWeb>>>
export type GetHostingWebQueryError = unknown


export function useGetHostingWeb<TData = Awaited<ReturnType<typeof getHostingWeb>>, TError = unknown>(
 params: undefined |  GetHostingWebParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWeb>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWeb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWeb<TData = Awaited<ReturnType<typeof getHostingWeb>>, TError = unknown>(
 params?: GetHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWeb>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWeb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWeb<TData = Awaited<ReturnType<typeof getHostingWeb>>, TError = unknown>(
 params?: GetHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetHostingWeb<TData = Awaited<ReturnType<typeof getHostingWeb>>, TError = unknown>(
 params?: GetHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Find hosting service linked to a domain
 */
export const getHostingWebAttachedDomain = (
    params: GetHostingWebAttachedDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/attachedDomain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebAttachedDomainQueryKey = (params: GetHostingWebAttachedDomainParams,) => {
    return [`/hosting/web/attachedDomain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebAttachedDomainQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError = unknown>(params: GetHostingWebAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebAttachedDomainQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>> = ({ signal }) => getHostingWebAttachedDomain(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebAttachedDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>>
export type GetHostingWebAttachedDomainQueryError = unknown


export function useGetHostingWebAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError = unknown>(
 params: GetHostingWebAttachedDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebAttachedDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError = unknown>(
 params: GetHostingWebAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebAttachedDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError = unknown>(
 params: GetHostingWebAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Find hosting service linked to a domain
 */

export function useGetHostingWebAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError = unknown>(
 params: GetHostingWebAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAttachedDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebAttachedDomainQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available offer
 */
export const getHostingWebAvailableOffer = (
    params: GetHostingWebAvailableOfferParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebOfferEnumOVH[]>(
      {url: `/hosting/web/availableOffer`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebAvailableOfferQueryKey = (params: GetHostingWebAvailableOfferParams,) => {
    return [`/hosting/web/availableOffer`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebAvailableOfferQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError = unknown>(params: GetHostingWebAvailableOfferParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebAvailableOfferQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>> = ({ signal }) => getHostingWebAvailableOffer(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebAvailableOfferQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>>
export type GetHostingWebAvailableOfferQueryError = unknown


export function useGetHostingWebAvailableOffer<TData = Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError = unknown>(
 params: GetHostingWebAvailableOfferParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebAvailableOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebAvailableOffer<TData = Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError = unknown>(
 params: GetHostingWebAvailableOfferParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebAvailableOffer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebAvailableOffer<TData = Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError = unknown>(
 params: GetHostingWebAvailableOfferParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available offer
 */

export function useGetHostingWebAvailableOffer<TData = Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError = unknown>(
 params: GetHostingWebAvailableOfferParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebAvailableOffer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebAvailableOfferQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get current incident
 */
export const getHostingWebIncident = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/incident`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebIncidentQueryKey = () => {
    return [`/hosting/web/incident`] as const;
    }

    
export const getGetHostingWebIncidentQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebIncident>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebIncidentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebIncident>>> = ({ signal }) => getHostingWebIncident(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebIncident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebIncidentQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebIncident>>>
export type GetHostingWebIncidentQueryError = unknown


export function useGetHostingWebIncident<TData = Awaited<ReturnType<typeof getHostingWebIncident>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebIncident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebIncident<TData = Awaited<ReturnType<typeof getHostingWebIncident>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebIncident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebIncident<TData = Awaited<ReturnType<typeof getHostingWebIncident>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get current incident
 */

export function useGetHostingWebIncident<TData = Awaited<ReturnType<typeof getHostingWebIncident>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebIncidentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of directories associated to a local SEO offer and a country
 */
export const getHostingWebLocalSeoDirectoriesList = (
    params: GetHostingWebLocalSeoDirectoriesListParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoDirectoriesListOVH>(
      {url: `/hosting/web/localSeo/directoriesList`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebLocalSeoDirectoriesListQueryKey = (params: GetHostingWebLocalSeoDirectoriesListParams,) => {
    return [`/hosting/web/localSeo/directoriesList`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebLocalSeoDirectoriesListQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError = unknown>(params: GetHostingWebLocalSeoDirectoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebLocalSeoDirectoriesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>> = ({ signal }) => getHostingWebLocalSeoDirectoriesList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebLocalSeoDirectoriesListQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>>
export type GetHostingWebLocalSeoDirectoriesListQueryError = unknown


export function useGetHostingWebLocalSeoDirectoriesList<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError = unknown>(
 params: GetHostingWebLocalSeoDirectoriesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebLocalSeoDirectoriesList<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError = unknown>(
 params: GetHostingWebLocalSeoDirectoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebLocalSeoDirectoriesList<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError = unknown>(
 params: GetHostingWebLocalSeoDirectoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of directories associated to a local SEO offer and a country
 */

export function useGetHostingWebLocalSeoDirectoriesList<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError = unknown>(
 params: GetHostingWebLocalSeoDirectoriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoDirectoriesList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebLocalSeoDirectoriesListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check email availability for a local SEO order
 */
export const getHostingWebLocalSeoEmailAvailability = (
    params: GetHostingWebLocalSeoEmailAvailabilityParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoEmailAvailabilityOVH>(
      {url: `/hosting/web/localSeo/emailAvailability`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebLocalSeoEmailAvailabilityQueryKey = (params: GetHostingWebLocalSeoEmailAvailabilityParams,) => {
    return [`/hosting/web/localSeo/emailAvailability`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebLocalSeoEmailAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError = unknown>(params: GetHostingWebLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebLocalSeoEmailAvailabilityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>> = ({ signal }) => getHostingWebLocalSeoEmailAvailability(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebLocalSeoEmailAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>>
export type GetHostingWebLocalSeoEmailAvailabilityQueryError = unknown


export function useGetHostingWebLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError = unknown>(
 params: GetHostingWebLocalSeoEmailAvailabilityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError = unknown>(
 params: GetHostingWebLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError = unknown>(
 params: GetHostingWebLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check email availability for a local SEO order
 */

export function useGetHostingWebLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError = unknown>(
 params: GetHostingWebLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoEmailAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebLocalSeoEmailAvailabilityQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check visibility of a location
 */
export const postHostingWebLocalSeoVisibilityCheck = (
    postHostingWebLocalSeoVisibilityCheckBody: PostHostingWebLocalSeoVisibilityCheckBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoVisibilityCheckResponseOVH>(
      {url: `/hosting/web/localSeo/visibilityCheck`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebLocalSeoVisibilityCheckBody, signal
    },
      options);
    }
  


export const getPostHostingWebLocalSeoVisibilityCheckMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebLocalSeoVisibilityCheck>>, TError,{data: PostHostingWebLocalSeoVisibilityCheckBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebLocalSeoVisibilityCheck>>, TError,{data: PostHostingWebLocalSeoVisibilityCheckBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebLocalSeoVisibilityCheck>>, {data: PostHostingWebLocalSeoVisibilityCheckBody}> = (props) => {
          const {data} = props ?? {};

          return  postHostingWebLocalSeoVisibilityCheck(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebLocalSeoVisibilityCheckMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebLocalSeoVisibilityCheck>>>
    export type PostHostingWebLocalSeoVisibilityCheckMutationBody = PostHostingWebLocalSeoVisibilityCheckBody
    export type PostHostingWebLocalSeoVisibilityCheckMutationError = unknown

    /**
 * @summary Check visibility of a location
 */
export const usePostHostingWebLocalSeoVisibilityCheck = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebLocalSeoVisibilityCheck>>, TError,{data: PostHostingWebLocalSeoVisibilityCheckBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebLocalSeoVisibilityCheck>>,
        TError,
        {data: PostHostingWebLocalSeoVisibilityCheckBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebLocalSeoVisibilityCheckMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the result of a visibility check
 */
export const getHostingWebLocalSeoVisibilityCheckResult = (
    params: GetHostingWebLocalSeoVisibilityCheckResultParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoVisibilityCheckResultResponseOVH[]>(
      {url: `/hosting/web/localSeo/visibilityCheckResult`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebLocalSeoVisibilityCheckResultQueryKey = (params: GetHostingWebLocalSeoVisibilityCheckResultParams,) => {
    return [`/hosting/web/localSeo/visibilityCheckResult`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebLocalSeoVisibilityCheckResultQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError = unknown>(params: GetHostingWebLocalSeoVisibilityCheckResultParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebLocalSeoVisibilityCheckResultQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>> = ({ signal }) => getHostingWebLocalSeoVisibilityCheckResult(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebLocalSeoVisibilityCheckResultQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>>
export type GetHostingWebLocalSeoVisibilityCheckResultQueryError = unknown


export function useGetHostingWebLocalSeoVisibilityCheckResult<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError = unknown>(
 params: GetHostingWebLocalSeoVisibilityCheckResultParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebLocalSeoVisibilityCheckResult<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError = unknown>(
 params: GetHostingWebLocalSeoVisibilityCheckResultParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebLocalSeoVisibilityCheckResult<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError = unknown>(
 params: GetHostingWebLocalSeoVisibilityCheckResultParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the result of a visibility check
 */

export function useGetHostingWebLocalSeoVisibilityCheckResult<TData = Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError = unknown>(
 params: GetHostingWebLocalSeoVisibilityCheckResultParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebLocalSeoVisibilityCheckResult>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebLocalSeoVisibilityCheckResultQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary IDs of all modules available
 */
export const getHostingWebModuleList = (
    params?: GetHostingWebModuleListParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/moduleList`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebModuleListQueryKey = (params?: GetHostingWebModuleListParams,) => {
    return [`/hosting/web/moduleList`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebModuleListQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebModuleList>>, TError = unknown>(params?: GetHostingWebModuleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebModuleListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebModuleList>>> = ({ signal }) => getHostingWebModuleList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebModuleListQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebModuleList>>>
export type GetHostingWebModuleListQueryError = unknown


export function useGetHostingWebModuleList<TData = Awaited<ReturnType<typeof getHostingWebModuleList>>, TError = unknown>(
 params: undefined |  GetHostingWebModuleListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebModuleList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebModuleList<TData = Awaited<ReturnType<typeof getHostingWebModuleList>>, TError = unknown>(
 params?: GetHostingWebModuleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebModuleList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebModuleList<TData = Awaited<ReturnType<typeof getHostingWebModuleList>>, TError = unknown>(
 params?: GetHostingWebModuleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary IDs of all modules available
 */

export function useGetHostingWebModuleList<TData = Awaited<ReturnType<typeof getHostingWebModuleList>>, TError = unknown>(
 params?: GetHostingWebModuleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebModuleListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebModuleListId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebModuleListOVH>(
      {url: `/hosting/web/moduleList/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebModuleListIdQueryKey = (id: number,) => {
    return [`/hosting/web/moduleList/${id}`] as const;
    }

    
export const getGetHostingWebModuleListIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebModuleListIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebModuleListId>>> = ({ signal }) => getHostingWebModuleListId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebModuleListIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebModuleListId>>>
export type GetHostingWebModuleListIdQueryError = unknown


export function useGetHostingWebModuleListId<TData = Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebModuleListId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebModuleListId<TData = Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebModuleListId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebModuleListId<TData = Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebModuleListId<TData = Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebModuleListId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebModuleListIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get offer capabilities
 */
export const getHostingWebOfferCapabilities = (
    params: GetHostingWebOfferCapabilitiesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebCapabilitiesOVH>(
      {url: `/hosting/web/offerCapabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebOfferCapabilitiesQueryKey = (params: GetHostingWebOfferCapabilitiesParams,) => {
    return [`/hosting/web/offerCapabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebOfferCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError = unknown>(params: GetHostingWebOfferCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebOfferCapabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>> = ({ signal }) => getHostingWebOfferCapabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebOfferCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>>
export type GetHostingWebOfferCapabilitiesQueryError = unknown


export function useGetHostingWebOfferCapabilities<TData = Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError = unknown>(
 params: GetHostingWebOfferCapabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebOfferCapabilities<TData = Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError = unknown>(
 params: GetHostingWebOfferCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebOfferCapabilities<TData = Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError = unknown>(
 params: GetHostingWebOfferCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get offer capabilities
 */

export function useGetHostingWebOfferCapabilities<TData = Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError = unknown>(
 params: GetHostingWebOfferCapabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebOfferCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebOfferCapabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of supported VCS platforms
 */
export const getHostingWebVcsSupported = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebSupportedVcsEnumOVH[]>(
      {url: `/hosting/web/vcs/supported`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebVcsSupportedQueryKey = () => {
    return [`/hosting/web/vcs/supported`] as const;
    }

    
export const getGetHostingWebVcsSupportedQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebVcsSupportedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebVcsSupported>>> = ({ signal }) => getHostingWebVcsSupported(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebVcsSupportedQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebVcsSupported>>>
export type GetHostingWebVcsSupportedQueryError = unknown


export function useGetHostingWebVcsSupported<TData = Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebVcsSupported>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebVcsSupported<TData = Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebVcsSupported>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebVcsSupported<TData = Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of supported VCS platforms
 */

export function useGetHostingWebVcsSupported<TData = Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebVcsSupported>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebVcsSupportedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebServiceWithIAMOVH>(
      {url: `/hosting/web/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}`] as const;
    }

    
export const getGetHostingWebServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceName>>> = ({ signal }) => getHostingWebServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceName>>>
export type GetHostingWebServiceNameQueryError = unknown


export function useGetHostingWebServiceName<TData = Awaited<ReturnType<typeof getHostingWebServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceName<TData = Awaited<ReturnType<typeof getHostingWebServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceName<TData = Awaited<ReturnType<typeof getHostingWebServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceName<TData = Awaited<ReturnType<typeof getHostingWebServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putHostingWebServiceName = (
    serviceName: string,
    hostingWebServiceOVH: NonReadonly<HostingWebServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebServiceOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceName>>, TError,{serviceName: string;data: NonReadonly<HostingWebServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceName>>, TError,{serviceName: string;data: NonReadonly<HostingWebServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceName>>, {serviceName: string;data: NonReadonly<HostingWebServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHostingWebServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceName>>>
    export type PutHostingWebServiceNameMutationBody = NonReadonly<HostingWebServiceOVH>
    export type PutHostingWebServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutHostingWebServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceName>>, TError,{serviceName: string;data: NonReadonly<HostingWebServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<HostingWebServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of attached domains or subdomains attached to your hosting
 */
export const getHostingWebServiceNameAttachedDomain = (
    serviceName: string,
    params?: GetHostingWebServiceNameAttachedDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/attachedDomain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameAttachedDomainQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameAttachedDomainParams,) => {
    return [`/hosting/web/${serviceName}/attachedDomain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameAttachedDomainQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameAttachedDomainQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>> = ({ signal }) => getHostingWebServiceNameAttachedDomain(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameAttachedDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>>
export type GetHostingWebServiceNameAttachedDomainQueryError = unknown


export function useGetHostingWebServiceNameAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameAttachedDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of attached domains or subdomains attached to your hosting
 */

export function useGetHostingWebServiceNameAttachedDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameAttachedDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameAttachedDomainQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an attached domain
 */
export const postHostingWebServiceNameAttachedDomain = (
    serviceName: string,
    hostingWebAttachedDomainOVH: HostingWebAttachedDomainOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/attachedDomain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebAttachedDomainOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameAttachedDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomain>>, TError,{serviceName: string;data: HostingWebAttachedDomainOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomain>>, TError,{serviceName: string;data: HostingWebAttachedDomainOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomain>>, {serviceName: string;data: HostingWebAttachedDomainOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameAttachedDomain(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameAttachedDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomain>>>
    export type PostHostingWebServiceNameAttachedDomainMutationBody = HostingWebAttachedDomainOVH
    export type PostHostingWebServiceNameAttachedDomainMutationError = unknown

    /**
 * @summary Create an attached domain
 */
export const usePostHostingWebServiceNameAttachedDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomain>>, TError,{serviceName: string;data: HostingWebAttachedDomainOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomain>>,
        TError,
        {serviceName: string;data: HostingWebAttachedDomainOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameAttachedDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlink attached domain from hosting
 */
export const deleteHostingWebServiceNameAttachedDomainDomain = (
    serviceName: string,
    domain: string,
    params?: DeleteHostingWebServiceNameAttachedDomainDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/attachedDomain/${domain}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameAttachedDomainDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameAttachedDomainDomain>>, TError,{serviceName: string;domain: string;params?: DeleteHostingWebServiceNameAttachedDomainDomainParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameAttachedDomainDomain>>, TError,{serviceName: string;domain: string;params?: DeleteHostingWebServiceNameAttachedDomainDomainParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameAttachedDomainDomain>>, {serviceName: string;domain: string;params?: DeleteHostingWebServiceNameAttachedDomainDomainParams}> = (props) => {
          const {serviceName,domain,params} = props ?? {};

          return  deleteHostingWebServiceNameAttachedDomainDomain(serviceName,domain,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameAttachedDomainDomainMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameAttachedDomainDomain>>>
    
    export type DeleteHostingWebServiceNameAttachedDomainDomainMutationError = unknown

    /**
 * @summary Unlink attached domain from hosting
 */
export const useDeleteHostingWebServiceNameAttachedDomainDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameAttachedDomainDomain>>, TError,{serviceName: string;domain: string;params?: DeleteHostingWebServiceNameAttachedDomainDomainParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameAttachedDomainDomain>>,
        TError,
        {serviceName: string;domain: string;params?: DeleteHostingWebServiceNameAttachedDomainDomainParams},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameAttachedDomainDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get attachedDomain properties
 */
export const getHostingWebServiceNameAttachedDomainDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebAttachedDomainPublicAttachedDomainOVH>(
      {url: `/hosting/web/${serviceName}/attachedDomain/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameAttachedDomainDomainQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/hosting/web/${serviceName}/attachedDomain/${domain}`] as const;
    }

    
export const getGetHostingWebServiceNameAttachedDomainDomainQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameAttachedDomainDomainQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>> = ({ signal }) => getHostingWebServiceNameAttachedDomainDomain(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameAttachedDomainDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>>
export type GetHostingWebServiceNameAttachedDomainDomainQueryError = unknown


export function useGetHostingWebServiceNameAttachedDomainDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAttachedDomainDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAttachedDomainDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get attachedDomain properties
 */

export function useGetHostingWebServiceNameAttachedDomainDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameAttachedDomainDomainQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update attached domain properties
 */
export const putHostingWebServiceNameAttachedDomainDomain = (
    serviceName: string,
    domain: string,
    hostingWebAttachedDomainOVH: HostingWebAttachedDomainOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/attachedDomain/${domain}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebAttachedDomainOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameAttachedDomainDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameAttachedDomainDomain>>, TError,{serviceName: string;domain: string;data: HostingWebAttachedDomainOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameAttachedDomainDomain>>, TError,{serviceName: string;domain: string;data: HostingWebAttachedDomainOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameAttachedDomainDomain>>, {serviceName: string;domain: string;data: HostingWebAttachedDomainOVH}> = (props) => {
          const {serviceName,domain,data} = props ?? {};

          return  putHostingWebServiceNameAttachedDomainDomain(serviceName,domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameAttachedDomainDomainMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameAttachedDomainDomain>>>
    export type PutHostingWebServiceNameAttachedDomainDomainMutationBody = HostingWebAttachedDomainOVH
    export type PutHostingWebServiceNameAttachedDomainDomainMutationError = unknown

    /**
 * @summary Update attached domain properties
 */
export const usePutHostingWebServiceNameAttachedDomainDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameAttachedDomainDomain>>, TError,{serviceName: string;domain: string;data: HostingWebAttachedDomainOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameAttachedDomainDomain>>,
        TError,
        {serviceName: string;domain: string;data: HostingWebAttachedDomainOVH},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameAttachedDomainDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get attachedDomain DNS status
 */
export const getHostingWebServiceNameAttachedDomainDomainDigStatus = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebAttachedDomainDigStatusOVH>(
      {url: `/hosting/web/${serviceName}/attachedDomain/${domain}/digStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameAttachedDomainDomainDigStatusQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/hosting/web/${serviceName}/attachedDomain/${domain}/digStatus`] as const;
    }

    
export const getGetHostingWebServiceNameAttachedDomainDomainDigStatusQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameAttachedDomainDomainDigStatusQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>> = ({ signal }) => getHostingWebServiceNameAttachedDomainDomainDigStatus(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameAttachedDomainDomainDigStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>>
export type GetHostingWebServiceNameAttachedDomainDomainDigStatusQueryError = unknown


export function useGetHostingWebServiceNameAttachedDomainDomainDigStatus<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAttachedDomainDomainDigStatus<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAttachedDomainDomainDigStatus<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get attachedDomain DNS status
 */

export function useGetHostingWebServiceNameAttachedDomainDomainDigStatus<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAttachedDomainDomainDigStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameAttachedDomainDomainDigStatusQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Purge cache for this attached domain
 */
export const postHostingWebServiceNameAttachedDomainDomainPurgeCache = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/attachedDomain/${domain}/purgeCache`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameAttachedDomainDomainPurgeCacheMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainPurgeCache>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainPurgeCache>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainPurgeCache>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  postHostingWebServiceNameAttachedDomainDomainPurgeCache(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameAttachedDomainDomainPurgeCacheMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainPurgeCache>>>
    
    export type PostHostingWebServiceNameAttachedDomainDomainPurgeCacheMutationError = unknown

    /**
 * @summary Purge cache for this attached domain
 */
export const usePostHostingWebServiceNameAttachedDomainDomainPurgeCache = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainPurgeCache>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainPurgeCache>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameAttachedDomainDomainPurgeCacheMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Restart the virtual host of the attached domain
 */
export const postHostingWebServiceNameAttachedDomainDomainRestart = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/attachedDomain/${domain}/restart`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameAttachedDomainDomainRestartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainRestart>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainRestart>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainRestart>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  postHostingWebServiceNameAttachedDomainDomainRestart(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameAttachedDomainDomainRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainRestart>>>
    
    export type PostHostingWebServiceNameAttachedDomainDomainRestartMutationError = unknown

    /**
 * @summary Restart the virtual host of the attached domain
 */
export const usePostHostingWebServiceNameAttachedDomainDomainRestart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainRestart>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameAttachedDomainDomainRestart>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameAttachedDomainDomainRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List configurations available for current hosting
 */
export const getHostingWebServiceNameAvailableConfigurations = (
    serviceName: string,
    params?: GetHostingWebServiceNameAvailableConfigurationsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebConfigurationVersionEnumOVH[]>(
      {url: `/hosting/web/${serviceName}/availableConfigurations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameAvailableConfigurationsQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameAvailableConfigurationsParams,) => {
    return [`/hosting/web/${serviceName}/availableConfigurations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameAvailableConfigurationsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameAvailableConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameAvailableConfigurationsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>> = ({ signal }) => getHostingWebServiceNameAvailableConfigurations(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameAvailableConfigurationsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>>
export type GetHostingWebServiceNameAvailableConfigurationsQueryError = unknown


export function useGetHostingWebServiceNameAvailableConfigurations<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameAvailableConfigurationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAvailableConfigurations<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameAvailableConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameAvailableConfigurations<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameAvailableConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List configurations available for current hosting
 */

export function useGetHostingWebServiceNameAvailableConfigurations<TData = Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameAvailableConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameAvailableConfigurations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameAvailableConfigurationsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary History of your hosting boost
 */
export const getHostingWebServiceNameBoostHistory = (
    serviceName: string,
    params?: GetHostingWebServiceNameBoostHistoryParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/boostHistory`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameBoostHistoryQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameBoostHistoryParams,) => {
    return [`/hosting/web/${serviceName}/boostHistory`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameBoostHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameBoostHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameBoostHistoryQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>> = ({ signal }) => getHostingWebServiceNameBoostHistory(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameBoostHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>>
export type GetHostingWebServiceNameBoostHistoryQueryError = unknown


export function useGetHostingWebServiceNameBoostHistory<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameBoostHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameBoostHistory<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameBoostHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameBoostHistory<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameBoostHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary History of your hosting boost
 */

export function useGetHostingWebServiceNameBoostHistory<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameBoostHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameBoostHistoryQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Boost history detail
 */
export const getHostingWebServiceNameBoostHistoryDate = (
    serviceName: string,
    date: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebBoostHistoryOVH>(
      {url: `/hosting/web/${serviceName}/boostHistory/${date}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameBoostHistoryDateQueryKey = (serviceName: string,
    date: string,) => {
    return [`/hosting/web/${serviceName}/boostHistory/${date}`] as const;
    }

    
export const getGetHostingWebServiceNameBoostHistoryDateQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError = unknown>(serviceName: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameBoostHistoryDateQueryKey(serviceName,date);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>> = ({ signal }) => getHostingWebServiceNameBoostHistoryDate(serviceName,date, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && date), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameBoostHistoryDateQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>>
export type GetHostingWebServiceNameBoostHistoryDateQueryError = unknown


export function useGetHostingWebServiceNameBoostHistoryDate<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError = unknown>(
 serviceName: string,
    date: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameBoostHistoryDate<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError = unknown>(
 serviceName: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameBoostHistoryDate<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError = unknown>(
 serviceName: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Boost history detail
 */

export function useGetHostingWebServiceNameBoostHistoryDate<TData = Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError = unknown>(
 serviceName: string,
    date: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameBoostHistoryDate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameBoostHistoryDateQueryOptions(serviceName,date,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get cdn by service name
 */
export const getHostingWebServiceNameCdn = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebCDNOVH>(
      {url: `/hosting/web/${serviceName}/cdn`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/cdn`] as const;
    }

    
export const getGetHostingWebServiceNameCdnQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>> = ({ signal }) => getHostingWebServiceNameCdn(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>>
export type GetHostingWebServiceNameCdnQueryError = unknown


export function useGetHostingWebServiceNameCdn<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdn<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdn<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get cdn by service name
 */

export function useGetHostingWebServiceNameCdn<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdn>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available options for a Shared CDN service
 */
export const getHostingWebServiceNameCdnAvailableOptions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnAvailableOptionsOVH[]>(
      {url: `/hosting/web/${serviceName}/cdn/availableOptions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnAvailableOptionsQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/availableOptions`] as const;
    }

    
export const getGetHostingWebServiceNameCdnAvailableOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnAvailableOptionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>> = ({ signal }) => getHostingWebServiceNameCdnAvailableOptions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnAvailableOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>>
export type GetHostingWebServiceNameCdnAvailableOptionsQueryError = unknown


export function useGetHostingWebServiceNameCdnAvailableOptions<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnAvailableOptions<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnAvailableOptions<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available options for a Shared CDN service
 */

export function useGetHostingWebServiceNameCdnAvailableOptions<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnAvailableOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnAvailableOptionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all domains for a Shared CDN service
 */
export const getHostingWebServiceNameCdnDomain = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnDomainOVH[]>(
      {url: `/hosting/web/${serviceName}/cdn/domain`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnDomainQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/domain`] as const;
    }

    
export const getGetHostingWebServiceNameCdnDomainQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnDomainQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>> = ({ signal }) => getHostingWebServiceNameCdnDomain(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>>
export type GetHostingWebServiceNameCdnDomainQueryError = unknown


export function useGetHostingWebServiceNameCdnDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all domains for a Shared CDN service
 */

export function useGetHostingWebServiceNameCdnDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnDomainQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details for a domain on a Shared CDN service
 */
export const getHostingWebServiceNameCdnDomainDomainName = (
    serviceName: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnDomainOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnDomainDomainNameQueryKey = (serviceName: string,
    domainName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/domain/${domainName}`] as const;
    }

    
export const getGetHostingWebServiceNameCdnDomainDomainNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError = unknown>(serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnDomainDomainNameQueryKey(serviceName,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>> = ({ signal }) => getHostingWebServiceNameCdnDomainDomainName(serviceName,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnDomainDomainNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>>
export type GetHostingWebServiceNameCdnDomainDomainNameQueryError = unknown


export function useGetHostingWebServiceNameCdnDomainDomainName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details for a domain on a Shared CDN service
 */

export function useGetHostingWebServiceNameCdnDomainDomainName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnDomainDomainNameQueryOptions(serviceName,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate URL to logs archive
 */
export const getHostingWebServiceNameCdnDomainDomainNameLogs = (
    serviceName: string,
    domainName: string,
    params?: GetHostingWebServiceNameCdnDomainDomainNameLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnLogsOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/logs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnDomainDomainNameLogsQueryKey = (serviceName: string,
    domainName: string,
    params?: GetHostingWebServiceNameCdnDomainDomainNameLogsParams,) => {
    return [`/hosting/web/${serviceName}/cdn/domain/${domainName}/logs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameCdnDomainDomainNameLogsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError = unknown>(serviceName: string,
    domainName: string,
    params?: GetHostingWebServiceNameCdnDomainDomainNameLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnDomainDomainNameLogsQueryKey(serviceName,domainName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>> = ({ signal }) => getHostingWebServiceNameCdnDomainDomainNameLogs(serviceName,domainName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnDomainDomainNameLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>>
export type GetHostingWebServiceNameCdnDomainDomainNameLogsQueryError = unknown


export function useGetHostingWebServiceNameCdnDomainDomainNameLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    params: undefined |  GetHostingWebServiceNameCdnDomainDomainNameLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainNameLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    params?: GetHostingWebServiceNameCdnDomainDomainNameLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainNameLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    params?: GetHostingWebServiceNameCdnDomainDomainNameLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate URL to logs archive
 */

export function useGetHostingWebServiceNameCdnDomainDomainNameLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    params?: GetHostingWebServiceNameCdnDomainDomainNameLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnDomainDomainNameLogsQueryOptions(serviceName,domainName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all options for a domain
 */
export const getHostingWebServiceNameCdnDomainDomainNameOption = (
    serviceName: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnDomainOptionOVH[]>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/option`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnDomainDomainNameOptionQueryKey = (serviceName: string,
    domainName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/domain/${domainName}/option`] as const;
    }

    
export const getGetHostingWebServiceNameCdnDomainDomainNameOptionQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError = unknown>(serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnDomainDomainNameOptionQueryKey(serviceName,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>> = ({ signal }) => getHostingWebServiceNameCdnDomainDomainNameOption(serviceName,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnDomainDomainNameOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>>
export type GetHostingWebServiceNameCdnDomainDomainNameOptionQueryError = unknown


export function useGetHostingWebServiceNameCdnDomainDomainNameOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError = unknown>(
 serviceName: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainNameOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainNameOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all options for a domain
 */

export function useGetHostingWebServiceNameCdnDomainDomainNameOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnDomainDomainNameOptionQueryOptions(serviceName,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an option on a domain
 */
export const postHostingWebServiceNameCdnDomainDomainNameOption = (
    serviceName: string,
    domainName: string,
    cdnDomainAddOptionOVH: CdnDomainAddOptionOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnDomainOptionOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/option`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cdnDomainAddOptionOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameCdnDomainDomainNameOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameOption>>, TError,{serviceName: string;domainName: string;data: CdnDomainAddOptionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameOption>>, TError,{serviceName: string;domainName: string;data: CdnDomainAddOptionOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameOption>>, {serviceName: string;domainName: string;data: CdnDomainAddOptionOVH}> = (props) => {
          const {serviceName,domainName,data} = props ?? {};

          return  postHostingWebServiceNameCdnDomainDomainNameOption(serviceName,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameCdnDomainDomainNameOptionMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameOption>>>
    export type PostHostingWebServiceNameCdnDomainDomainNameOptionMutationBody = CdnDomainAddOptionOVH
    export type PostHostingWebServiceNameCdnDomainDomainNameOptionMutationError = unknown

    /**
 * @summary Add an option on a domain
 */
export const usePostHostingWebServiceNameCdnDomainDomainNameOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameOption>>, TError,{serviceName: string;domainName: string;data: CdnDomainAddOptionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameOption>>,
        TError,
        {serviceName: string;domainName: string;data: CdnDomainAddOptionOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameCdnDomainDomainNameOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove or Reset an option to his default value
 */
export const deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName = (
    serviceName: string,
    domainName: string,
    optionName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/option/${optionName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError,{serviceName: string;domainName: string;optionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError,{serviceName: string;domainName: string;optionName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, {serviceName: string;domainName: string;optionName: string}> = (props) => {
          const {serviceName,domainName,optionName} = props ?? {};

          return  deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName(serviceName,domainName,optionName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>>
    
    export type DeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationError = unknown

    /**
 * @summary Remove or Reset an option to his default value
 */
export const useDeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError,{serviceName: string;domainName: string;optionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>,
        TError,
        {serviceName: string;domainName: string;optionName: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get details for an option on a domain
 */
export const getHostingWebServiceNameCdnDomainDomainNameOptionOptionName = (
    serviceName: string,
    domainName: string,
    optionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnDomainOptionOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/option/${optionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameQueryKey = (serviceName: string,
    domainName: string,
    optionName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/domain/${domainName}/option/${optionName}`] as const;
    }

    
export const getGetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError = unknown>(serviceName: string,
    domainName: string,
    optionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameQueryKey(serviceName,domainName,optionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>> = ({ signal }) => getHostingWebServiceNameCdnDomainDomainNameOptionOptionName(serviceName,domainName,optionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domainName && optionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>>
export type GetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameQueryError = unknown


export function useGetHostingWebServiceNameCdnDomainDomainNameOptionOptionName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    optionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainNameOptionOptionName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    optionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnDomainDomainNameOptionOptionName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    optionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details for an option on a domain
 */

export function useGetHostingWebServiceNameCdnDomainDomainNameOptionOptionName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError = unknown>(
 serviceName: string,
    domainName: string,
    optionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameQueryOptions(serviceName,domainName,optionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an option on a domain
 */
export const putHostingWebServiceNameCdnDomainDomainNameOptionOptionName = (
    serviceName: string,
    domainName: string,
    optionName: string,
    cdnDomainOptionOVH: NonReadonly<CdnDomainOptionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<CdnDomainOptionOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/option/${optionName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: cdnDomainOptionOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError,{serviceName: string;domainName: string;optionName: string;data: NonReadonly<CdnDomainOptionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError,{serviceName: string;domainName: string;optionName: string;data: NonReadonly<CdnDomainOptionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, {serviceName: string;domainName: string;optionName: string;data: NonReadonly<CdnDomainOptionOVH>}> = (props) => {
          const {serviceName,domainName,optionName,data} = props ?? {};

          return  putHostingWebServiceNameCdnDomainDomainNameOptionOptionName(serviceName,domainName,optionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>>
    export type PutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationBody = NonReadonly<CdnDomainOptionOVH>
    export type PutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationError = unknown

    /**
 * @summary Update an option on a domain
 */
export const usePutHostingWebServiceNameCdnDomainDomainNameOptionOptionName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>, TError,{serviceName: string;domainName: string;optionName: string;data: NonReadonly<CdnDomainOptionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameCdnDomainDomainNameOptionOptionName>>,
        TError,
        {serviceName: string;domainName: string;optionName: string;data: NonReadonly<CdnDomainOptionOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Flush cache content on CDN for a domain
 */
export const postHostingWebServiceNameCdnDomainDomainNamePurge = (
    serviceName: string,
    domainName: string,
    params?: PostHostingWebServiceNameCdnDomainDomainNamePurgeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnOperationOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/purge`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameCdnDomainDomainNamePurgeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNamePurge>>, TError,{serviceName: string;domainName: string;params?: PostHostingWebServiceNameCdnDomainDomainNamePurgeParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNamePurge>>, TError,{serviceName: string;domainName: string;params?: PostHostingWebServiceNameCdnDomainDomainNamePurgeParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNamePurge>>, {serviceName: string;domainName: string;params?: PostHostingWebServiceNameCdnDomainDomainNamePurgeParams}> = (props) => {
          const {serviceName,domainName,params} = props ?? {};

          return  postHostingWebServiceNameCdnDomainDomainNamePurge(serviceName,domainName,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameCdnDomainDomainNamePurgeMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNamePurge>>>
    
    export type PostHostingWebServiceNameCdnDomainDomainNamePurgeMutationError = unknown

    /**
 * @summary Flush cache content on CDN for a domain
 */
export const usePostHostingWebServiceNameCdnDomainDomainNamePurge = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNamePurge>>, TError,{serviceName: string;domainName: string;params?: PostHostingWebServiceNameCdnDomainDomainNamePurgeParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNamePurge>>,
        TError,
        {serviceName: string;domainName: string;params?: PostHostingWebServiceNameCdnDomainDomainNamePurgeParams},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameCdnDomainDomainNamePurgeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Trigger a refresh for a domain
 */
export const postHostingWebServiceNameCdnDomainDomainNameRefresh = (
    serviceName: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnOperationOVH>(
      {url: `/hosting/web/${serviceName}/cdn/domain/${domainName}/refresh`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameCdnDomainDomainNameRefreshMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameRefresh>>, TError,{serviceName: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameRefresh>>, TError,{serviceName: string;domainName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameRefresh>>, {serviceName: string;domainName: string}> = (props) => {
          const {serviceName,domainName} = props ?? {};

          return  postHostingWebServiceNameCdnDomainDomainNameRefresh(serviceName,domainName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameCdnDomainDomainNameRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameRefresh>>>
    
    export type PostHostingWebServiceNameCdnDomainDomainNameRefreshMutationError = unknown

    /**
 * @summary Trigger a refresh for a domain
 */
export const usePostHostingWebServiceNameCdnDomainDomainNameRefresh = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameRefresh>>, TError,{serviceName: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameCdnDomainDomainNameRefresh>>,
        TError,
        {serviceName: string;domainName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameCdnDomainDomainNameRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all operations for a Shared CDN service
 */
export const getHostingWebServiceNameCdnOperation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnOperationOVH[]>(
      {url: `/hosting/web/${serviceName}/cdn/operation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnOperationQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/operation`] as const;
    }

    
export const getGetHostingWebServiceNameCdnOperationQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnOperationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>> = ({ signal }) => getHostingWebServiceNameCdnOperation(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>>
export type GetHostingWebServiceNameCdnOperationQueryError = unknown


export function useGetHostingWebServiceNameCdnOperation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnOperation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnOperation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all operations for a Shared CDN service
 */

export function useGetHostingWebServiceNameCdnOperation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnOperationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details for a Shared CDN operation
 */
export const getHostingWebServiceNameCdnOperationId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CdnOperationOVH>(
      {url: `/hosting/web/${serviceName}/cdn/operation/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnOperationIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/cdn/operation/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameCdnOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnOperationIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>> = ({ signal }) => getHostingWebServiceNameCdnOperationId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>>
export type GetHostingWebServiceNameCdnOperationIdQueryError = unknown


export function useGetHostingWebServiceNameCdnOperationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnOperationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnOperationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details for a Shared CDN operation
 */

export function useGetHostingWebServiceNameCdnOperationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnOperationIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameCdnServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/hosting/web/${serviceName}/cdn/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCdnServiceInfosQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/cdn/serviceInfos`] as const;
    }

    
export const getGetHostingWebServiceNameCdnServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCdnServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>> = ({ signal }) => getHostingWebServiceNameCdnServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCdnServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>>
export type GetHostingWebServiceNameCdnServiceInfosQueryError = unknown


export function useGetHostingWebServiceNameCdnServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCdnServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameCdnServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCdnServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCdnServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const postHostingWebServiceNameCdnServiceInfosUpdate = (
    serviceName: string,
    postHostingWebServiceNameCdnServiceInfosUpdateBody: PostHostingWebServiceNameCdnServiceInfosUpdateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/cdn/serviceInfosUpdate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameCdnServiceInfosUpdateBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameCdnServiceInfosUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnServiceInfosUpdate>>, TError,{serviceName: string;data: PostHostingWebServiceNameCdnServiceInfosUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnServiceInfosUpdate>>, TError,{serviceName: string;data: PostHostingWebServiceNameCdnServiceInfosUpdateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameCdnServiceInfosUpdate>>, {serviceName: string;data: PostHostingWebServiceNameCdnServiceInfosUpdateBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameCdnServiceInfosUpdate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameCdnServiceInfosUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameCdnServiceInfosUpdate>>>
    export type PostHostingWebServiceNameCdnServiceInfosUpdateMutationBody = PostHostingWebServiceNameCdnServiceInfosUpdateBody
    export type PostHostingWebServiceNameCdnServiceInfosUpdateMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePostHostingWebServiceNameCdnServiceInfosUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnServiceInfosUpdate>>, TError,{serviceName: string;data: PostHostingWebServiceNameCdnServiceInfosUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameCdnServiceInfosUpdate>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameCdnServiceInfosUpdateBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameCdnServiceInfosUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Terminate your cdn sub service
 */
export const postHostingWebServiceNameCdnTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/cdn/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameCdnTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameCdnTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingWebServiceNameCdnTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameCdnTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameCdnTerminate>>>
    
    export type PostHostingWebServiceNameCdnTerminateMutationError = unknown

    /**
 * @summary Terminate your cdn sub service
 */
export const usePostHostingWebServiceNameCdnTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCdnTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameCdnTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameCdnTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postHostingWebServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameChangeContact>>>
    export type PostHostingWebServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostHostingWebServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostHostingWebServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameConfiguration = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebConfigurationOVH>(
      {url: `/hosting/web/${serviceName}/configuration`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameConfigurationQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/configuration`] as const;
    }

    
export const getGetHostingWebServiceNameConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameConfigurationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>> = ({ signal }) => getHostingWebServiceNameConfiguration(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>>
export type GetHostingWebServiceNameConfigurationQueryError = unknown


export function useGetHostingWebServiceNameConfiguration<TData = Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameConfiguration<TData = Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameConfiguration<TData = Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameConfiguration<TData = Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameConfigurationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putHostingWebServiceNameConfiguration = (
    serviceName: string,
    hostingWebConfigurationOVH: NonReadonly<HostingWebConfigurationOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/configuration`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebConfigurationOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameConfigurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameConfiguration>>, TError,{serviceName: string;data: NonReadonly<HostingWebConfigurationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameConfiguration>>, TError,{serviceName: string;data: NonReadonly<HostingWebConfigurationOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameConfiguration>>, {serviceName: string;data: NonReadonly<HostingWebConfigurationOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHostingWebServiceNameConfiguration(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameConfiguration>>>
    export type PutHostingWebServiceNameConfigurationMutationBody = NonReadonly<HostingWebConfigurationOVH>
    export type PutHostingWebServiceNameConfigurationMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutHostingWebServiceNameConfiguration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameConfiguration>>, TError,{serviceName: string;data: NonReadonly<HostingWebConfigurationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameConfiguration>>,
        TError,
        {serviceName: string;data: NonReadonly<HostingWebConfigurationOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postHostingWebServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameConfirmTermination>>>
    export type PostHostingWebServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostHostingWebServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostHostingWebServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Crons on your webhosting
 */
export const getHostingWebServiceNameCron = (
    serviceName: string,
    params?: GetHostingWebServiceNameCronParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/cron`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCronQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameCronParams,) => {
    return [`/hosting/web/${serviceName}/cron`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameCronQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameCronParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCronQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>> = ({ signal }) => getHostingWebServiceNameCron(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCronQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>>
export type GetHostingWebServiceNameCronQueryError = unknown


export function useGetHostingWebServiceNameCron<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameCronParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCron>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCron<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameCronParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCron>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCron<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameCronParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Crons on your webhosting
 */

export function useGetHostingWebServiceNameCron<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameCronParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCron>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCronQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new cron
 */
export const postHostingWebServiceNameCron = (
    serviceName: string,
    hostingWebCronOVH: NonReadonly<HostingWebCronOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/cron`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebCronOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameCronMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCron>>, TError,{serviceName: string;data: NonReadonly<HostingWebCronOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCron>>, TError,{serviceName: string;data: NonReadonly<HostingWebCronOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameCron>>, {serviceName: string;data: NonReadonly<HostingWebCronOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameCron(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameCronMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameCron>>>
    export type PostHostingWebServiceNameCronMutationBody = NonReadonly<HostingWebCronOVH>
    export type PostHostingWebServiceNameCronMutationError = unknown

    /**
 * @summary Create new cron
 */
export const usePostHostingWebServiceNameCron = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameCron>>, TError,{serviceName: string;data: NonReadonly<HostingWebCronOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameCron>>,
        TError,
        {serviceName: string;data: NonReadonly<HostingWebCronOVH>},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameCronMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete cron
 */
export const deleteHostingWebServiceNameCronId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/cron/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameCronIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameCronId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameCronId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameCronId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteHostingWebServiceNameCronId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameCronIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameCronId>>>
    
    export type DeleteHostingWebServiceNameCronIdMutationError = unknown

    /**
 * @summary Delete cron
 */
export const useDeleteHostingWebServiceNameCronId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameCronId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameCronId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameCronIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get cron by id
 */
export const getHostingWebServiceNameCronId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebCronOVH>(
      {url: `/hosting/web/${serviceName}/cron/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCronIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/cron/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameCronIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCronIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>> = ({ signal }) => getHostingWebServiceNameCronId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCronIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>>
export type GetHostingWebServiceNameCronIdQueryError = unknown


export function useGetHostingWebServiceNameCronId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCronId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCronId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get cron by id
 */

export function useGetHostingWebServiceNameCronId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCronIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update cron
 */
export const putHostingWebServiceNameCronId = (
    serviceName: string,
    id: number,
    hostingWebCronOVH: NonReadonly<HostingWebCronOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/cron/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebCronOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameCronIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameCronId>>, TError,{serviceName: string;id: number;data: NonReadonly<HostingWebCronOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameCronId>>, TError,{serviceName: string;id: number;data: NonReadonly<HostingWebCronOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameCronId>>, {serviceName: string;id: number;data: NonReadonly<HostingWebCronOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putHostingWebServiceNameCronId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameCronIdMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameCronId>>>
    export type PutHostingWebServiceNameCronIdMutationBody = NonReadonly<HostingWebCronOVH>
    export type PutHostingWebServiceNameCronIdMutationError = unknown

    /**
 * @summary Update cron
 */
export const usePutHostingWebServiceNameCronId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameCronId>>, TError,{serviceName: string;id: number;data: NonReadonly<HostingWebCronOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameCronId>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<HostingWebCronOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameCronIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the list of supported languages by web domain
 */
export const getHostingWebServiceNameCronAvailableLanguage = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLanguagesEnumOVH[]>(
      {url: `/hosting/web/${serviceName}/cronAvailableLanguage`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameCronAvailableLanguageQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/cronAvailableLanguage`] as const;
    }

    
export const getGetHostingWebServiceNameCronAvailableLanguageQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameCronAvailableLanguageQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>> = ({ signal }) => getHostingWebServiceNameCronAvailableLanguage(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameCronAvailableLanguageQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>>
export type GetHostingWebServiceNameCronAvailableLanguageQueryError = unknown


export function useGetHostingWebServiceNameCronAvailableLanguage<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCronAvailableLanguage<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameCronAvailableLanguage<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of supported languages by web domain
 */

export function useGetHostingWebServiceNameCronAvailableLanguage<TData = Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameCronAvailableLanguage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameCronAvailableLanguageQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Databases linked to your hosting
 */
export const getHostingWebServiceNameDatabase = (
    serviceName: string,
    params?: GetHostingWebServiceNameDatabaseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/database`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameDatabaseParams,) => {
    return [`/hosting/web/${serviceName}/database`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>> = ({ signal }) => getHostingWebServiceNameDatabase(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>>
export type GetHostingWebServiceNameDatabaseQueryError = unknown


export function useGetHostingWebServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameDatabaseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Databases linked to your hosting
 */

export function useGetHostingWebServiceNameDatabase<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameDatabaseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabase>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Install new database
 */
export const postHostingWebServiceNameDatabase = (
    serviceName: string,
    postHostingWebServiceNameDatabaseBody: PostHostingWebServiceNameDatabaseBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabase>>, TError,{serviceName: string;data: PostHostingWebServiceNameDatabaseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabase>>, TError,{serviceName: string;data: PostHostingWebServiceNameDatabaseBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabase>>, {serviceName: string;data: PostHostingWebServiceNameDatabaseBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameDatabase(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabase>>>
    export type PostHostingWebServiceNameDatabaseMutationBody = PostHostingWebServiceNameDatabaseBody
    export type PostHostingWebServiceNameDatabaseMutationError = unknown

    /**
 * @summary Install new database
 */
export const usePostHostingWebServiceNameDatabase = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabase>>, TError,{serviceName: string;data: PostHostingWebServiceNameDatabaseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabase>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameDatabaseBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete database
 */
export const deleteHostingWebServiceNameDatabaseName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameDatabaseNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseName>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseName>>, TError,{serviceName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseName>>, {serviceName: string;name: string}> = (props) => {
          const {serviceName,name} = props ?? {};

          return  deleteHostingWebServiceNameDatabaseName(serviceName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameDatabaseNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseName>>>
    
    export type DeleteHostingWebServiceNameDatabaseNameMutationError = unknown

    /**
 * @summary Delete database
 */
export const useDeleteHostingWebServiceNameDatabaseName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseName>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseName>>,
        TError,
        {serviceName: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameDatabaseNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameDatabaseName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/web/${serviceName}/database/${name}`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>> = ({ signal }) => getHostingWebServiceNameDatabaseName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>>
export type GetHostingWebServiceNameDatabaseNameQueryError = unknown


export function useGetHostingWebServiceNameDatabaseName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameDatabaseName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available capabilities for this database
 */
export const getHostingWebServiceNameDatabaseNameCapabilities = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseDatabaseCapabilitiesOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/capabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameCapabilitiesQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/web/${serviceName}/database/${name}/capabilities`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameCapabilitiesQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>> = ({ signal }) => getHostingWebServiceNameDatabaseNameCapabilities(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>>
export type GetHostingWebServiceNameDatabaseNameCapabilitiesQueryError = unknown


export function useGetHostingWebServiceNameDatabaseNameCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available capabilities for this database
 */

export function useGetHostingWebServiceNameDatabaseNameCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameCapabilitiesQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a password change
 */
export const postHostingWebServiceNameDatabaseNameChangePassword = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameDatabaseNameChangePasswordBody: PostHostingWebServiceNameDatabaseNameChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseNameChangePasswordBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameChangePassword>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameChangePassword>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameChangePassword>>, {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameChangePasswordBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameChangePassword(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameChangePassword>>>
    export type PostHostingWebServiceNameDatabaseNameChangePasswordMutationBody = PostHostingWebServiceNameDatabaseNameChangePasswordBody
    export type PostHostingWebServiceNameDatabaseNameChangePasswordMutationError = unknown

    /**
 * @summary Request a password change
 */
export const usePostHostingWebServiceNameDatabaseNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameChangePassword>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameChangePassword>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Copies available for your databases
 */
export const getHostingWebServiceNameDatabaseNameCopy = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/database/${name}/copy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameCopyQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/web/${serviceName}/database/${name}/copy`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameCopyQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameCopyQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>> = ({ signal }) => getHostingWebServiceNameDatabaseNameCopy(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameCopyQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>>
export type GetHostingWebServiceNameDatabaseNameCopyQueryError = unknown


export function useGetHostingWebServiceNameDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Copies available for your databases
 */

export function useGetHostingWebServiceNameDatabaseNameCopy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameCopyQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new copy of your database
 */
export const postHostingWebServiceNameDatabaseNameCopy = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseCopyOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/copy`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameCopyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopy>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopy>>, TError,{serviceName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopy>>, {serviceName: string;name: string}> = (props) => {
          const {serviceName,name} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameCopy(serviceName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameCopyMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopy>>>
    
    export type PostHostingWebServiceNameDatabaseNameCopyMutationError = unknown

    /**
 * @summary Create a new copy of your database
 */
export const usePostHostingWebServiceNameDatabaseNameCopy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopy>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopy>>,
        TError,
        {serviceName: string;name: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameCopyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the database copy
 */
export const deleteHostingWebServiceNameDatabaseNameCopyId = (
    serviceName: string,
    name: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/database/${name}/copy/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameDatabaseNameCopyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameCopyId>>, TError,{serviceName: string;name: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameCopyId>>, TError,{serviceName: string;name: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameCopyId>>, {serviceName: string;name: string;id: string}> = (props) => {
          const {serviceName,name,id} = props ?? {};

          return  deleteHostingWebServiceNameDatabaseNameCopyId(serviceName,name,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameDatabaseNameCopyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameCopyId>>>
    
    export type DeleteHostingWebServiceNameDatabaseNameCopyIdMutationError = unknown

    /**
 * @summary Delete the database copy
 */
export const useDeleteHostingWebServiceNameDatabaseNameCopyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameCopyId>>, TError,{serviceName: string;name: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameCopyId>>,
        TError,
        {serviceName: string;name: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameDatabaseNameCopyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameDatabaseNameCopyId = (
    serviceName: string,
    name: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseCopyOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/copy/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameCopyIdQueryKey = (serviceName: string,
    name: string,
    id: string,) => {
    return [`/hosting/web/${serviceName}/database/${name}/copy/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameCopyIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError = unknown>(serviceName: string,
    name: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameCopyIdQueryKey(serviceName,name,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>> = ({ signal }) => getHostingWebServiceNameDatabaseNameCopyId(serviceName,name,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameCopyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>>
export type GetHostingWebServiceNameDatabaseNameCopyIdQueryError = unknown


export function useGetHostingWebServiceNameDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameDatabaseNameCopyId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameCopyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameCopyIdQueryOptions(serviceName,name,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the copy restore in this database
 */
export const postHostingWebServiceNameDatabaseNameCopyRestore = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameDatabaseNameCopyRestoreBody: PostHostingWebServiceNameDatabaseNameCopyRestoreBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/copyRestore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseNameCopyRestoreBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameCopyRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopyRestore>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameCopyRestoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopyRestore>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameCopyRestoreBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopyRestore>>, {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameCopyRestoreBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameCopyRestore(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameCopyRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopyRestore>>>
    export type PostHostingWebServiceNameDatabaseNameCopyRestoreMutationBody = PostHostingWebServiceNameDatabaseNameCopyRestoreBody
    export type PostHostingWebServiceNameDatabaseNameCopyRestoreMutationError = unknown

    /**
 * @summary Request the copy restore in this database
 */
export const usePostHostingWebServiceNameDatabaseNameCopyRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopyRestore>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameCopyRestoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameCopyRestore>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameCopyRestoreBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameCopyRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Dump available for your databases
 */
export const getHostingWebServiceNameDatabaseNameDump = (
    serviceName: string,
    name: string,
    params?: GetHostingWebServiceNameDatabaseNameDumpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/database/${name}/dump`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameDumpQueryKey = (serviceName: string,
    name: string,
    params?: GetHostingWebServiceNameDatabaseNameDumpParams,) => {
    return [`/hosting/web/${serviceName}/database/${name}/dump`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameDumpQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError = unknown>(serviceName: string,
    name: string,
    params?: GetHostingWebServiceNameDatabaseNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameDumpQueryKey(serviceName,name,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>> = ({ signal }) => getHostingWebServiceNameDatabaseNameDump(serviceName,name,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameDumpQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>>
export type GetHostingWebServiceNameDatabaseNameDumpQueryError = unknown


export function useGetHostingWebServiceNameDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    name: string,
    params: undefined |  GetHostingWebServiceNameDatabaseNameDumpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    name: string,
    params?: GetHostingWebServiceNameDatabaseNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    name: string,
    params?: GetHostingWebServiceNameDatabaseNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Dump available for your databases
 */

export function useGetHostingWebServiceNameDatabaseNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError = unknown>(
 serviceName: string,
    name: string,
    params?: GetHostingWebServiceNameDatabaseNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameDumpQueryOptions(serviceName,name,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the dump from your database
 */
export const postHostingWebServiceNameDatabaseNameDump = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameDatabaseNameDumpBody: PostHostingWebServiceNameDatabaseNameDumpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/dump`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseNameDumpBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameDumpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDump>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameDumpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDump>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameDumpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDump>>, {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameDumpBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameDump(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameDumpMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDump>>>
    export type PostHostingWebServiceNameDatabaseNameDumpMutationBody = PostHostingWebServiceNameDatabaseNameDumpBody
    export type PostHostingWebServiceNameDatabaseNameDumpMutationError = unknown

    /**
 * @summary Request the dump from your database
 */
export const usePostHostingWebServiceNameDatabaseNameDump = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDump>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameDumpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDump>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameDumpBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameDumpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete dump before expiration date
 */
export const deleteHostingWebServiceNameDatabaseNameDumpId = (
    serviceName: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/dump/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameDatabaseNameDumpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameDumpId>>, TError,{serviceName: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameDumpId>>, TError,{serviceName: string;name: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameDumpId>>, {serviceName: string;name: string;id: number}> = (props) => {
          const {serviceName,name,id} = props ?? {};

          return  deleteHostingWebServiceNameDatabaseNameDumpId(serviceName,name,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameDatabaseNameDumpIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameDumpId>>>
    
    export type DeleteHostingWebServiceNameDatabaseNameDumpIdMutationError = unknown

    /**
 * @summary Delete dump before expiration date
 */
export const useDeleteHostingWebServiceNameDatabaseNameDumpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameDumpId>>, TError,{serviceName: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameDatabaseNameDumpId>>,
        TError,
        {serviceName: string;name: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameDatabaseNameDumpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameDatabaseNameDumpId = (
    serviceName: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseDumpOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/dump/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameDumpIdQueryKey = (serviceName: string,
    name: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/database/${name}/dump/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameDumpIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError = unknown>(serviceName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameDumpIdQueryKey(serviceName,name,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>> = ({ signal }) => getHostingWebServiceNameDatabaseNameDumpId(serviceName,name,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameDumpIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>>
export type GetHostingWebServiceNameDatabaseNameDumpIdQueryError = unknown


export function useGetHostingWebServiceNameDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameDatabaseNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError = unknown>(
 serviceName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameDumpIdQueryOptions(serviceName,name,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the restore from this dump
 */
export const postHostingWebServiceNameDatabaseNameDumpIdRestore = (
    serviceName: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/dump/${id}/restore`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameDumpIdRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDumpIdRestore>>, TError,{serviceName: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDumpIdRestore>>, TError,{serviceName: string;name: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDumpIdRestore>>, {serviceName: string;name: string;id: number}> = (props) => {
          const {serviceName,name,id} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameDumpIdRestore(serviceName,name,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameDumpIdRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDumpIdRestore>>>
    
    export type PostHostingWebServiceNameDatabaseNameDumpIdRestoreMutationError = unknown

    /**
 * @summary Request the restore from this dump
 */
export const usePostHostingWebServiceNameDatabaseNameDumpIdRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDumpIdRestore>>, TError,{serviceName: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameDumpIdRestore>>,
        TError,
        {serviceName: string;name: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameDumpIdRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Import a dump from an specific file uploaded with /me/documents
 */
export const postHostingWebServiceNameDatabaseNameImport = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameDatabaseNameImportBody: PostHostingWebServiceNameDatabaseNameImportBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseNameImportBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameImportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameImport>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameImport>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameImportBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameImport>>, {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameImportBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameImport(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameImportMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameImport>>>
    export type PostHostingWebServiceNameDatabaseNameImportMutationBody = PostHostingWebServiceNameDatabaseNameImportBody
    export type PostHostingWebServiceNameDatabaseNameImportMutationError = unknown

    /**
 * @summary Import a dump from an specific file uploaded with /me/documents
 */
export const usePostHostingWebServiceNameDatabaseNameImport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameImport>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameImportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameImport>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameImportBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameImportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request specific operation for your database
 */
export const postHostingWebServiceNameDatabaseNameRequest = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameDatabaseNameRequestBody: PostHostingWebServiceNameDatabaseNameRequestBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/request`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseNameRequestBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameRequestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRequest>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRequestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRequest>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRequestBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRequest>>, {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRequestBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameRequest(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRequest>>>
    export type PostHostingWebServiceNameDatabaseNameRequestMutationBody = PostHostingWebServiceNameDatabaseNameRequestBody
    export type PostHostingWebServiceNameDatabaseNameRequestMutationError = unknown

    /**
 * @summary Request specific operation for your database
 */
export const usePostHostingWebServiceNameDatabaseNameRequest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRequest>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRequestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRequest>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRequestBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request the restore from your database backup
 */
export const postHostingWebServiceNameDatabaseNameRestore = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameDatabaseNameRestoreBody: PostHostingWebServiceNameDatabaseNameRestoreBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/database/${name}/restore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameDatabaseNameRestoreBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameDatabaseNameRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRestore>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRestoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRestore>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRestoreBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRestore>>, {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRestoreBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameDatabaseNameRestore(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameDatabaseNameRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRestore>>>
    export type PostHostingWebServiceNameDatabaseNameRestoreMutationBody = PostHostingWebServiceNameDatabaseNameRestoreBody
    export type PostHostingWebServiceNameDatabaseNameRestoreMutationError = unknown

    /**
 * @summary Request the restore from your database backup
 */
export const usePostHostingWebServiceNameDatabaseNameRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRestore>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRestoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameDatabaseNameRestore>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameDatabaseNameRestoreBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameDatabaseNameRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get statistics about this database
 */
export const getHostingWebServiceNameDatabaseNameStatistics = (
    serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeChartSerieComplexTypeChartTimestampValueOVH[]>(
      {url: `/hosting/web/${serviceName}/database/${name}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseNameStatisticsQueryKey = (serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams,) => {
    return [`/hosting/web/${serviceName}/database/${name}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseNameStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError = unknown>(serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseNameStatisticsQueryKey(serviceName,name,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>> = ({ signal }) => getHostingWebServiceNameDatabaseNameStatistics(serviceName,name,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseNameStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>>
export type GetHostingWebServiceNameDatabaseNameStatisticsQueryError = unknown


export function useGetHostingWebServiceNameDatabaseNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError = unknown>(
 serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError = unknown>(
 serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError = unknown>(
 serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get statistics about this database
 */

export function useGetHostingWebServiceNameDatabaseNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError = unknown>(
 serviceName: string,
    name: string,
    params: GetHostingWebServiceNameDatabaseNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseNameStatisticsQueryOptions(serviceName,name,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available database type
 */
export const getHostingWebServiceNameDatabaseAvailableType = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseDatabaseTypeEnumOVH[]>(
      {url: `/hosting/web/${serviceName}/databaseAvailableType`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseAvailableTypeQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/databaseAvailableType`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseAvailableTypeQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseAvailableTypeQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>> = ({ signal }) => getHostingWebServiceNameDatabaseAvailableType(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseAvailableTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>>
export type GetHostingWebServiceNameDatabaseAvailableTypeQueryError = unknown


export function useGetHostingWebServiceNameDatabaseAvailableType<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseAvailableType<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseAvailableType<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available database type
 */

export function useGetHostingWebServiceNameDatabaseAvailableType<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseAvailableTypeQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available database version following a type
 */
export const getHostingWebServiceNameDatabaseAvailableVersion = (
    serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseAvailableVersionStructOVH>(
      {url: `/hosting/web/${serviceName}/databaseAvailableVersion`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseAvailableVersionQueryKey = (serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams,) => {
    return [`/hosting/web/${serviceName}/databaseAvailableVersion`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseAvailableVersionQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError = unknown>(serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseAvailableVersionQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>> = ({ signal }) => getHostingWebServiceNameDatabaseAvailableVersion(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseAvailableVersionQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>>
export type GetHostingWebServiceNameDatabaseAvailableVersionQueryError = unknown


export function useGetHostingWebServiceNameDatabaseAvailableVersion<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseAvailableVersion<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseAvailableVersion<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available database version following a type
 */

export function useGetHostingWebServiceNameDatabaseAvailableVersion<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameDatabaseAvailableVersionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseAvailableVersion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseAvailableVersionQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available database you can install
 */
export const getHostingWebServiceNameDatabaseCreationCapabilities = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseCreationDatabaseCapabilitiesOVH[]>(
      {url: `/hosting/web/${serviceName}/databaseCreationCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDatabaseCreationCapabilitiesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/databaseCreationCapabilities`] as const;
    }

    
export const getGetHostingWebServiceNameDatabaseCreationCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDatabaseCreationCapabilitiesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>> = ({ signal }) => getHostingWebServiceNameDatabaseCreationCapabilities(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDatabaseCreationCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>>
export type GetHostingWebServiceNameDatabaseCreationCapabilitiesQueryError = unknown


export function useGetHostingWebServiceNameDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available database you can install
 */

export function useGetHostingWebServiceNameDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDatabaseCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDatabaseCreationCapabilitiesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Dumps linked to your hosting
 */
export const getHostingWebServiceNameDump = (
    serviceName: string,
    params?: GetHostingWebServiceNameDumpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/dump`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDumpQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameDumpParams,) => {
    return [`/hosting/web/${serviceName}/dump`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameDumpQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDumpQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>> = ({ signal }) => getHostingWebServiceNameDump(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDumpQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>>
export type GetHostingWebServiceNameDumpQueryError = unknown


export function useGetHostingWebServiceNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameDumpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDump>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Dumps linked to your hosting
 */

export function useGetHostingWebServiceNameDump<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameDumpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDump>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDumpQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete dump before expiration date
 */
export const deleteHostingWebServiceNameDumpId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/dump/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameDumpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDumpId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDumpId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameDumpId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteHostingWebServiceNameDumpId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameDumpIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameDumpId>>>
    
    export type DeleteHostingWebServiceNameDumpIdMutationError = unknown

    /**
 * @summary Delete dump before expiration date
 */
export const useDeleteHostingWebServiceNameDumpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameDumpId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameDumpId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameDumpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameDumpId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDumpOVH>(
      {url: `/hosting/web/${serviceName}/dump/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameDumpIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/dump/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameDumpIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameDumpIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>> = ({ signal }) => getHostingWebServiceNameDumpId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameDumpIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>>
export type GetHostingWebServiceNameDumpIdQueryError = unknown


export function useGetHostingWebServiceNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameDumpId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameDumpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameDumpIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameEmail = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebEmailOVH>(
      {url: `/hosting/web/${serviceName}/email`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEmailQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/email`] as const;
    }

    
export const getGetHostingWebServiceNameEmailQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEmailQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>> = ({ signal }) => getHostingWebServiceNameEmail(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>>
export type GetHostingWebServiceNameEmailQueryError = unknown


export function useGetHostingWebServiceNameEmail<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmail<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmail<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameEmail<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEmailQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putHostingWebServiceNameEmail = (
    serviceName: string,
    hostingWebEmailOVH: NonReadonly<HostingWebEmailOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/email`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebEmailOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameEmail>>, TError,{serviceName: string;data: NonReadonly<HostingWebEmailOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameEmail>>, TError,{serviceName: string;data: NonReadonly<HostingWebEmailOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameEmail>>, {serviceName: string;data: NonReadonly<HostingWebEmailOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHostingWebServiceNameEmail(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameEmailMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameEmail>>>
    export type PutHostingWebServiceNameEmailMutationBody = NonReadonly<HostingWebEmailOVH>
    export type PutHostingWebServiceNameEmailMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutHostingWebServiceNameEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameEmail>>, TError,{serviceName: string;data: NonReadonly<HostingWebEmailOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameEmail>>,
        TError,
        {serviceName: string;data: NonReadonly<HostingWebEmailOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request the last bounces
 */
export const getHostingWebServiceNameEmailBounces = (
    serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebMailBounceOVH[]>(
      {url: `/hosting/web/${serviceName}/email/bounces`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEmailBouncesQueryKey = (serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams,) => {
    return [`/hosting/web/${serviceName}/email/bounces`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameEmailBouncesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError = unknown>(serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEmailBouncesQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>> = ({ signal }) => getHostingWebServiceNameEmailBounces(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEmailBouncesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>>
export type GetHostingWebServiceNameEmailBouncesQueryError = unknown


export function useGetHostingWebServiceNameEmailBounces<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailBounces<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailBounces<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Request the last bounces
 */

export function useGetHostingWebServiceNameEmailBounces<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameEmailBouncesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailBounces>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEmailBouncesQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request specific operation for your email
 */
export const postHostingWebServiceNameEmailRequest = (
    serviceName: string,
    postHostingWebServiceNameEmailRequestBody: PostHostingWebServiceNameEmailRequestBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/email/request`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameEmailRequestBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameEmailRequestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEmailRequest>>, TError,{serviceName: string;data: PostHostingWebServiceNameEmailRequestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEmailRequest>>, TError,{serviceName: string;data: PostHostingWebServiceNameEmailRequestBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameEmailRequest>>, {serviceName: string;data: PostHostingWebServiceNameEmailRequestBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameEmailRequest(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameEmailRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameEmailRequest>>>
    export type PostHostingWebServiceNameEmailRequestMutationBody = PostHostingWebServiceNameEmailRequestBody
    export type PostHostingWebServiceNameEmailRequestMutationError = unknown

    /**
 * @summary Request specific operation for your email
 */
export const usePostHostingWebServiceNameEmailRequest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEmailRequest>>, TError,{serviceName: string;data: PostHostingWebServiceNameEmailRequestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameEmailRequest>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameEmailRequestBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameEmailRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request the history volume of email sent
 */
export const getHostingWebServiceNameEmailVolumes = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebMailVolumeHistoryOVH[]>(
      {url: `/hosting/web/${serviceName}/email/volumes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEmailVolumesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/email/volumes`] as const;
    }

    
export const getGetHostingWebServiceNameEmailVolumesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEmailVolumesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>> = ({ signal }) => getHostingWebServiceNameEmailVolumes(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEmailVolumesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>>
export type GetHostingWebServiceNameEmailVolumesQueryError = unknown


export function useGetHostingWebServiceNameEmailVolumes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailVolumes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailVolumes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Request the history volume of email sent
 */

export function useGetHostingWebServiceNameEmailVolumes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailVolumes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEmailVolumesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Mail service linked to webhosting
 */
export const getHostingWebServiceNameEmailOption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/emailOption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEmailOptionQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/emailOption`] as const;
    }

    
export const getGetHostingWebServiceNameEmailOptionQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEmailOptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>> = ({ signal }) => getHostingWebServiceNameEmailOption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEmailOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>>
export type GetHostingWebServiceNameEmailOptionQueryError = unknown


export function useGetHostingWebServiceNameEmailOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Mail service linked to webhosting
 */

export function useGetHostingWebServiceNameEmailOption<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEmailOptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameEmailOptionId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebEmailoptionOVH>(
      {url: `/hosting/web/${serviceName}/emailOption/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEmailOptionIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/emailOption/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameEmailOptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEmailOptionIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>> = ({ signal }) => getHostingWebServiceNameEmailOptionId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEmailOptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>>
export type GetHostingWebServiceNameEmailOptionIdQueryError = unknown


export function useGetHostingWebServiceNameEmailOptionId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailOptionId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailOptionId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameEmailOptionId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEmailOptionIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the service properties
 */
export const getHostingWebServiceNameEmailOptionIdServiceInfos = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/hosting/web/${serviceName}/emailOption/${id}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEmailOptionIdServiceInfosQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/emailOption/${id}/serviceInfos`] as const;
    }

    
export const getGetHostingWebServiceNameEmailOptionIdServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEmailOptionIdServiceInfosQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>> = ({ signal }) => getHostingWebServiceNameEmailOptionIdServiceInfos(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEmailOptionIdServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>>
export type GetHostingWebServiceNameEmailOptionIdServiceInfosQueryError = unknown


export function useGetHostingWebServiceNameEmailOptionIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailOptionIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEmailOptionIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the service properties
 */

export function useGetHostingWebServiceNameEmailOptionIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEmailOptionIdServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEmailOptionIdServiceInfosQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Terminate your email sub service
 */
export const postHostingWebServiceNameEmailOptionIdTerminate = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/emailOption/${id}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameEmailOptionIdTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEmailOptionIdTerminate>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEmailOptionIdTerminate>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameEmailOptionIdTerminate>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postHostingWebServiceNameEmailOptionIdTerminate(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameEmailOptionIdTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameEmailOptionIdTerminate>>>
    
    export type PostHostingWebServiceNameEmailOptionIdTerminateMutationError = unknown

    /**
 * @summary Terminate your email sub service
 */
export const usePostHostingWebServiceNameEmailOptionIdTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEmailOptionIdTerminate>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameEmailOptionIdTerminate>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameEmailOptionIdTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getHostingWebServiceNameEnvVar = (
    serviceName: string,
    params?: GetHostingWebServiceNameEnvVarParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/envVar`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEnvVarQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameEnvVarParams,) => {
    return [`/hosting/web/${serviceName}/envVar`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameEnvVarQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameEnvVarParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEnvVarQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>> = ({ signal }) => getHostingWebServiceNameEnvVar(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEnvVarQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>>
export type GetHostingWebServiceNameEnvVarQueryError = unknown


export function useGetHostingWebServiceNameEnvVar<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameEnvVarParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEnvVar<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameEnvVarParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEnvVar<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameEnvVarParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetHostingWebServiceNameEnvVar<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameEnvVarParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVar>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEnvVarQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postHostingWebServiceNameEnvVar = (
    serviceName: string,
    hostingWebEnvVarInputOVH: HostingWebEnvVarInputOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/envVar`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebEnvVarInputOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameEnvVarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEnvVar>>, TError,{serviceName: string;data: HostingWebEnvVarInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEnvVar>>, TError,{serviceName: string;data: HostingWebEnvVarInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameEnvVar>>, {serviceName: string;data: HostingWebEnvVarInputOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameEnvVar(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameEnvVarMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameEnvVar>>>
    export type PostHostingWebServiceNameEnvVarMutationBody = HostingWebEnvVarInputOVH
    export type PostHostingWebServiceNameEnvVarMutationError = unknown

    export const usePostHostingWebServiceNameEnvVar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameEnvVar>>, TError,{serviceName: string;data: HostingWebEnvVarInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameEnvVar>>,
        TError,
        {serviceName: string;data: HostingWebEnvVarInputOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameEnvVarMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteHostingWebServiceNameEnvVarKey = (
    serviceName: string,
    key: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/envVar/${key}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameEnvVarKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameEnvVarKey>>, TError,{serviceName: string;key: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameEnvVarKey>>, TError,{serviceName: string;key: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameEnvVarKey>>, {serviceName: string;key: string}> = (props) => {
          const {serviceName,key} = props ?? {};

          return  deleteHostingWebServiceNameEnvVarKey(serviceName,key,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameEnvVarKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameEnvVarKey>>>
    
    export type DeleteHostingWebServiceNameEnvVarKeyMutationError = unknown

    export const useDeleteHostingWebServiceNameEnvVarKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameEnvVarKey>>, TError,{serviceName: string;key: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameEnvVarKey>>,
        TError,
        {serviceName: string;key: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameEnvVarKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getHostingWebServiceNameEnvVarKey = (
    serviceName: string,
    key: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebEnvVarOVH>(
      {url: `/hosting/web/${serviceName}/envVar/${key}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameEnvVarKeyQueryKey = (serviceName: string,
    key: string,) => {
    return [`/hosting/web/${serviceName}/envVar/${key}`] as const;
    }

    
export const getGetHostingWebServiceNameEnvVarKeyQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError = unknown>(serviceName: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameEnvVarKeyQueryKey(serviceName,key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>> = ({ signal }) => getHostingWebServiceNameEnvVarKey(serviceName,key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameEnvVarKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>>
export type GetHostingWebServiceNameEnvVarKeyQueryError = unknown


export function useGetHostingWebServiceNameEnvVarKey<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError = unknown>(
 serviceName: string,
    key: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEnvVarKey<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError = unknown>(
 serviceName: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameEnvVarKey<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError = unknown>(
 serviceName: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetHostingWebServiceNameEnvVarKey<TData = Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError = unknown>(
 serviceName: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameEnvVarKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameEnvVarKeyQueryOptions(serviceName,key,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putHostingWebServiceNameEnvVarKey = (
    serviceName: string,
    key: string,
    hostingWebEnvVarOVH: NonReadonly<HostingWebEnvVarOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/envVar/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebEnvVarOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameEnvVarKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameEnvVarKey>>, TError,{serviceName: string;key: string;data: NonReadonly<HostingWebEnvVarOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameEnvVarKey>>, TError,{serviceName: string;key: string;data: NonReadonly<HostingWebEnvVarOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameEnvVarKey>>, {serviceName: string;key: string;data: NonReadonly<HostingWebEnvVarOVH>}> = (props) => {
          const {serviceName,key,data} = props ?? {};

          return  putHostingWebServiceNameEnvVarKey(serviceName,key,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameEnvVarKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameEnvVarKey>>>
    export type PutHostingWebServiceNameEnvVarKeyMutationBody = NonReadonly<HostingWebEnvVarOVH>
    export type PutHostingWebServiceNameEnvVarKeyMutationError = unknown

    export const usePutHostingWebServiceNameEnvVarKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameEnvVarKey>>, TError,{serviceName: string;key: string;data: NonReadonly<HostingWebEnvVarOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameEnvVarKey>>,
        TError,
        {serviceName: string;key: string;data: NonReadonly<HostingWebEnvVarOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameEnvVarKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Sqlperso linked to your hosting
 */
export const getHostingWebServiceNameExtraSqlPerso = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/extraSqlPerso`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameExtraSqlPersoQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/extraSqlPerso`] as const;
    }

    
export const getGetHostingWebServiceNameExtraSqlPersoQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameExtraSqlPersoQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>> = ({ signal }) => getHostingWebServiceNameExtraSqlPerso(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameExtraSqlPersoQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>>
export type GetHostingWebServiceNameExtraSqlPersoQueryError = unknown


export function useGetHostingWebServiceNameExtraSqlPerso<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPerso<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPerso<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Sqlperso linked to your hosting
 */

export function useGetHostingWebServiceNameExtraSqlPerso<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPerso>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameExtraSqlPersoQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameExtraSqlPersoName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebExtrasqlpersoOVH>(
      {url: `/hosting/web/${serviceName}/extraSqlPerso/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameExtraSqlPersoNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/web/${serviceName}/extraSqlPerso/${name}`] as const;
    }

    
export const getGetHostingWebServiceNameExtraSqlPersoNameQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameExtraSqlPersoNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>> = ({ signal }) => getHostingWebServiceNameExtraSqlPersoName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameExtraSqlPersoNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>>
export type GetHostingWebServiceNameExtraSqlPersoNameQueryError = unknown


export function useGetHostingWebServiceNameExtraSqlPersoName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPersoName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPersoName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameExtraSqlPersoName<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameExtraSqlPersoNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get databases linked with this option
 */
export const getHostingWebServiceNameExtraSqlPersoNameDatabases = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/extraSqlPerso/${name}/databases`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameExtraSqlPersoNameDatabasesQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/web/${serviceName}/extraSqlPerso/${name}/databases`] as const;
    }

    
export const getGetHostingWebServiceNameExtraSqlPersoNameDatabasesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameExtraSqlPersoNameDatabasesQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>> = ({ signal }) => getHostingWebServiceNameExtraSqlPersoNameDatabases(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameExtraSqlPersoNameDatabasesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>>
export type GetHostingWebServiceNameExtraSqlPersoNameDatabasesQueryError = unknown


export function useGetHostingWebServiceNameExtraSqlPersoNameDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPersoNameDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPersoNameDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get databases linked with this option
 */

export function useGetHostingWebServiceNameExtraSqlPersoNameDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameDatabases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameExtraSqlPersoNameDatabasesQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameExtraSqlPersoNameServiceInfos = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/hosting/web/${serviceName}/extraSqlPerso/${name}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameExtraSqlPersoNameServiceInfosQueryKey = (serviceName: string,
    name: string,) => {
    return [`/hosting/web/${serviceName}/extraSqlPerso/${name}/serviceInfos`] as const;
    }

    
export const getGetHostingWebServiceNameExtraSqlPersoNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameExtraSqlPersoNameServiceInfosQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>> = ({ signal }) => getHostingWebServiceNameExtraSqlPersoNameServiceInfos(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameExtraSqlPersoNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>>
export type GetHostingWebServiceNameExtraSqlPersoNameServiceInfosQueryError = unknown


export function useGetHostingWebServiceNameExtraSqlPersoNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPersoNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameExtraSqlPersoNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameExtraSqlPersoNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameExtraSqlPersoNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameExtraSqlPersoNameServiceInfosQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate = (
    serviceName: string,
    name: string,
    postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody: PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/extraSqlPerso/${name}/serviceInfosUpdate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate>>, {serviceName: string;name: string;data: PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate>>>
    export type PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateMutationBody = PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody
    export type PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate>>, TError,{serviceName: string;name: string;data: PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdate>>,
        TError,
        {serviceName: string;name: string;data: PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Terminate your extraSqlPerso sub service
 */
export const postHostingWebServiceNameExtraSqlPersoNameTerminate = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/extraSqlPerso/${name}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameExtraSqlPersoNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameTerminate>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameTerminate>>, TError,{serviceName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameTerminate>>, {serviceName: string;name: string}> = (props) => {
          const {serviceName,name} = props ?? {};

          return  postHostingWebServiceNameExtraSqlPersoNameTerminate(serviceName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameExtraSqlPersoNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameTerminate>>>
    
    export type PostHostingWebServiceNameExtraSqlPersoNameTerminateMutationError = unknown

    /**
 * @summary Terminate your extraSqlPerso sub service
 */
export const usePostHostingWebServiceNameExtraSqlPersoNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameTerminate>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameExtraSqlPersoNameTerminate>>,
        TError,
        {serviceName: string;name: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameExtraSqlPersoNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Find freedoms linked to the hosting
 */
export const getHostingWebServiceNameFreedom = (
    serviceName: string,
    params?: GetHostingWebServiceNameFreedomParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/freedom`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameFreedomQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameFreedomParams,) => {
    return [`/hosting/web/${serviceName}/freedom`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameFreedomQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameFreedomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameFreedomQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>> = ({ signal }) => getHostingWebServiceNameFreedom(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameFreedomQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>>
export type GetHostingWebServiceNameFreedomQueryError = unknown


export function useGetHostingWebServiceNameFreedom<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameFreedomParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameFreedom<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameFreedomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameFreedom<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameFreedomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Find freedoms linked to the hosting
 */

export function useGetHostingWebServiceNameFreedom<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameFreedomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameFreedomQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete the freedom
 */
export const deleteHostingWebServiceNameFreedomDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/freedom/${domain}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameFreedomDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameFreedomDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameFreedomDomain>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameFreedomDomain>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  deleteHostingWebServiceNameFreedomDomain(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameFreedomDomainMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameFreedomDomain>>>
    
    export type DeleteHostingWebServiceNameFreedomDomainMutationError = unknown

    /**
 * @summary Delete the freedom
 */
export const useDeleteHostingWebServiceNameFreedomDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameFreedomDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameFreedomDomain>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameFreedomDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameFreedomDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebFreedomOVH>(
      {url: `/hosting/web/${serviceName}/freedom/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameFreedomDomainQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/hosting/web/${serviceName}/freedom/${domain}`] as const;
    }

    
export const getGetHostingWebServiceNameFreedomDomainQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameFreedomDomainQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>> = ({ signal }) => getHostingWebServiceNameFreedomDomain(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameFreedomDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>>
export type GetHostingWebServiceNameFreedomDomainQueryError = unknown


export function useGetHostingWebServiceNameFreedomDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameFreedomDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameFreedomDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameFreedomDomain<TData = Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameFreedomDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameFreedomDomainQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary User of multidomain independent allowed on your hosting
 */
export const getHostingWebServiceNameIndy = (
    serviceName: string,
    params?: GetHostingWebServiceNameIndyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/indy`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameIndyQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameIndyParams,) => {
    return [`/hosting/web/${serviceName}/indy`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameIndyQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameIndyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameIndyQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>> = ({ signal }) => getHostingWebServiceNameIndy(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameIndyQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>>
export type GetHostingWebServiceNameIndyQueryError = unknown


export function useGetHostingWebServiceNameIndy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameIndyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameIndy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameIndyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameIndy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameIndyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary User of multidomain independent allowed on your hosting
 */

export function useGetHostingWebServiceNameIndy<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameIndyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameIndyQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameIndyLogin = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebIndyOVH>(
      {url: `/hosting/web/${serviceName}/indy/${login}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameIndyLoginQueryKey = (serviceName: string,
    login: string,) => {
    return [`/hosting/web/${serviceName}/indy/${login}`] as const;
    }

    
export const getGetHostingWebServiceNameIndyLoginQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError = unknown>(serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameIndyLoginQueryKey(serviceName,login);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>> = ({ signal }) => getHostingWebServiceNameIndyLogin(serviceName,login, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameIndyLoginQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>>
export type GetHostingWebServiceNameIndyLoginQueryError = unknown


export function useGetHostingWebServiceNameIndyLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameIndyLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameIndyLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameIndyLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameIndyLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameIndyLoginQueryOptions(serviceName,login,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the SSH public key associated with the hosting
 */
export const getHostingWebServiceNameKeySsh = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebKeyOVH>(
      {url: `/hosting/web/${serviceName}/key/ssh`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameKeySshQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/key/ssh`] as const;
    }

    
export const getGetHostingWebServiceNameKeySshQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameKeySshQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>> = ({ signal }) => getHostingWebServiceNameKeySsh(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameKeySshQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>>
export type GetHostingWebServiceNameKeySshQueryError = unknown


export function useGetHostingWebServiceNameKeySsh<TData = Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameKeySsh<TData = Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameKeySsh<TData = Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the SSH public key associated with the hosting
 */

export function useGetHostingWebServiceNameKeySsh<TData = Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameKeySsh>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameKeySshQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a SSH key pair for the hosting
 */
export const postHostingWebServiceNameKeySsh = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebKeyOVH>(
      {url: `/hosting/web/${serviceName}/key/ssh`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameKeySshMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameKeySsh>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameKeySsh>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameKeySsh>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingWebServiceNameKeySsh(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameKeySshMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameKeySsh>>>
    
    export type PostHostingWebServiceNameKeySshMutationError = unknown

    /**
 * @summary Generate a SSH key pair for the hosting
 */
export const usePostHostingWebServiceNameKeySsh = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameKeySsh>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameKeySsh>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameKeySshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Local SEO accounts associated to the hosting
 */
export const getHostingWebServiceNameLocalSeoAccount = (
    serviceName: string,
    params?: GetHostingWebServiceNameLocalSeoAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/localSeo/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameLocalSeoAccountQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameLocalSeoAccountParams,) => {
    return [`/hosting/web/${serviceName}/localSeo/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameLocalSeoAccountQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameLocalSeoAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameLocalSeoAccountQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>> = ({ signal }) => getHostingWebServiceNameLocalSeoAccount(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameLocalSeoAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>>
export type GetHostingWebServiceNameLocalSeoAccountQueryError = unknown


export function useGetHostingWebServiceNameLocalSeoAccount<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameLocalSeoAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoAccount<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameLocalSeoAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoAccount<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameLocalSeoAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Local SEO accounts associated to the hosting
 */

export function useGetHostingWebServiceNameLocalSeoAccount<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameLocalSeoAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameLocalSeoAccountQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameLocalSeoAccountId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoAccountOVH>(
      {url: `/hosting/web/${serviceName}/localSeo/account/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameLocalSeoAccountIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/localSeo/account/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameLocalSeoAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameLocalSeoAccountIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>> = ({ signal }) => getHostingWebServiceNameLocalSeoAccountId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameLocalSeoAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>>
export type GetHostingWebServiceNameLocalSeoAccountIdQueryError = unknown


export function useGetHostingWebServiceNameLocalSeoAccountId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoAccountId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoAccountId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameLocalSeoAccountId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameLocalSeoAccountIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Login this location for SSO
 */
export const postHostingWebServiceNameLocalSeoAccountIdLogin = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/localSeo/account/${id}/login`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameLocalSeoAccountIdLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoAccountIdLogin>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoAccountIdLogin>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoAccountIdLogin>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postHostingWebServiceNameLocalSeoAccountIdLogin(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameLocalSeoAccountIdLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoAccountIdLogin>>>
    
    export type PostHostingWebServiceNameLocalSeoAccountIdLoginMutationError = unknown

    /**
 * @summary Login this location for SSO
 */
export const usePostHostingWebServiceNameLocalSeoAccountIdLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoAccountIdLogin>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoAccountIdLogin>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameLocalSeoAccountIdLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check email availability for a local SEO order
 */
export const getHostingWebServiceNameLocalSeoEmailAvailability = (
    serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoEmailAvailabilityOVH>(
      {url: `/hosting/web/${serviceName}/localSeo/emailAvailability`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameLocalSeoEmailAvailabilityQueryKey = (serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams,) => {
    return [`/hosting/web/${serviceName}/localSeo/emailAvailability`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameLocalSeoEmailAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError = unknown>(serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameLocalSeoEmailAvailabilityQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>> = ({ signal }) => getHostingWebServiceNameLocalSeoEmailAvailability(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameLocalSeoEmailAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>>
export type GetHostingWebServiceNameLocalSeoEmailAvailabilityQueryError = unknown


export function useGetHostingWebServiceNameLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check email availability for a local SEO order
 */

export function useGetHostingWebServiceNameLocalSeoEmailAvailability<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameLocalSeoEmailAvailabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoEmailAvailability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameLocalSeoEmailAvailabilityQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Local SEO locations associated to the hosting
 */
export const getHostingWebServiceNameLocalSeoLocation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/localSeo/location`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameLocalSeoLocationQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/localSeo/location`] as const;
    }

    
export const getGetHostingWebServiceNameLocalSeoLocationQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameLocalSeoLocationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>> = ({ signal }) => getHostingWebServiceNameLocalSeoLocation(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameLocalSeoLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>>
export type GetHostingWebServiceNameLocalSeoLocationQueryError = unknown


export function useGetHostingWebServiceNameLocalSeoLocation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoLocation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoLocation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Local SEO locations associated to the hosting
 */

export function useGetHostingWebServiceNameLocalSeoLocation<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameLocalSeoLocationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameLocalSeoLocationId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebLocalSeoLocationOVH>(
      {url: `/hosting/web/${serviceName}/localSeo/location/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameLocalSeoLocationIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/localSeo/location/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameLocalSeoLocationIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameLocalSeoLocationIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>> = ({ signal }) => getHostingWebServiceNameLocalSeoLocationId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameLocalSeoLocationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>>
export type GetHostingWebServiceNameLocalSeoLocationIdQueryError = unknown


export function useGetHostingWebServiceNameLocalSeoLocationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoLocationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoLocationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameLocalSeoLocationId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameLocalSeoLocationIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameLocalSeoLocationIdServiceInfos = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/hosting/web/${serviceName}/localSeo/location/${id}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameLocalSeoLocationIdServiceInfosQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/localSeo/location/${id}/serviceInfos`] as const;
    }

    
export const getGetHostingWebServiceNameLocalSeoLocationIdServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameLocalSeoLocationIdServiceInfosQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>> = ({ signal }) => getHostingWebServiceNameLocalSeoLocationIdServiceInfos(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameLocalSeoLocationIdServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>>
export type GetHostingWebServiceNameLocalSeoLocationIdServiceInfosQueryError = unknown


export function useGetHostingWebServiceNameLocalSeoLocationIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoLocationIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameLocalSeoLocationIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameLocalSeoLocationIdServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameLocalSeoLocationIdServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameLocalSeoLocationIdServiceInfosQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate = (
    serviceName: string,
    id: number,
    postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody: PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/localSeo/location/${id}/serviceInfosUpdate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate>>, {serviceName: string;id: number;data: PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate>>>
    export type PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateMutationBody = PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody
    export type PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdate>>,
        TError,
        {serviceName: string;id: number;data: PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Terminate a local SEO sub service
 */
export const postHostingWebServiceNameLocalSeoLocationIdTerminate = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/localSeo/location/${id}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameLocalSeoLocationIdTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdTerminate>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdTerminate>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdTerminate>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postHostingWebServiceNameLocalSeoLocationIdTerminate(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameLocalSeoLocationIdTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdTerminate>>>
    
    export type PostHostingWebServiceNameLocalSeoLocationIdTerminateMutationError = unknown

    /**
 * @summary Terminate a local SEO sub service
 */
export const usePostHostingWebServiceNameLocalSeoLocationIdTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdTerminate>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameLocalSeoLocationIdTerminate>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameLocalSeoLocationIdTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get metrics token
 */
export const getHostingWebServiceNameMetricsToken = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebMetricsTokenOVH>(
      {url: `/hosting/web/${serviceName}/metricsToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameMetricsTokenQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/metricsToken`] as const;
    }

    
export const getGetHostingWebServiceNameMetricsTokenQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameMetricsTokenQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>> = ({ signal }) => getHostingWebServiceNameMetricsToken(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameMetricsTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>>
export type GetHostingWebServiceNameMetricsTokenQueryError = unknown


export function useGetHostingWebServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get metrics token
 */

export function useGetHostingWebServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameMetricsTokenQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Module installed on your hosting
 */
export const getHostingWebServiceNameModule = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/module`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameModuleQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/module`] as const;
    }

    
export const getGetHostingWebServiceNameModuleQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameModuleQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>> = ({ signal }) => getHostingWebServiceNameModule(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameModuleQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>>
export type GetHostingWebServiceNameModuleQueryError = unknown


export function useGetHostingWebServiceNameModule<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameModule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameModule<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameModule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameModule<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Module installed on your hosting
 */

export function useGetHostingWebServiceNameModule<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameModuleQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Install a new module
 */
export const postHostingWebServiceNameModule = (
    serviceName: string,
    postHostingWebServiceNameModuleBody: PostHostingWebServiceNameModuleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/module`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameModuleBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameModuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameModule>>, TError,{serviceName: string;data: PostHostingWebServiceNameModuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameModule>>, TError,{serviceName: string;data: PostHostingWebServiceNameModuleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameModule>>, {serviceName: string;data: PostHostingWebServiceNameModuleBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameModule(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameModuleMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameModule>>>
    export type PostHostingWebServiceNameModuleMutationBody = PostHostingWebServiceNameModuleBody
    export type PostHostingWebServiceNameModuleMutationError = unknown

    /**
 * @summary Install a new module
 */
export const usePostHostingWebServiceNameModule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameModule>>, TError,{serviceName: string;data: PostHostingWebServiceNameModuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameModule>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameModuleBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameModuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a module installed
 */
export const deleteHostingWebServiceNameModuleId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/module/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameModuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameModuleId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameModuleId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameModuleId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteHostingWebServiceNameModuleId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameModuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameModuleId>>>
    
    export type DeleteHostingWebServiceNameModuleIdMutationError = unknown

    /**
 * @summary Delete a module installed
 */
export const useDeleteHostingWebServiceNameModuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameModuleId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameModuleId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameModuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameModuleId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebModuleOVH>(
      {url: `/hosting/web/${serviceName}/module/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameModuleIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/module/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameModuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameModuleIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>> = ({ signal }) => getHostingWebServiceNameModuleId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameModuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>>
export type GetHostingWebServiceNameModuleIdQueryError = unknown


export function useGetHostingWebServiceNameModuleId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameModuleId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameModuleId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameModuleId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameModuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameModuleIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Upgrade your module to another version
 */
export const postHostingWebServiceNameModuleIdUpgrade = (
    serviceName: string,
    id: number,
    postHostingWebServiceNameModuleIdUpgradeBody: PostHostingWebServiceNameModuleIdUpgradeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/module/${id}/upgrade`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameModuleIdUpgradeBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameModuleIdUpgradeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameModuleIdUpgrade>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameModuleIdUpgradeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameModuleIdUpgrade>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameModuleIdUpgradeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameModuleIdUpgrade>>, {serviceName: string;id: number;data: PostHostingWebServiceNameModuleIdUpgradeBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postHostingWebServiceNameModuleIdUpgrade(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameModuleIdUpgradeMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameModuleIdUpgrade>>>
    export type PostHostingWebServiceNameModuleIdUpgradeMutationBody = PostHostingWebServiceNameModuleIdUpgradeBody
    export type PostHostingWebServiceNameModuleIdUpgradeMutationError = unknown

    /**
 * @summary Upgrade your module to another version
 */
export const usePostHostingWebServiceNameModuleIdUpgrade = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameModuleIdUpgrade>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameModuleIdUpgradeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameModuleIdUpgrade>>,
        TError,
        {serviceName: string;id: number;data: PostHostingWebServiceNameModuleIdUpgradeBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameModuleIdUpgradeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Configuration used on your hosting
 */
export const getHostingWebServiceNameOvhConfig = (
    serviceName: string,
    params?: GetHostingWebServiceNameOvhConfigParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/ovhConfig`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOvhConfigQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameOvhConfigParams,) => {
    return [`/hosting/web/${serviceName}/ovhConfig`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameOvhConfigQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameOvhConfigParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOvhConfigQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>> = ({ signal }) => getHostingWebServiceNameOvhConfig(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOvhConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>>
export type GetHostingWebServiceNameOvhConfigQueryError = unknown


export function useGetHostingWebServiceNameOvhConfig<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameOvhConfigParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfig<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameOvhConfigParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfig<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameOvhConfigParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Configuration used on your hosting
 */

export function useGetHostingWebServiceNameOvhConfig<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameOvhConfigParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfig>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOvhConfigQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameOvhConfigId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebOvhConfigOVH>(
      {url: `/hosting/web/${serviceName}/ovhConfig/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOvhConfigIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/ovhConfig/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameOvhConfigIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOvhConfigIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>> = ({ signal }) => getHostingWebServiceNameOvhConfigId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOvhConfigIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>>
export type GetHostingWebServiceNameOvhConfigIdQueryError = unknown


export function useGetHostingWebServiceNameOvhConfigId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfigId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfigId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameOvhConfigId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOvhConfigIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Apply a new configuration on this path
 */
export const postHostingWebServiceNameOvhConfigIdChangeConfiguration = (
    serviceName: string,
    id: number,
    postHostingWebServiceNameOvhConfigIdChangeConfigurationBody: PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/ovhConfig/${id}/changeConfiguration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameOvhConfigIdChangeConfigurationBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameOvhConfigIdChangeConfigurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdChangeConfiguration>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdChangeConfiguration>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdChangeConfiguration>>, {serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postHostingWebServiceNameOvhConfigIdChangeConfiguration(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameOvhConfigIdChangeConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdChangeConfiguration>>>
    export type PostHostingWebServiceNameOvhConfigIdChangeConfigurationMutationBody = PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody
    export type PostHostingWebServiceNameOvhConfigIdChangeConfigurationMutationError = unknown

    /**
 * @summary Apply a new configuration on this path
 */
export const usePostHostingWebServiceNameOvhConfigIdChangeConfiguration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdChangeConfiguration>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdChangeConfiguration>>,
        TError,
        {serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdChangeConfigurationBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameOvhConfigIdChangeConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Rollback to an old configuration
 */
export const postHostingWebServiceNameOvhConfigIdRollback = (
    serviceName: string,
    id: number,
    postHostingWebServiceNameOvhConfigIdRollbackBody: PostHostingWebServiceNameOvhConfigIdRollbackBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/ovhConfig/${id}/rollback`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameOvhConfigIdRollbackBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameOvhConfigIdRollbackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdRollback>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdRollbackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdRollback>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdRollbackBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdRollback>>, {serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdRollbackBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postHostingWebServiceNameOvhConfigIdRollback(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameOvhConfigIdRollbackMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdRollback>>>
    export type PostHostingWebServiceNameOvhConfigIdRollbackMutationBody = PostHostingWebServiceNameOvhConfigIdRollbackBody
    export type PostHostingWebServiceNameOvhConfigIdRollbackMutationError = unknown

    /**
 * @summary Rollback to an old configuration
 */
export const usePostHostingWebServiceNameOvhConfigIdRollback = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdRollback>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdRollbackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigIdRollback>>,
        TError,
        {serviceName: string;id: number;data: PostHostingWebServiceNameOvhConfigIdRollbackBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameOvhConfigIdRollbackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the list of versions and container image available on your hosting
 */
export const getHostingWebServiceNameOvhConfigCapabilities = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebOvhConfigCapabilitiesOVH[]>(
      {url: `/hosting/web/${serviceName}/ovhConfigCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOvhConfigCapabilitiesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/ovhConfigCapabilities`] as const;
    }

    
export const getGetHostingWebServiceNameOvhConfigCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOvhConfigCapabilitiesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>> = ({ signal }) => getHostingWebServiceNameOvhConfigCapabilities(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOvhConfigCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>>
export type GetHostingWebServiceNameOvhConfigCapabilitiesQueryError = unknown


export function useGetHostingWebServiceNameOvhConfigCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfigCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfigCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of versions and container image available on your hosting
 */

export function useGetHostingWebServiceNameOvhConfigCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOvhConfigCapabilitiesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get recommended values on ovhConfig file
 */
export const getHostingWebServiceNameOvhConfigRecommendedValues = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebOvhConfigRecommendedValuesOVH>(
      {url: `/hosting/web/${serviceName}/ovhConfigRecommendedValues`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOvhConfigRecommendedValuesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/ovhConfigRecommendedValues`] as const;
    }

    
export const getGetHostingWebServiceNameOvhConfigRecommendedValuesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOvhConfigRecommendedValuesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>> = ({ signal }) => getHostingWebServiceNameOvhConfigRecommendedValues(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOvhConfigRecommendedValuesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>>
export type GetHostingWebServiceNameOvhConfigRecommendedValuesQueryError = unknown


export function useGetHostingWebServiceNameOvhConfigRecommendedValues<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfigRecommendedValues<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOvhConfigRecommendedValues<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get recommended values on ovhConfig file
 */

export function useGetHostingWebServiceNameOvhConfigRecommendedValues<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOvhConfigRecommendedValues>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOvhConfigRecommendedValuesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Synchronize the configuration listing with content on your hosting
 */
export const postHostingWebServiceNameOvhConfigRefresh = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/ovhConfigRefresh`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameOvhConfigRefreshMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigRefresh>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigRefresh>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigRefresh>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingWebServiceNameOvhConfigRefresh(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameOvhConfigRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigRefresh>>>
    
    export type PostHostingWebServiceNameOvhConfigRefreshMutationError = unknown

    /**
 * @summary Synchronize the configuration listing with content on your hosting
 */
export const usePostHostingWebServiceNameOvhConfigRefresh = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigRefresh>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameOvhConfigRefresh>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameOvhConfigRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Own Logs linked to your hosting
 */
export const getHostingWebServiceNameOwnLogs = (
    serviceName: string,
    params?: GetHostingWebServiceNameOwnLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/ownLogs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOwnLogsQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameOwnLogsParams,) => {
    return [`/hosting/web/${serviceName}/ownLogs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameOwnLogsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameOwnLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOwnLogsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>> = ({ signal }) => getHostingWebServiceNameOwnLogs(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOwnLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>>
export type GetHostingWebServiceNameOwnLogsQueryError = unknown


export function useGetHostingWebServiceNameOwnLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameOwnLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameOwnLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameOwnLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Own Logs linked to your hosting
 */

export function useGetHostingWebServiceNameOwnLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameOwnLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOwnLogsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameOwnLogsId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebOwnLogsOVH>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOwnLogsIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/ownLogs/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameOwnLogsIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOwnLogsIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>> = ({ signal }) => getHostingWebServiceNameOwnLogsId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOwnLogsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>>
export type GetHostingWebServiceNameOwnLogsIdQueryError = unknown


export function useGetHostingWebServiceNameOwnLogsId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogsId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogsId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameOwnLogsId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOwnLogsIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary User allowed to connect into your logs interface
 */
export const getHostingWebServiceNameOwnLogsIdUserLogs = (
    serviceName: string,
    id: number,
    params?: GetHostingWebServiceNameOwnLogsIdUserLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}/userLogs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOwnLogsIdUserLogsQueryKey = (serviceName: string,
    id: number,
    params?: GetHostingWebServiceNameOwnLogsIdUserLogsParams,) => {
    return [`/hosting/web/${serviceName}/ownLogs/${id}/userLogs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameOwnLogsIdUserLogsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError = unknown>(serviceName: string,
    id: number,
    params?: GetHostingWebServiceNameOwnLogsIdUserLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOwnLogsIdUserLogsQueryKey(serviceName,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>> = ({ signal }) => getHostingWebServiceNameOwnLogsIdUserLogs(serviceName,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOwnLogsIdUserLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>>
export type GetHostingWebServiceNameOwnLogsIdUserLogsQueryError = unknown


export function useGetHostingWebServiceNameOwnLogsIdUserLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: undefined |  GetHostingWebServiceNameOwnLogsIdUserLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogsIdUserLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    params?: GetHostingWebServiceNameOwnLogsIdUserLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogsIdUserLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    params?: GetHostingWebServiceNameOwnLogsIdUserLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary User allowed to connect into your logs interface
 */

export function useGetHostingWebServiceNameOwnLogsIdUserLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    params?: GetHostingWebServiceNameOwnLogsIdUserLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOwnLogsIdUserLogsQueryOptions(serviceName,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new userLogs
 */
export const postHostingWebServiceNameOwnLogsIdUserLogs = (
    serviceName: string,
    id: number,
    postHostingWebServiceNameOwnLogsIdUserLogsBody: PostHostingWebServiceNameOwnLogsIdUserLogsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}/userLogs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameOwnLogsIdUserLogsBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameOwnLogsIdUserLogsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogs>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOwnLogsIdUserLogsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogs>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOwnLogsIdUserLogsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogs>>, {serviceName: string;id: number;data: PostHostingWebServiceNameOwnLogsIdUserLogsBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postHostingWebServiceNameOwnLogsIdUserLogs(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameOwnLogsIdUserLogsMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogs>>>
    export type PostHostingWebServiceNameOwnLogsIdUserLogsMutationBody = PostHostingWebServiceNameOwnLogsIdUserLogsBody
    export type PostHostingWebServiceNameOwnLogsIdUserLogsMutationError = unknown

    /**
 * @summary Create new userLogs
 */
export const usePostHostingWebServiceNameOwnLogsIdUserLogs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogs>>, TError,{serviceName: string;id: number;data: PostHostingWebServiceNameOwnLogsIdUserLogsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogs>>,
        TError,
        {serviceName: string;id: number;data: PostHostingWebServiceNameOwnLogsIdUserLogsBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameOwnLogsIdUserLogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the userLogs
 */
export const deleteHostingWebServiceNameOwnLogsIdUserLogsLogin = (
    serviceName: string,
    id: number,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}/userLogs/${login}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameOwnLogsIdUserLogsLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError,{serviceName: string;id: number;login: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError,{serviceName: string;id: number;login: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameOwnLogsIdUserLogsLogin>>, {serviceName: string;id: number;login: string}> = (props) => {
          const {serviceName,id,login} = props ?? {};

          return  deleteHostingWebServiceNameOwnLogsIdUserLogsLogin(serviceName,id,login,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameOwnLogsIdUserLogsLoginMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameOwnLogsIdUserLogsLogin>>>
    
    export type DeleteHostingWebServiceNameOwnLogsIdUserLogsLoginMutationError = unknown

    /**
 * @summary Delete the userLogs
 */
export const useDeleteHostingWebServiceNameOwnLogsIdUserLogsLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError,{serviceName: string;id: number;login: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameOwnLogsIdUserLogsLogin>>,
        TError,
        {serviceName: string;id: number;login: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameOwnLogsIdUserLogsLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameOwnLogsIdUserLogsLogin = (
    serviceName: string,
    id: number,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebUserLogsOVH>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}/userLogs/${login}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameOwnLogsIdUserLogsLoginQueryKey = (serviceName: string,
    id: number,
    login: string,) => {
    return [`/hosting/web/${serviceName}/ownLogs/${id}/userLogs/${login}`] as const;
    }

    
export const getGetHostingWebServiceNameOwnLogsIdUserLogsLoginQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError = unknown>(serviceName: string,
    id: number,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameOwnLogsIdUserLogsLoginQueryKey(serviceName,id,login);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>> = ({ signal }) => getHostingWebServiceNameOwnLogsIdUserLogsLogin(serviceName,id,login, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameOwnLogsIdUserLogsLoginQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>>
export type GetHostingWebServiceNameOwnLogsIdUserLogsLoginQueryError = unknown


export function useGetHostingWebServiceNameOwnLogsIdUserLogsLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError = unknown>(
 serviceName: string,
    id: number,
    login: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogsIdUserLogsLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError = unknown>(
 serviceName: string,
    id: number,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameOwnLogsIdUserLogsLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError = unknown>(
 serviceName: string,
    id: number,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameOwnLogsIdUserLogsLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError = unknown>(
 serviceName: string,
    id: number,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameOwnLogsIdUserLogsLoginQueryOptions(serviceName,id,login,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putHostingWebServiceNameOwnLogsIdUserLogsLogin = (
    serviceName: string,
    id: number,
    login: string,
    hostingWebUserLogsOVH: NonReadonly<HostingWebUserLogsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}/userLogs/${login}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebUserLogsOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameOwnLogsIdUserLogsLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError,{serviceName: string;id: number;login: string;data: NonReadonly<HostingWebUserLogsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError,{serviceName: string;id: number;login: string;data: NonReadonly<HostingWebUserLogsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameOwnLogsIdUserLogsLogin>>, {serviceName: string;id: number;login: string;data: NonReadonly<HostingWebUserLogsOVH>}> = (props) => {
          const {serviceName,id,login,data} = props ?? {};

          return  putHostingWebServiceNameOwnLogsIdUserLogsLogin(serviceName,id,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameOwnLogsIdUserLogsLoginMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameOwnLogsIdUserLogsLogin>>>
    export type PutHostingWebServiceNameOwnLogsIdUserLogsLoginMutationBody = NonReadonly<HostingWebUserLogsOVH>
    export type PutHostingWebServiceNameOwnLogsIdUserLogsLoginMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutHostingWebServiceNameOwnLogsIdUserLogsLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameOwnLogsIdUserLogsLogin>>, TError,{serviceName: string;id: number;login: string;data: NonReadonly<HostingWebUserLogsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameOwnLogsIdUserLogsLogin>>,
        TError,
        {serviceName: string;id: number;login: string;data: NonReadonly<HostingWebUserLogsOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameOwnLogsIdUserLogsLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request a password change
 */
export const postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword = (
    serviceName: string,
    id: number,
    login: string,
    postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody: PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/ownLogs/${id}/userLogs/${login}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword>>, TError,{serviceName: string;id: number;login: string;data: PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword>>, TError,{serviceName: string;id: number;login: string;data: PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword>>, {serviceName: string;id: number;login: string;data: PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody}> = (props) => {
          const {serviceName,id,login,data} = props ?? {};

          return  postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword(serviceName,id,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword>>>
    export type PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordMutationBody = PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody
    export type PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordMutationError = unknown

    /**
 * @summary Request a password change
 */
export const usePostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword>>, TError,{serviceName: string;id: number;login: string;data: PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameOwnLogsIdUserLogsLoginChangePassword>>,
        TError,
        {serviceName: string;id: number;login: string;data: PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available privateDatabase you can install
 */
export const getHostingWebServiceNamePrivateDatabaseCreationCapabilities = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebDatabaseCreationDatabaseCapabilitiesOVH[]>(
      {url: `/hosting/web/${serviceName}/privateDatabaseCreationCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/privateDatabaseCreationCapabilities`] as const;
    }

    
export const getGetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>> = ({ signal }) => getHostingWebServiceNamePrivateDatabaseCreationCapabilities(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>>
export type GetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesQueryError = unknown


export function useGetHostingWebServiceNamePrivateDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNamePrivateDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNamePrivateDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available privateDatabase you can install
 */

export function useGetHostingWebServiceNamePrivateDatabaseCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabaseCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List linked privateDatabases
 */
export const getHostingWebServiceNamePrivateDatabases = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/privateDatabases`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNamePrivateDatabasesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/privateDatabases`] as const;
    }

    
export const getGetHostingWebServiceNamePrivateDatabasesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNamePrivateDatabasesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>> = ({ signal }) => getHostingWebServiceNamePrivateDatabases(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNamePrivateDatabasesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>>
export type GetHostingWebServiceNamePrivateDatabasesQueryError = unknown


export function useGetHostingWebServiceNamePrivateDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNamePrivateDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNamePrivateDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List linked privateDatabases
 */

export function useGetHostingWebServiceNamePrivateDatabases<TData = Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNamePrivateDatabases>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNamePrivateDatabasesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request specific operation for your hosting
 */
export const postHostingWebServiceNameRequest = (
    serviceName: string,
    postHostingWebServiceNameRequestBody: PostHostingWebServiceNameRequestBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/request`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameRequestBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameRequestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRequest>>, TError,{serviceName: string;data: PostHostingWebServiceNameRequestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRequest>>, TError,{serviceName: string;data: PostHostingWebServiceNameRequestBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameRequest>>, {serviceName: string;data: PostHostingWebServiceNameRequestBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameRequest(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameRequest>>>
    export type PostHostingWebServiceNameRequestMutationBody = PostHostingWebServiceNameRequestBody
    export type PostHostingWebServiceNameRequestMutationError = unknown

    /**
 * @summary Request specific operation for your hosting
 */
export const usePostHostingWebServiceNameRequest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRequest>>, TError,{serviceName: string;data: PostHostingWebServiceNameRequestBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameRequest>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameRequestBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request a boost
 */
export const postHostingWebServiceNameRequestBoost = (
    serviceName: string,
    hostingWebRequestBoostInputOVH: HostingWebRequestBoostInputOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/requestBoost`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebRequestBoostInputOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameRequestBoostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRequestBoost>>, TError,{serviceName: string;data: HostingWebRequestBoostInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRequestBoost>>, TError,{serviceName: string;data: HostingWebRequestBoostInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameRequestBoost>>, {serviceName: string;data: HostingWebRequestBoostInputOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameRequestBoost(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameRequestBoostMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameRequestBoost>>>
    export type PostHostingWebServiceNameRequestBoostMutationBody = HostingWebRequestBoostInputOVH
    export type PostHostingWebServiceNameRequestBoostMutationError = unknown

    /**
 * @summary Request a boost
 */
export const usePostHostingWebServiceNameRequestBoost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRequestBoost>>, TError,{serviceName: string;data: HostingWebRequestBoostInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameRequestBoost>>,
        TError,
        {serviceName: string;data: HostingWebRequestBoostInputOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameRequestBoostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Restore this snapshot ALL CURRENT DATA WILL BE REPLACED BY YOUR SNAPSHOT
 */
export const postHostingWebServiceNameRestoreSnapshot = (
    serviceName: string,
    postHostingWebServiceNameRestoreSnapshotBody: PostHostingWebServiceNameRestoreSnapshotBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/restoreSnapshot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameRestoreSnapshotBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameRestoreSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRestoreSnapshot>>, TError,{serviceName: string;data: PostHostingWebServiceNameRestoreSnapshotBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRestoreSnapshot>>, TError,{serviceName: string;data: PostHostingWebServiceNameRestoreSnapshotBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameRestoreSnapshot>>, {serviceName: string;data: PostHostingWebServiceNameRestoreSnapshotBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameRestoreSnapshot(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameRestoreSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameRestoreSnapshot>>>
    export type PostHostingWebServiceNameRestoreSnapshotMutationBody = PostHostingWebServiceNameRestoreSnapshotBody
    export type PostHostingWebServiceNameRestoreSnapshotMutationError = unknown

    /**
 * @summary Restore this snapshot ALL CURRENT DATA WILL BE REPLACED BY YOUR SNAPSHOT
 */
export const usePostHostingWebServiceNameRestoreSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRestoreSnapshot>>, TError,{serviceName: string;data: PostHostingWebServiceNameRestoreSnapshotBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameRestoreSnapshot>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameRestoreSnapshotBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameRestoreSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of runtime configurations to your hosting
 */
export const getHostingWebServiceNameRuntime = (
    serviceName: string,
    params?: GetHostingWebServiceNameRuntimeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/runtime`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameRuntimeQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameRuntimeParams,) => {
    return [`/hosting/web/${serviceName}/runtime`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameRuntimeQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameRuntimeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameRuntimeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>> = ({ signal }) => getHostingWebServiceNameRuntime(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameRuntimeQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>>
export type GetHostingWebServiceNameRuntimeQueryError = unknown


export function useGetHostingWebServiceNameRuntime<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameRuntimeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntime<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameRuntimeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntime<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameRuntimeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of runtime configurations to your hosting
 */

export function useGetHostingWebServiceNameRuntime<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameRuntimeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntime>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameRuntimeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the creation of a new runtime configuration
 */
export const postHostingWebServiceNameRuntime = (
    serviceName: string,
    postHostingWebServiceNameRuntimeBody: PostHostingWebServiceNameRuntimeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/runtime`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameRuntimeBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameRuntimeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRuntime>>, TError,{serviceName: string;data: PostHostingWebServiceNameRuntimeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRuntime>>, TError,{serviceName: string;data: PostHostingWebServiceNameRuntimeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameRuntime>>, {serviceName: string;data: PostHostingWebServiceNameRuntimeBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameRuntime(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameRuntimeMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameRuntime>>>
    export type PostHostingWebServiceNameRuntimeMutationBody = PostHostingWebServiceNameRuntimeBody
    export type PostHostingWebServiceNameRuntimeMutationError = unknown

    /**
 * @summary Request the creation of a new runtime configuration
 */
export const usePostHostingWebServiceNameRuntime = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameRuntime>>, TError,{serviceName: string;data: PostHostingWebServiceNameRuntimeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameRuntime>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameRuntimeBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameRuntimeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a runtime configuration of an hosting
 */
export const deleteHostingWebServiceNameRuntimeId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/runtime/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameRuntimeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameRuntimeId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameRuntimeId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameRuntimeId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteHostingWebServiceNameRuntimeId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameRuntimeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameRuntimeId>>>
    
    export type DeleteHostingWebServiceNameRuntimeIdMutationError = unknown

    /**
 * @summary Delete a runtime configuration of an hosting
 */
export const useDeleteHostingWebServiceNameRuntimeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameRuntimeId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameRuntimeId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameRuntimeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameRuntimeId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebRuntimeOVH>(
      {url: `/hosting/web/${serviceName}/runtime/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameRuntimeIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/runtime/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameRuntimeIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameRuntimeIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>> = ({ signal }) => getHostingWebServiceNameRuntimeId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameRuntimeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>>
export type GetHostingWebServiceNameRuntimeIdQueryError = unknown


export function useGetHostingWebServiceNameRuntimeId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntimeId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntimeId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameRuntimeId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameRuntimeIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putHostingWebServiceNameRuntimeId = (
    serviceName: string,
    id: number,
    hostingWebRuntimeOVH: NonReadonly<HostingWebRuntimeOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/runtime/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebRuntimeOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameRuntimeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameRuntimeId>>, TError,{serviceName: string;id: number;data: NonReadonly<HostingWebRuntimeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameRuntimeId>>, TError,{serviceName: string;id: number;data: NonReadonly<HostingWebRuntimeOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameRuntimeId>>, {serviceName: string;id: number;data: NonReadonly<HostingWebRuntimeOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putHostingWebServiceNameRuntimeId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameRuntimeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameRuntimeId>>>
    export type PutHostingWebServiceNameRuntimeIdMutationBody = NonReadonly<HostingWebRuntimeOVH>
    export type PutHostingWebServiceNameRuntimeIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutHostingWebServiceNameRuntimeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameRuntimeId>>, TError,{serviceName: string;id: number;data: NonReadonly<HostingWebRuntimeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameRuntimeId>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<HostingWebRuntimeOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameRuntimeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the attached domains linked to this runtime configuration
 */
export const getHostingWebServiceNameRuntimeIdAttachedDomains = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/runtime/${id}/attachedDomains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameRuntimeIdAttachedDomainsQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/runtime/${id}/attachedDomains`] as const;
    }

    
export const getGetHostingWebServiceNameRuntimeIdAttachedDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameRuntimeIdAttachedDomainsQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>> = ({ signal }) => getHostingWebServiceNameRuntimeIdAttachedDomains(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameRuntimeIdAttachedDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>>
export type GetHostingWebServiceNameRuntimeIdAttachedDomainsQueryError = unknown


export function useGetHostingWebServiceNameRuntimeIdAttachedDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntimeIdAttachedDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntimeIdAttachedDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the attached domains linked to this runtime configuration
 */

export function useGetHostingWebServiceNameRuntimeIdAttachedDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeIdAttachedDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameRuntimeIdAttachedDomainsQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available runtime configurations available backend types
 */
export const getHostingWebServiceNameRuntimeAvailableTypes = (
    serviceName: string,
    params?: GetHostingWebServiceNameRuntimeAvailableTypesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebRuntimeTypeEnumOVH[]>(
      {url: `/hosting/web/${serviceName}/runtimeAvailableTypes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameRuntimeAvailableTypesQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameRuntimeAvailableTypesParams,) => {
    return [`/hosting/web/${serviceName}/runtimeAvailableTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameRuntimeAvailableTypesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameRuntimeAvailableTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameRuntimeAvailableTypesQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>> = ({ signal }) => getHostingWebServiceNameRuntimeAvailableTypes(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameRuntimeAvailableTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>>
export type GetHostingWebServiceNameRuntimeAvailableTypesQueryError = unknown


export function useGetHostingWebServiceNameRuntimeAvailableTypes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameRuntimeAvailableTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntimeAvailableTypes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameRuntimeAvailableTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameRuntimeAvailableTypes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameRuntimeAvailableTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available runtime configurations available backend types
 */

export function useGetHostingWebServiceNameRuntimeAvailableTypes<TData = Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameRuntimeAvailableTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameRuntimeAvailableTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameRuntimeAvailableTypesQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getHostingWebServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/hosting/web/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetHostingWebServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>> = ({ signal }) => getHostingWebServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>>
export type GetHostingWebServiceNameServiceInfosQueryError = unknown


export function useGetHostingWebServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetHostingWebServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putHostingWebServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHostingWebServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameServiceInfos>>>
    export type PutHostingWebServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutHostingWebServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutHostingWebServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a hosted SSL
 */
export const deleteHostingWebServiceNameSsl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebSSLOVH>(
      {url: `/hosting/web/${serviceName}/ssl`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameSslMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameSsl>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameSsl>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameSsl>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteHostingWebServiceNameSsl(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameSslMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameSsl>>>
    
    export type DeleteHostingWebServiceNameSslMutationError = unknown

    /**
 * @summary Delete a hosted SSL
 */
export const useDeleteHostingWebServiceNameSsl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameSsl>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameSsl>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameSslMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get hosted SSL properties
 */
export const getHostingWebServiceNameSsl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebSSLOVH>(
      {url: `/hosting/web/${serviceName}/ssl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameSslQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/ssl`] as const;
    }

    
export const getGetHostingWebServiceNameSslQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameSslQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>> = ({ signal }) => getHostingWebServiceNameSsl(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameSslQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>>
export type GetHostingWebServiceNameSslQueryError = unknown


export function useGetHostingWebServiceNameSsl<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameSsl<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameSsl<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hosted SSL properties
 */

export function useGetHostingWebServiceNameSsl<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameSslQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create the free default HostedSsl OR import your own SSL on your hosting
 */
export const postHostingWebServiceNameSsl = (
    serviceName: string,
    hostingWebSSLInputOVH: HostingWebSSLInputOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebSSLOVH>(
      {url: `/hosting/web/${serviceName}/ssl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebSSLInputOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameSslMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameSsl>>, TError,{serviceName: string;data: HostingWebSSLInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameSsl>>, TError,{serviceName: string;data: HostingWebSSLInputOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameSsl>>, {serviceName: string;data: HostingWebSSLInputOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameSsl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameSslMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameSsl>>>
    export type PostHostingWebServiceNameSslMutationBody = HostingWebSSLInputOVH
    export type PostHostingWebServiceNameSslMutationError = unknown

    /**
 * @summary Create the free default HostedSsl OR import your own SSL on your hosting
 */
export const usePostHostingWebServiceNameSsl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameSsl>>, TError,{serviceName: string;data: HostingWebSSLInputOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameSsl>>,
        TError,
        {serviceName: string;data: HostingWebSSLInputOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameSslMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of domains linked to the hosted SSL
 */
export const getHostingWebServiceNameSslDomains = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/ssl/domains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameSslDomainsQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/ssl/domains`] as const;
    }

    
export const getGetHostingWebServiceNameSslDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameSslDomainsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>> = ({ signal }) => getHostingWebServiceNameSslDomains(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameSslDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>>
export type GetHostingWebServiceNameSslDomainsQueryError = unknown


export function useGetHostingWebServiceNameSslDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameSslDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameSslDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of domains linked to the hosted SSL
 */

export function useGetHostingWebServiceNameSslDomains<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameSslDomainsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Regenerate a hosted SSL
 */
export const postHostingWebServiceNameSslRegenerate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebSSLOVH>(
      {url: `/hosting/web/${serviceName}/ssl/regenerate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameSslRegenerateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameSslRegenerate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameSslRegenerate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameSslRegenerate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingWebServiceNameSslRegenerate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameSslRegenerateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameSslRegenerate>>>
    
    export type PostHostingWebServiceNameSslRegenerateMutationError = unknown

    /**
 * @summary Regenerate a hosted SSL
 */
export const usePostHostingWebServiceNameSslRegenerate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameSslRegenerate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameSslRegenerate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameSslRegenerateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get hosted SSL report properties
 */
export const getHostingWebServiceNameSslReport = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebSslReportOVH>(
      {url: `/hosting/web/${serviceName}/ssl/report`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameSslReportQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/ssl/report`] as const;
    }

    
export const getGetHostingWebServiceNameSslReportQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameSslReportQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>> = ({ signal }) => getHostingWebServiceNameSslReport(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameSslReportQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>>
export type GetHostingWebServiceNameSslReportQueryError = unknown


export function useGetHostingWebServiceNameSslReport<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameSslReport<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameSslReport<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get hosted SSL report properties
 */

export function useGetHostingWebServiceNameSslReport<TData = Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameSslReport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameSslReportQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get statistics about this web hosting
 */
export const getHostingWebServiceNameStatistics = (
    serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeChartSerieComplexTypeChartTimestampValueOVH[]>(
      {url: `/hosting/web/${serviceName}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameStatisticsQueryKey = (serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams,) => {
    return [`/hosting/web/${serviceName}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError = unknown>(serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameStatisticsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>> = ({ signal }) => getHostingWebServiceNameStatistics(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>>
export type GetHostingWebServiceNameStatisticsQueryError = unknown


export function useGetHostingWebServiceNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get statistics about this web hosting
 */

export function useGetHostingWebServiceNameStatistics<TData = Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameStatisticsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List tasks attached to your hosting
 */
export const getHostingWebServiceNameTasks = (
    serviceName: string,
    params?: GetHostingWebServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameTasksQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameTasksParams,) => {
    return [`/hosting/web/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>> = ({ signal }) => getHostingWebServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>>
export type GetHostingWebServiceNameTasksQueryError = unknown


export function useGetHostingWebServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List tasks attached to your hosting
 */

export function useGetHostingWebServiceNameTasks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this task properties
 */
export const getHostingWebServiceNameTasksId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameTasksIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/tasks/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameTasksIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>> = ({ signal }) => getHostingWebServiceNameTasksId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>>
export type GetHostingWebServiceNameTasksIdQueryError = unknown


export function useGetHostingWebServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this task properties
 */

export function useGetHostingWebServiceNameTasksId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameTasksIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for the termination of your service
 */
export const postHostingWebServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHostingWebServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameTerminate>>>
    
    export type PostHostingWebServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostHostingWebServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Use to link an external domain. ( This token has to be insert into a TXT field on your dns zone with ovhcontrol subdomain )
 * @summary Use to link an external domain
 */
export const getHostingWebServiceNameToken = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/token`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameTokenQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/token`] as const;
    }

    
export const getGetHostingWebServiceNameTokenQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameTokenQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>> = ({ signal }) => getHostingWebServiceNameToken(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>>
export type GetHostingWebServiceNameTokenQueryError = unknown


export function useGetHostingWebServiceNameToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Use to link an external domain
 */

export function useGetHostingWebServiceNameToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameTokenQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary User allowed to connect into your hosting
 */
export const getHostingWebServiceNameUser = (
    serviceName: string,
    params?: GetHostingWebServiceNameUserParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/hosting/web/${serviceName}/user`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameUserQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameUserParams,) => {
    return [`/hosting/web/${serviceName}/user`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameUserQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameUserQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>> = ({ signal }) => getHostingWebServiceNameUser(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameUserQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>>
export type GetHostingWebServiceNameUserQueryError = unknown


export function useGetHostingWebServiceNameUser<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameUser<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameUser<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary User allowed to connect into your hosting
 */

export function useGetHostingWebServiceNameUser<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameUserQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new ftp/ssh user
 */
export const postHostingWebServiceNameUser = (
    serviceName: string,
    postHostingWebServiceNameUserBody: PostHostingWebServiceNameUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameUserBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameUser>>, TError,{serviceName: string;data: PostHostingWebServiceNameUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameUser>>, TError,{serviceName: string;data: PostHostingWebServiceNameUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameUser>>, {serviceName: string;data: PostHostingWebServiceNameUserBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameUserMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameUser>>>
    export type PostHostingWebServiceNameUserMutationBody = PostHostingWebServiceNameUserBody
    export type PostHostingWebServiceNameUserMutationError = unknown

    /**
 * @summary Create new ftp/ssh user
 */
export const usePostHostingWebServiceNameUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameUser>>, TError,{serviceName: string;data: PostHostingWebServiceNameUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameUser>>,
        TError,
        {serviceName: string;data: PostHostingWebServiceNameUserBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete ftp/ssh user
 */
export const deleteHostingWebServiceNameUserLogin = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/user/${login}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameUserLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameUserLogin>>, TError,{serviceName: string;login: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameUserLogin>>, TError,{serviceName: string;login: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameUserLogin>>, {serviceName: string;login: string}> = (props) => {
          const {serviceName,login} = props ?? {};

          return  deleteHostingWebServiceNameUserLogin(serviceName,login,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameUserLoginMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameUserLogin>>>
    
    export type DeleteHostingWebServiceNameUserLoginMutationError = unknown

    /**
 * @summary Delete ftp/ssh user
 */
export const useDeleteHostingWebServiceNameUserLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameUserLogin>>, TError,{serviceName: string;login: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameUserLogin>>,
        TError,
        {serviceName: string;login: string},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameUserLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHostingWebServiceNameUserLogin = (
    serviceName: string,
    login: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebUserOVH>(
      {url: `/hosting/web/${serviceName}/user/${login}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameUserLoginQueryKey = (serviceName: string,
    login: string,) => {
    return [`/hosting/web/${serviceName}/user/${login}`] as const;
    }

    
export const getGetHostingWebServiceNameUserLoginQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError = unknown>(serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameUserLoginQueryKey(serviceName,login);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>> = ({ signal }) => getHostingWebServiceNameUserLogin(serviceName,login, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && login), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameUserLoginQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>>
export type GetHostingWebServiceNameUserLoginQueryError = unknown


export function useGetHostingWebServiceNameUserLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameUserLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameUserLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHostingWebServiceNameUserLogin<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError = unknown>(
 serviceName: string,
    login: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameUserLoginQueryOptions(serviceName,login,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putHostingWebServiceNameUserLogin = (
    serviceName: string,
    login: string,
    hostingWebUserOVH: NonReadonly<HostingWebUserOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/hosting/web/${serviceName}/user/${login}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebUserOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameUserLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameUserLogin>>, TError,{serviceName: string;login: string;data: NonReadonly<HostingWebUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameUserLogin>>, TError,{serviceName: string;login: string;data: NonReadonly<HostingWebUserOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameUserLogin>>, {serviceName: string;login: string;data: NonReadonly<HostingWebUserOVH>}> = (props) => {
          const {serviceName,login,data} = props ?? {};

          return  putHostingWebServiceNameUserLogin(serviceName,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameUserLoginMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameUserLogin>>>
    export type PutHostingWebServiceNameUserLoginMutationBody = NonReadonly<HostingWebUserOVH>
    export type PutHostingWebServiceNameUserLoginMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutHostingWebServiceNameUserLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameUserLogin>>, TError,{serviceName: string;login: string;data: NonReadonly<HostingWebUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameUserLogin>>,
        TError,
        {serviceName: string;login: string;data: NonReadonly<HostingWebUserOVH>},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameUserLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request a password change
 */
export const postHostingWebServiceNameUserLoginChangePassword = (
    serviceName: string,
    login: string,
    postHostingWebServiceNameUserLoginChangePasswordBody: PostHostingWebServiceNameUserLoginChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebTaskOVH>(
      {url: `/hosting/web/${serviceName}/user/${login}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHostingWebServiceNameUserLoginChangePasswordBody, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameUserLoginChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameUserLoginChangePassword>>, TError,{serviceName: string;login: string;data: PostHostingWebServiceNameUserLoginChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameUserLoginChangePassword>>, TError,{serviceName: string;login: string;data: PostHostingWebServiceNameUserLoginChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameUserLoginChangePassword>>, {serviceName: string;login: string;data: PostHostingWebServiceNameUserLoginChangePasswordBody}> = (props) => {
          const {serviceName,login,data} = props ?? {};

          return  postHostingWebServiceNameUserLoginChangePassword(serviceName,login,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameUserLoginChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameUserLoginChangePassword>>>
    export type PostHostingWebServiceNameUserLoginChangePasswordMutationBody = PostHostingWebServiceNameUserLoginChangePasswordBody
    export type PostHostingWebServiceNameUserLoginChangePasswordMutationError = unknown

    /**
 * @summary Request a password change
 */
export const usePostHostingWebServiceNameUserLoginChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameUserLoginChangePassword>>, TError,{serviceName: string;login: string;data: PostHostingWebServiceNameUserLoginChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameUserLoginChangePassword>>,
        TError,
        {serviceName: string;login: string;data: PostHostingWebServiceNameUserLoginChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameUserLoginChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a temporary token to access the your web hosting logs interface
 */
export const getHostingWebServiceNameUserLogsToken = (
    serviceName: string,
    params?: GetHostingWebServiceNameUserLogsTokenParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/hosting/web/${serviceName}/userLogsToken`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameUserLogsTokenQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameUserLogsTokenParams,) => {
    return [`/hosting/web/${serviceName}/userLogsToken`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameUserLogsTokenQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameUserLogsTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameUserLogsTokenQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>> = ({ signal }) => getHostingWebServiceNameUserLogsToken(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameUserLogsTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>>
export type GetHostingWebServiceNameUserLogsTokenQueryError = unknown


export function useGetHostingWebServiceNameUserLogsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameUserLogsTokenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameUserLogsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameUserLogsTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameUserLogsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameUserLogsTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a temporary token to access the your web hosting logs interface
 */

export function useGetHostingWebServiceNameUserLogsToken<TData = Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameUserLogsTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameUserLogsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameUserLogsTokenQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get VCS webhook URLs
 */
export const getHostingWebServiceNameVcsWebhooks = (
    serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebVcsWebhooksOVH>(
      {url: `/hosting/web/${serviceName}/vcs/webhooks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameVcsWebhooksQueryKey = (serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams,) => {
    return [`/hosting/web/${serviceName}/vcs/webhooks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameVcsWebhooksQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError = unknown>(serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameVcsWebhooksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>> = ({ signal }) => getHostingWebServiceNameVcsWebhooks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameVcsWebhooksQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>>
export type GetHostingWebServiceNameVcsWebhooksQueryError = unknown


export function useGetHostingWebServiceNameVcsWebhooks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameVcsWebhooks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameVcsWebhooks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get VCS webhook URLs
 */

export function useGetHostingWebServiceNameVcsWebhooks<TData = Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError = unknown>(
 serviceName: string,
    params: GetHostingWebServiceNameVcsWebhooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameVcsWebhooks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameVcsWebhooksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Websites on your webhosting
 */
export const getHostingWebServiceNameWebsite = (
    serviceName: string,
    params?: GetHostingWebServiceNameWebsiteParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/website`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameWebsiteQueryKey = (serviceName: string,
    params?: GetHostingWebServiceNameWebsiteParams,) => {
    return [`/hosting/web/${serviceName}/website`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHostingWebServiceNameWebsiteQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError = unknown>(serviceName: string,
    params?: GetHostingWebServiceNameWebsiteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameWebsiteQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>> = ({ signal }) => getHostingWebServiceNameWebsite(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameWebsiteQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>>
export type GetHostingWebServiceNameWebsiteQueryError = unknown


export function useGetHostingWebServiceNameWebsite<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHostingWebServiceNameWebsiteParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsite<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameWebsiteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsite<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameWebsiteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Websites on your webhosting
 */

export function useGetHostingWebServiceNameWebsite<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError = unknown>(
 serviceName: string,
    params?: GetHostingWebServiceNameWebsiteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsite>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameWebsiteQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a website on your hosting
 */
export const postHostingWebServiceNameWebsite = (
    serviceName: string,
    hostingWebWebsiteCreationRequestOVH: HostingWebWebsiteCreationRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/website`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebWebsiteCreationRequestOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameWebsiteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameWebsite>>, TError,{serviceName: string;data: HostingWebWebsiteCreationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameWebsite>>, TError,{serviceName: string;data: HostingWebWebsiteCreationRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameWebsite>>, {serviceName: string;data: HostingWebWebsiteCreationRequestOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHostingWebServiceNameWebsite(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameWebsiteMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameWebsite>>>
    export type PostHostingWebServiceNameWebsiteMutationBody = HostingWebWebsiteCreationRequestOVH
    export type PostHostingWebServiceNameWebsiteMutationError = unknown

    /**
 * @summary Create a website on your hosting
 */
export const usePostHostingWebServiceNameWebsite = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameWebsite>>, TError,{serviceName: string;data: HostingWebWebsiteCreationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameWebsite>>,
        TError,
        {serviceName: string;data: HostingWebWebsiteCreationRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameWebsiteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a website on your hosting
 */
export const deleteHostingWebServiceNameWebsiteId = (
    serviceName: string,
    id: number,
    params: DeleteHostingWebServiceNameWebsiteIdParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/website/${id}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteHostingWebServiceNameWebsiteIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameWebsiteId>>, TError,{serviceName: string;id: number;params: DeleteHostingWebServiceNameWebsiteIdParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameWebsiteId>>, TError,{serviceName: string;id: number;params: DeleteHostingWebServiceNameWebsiteIdParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHostingWebServiceNameWebsiteId>>, {serviceName: string;id: number;params: DeleteHostingWebServiceNameWebsiteIdParams}> = (props) => {
          const {serviceName,id,params} = props ?? {};

          return  deleteHostingWebServiceNameWebsiteId(serviceName,id,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHostingWebServiceNameWebsiteIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostingWebServiceNameWebsiteId>>>
    
    export type DeleteHostingWebServiceNameWebsiteIdMutationError = unknown

    /**
 * @summary Delete a website on your hosting
 */
export const useDeleteHostingWebServiceNameWebsiteId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHostingWebServiceNameWebsiteId>>, TError,{serviceName: string;id: number;params: DeleteHostingWebServiceNameWebsiteIdParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHostingWebServiceNameWebsiteId>>,
        TError,
        {serviceName: string;id: number;params: DeleteHostingWebServiceNameWebsiteIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteHostingWebServiceNameWebsiteIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get website by id
 */
export const getHostingWebServiceNameWebsiteId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebWebsiteOVH>(
      {url: `/hosting/web/${serviceName}/website/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameWebsiteIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/website/${id}`] as const;
    }

    
export const getGetHostingWebServiceNameWebsiteIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameWebsiteIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>> = ({ signal }) => getHostingWebServiceNameWebsiteId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameWebsiteIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>>
export type GetHostingWebServiceNameWebsiteIdQueryError = unknown


export function useGetHostingWebServiceNameWebsiteId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get website by id
 */

export function useGetHostingWebServiceNameWebsiteId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameWebsiteIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a website on your hosting
 */
export const putHostingWebServiceNameWebsiteId = (
    serviceName: string,
    id: number,
    hostingWebWebsiteUpdateOVH: HostingWebWebsiteUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HostingWebWebsiteOVH>(
      {url: `/hosting/web/${serviceName}/website/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebWebsiteUpdateOVH
    },
      options);
    }
  


export const getPutHostingWebServiceNameWebsiteIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameWebsiteId>>, TError,{serviceName: string;id: number;data: HostingWebWebsiteUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameWebsiteId>>, TError,{serviceName: string;id: number;data: HostingWebWebsiteUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHostingWebServiceNameWebsiteId>>, {serviceName: string;id: number;data: HostingWebWebsiteUpdateOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putHostingWebServiceNameWebsiteId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHostingWebServiceNameWebsiteIdMutationResult = NonNullable<Awaited<ReturnType<typeof putHostingWebServiceNameWebsiteId>>>
    export type PutHostingWebServiceNameWebsiteIdMutationBody = HostingWebWebsiteUpdateOVH
    export type PutHostingWebServiceNameWebsiteIdMutationError = unknown

    /**
 * @summary Update a website on your hosting
 */
export const usePutHostingWebServiceNameWebsiteId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHostingWebServiceNameWebsiteId>>, TError,{serviceName: string;id: number;data: HostingWebWebsiteUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHostingWebServiceNameWebsiteId>>,
        TError,
        {serviceName: string;id: number;data: HostingWebWebsiteUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutHostingWebServiceNameWebsiteIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request deployment of the website
 */
export const postHostingWebServiceNameWebsiteIdDeploy = (
    serviceName: string,
    id: number,
    hostingWebWebsiteDeploymentRequestOVH: HostingWebWebsiteDeploymentRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebPublicTaskOVH>(
      {url: `/hosting/web/${serviceName}/website/${id}/deploy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: hostingWebWebsiteDeploymentRequestOVH, signal
    },
      options);
    }
  


export const getPostHostingWebServiceNameWebsiteIdDeployMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameWebsiteIdDeploy>>, TError,{serviceName: string;id: number;data: HostingWebWebsiteDeploymentRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameWebsiteIdDeploy>>, TError,{serviceName: string;id: number;data: HostingWebWebsiteDeploymentRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHostingWebServiceNameWebsiteIdDeploy>>, {serviceName: string;id: number;data: HostingWebWebsiteDeploymentRequestOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postHostingWebServiceNameWebsiteIdDeploy(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHostingWebServiceNameWebsiteIdDeployMutationResult = NonNullable<Awaited<ReturnType<typeof postHostingWebServiceNameWebsiteIdDeploy>>>
    export type PostHostingWebServiceNameWebsiteIdDeployMutationBody = HostingWebWebsiteDeploymentRequestOVH
    export type PostHostingWebServiceNameWebsiteIdDeployMutationError = unknown

    /**
 * @summary Request deployment of the website
 */
export const usePostHostingWebServiceNameWebsiteIdDeploy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHostingWebServiceNameWebsiteIdDeploy>>, TError,{serviceName: string;id: number;data: HostingWebWebsiteDeploymentRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHostingWebServiceNameWebsiteIdDeploy>>,
        TError,
        {serviceName: string;id: number;data: HostingWebWebsiteDeploymentRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostHostingWebServiceNameWebsiteIdDeployMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Deployments of the website
 */
export const getHostingWebServiceNameWebsiteIdDeployment = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/hosting/web/${serviceName}/website/${id}/deployment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameWebsiteIdDeploymentQueryKey = (serviceName: string,
    id: number,) => {
    return [`/hosting/web/${serviceName}/website/${id}/deployment`] as const;
    }

    
export const getGetHostingWebServiceNameWebsiteIdDeploymentQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameWebsiteIdDeploymentQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>> = ({ signal }) => getHostingWebServiceNameWebsiteIdDeployment(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameWebsiteIdDeploymentQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>>
export type GetHostingWebServiceNameWebsiteIdDeploymentQueryError = unknown


export function useGetHostingWebServiceNameWebsiteIdDeployment<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteIdDeployment<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteIdDeployment<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Deployments of the website
 */

export function useGetHostingWebServiceNameWebsiteIdDeployment<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeployment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameWebsiteIdDeploymentQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get deployment by id
 */
export const getHostingWebServiceNameWebsiteIdDeploymentDeploymentId = (
    serviceName: string,
    id: number,
    deploymentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebWebsiteDeploymentOVH>(
      {url: `/hosting/web/${serviceName}/website/${id}/deployment/${deploymentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdQueryKey = (serviceName: string,
    id: number,
    deploymentId: number,) => {
    return [`/hosting/web/${serviceName}/website/${id}/deployment/${deploymentId}`] as const;
    }

    
export const getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError = unknown>(serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdQueryKey(serviceName,id,deploymentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>> = ({ signal }) => getHostingWebServiceNameWebsiteIdDeploymentDeploymentId(serviceName,id,deploymentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id && deploymentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>>
export type GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdQueryError = unknown


export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get deployment by id
 */

export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentId<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdQueryOptions(serviceName,id,deploymentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get logs of a website deployment
 */
export const getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs = (
    serviceName: string,
    id: number,
    deploymentId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebWebsiteDeploymentLogsMessageOVH[]>(
      {url: `/hosting/web/${serviceName}/website/${id}/deployment/${deploymentId}/logs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsQueryKey = (serviceName: string,
    id: number,
    deploymentId: number,) => {
    return [`/hosting/web/${serviceName}/website/${id}/deployment/${deploymentId}/logs`] as const;
    }

    
export const getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError = unknown>(serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsQueryKey(serviceName,id,deploymentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>> = ({ signal }) => getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs(serviceName,id,deploymentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id && deploymentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>>
export type GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsQueryError = unknown


export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get logs of a website deployment
 */

export function useGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError = unknown>(
 serviceName: string,
    id: number,
    deploymentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsQueryOptions(serviceName,id,deploymentId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get website creation capabilities of the hosting
 */
export const getHostingWebServiceNameWebsiteCreationCapabilities = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HostingWebWebsiteCreationCapabilitiesOVH>(
      {url: `/hosting/web/${serviceName}/websiteCreationCapabilities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHostingWebServiceNameWebsiteCreationCapabilitiesQueryKey = (serviceName: string,) => {
    return [`/hosting/web/${serviceName}/websiteCreationCapabilities`] as const;
    }

    
export const getGetHostingWebServiceNameWebsiteCreationCapabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHostingWebServiceNameWebsiteCreationCapabilitiesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>> = ({ signal }) => getHostingWebServiceNameWebsiteCreationCapabilities(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHostingWebServiceNameWebsiteCreationCapabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>>
export type GetHostingWebServiceNameWebsiteCreationCapabilitiesQueryError = unknown


export function useGetHostingWebServiceNameWebsiteCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHostingWebServiceNameWebsiteCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get website creation capabilities of the hosting
 */

export function useGetHostingWebServiceNameWebsiteCreationCapabilities<TData = Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHostingWebServiceNameWebsiteCreationCapabilities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHostingWebServiceNameWebsiteCreationCapabilitiesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetOverTheBoxServiceNameTasksParams = {
/**
 * Filter the value of name property (=)
 */
name?: string;
/**
 * Filter the value of status property (=)
 */
status?: OverTheBoxTaskStatusEnumOVH;
};

export type GetOverTheBoxServiceNameStatisticsParams = {
/**
 * Type of metrics you want to retrieve
 */
metricsType: OtbDeviceStatisticsTypeEnumOVH;
/**
 * Period (default is daily)
 */
period?: OtbDeviceStatisticsPeriodEnumOVH;
};

export type PostOverTheBoxServiceNameRemoteAccessesBody = {
  /** IP block from which the remote access will be allowed (the default value is the IP from which the call is made) */
  allowedIp?: IpBlockOVH;
  /** The expirationDate of the remote access (default 1 day) */
  expirationDate?: string;
  /** The port that the device will expose */
  exposedPort: number;
  /** The remote user public key authorized on the device (for SSH purpose) */
  publicKey?: string;
};

export type PostOverTheBoxServiceNameMigrationChangeOffersBody = {
  /** Name of the hardware */
  hardwareName?: string;
  /** Offer name to migrate to */
  offer: string;
  /** In case of hardware and if a shipping custom address is desired */
  shippingContactID?: string;
};

export type PostOverTheBoxServiceNameLinkHardwareBody = {
  /** The internal name of your hardware */
  hardwareName: string;
};

export type PostOverTheBoxServiceNameLinkDeviceBody = {
  /** The id of the device */
  deviceId: string;
};

export type PostOverTheBoxServiceNameDeviceRestoreBackupBody = {
  /** The id of the backup to restore */
  backupId: string;
};

export type PostOverTheBoxServiceNameDeviceActionsBody = {
  /** Name of the action */
  name: string;
};

export type GetOverTheBoxServiceNameDeviceActionsParams = {
/**
 * Filter the value of name property (=)
 */
name?: string;
/**
 * Filter the value of status property (=)
 */
status?: OverTheBoxActionStatusEnumOVH;
};

export type PostOverTheBoxServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type PutOverTheBoxServiceNameAutoMTUBody = {
  /** Enable or disable autoMTU */
  mtuAuto: OverTheBoxAvailableStatusEnumOVH;
};

export type GetOverTheBoxHardwareParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetOverTheBoxParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Enum of Offers
 */
export type PriceOverTheBoxOfferEnumOVH = typeof PriceOverTheBoxOfferEnumOVH[keyof typeof PriceOverTheBoxOfferEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceOverTheBoxOfferEnumOVH = {
  businessv1: 'business.v1',
  plusv1: 'plus.v1',
  starterv1: 'starter.v1',
} as const;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * Tunnel mode of the service.
 */
export type OverTheBoxTunnelModeEnumOVH = typeof OverTheBoxTunnelModeEnumOVH[keyof typeof OverTheBoxTunnelModeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxTunnelModeEnumOVH = {
  glorytun: 'glorytun',
  glorytun_hybrid: 'glorytun_hybrid',
  glorytun_mud: 'glorytun_mud',
} as const;

/**
 * Temporary url informations
 */
export interface OverTheBoxTemporaryLogsLinkOVH {
  /** Temporary url expiration date */
  expirationDate?: string;
  /** Temporary url */
  url?: string;
}

/**
 * Status of a task.
 */
export type OverTheBoxTaskStatusEnumOVH = typeof OverTheBoxTaskStatusEnumOVH[keyof typeof OverTheBoxTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxTaskStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Task
 */
export interface OverTheBoxTaskOVH {
  /** The name of the task */
  readonly name?: string;
  /** The status of the task */
  readonly status?: OverTheBoxTaskStatusEnumOVH;
  /** The id of the task */
  readonly taskId?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type OverTheBoxServiceWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Parameters needed to fetch metrics
 * @nullable
 */
export type OverTheBoxServiceWithIAMOVHGraphEndpoint = OverTheBoxGraphEndpointOVH | null;

/**
 * Status of the service.
 */
export type OverTheBoxServiceStatusEnumOVH = typeof OverTheBoxServiceStatusEnumOVH[keyof typeof OverTheBoxServiceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxServiceStatusEnumOVH = {
  active: 'active',
  creating: 'creating',
  deleted: 'deleted',
  suspended: 'suspended',
  toCreate: 'toCreate',
  toDelete: 'toDelete',
} as const;

/**
 * Configuration mode of the service
 */
export type OverTheBoxServiceConfigurationModeEnumOVH = typeof OverTheBoxServiceConfigurationModeEnumOVH[keyof typeof OverTheBoxServiceConfigurationModeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxServiceConfigurationModeEnumOVH = {
  autoconfigure: 'autoconfigure',
  local: 'local',
} as const;

/**
 * Service
 */
export interface OverTheBoxServiceWithIAMOVH {
  /** The status of the autoMTU */
  readonly autoMTU?: OverTheBoxAvailableStatusEnumOVH;
  /** Enable device auto upgrade */
  autoUpgrade?: boolean;
  /** The service maximum bandwidth in bits */
  readonly bandwidth?: number;
  /** Configuration mode of the service */
  readonly configurationMode?: OverTheBoxServiceConfigurationModeEnumOVH;
  /**
   * Editable field for customer
   * @nullable
   */
  customerDescription?: string | null;
  /**
   * Parameters needed to fetch metrics
   * @nullable
   */
  readonly graphEndpoint?: OverTheBoxServiceWithIAMOVHGraphEndpoint;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: OverTheBoxServiceWithIAMOVHIam;
  /** The service offer */
  readonly offer?: string;
  /** The service pretty offer name */
  readonly prettyOfferName?: string;
  /** Release channel of the service */
  releaseChannel?: string;
  /** The name of the service */
  readonly serviceName?: string;
  /** If the socks proxy is enabled */
  readonly SOCKSProxyEnabled?: boolean;
  /** The status of the service */
  readonly status?: OverTheBoxServiceStatusEnumOVH;
  /** The tunnel mode of the service */
  readonly tunnelMode?: OverTheBoxTunnelModeEnumOVH;
}

/**
 * Parameters needed to fetch metrics
 * @nullable
 */
export type OverTheBoxServiceOVHGraphEndpoint = OverTheBoxGraphEndpointOVH | null;

/**
 * Service
 */
export interface OverTheBoxServiceOVH {
  /** The status of the autoMTU */
  readonly autoMTU?: OverTheBoxAvailableStatusEnumOVH;
  /** Enable device auto upgrade */
  autoUpgrade?: boolean;
  /** The service maximum bandwidth in bits */
  readonly bandwidth?: number;
  /** Configuration mode of the service */
  readonly configurationMode?: OverTheBoxServiceConfigurationModeEnumOVH;
  /**
   * Editable field for customer
   * @nullable
   */
  customerDescription?: string | null;
  /**
   * Parameters needed to fetch metrics
   * @nullable
   */
  readonly graphEndpoint?: OverTheBoxServiceOVHGraphEndpoint;
  /** The service offer */
  readonly offer?: string;
  /** The service pretty offer name */
  readonly prettyOfferName?: string;
  /** Release channel of the service */
  releaseChannel?: string;
  /** The name of the service */
  readonly serviceName?: string;
  /** If the socks proxy is enabled */
  readonly SOCKSProxyEnabled?: boolean;
  /** The status of the service */
  readonly status?: OverTheBoxServiceStatusEnumOVH;
  /** The tunnel mode of the service */
  readonly tunnelMode?: OverTheBoxTunnelModeEnumOVH;
}

/**
 * Infos about the remote user
 */
export interface OverTheBoxRemoteAccessUserInfosOVH {
  /** IP from which the remote access will be allowed */
  ip?: IpBlockOVH;
  /**
   * The public key authorized on the device (for SSH purpose)
   * @nullable
   */
  publicKey?: string | null;
  /** The user that will access the device remotely */
  user?: string;
}

/**
 * Status of the remote access.
 */
export type OverTheBoxRemoteAccessStatusEnumOVH = typeof OverTheBoxRemoteAccessStatusEnumOVH[keyof typeof OverTheBoxRemoteAccessStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxRemoteAccessStatusEnumOVH = {
  active: 'active',
  creating: 'creating',
  deleted: 'deleted',
  deleting: 'deleting',
  pendingValidation: 'pendingValidation',
  recreating: 'recreating',
  toDelete: 'toDelete',
  toRecreate: 'toRecreate',
} as const;

/**
 * IP to connect to when accessing the device remotely
 * @nullable
 */
export type OverTheBoxRemoteAccessConnectionInfosOVHIp = IpOVH | null;

/**
 * All the infos needed to connect yourself to your OTB
 */
export interface OverTheBoxRemoteAccessConnectionInfosOVH {
  /**
   * IP to connect to when accessing the device remotely
   * @nullable
   */
  ip?: OverTheBoxRemoteAccessConnectionInfosOVHIp;
  /**
   * Port to connect to when accessing the device remotely
   * @nullable
   */
  port?: number | null;
}

/**
 * If authorized, a remote access will expose a port, allowing an access to the device remotely
 */
export interface OverTheBoxRemoteAccessOVH {
  /** If the remote access was accepted by the remote user */
  readonly accepted?: boolean;
  /** The date of the remote access demand */
  readonly askDate?: string;
  /**
   * The user that authorized the remote access
   * @nullable
   */
  readonly authorizedBy?: string | null;
  /** All the infos needed to connect yourself to your OTB */
  readonly connectionInfos?: OverTheBoxRemoteAccessConnectionInfosOVH;
  /**
   * When the remote access was deleted
   * @nullable
   */
  readonly deletedAt?: string | null;
  /** Info about the docker version */
  readonly dockerVersion?: string;
  /** When the remote access will be automatically deleted */
  readonly expirationDate?: string;
  /** The device's port which will be exposed */
  readonly exposedPort?: number;
  /** The id of the remote access */
  readonly remoteAccessId?: string;
  /** Infos about the remote user */
  readonly remoteUserInfos?: OverTheBoxRemoteAccessUserInfosOVH;
  /** Status of the remote access */
  readonly status?: OverTheBoxRemoteAccessStatusEnumOVH;
}

/**
 * Migration order
 */
export interface OverTheBoxOrderMigrationOVH {
  /** Id of the migration order */
  orderId?: string;
  /** URL of the migration order */
  orderUrl?: string;
}

/**
 * Status of a MPTCP Interface.
 */
export type OverTheBoxMultipathStatusEnumOVH = typeof OverTheBoxMultipathStatusEnumOVH[keyof typeof OverTheBoxMultipathStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxMultipathStatusEnumOVH = {
  backup: 'backup',
  handover: 'handover',
  master: 'master',
  off: 'off',
  on: 'on',
} as const;

/**
 * Hardware MAC address
 * @nullable
 */
export type OverTheBoxHardwareWithIAMOVHMac = MacAddressOVH | null;

/**
 * IAM resource metadata
 * @nullable
 */
export type OverTheBoxHardwareWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Hardware properties
 */
export interface OverTheBoxHardwareWithIAMOVH {
  /** True if hardware can be linked to a service without deviceID */
  readonly canBeLinkedToService?: boolean;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: OverTheBoxHardwareWithIAMOVHIam;
  /**
   * Hardware MAC address
   * @nullable
   */
  readonly mac?: OverTheBoxHardwareWithIAMOVHMac;
  /** Hardware model */
  readonly model?: string;
  /** Hardware name */
  readonly name?: string;
  /** The hardware pretty model name */
  readonly prettyModelName?: string;
  /** Hardware serial */
  readonly serial?: string;
}

/**
 * Hardware purchase price
 * @nullable
 */
export type OverTheBoxHardwareDetailsOVHHardwarePrice = OrderPriceOVH | null;

/**
 * Details of available hardwares
 */
export interface OverTheBoxHardwareDetailsOVH {
  /**
   * Pretty hardware model name
   * @nullable
   */
  hardwareDisplayName?: string | null;
  /**
   * Name of the hardware
   * @nullable
   */
  hardwareName?: string | null;
  /**
   * Hardware purchase price
   * @nullable
   */
  hardwarePrice?: OverTheBoxHardwareDetailsOVHHardwarePrice;
}

/**
 * Hardware MAC address
 * @nullable
 */
export type OverTheBoxHardwareOVHMac = MacAddressOVH | null;

/**
 * Hardware properties
 */
export interface OverTheBoxHardwareOVH {
  /** True if hardware can be linked to a service without deviceID */
  readonly canBeLinkedToService?: boolean;
  /**
   * Hardware MAC address
   * @nullable
   */
  readonly mac?: OverTheBoxHardwareOVHMac;
  /** Hardware model */
  readonly model?: string;
  /** Hardware name */
  readonly name?: string;
  /** The hardware pretty model name */
  readonly prettyModelName?: string;
  /** Hardware serial */
  readonly serial?: string;
}

/**
 * Parameters required to query metrics from OpenTSDB
 */
export interface OverTheBoxGraphEndpointOVH {
  /** The OpenTSDB host */
  host?: string;
  /** A read-only token */
  readToken?: string;
  /** The read-only token ID */
  readTokenID?: string;
}

/**
 * Infos about a device system
 */
export interface OverTheBoxDeviceSystemOVH {
  /**
   * Device CPU
   * @nullable
   */
  cpu?: string | null;
  /**
   * Device hostname
   * @nullable
   */
  hostname?: string | null;
  /**
   * Device linux kernel version
   * @nullable
   */
  kernel?: string | null;
  /**
   * Device mac address (first interface mac)
   * @nullable
   */
  mac?: string | null;
  /**
   * Device model
   * @nullable
   */
  model?: string | null;
  /**
   * Name of the device board
   * @nullable
   */
  name?: string | null;
  /**
   * OVH offer name of the device board
   * @nullable
   */
  offerName?: string | null;
  /**
   * OVH name of the device board
   * @nullable
   */
  ovhName?: string | null;
}

/**
 * Public IP of the interface
 * @nullable
 */
export type OverTheBoxDeviceInterfaceOVHPublicIp = IpOVH | null;

/**
 * Netmask of the interface
 * @nullable
 */
export type OverTheBoxDeviceInterfaceOVHNetmask = IpOVH | null;

/**
 * IP of the interface
 * @nullable
 */
export type OverTheBoxDeviceInterfaceOVHIp = IpOVH | null;

/**
 * Gateway of the interface
 * @nullable
 */
export type OverTheBoxDeviceInterfaceOVHGateway = IpOVH | null;

/**
 * Infos about a network interface
 */
export interface OverTheBoxDeviceInterfaceOVH {
  /**
   * Device of the interface
   * @nullable
   */
  device?: string | null;
  /**
   * The DNS servers of this interface
   * @nullable
   */
  dnsServers?: IpOVH[] | null;
  /**
   * Gateway of the interface
   * @nullable
   */
  gateway?: OverTheBoxDeviceInterfaceOVHGateway;
  /**
   * IP of the interface
   * @nullable
   */
  ip?: OverTheBoxDeviceInterfaceOVHIp;
  /** Status of MPTCP on this interface */
  multipathStatus?: OverTheBoxMultipathStatusEnumOVH;
  /** Name of the interface */
  name?: string;
  /**
   * Netmask of the interface
   * @nullable
   */
  netmask?: OverTheBoxDeviceInterfaceOVHNetmask;
  /**
   * Public IP of the interface
   * @nullable
   */
  publicIp?: OverTheBoxDeviceInterfaceOVHPublicIp;
}

/**
 * A device for registration
 */
export interface OverTheBoxDeviceForRegistrationOVH {
  /** Whether or not this device is actived */
  activated?: boolean;
  deviceId?: string;
  /** The last time this device was seen on the provisionning servers */
  lastSeen?: string;
}

/**
 * Device action
 */
export interface OverTheBoxDeviceActionOVH {
  /** The id of the action */
  readonly actionId?: string;
  /** Date of creation of the action */
  readonly createdAt?: string;
  /** The details of the action */
  readonly details?: string;
  /** The name of the action */
  readonly name?: string;
  /** The status of the action */
  readonly status?: OverTheBoxActionStatusEnumOVH;
  /** Date of execution of the action */
  readonly todoDate?: string;
  /** Last time the action was updated */
  readonly updatedAt?: string;
}

/**
 * Device system information
 * @nullable
 */
export type OverTheBoxDeviceOVHSystem = OverTheBoxDeviceSystemOVH | null;

/**
 * Device
 */
export interface OverTheBoxDeviceOVH {
  /** Whether or not this device is associated to a service */
  readonly activated?: boolean;
  /** Whether or not an upate is available for this device */
  readonly availableUpdate?: boolean;
  /** The id of the device */
  readonly deviceId?: string;
  /** Last time the device has been seen on the provisionning servers */
  readonly lastSeen?: string;
  /** Network interfaces of the device */
  readonly networkInterfaces?: readonly OverTheBoxDeviceInterfaceOVH[];
  /** The public IP of the device */
  readonly publicIp?: IpOVH;
  /**
   * Device system information
   * @nullable
   */
  readonly system?: OverTheBoxDeviceOVHSystem;
  /** System version of the device */
  readonly systemVersion?: string;
  /** Version of the device */
  readonly version?: string;
}

/**
 * Backup
 */
export interface OverTheBoxBackupOVH {
  /** The id of the backup */
  readonly backupId?: string;
  /** Date of the creation of the backup */
  readonly createdAt?: string;
  /**
   * The id of the device action that triggered the backup
   * @nullable
   */
  readonly deviceActionId?: string | null;
}

/**
 * Status of the service
 */
export type OverTheBoxAvailableStatusEnumOVH = typeof OverTheBoxAvailableStatusEnumOVH[keyof typeof OverTheBoxAvailableStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxAvailableStatusEnumOVH = {
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * Hardware purchase price
 * @nullable
 */
export type OverTheBoxAvailableMigrationOfferOVHHardwarePrice = OrderPriceOVH | null;

/**
 * Migration offer
 */
export interface OverTheBoxAvailableMigrationOfferOVH {
  /** Monthly price of the current offer */
  currentOfferPrice?: OrderPriceOVH;
  /** Description of the offer */
  description?: string;
  /** Number of months of engagement */
  engagementMonths?: number;
  /** Specify if a hardware is available */
  hardwareAvailable?: boolean;
  /**
   * Name of the hardware
   * @nullable
   */
  hardwareName?: string | null;
  /**
   * Hardware purchase price
   * @nullable
   */
  hardwarePrice?: OverTheBoxAvailableMigrationOfferOVHHardwarePrice;
  /** Details of available hardwares */
  hardwares?: OverTheBoxHardwareDetailsOVH[];
  /** Name of the offer */
  offer?: string;
  /** Monthly price of the new offer */
  price?: OrderPriceOVH;
}

/**
 * Device action
 */
export interface OverTheBoxAvailableDeviceActionOVH {
  /** Description of the action */
  description?: string;
  /** Name of the action */
  name?: string;
}

/**
 * Status of a task.
 */
export type OverTheBoxActionStatusEnumOVH = typeof OverTheBoxActionStatusEnumOVH[keyof typeof OverTheBoxActionStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverTheBoxActionStatusEnumOVH = {
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * Tags for the metrics
 */
export interface OtbDeviceStatisticsTagOVH {
  /** Name of tag */
  readonly name?: string;
  /**
   * Value of tag
   * @nullable
   */
  readonly value?: string | null;
}

/**
 * Statistics Datapoint
 */
export interface OtbDeviceStatisticsPointOVH {
  /** Timestamp */
  readonly timestamp?: number;
  /**
   * Datapoint value
   * @nullable
   */
  readonly value?: number | null;
}

/**
 * Serie Unit
 */
export type OtbDeviceStatisticsUnitEnumOVH = typeof OtbDeviceStatisticsUnitEnumOVH[keyof typeof OtbDeviceStatisticsUnitEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OtbDeviceStatisticsUnitEnumOVH = {
  bps: 'bps',
  byte: 'byte',
  'n/a': 'n/a',
} as const;

/**
 * Device Statistics Datapoints
 */
export interface OtbDeviceStatisticsOVH {
  /** Name of the serie */
  readonly name?: string;
  /** List of point */
  readonly points?: readonly OtbDeviceStatisticsPointOVH[];
  /** List of tags */
  readonly tags?: readonly OtbDeviceStatisticsTagOVH[];
  /** Unit of the serie */
  readonly unit?: OtbDeviceStatisticsUnitEnumOVH;
}

/**
 * Serie Name
 */
export type OtbDeviceStatisticsTypeEnumOVH = typeof OtbDeviceStatisticsTypeEnumOVH[keyof typeof OtbDeviceStatisticsTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OtbDeviceStatisticsTypeEnumOVH = {
  load: 'load',
  memory_free: 'memory_free',
  traffic: 'traffic',
} as const;

/**
 * Statistics Period
 */
export type OtbDeviceStatisticsPeriodEnumOVH = typeof OtbDeviceStatisticsPeriodEnumOVH[keyof typeof OtbDeviceStatisticsPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OtbDeviceStatisticsPeriodEnumOVH = {
  daily: 'daily',
  hourly: 'hourly',
  monthly: 'monthly',
  weekly: 'weekly',
} as const;

export type OrderCurrencyCodeEnumOVH = typeof OrderCurrencyCodeEnumOVH[keyof typeof OrderCurrencyCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderCurrencyCodeEnumOVH = {
  AUD: 'AUD',
  CAD: 'CAD',
  CZK: 'CZK',
  EUR: 'EUR',
  GBP: 'GBP',
  INR: 'INR',
  LTL: 'LTL',
  MAD: 'MAD',
  'N/A': 'N/A',
  PLN: 'PLN',
  SGD: 'SGD',
  TND: 'TND',
  USD: 'USD',
  XOF: 'XOF',
  points: 'points',
} as const;

/**
 * Price with it's currency and textual representation
 */
export interface OrderPriceOVH {
  currencyCode?: OrderCurrencyCodeEnumOVH;
  text?: string;
  value?: number;
}

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


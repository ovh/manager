/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetOverTheBoxHardwareParams,
  GetOverTheBoxParams,
  GetOverTheBoxServiceNameDeviceActionsParams,
  GetOverTheBoxServiceNameStatisticsParams,
  GetOverTheBoxServiceNameTasksParams,
  OtbDeviceStatisticsOVH,
  OverTheBoxAvailableDeviceActionOVH,
  OverTheBoxAvailableMigrationOfferOVH,
  OverTheBoxBackupOVH,
  OverTheBoxDeviceActionOVH,
  OverTheBoxDeviceForRegistrationOVH,
  OverTheBoxDeviceOVH,
  OverTheBoxHardwareOVH,
  OverTheBoxHardwareWithIAMOVH,
  OverTheBoxOrderMigrationOVH,
  OverTheBoxRemoteAccessOVH,
  OverTheBoxServiceOVH,
  OverTheBoxServiceWithIAMOVH,
  OverTheBoxTaskOVH,
  OverTheBoxTemporaryLogsLinkOVH,
  PostOverTheBoxServiceNameChangeContactBody,
  PostOverTheBoxServiceNameDeviceActionsBody,
  PostOverTheBoxServiceNameDeviceRestoreBackupBody,
  PostOverTheBoxServiceNameLinkDeviceBody,
  PostOverTheBoxServiceNameLinkHardwareBody,
  PostOverTheBoxServiceNameMigrationChangeOffersBody,
  PostOverTheBoxServiceNameRemoteAccessesBody,
  PriceOverTheBoxOfferEnumOVH,
  PutOverTheBoxServiceNameAutoMTUBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getOverTheBox = (
    params?: GetOverTheBoxParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOverTheBoxQueryKey = (params?: GetOverTheBoxParams,) => {
    return [`/overTheBox`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOverTheBoxQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBox>>, TError = unknown>(params?: GetOverTheBoxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBox>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBox>>> = ({ signal }) => getOverTheBox(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBox>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBox>>>
export type GetOverTheBoxQueryError = unknown


export function useGetOverTheBox<TData = Awaited<ReturnType<typeof getOverTheBox>>, TError = unknown>(
 params: undefined |  GetOverTheBoxParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBox>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBox>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBox<TData = Awaited<ReturnType<typeof getOverTheBox>>, TError = unknown>(
 params?: GetOverTheBoxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBox>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBox>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBox<TData = Awaited<ReturnType<typeof getOverTheBox>>, TError = unknown>(
 params?: GetOverTheBoxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBox>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOverTheBox<TData = Awaited<ReturnType<typeof getOverTheBox>>, TError = unknown>(
 params?: GetOverTheBoxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBox>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the available offers for the new call
 */
export const getOverTheBoxAvailableOffers = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<PriceOverTheBoxOfferEnumOVH[]>(
      {url: `/overTheBox/availableOffers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxAvailableOffersQueryKey = () => {
    return [`/overTheBox/availableOffers`] as const;
    }

    
export const getGetOverTheBoxAvailableOffersQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxAvailableOffersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>> = ({ signal }) => getOverTheBoxAvailableOffers(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxAvailableOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>>
export type GetOverTheBoxAvailableOffersQueryError = unknown


export function useGetOverTheBoxAvailableOffers<TData = Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxAvailableOffers<TData = Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxAvailableOffers<TData = Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the available offers for the new call
 */

export function useGetOverTheBoxAvailableOffers<TData = Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxAvailableOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxAvailableOffersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the list of devices connected from the same IP address
 */
export const postOverTheBoxDevices = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxDeviceForRegistrationOVH[]>(
      {url: `/overTheBox/devices`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOverTheBoxDevicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxDevices>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxDevices>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxDevices>>, void> = () => {
          

          return  postOverTheBoxDevices(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxDevices>>>
    
    export type PostOverTheBoxDevicesMutationError = unknown

    /**
 * @summary Get the list of devices connected from the same IP address
 */
export const usePostOverTheBoxDevices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxDevices>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxDevices>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxDevicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOverTheBoxHardware = (
    params?: GetOverTheBoxHardwareParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/hardware`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOverTheBoxHardwareQueryKey = (params?: GetOverTheBoxHardwareParams,) => {
    return [`/overTheBox/hardware`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOverTheBoxHardwareQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError = unknown>(params?: GetOverTheBoxHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxHardwareQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxHardware>>> = ({ signal }) => getOverTheBoxHardware(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxHardwareQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxHardware>>>
export type GetOverTheBoxHardwareQueryError = unknown


export function useGetOverTheBoxHardware<TData = Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError = unknown>(
 params: undefined |  GetOverTheBoxHardwareParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxHardware<TData = Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError = unknown>(
 params?: GetOverTheBoxHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxHardware<TData = Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError = unknown>(
 params?: GetOverTheBoxHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOverTheBoxHardware<TData = Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError = unknown>(
 params?: GetOverTheBoxHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxHardwareQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List hardware that can be linked to a service
 */
export const getOverTheBoxHardwareAvailable = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/hardware/available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxHardwareAvailableQueryKey = () => {
    return [`/overTheBox/hardware/available`] as const;
    }

    
export const getGetOverTheBoxHardwareAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxHardwareAvailableQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>> = ({ signal }) => getOverTheBoxHardwareAvailable(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxHardwareAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>>
export type GetOverTheBoxHardwareAvailableQueryError = unknown


export function useGetOverTheBoxHardwareAvailable<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxHardwareAvailable<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxHardwareAvailable<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List hardware that can be linked to a service
 */

export function useGetOverTheBoxHardwareAvailable<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxHardwareAvailableQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getOverTheBoxHardwareHardwareName = (
    hardwareName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxHardwareWithIAMOVH>(
      {url: `/overTheBox/hardware/${hardwareName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxHardwareHardwareNameQueryKey = (hardwareName: string,) => {
    return [`/overTheBox/hardware/${hardwareName}`] as const;
    }

    
export const getGetOverTheBoxHardwareHardwareNameQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError = unknown>(hardwareName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxHardwareHardwareNameQueryKey(hardwareName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>> = ({ signal }) => getOverTheBoxHardwareHardwareName(hardwareName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(hardwareName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxHardwareHardwareNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>>
export type GetOverTheBoxHardwareHardwareNameQueryError = unknown


export function useGetOverTheBoxHardwareHardwareName<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError = unknown>(
 hardwareName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxHardwareHardwareName<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError = unknown>(
 hardwareName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxHardwareHardwareName<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError = unknown>(
 hardwareName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxHardwareHardwareName<TData = Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError = unknown>(
 hardwareName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxHardwareHardwareName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxHardwareHardwareNameQueryOptions(hardwareName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Resiliate a service
 */
export const deleteOverTheBoxServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOverTheBoxServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceName>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceName>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOverTheBoxServiceName>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteOverTheBoxServiceName(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOverTheBoxServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOverTheBoxServiceName>>>
    
    export type DeleteOverTheBoxServiceNameMutationError = unknown

    /**
 * @summary Resiliate a service
 */
export const useDeleteOverTheBoxServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceName>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOverTheBoxServiceName>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteOverTheBoxServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxServiceWithIAMOVH>(
      {url: `/overTheBox/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}`] as const;
    }

    
export const getGetOverTheBoxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceName>>> = ({ signal }) => getOverTheBoxServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceName>>>
export type GetOverTheBoxServiceNameQueryError = unknown


export function useGetOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putOverTheBoxServiceName = (
    serviceName: string,
    overTheBoxServiceOVH: NonReadonly<OverTheBoxServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: overTheBoxServiceOVH
    },
      options);
    }
  


export const getPutOverTheBoxServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceName>>, TError,{serviceName: string;data: NonReadonly<OverTheBoxServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceName>>, TError,{serviceName: string;data: NonReadonly<OverTheBoxServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOverTheBoxServiceName>>, {serviceName: string;data: NonReadonly<OverTheBoxServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putOverTheBoxServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOverTheBoxServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putOverTheBoxServiceName>>>
    export type PutOverTheBoxServiceNameMutationBody = NonReadonly<OverTheBoxServiceOVH>
    export type PutOverTheBoxServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutOverTheBoxServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceName>>, TError,{serviceName: string;data: NonReadonly<OverTheBoxServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOverTheBoxServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<OverTheBoxServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutOverTheBoxServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the value of autoMTU
 */
export const putOverTheBoxServiceNameAutoMTU = (
    serviceName: string,
    putOverTheBoxServiceNameAutoMTUBody: PutOverTheBoxServiceNameAutoMTUBody,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/autoMTU`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putOverTheBoxServiceNameAutoMTUBody
    },
      options);
    }
  


export const getPutOverTheBoxServiceNameAutoMTUMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceNameAutoMTU>>, TError,{serviceName: string;data: PutOverTheBoxServiceNameAutoMTUBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceNameAutoMTU>>, TError,{serviceName: string;data: PutOverTheBoxServiceNameAutoMTUBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOverTheBoxServiceNameAutoMTU>>, {serviceName: string;data: PutOverTheBoxServiceNameAutoMTUBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putOverTheBoxServiceNameAutoMTU(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOverTheBoxServiceNameAutoMTUMutationResult = NonNullable<Awaited<ReturnType<typeof putOverTheBoxServiceNameAutoMTU>>>
    export type PutOverTheBoxServiceNameAutoMTUMutationBody = PutOverTheBoxServiceNameAutoMTUBody
    export type PutOverTheBoxServiceNameAutoMTUMutationError = unknown

    /**
 * @summary Change the value of autoMTU
 */
export const usePutOverTheBoxServiceNameAutoMTU = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceNameAutoMTU>>, TError,{serviceName: string;data: PutOverTheBoxServiceNameAutoMTUBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOverTheBoxServiceNameAutoMTU>>,
        TError,
        {serviceName: string;data: PutOverTheBoxServiceNameAutoMTUBody},
        TContext
      > => {

      const mutationOptions = getPutOverTheBoxServiceNameAutoMTUMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available release channels for this service
 */
export const getOverTheBoxServiceNameAvailableReleaseChannels = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/${serviceName}/availableReleaseChannels`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameAvailableReleaseChannelsQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/availableReleaseChannels`] as const;
    }

    
export const getGetOverTheBoxServiceNameAvailableReleaseChannelsQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameAvailableReleaseChannelsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>> = ({ signal }) => getOverTheBoxServiceNameAvailableReleaseChannels(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameAvailableReleaseChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>>
export type GetOverTheBoxServiceNameAvailableReleaseChannelsQueryError = unknown


export function useGetOverTheBoxServiceNameAvailableReleaseChannels<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameAvailableReleaseChannels<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameAvailableReleaseChannels<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available release channels for this service
 */

export function useGetOverTheBoxServiceNameAvailableReleaseChannels<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameAvailableReleaseChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameAvailableReleaseChannelsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of backups for this service
 */
export const getOverTheBoxServiceNameBackups = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/${serviceName}/backups`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameBackupsQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/backups`] as const;
    }

    
export const getGetOverTheBoxServiceNameBackupsQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameBackupsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>> = ({ signal }) => getOverTheBoxServiceNameBackups(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameBackupsQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>>
export type GetOverTheBoxServiceNameBackupsQueryError = unknown


export function useGetOverTheBoxServiceNameBackups<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameBackups<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameBackups<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of backups for this service
 */

export function useGetOverTheBoxServiceNameBackups<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackups>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameBackupsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete a backup
 */
export const deleteOverTheBoxServiceNameBackupsBackupId = (
    serviceName: string,
    backupId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/backups/${backupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOverTheBoxServiceNameBackupsBackupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameBackupsBackupId>>, TError,{serviceName: string;backupId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameBackupsBackupId>>, TError,{serviceName: string;backupId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameBackupsBackupId>>, {serviceName: string;backupId: string}> = (props) => {
          const {serviceName,backupId} = props ?? {};

          return  deleteOverTheBoxServiceNameBackupsBackupId(serviceName,backupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOverTheBoxServiceNameBackupsBackupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameBackupsBackupId>>>
    
    export type DeleteOverTheBoxServiceNameBackupsBackupIdMutationError = unknown

    /**
 * @summary Delete a backup
 */
export const useDeleteOverTheBoxServiceNameBackupsBackupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameBackupsBackupId>>, TError,{serviceName: string;backupId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOverTheBoxServiceNameBackupsBackupId>>,
        TError,
        {serviceName: string;backupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOverTheBoxServiceNameBackupsBackupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceNameBackupsBackupId = (
    serviceName: string,
    backupId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxBackupOVH>(
      {url: `/overTheBox/${serviceName}/backups/${backupId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameBackupsBackupIdQueryKey = (serviceName: string,
    backupId: string,) => {
    return [`/overTheBox/${serviceName}/backups/${backupId}`] as const;
    }

    
export const getGetOverTheBoxServiceNameBackupsBackupIdQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError = unknown>(serviceName: string,
    backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameBackupsBackupIdQueryKey(serviceName,backupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>> = ({ signal }) => getOverTheBoxServiceNameBackupsBackupId(serviceName,backupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && backupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameBackupsBackupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>>
export type GetOverTheBoxServiceNameBackupsBackupIdQueryError = unknown


export function useGetOverTheBoxServiceNameBackupsBackupId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError = unknown>(
 serviceName: string,
    backupId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameBackupsBackupId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError = unknown>(
 serviceName: string,
    backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameBackupsBackupId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError = unknown>(
 serviceName: string,
    backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceNameBackupsBackupId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError = unknown>(
 serviceName: string,
    backupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameBackupsBackupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameBackupsBackupIdQueryOptions(serviceName,backupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cancel the resiliation of the Service
 */
export const postOverTheBoxServiceNameCancelResiliation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/cancelResiliation`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameCancelResiliationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameCancelResiliation>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameCancelResiliation>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameCancelResiliation>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postOverTheBoxServiceNameCancelResiliation(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameCancelResiliationMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameCancelResiliation>>>
    
    export type PostOverTheBoxServiceNameCancelResiliationMutationError = unknown

    /**
 * @summary Cancel the resiliation of the Service
 */
export const usePostOverTheBoxServiceNameCancelResiliation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameCancelResiliation>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameCancelResiliation>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameCancelResiliationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postOverTheBoxServiceNameChangeContact = (
    serviceName: string,
    postOverTheBoxServiceNameChangeContactBody: PostOverTheBoxServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/overTheBox/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameChangeContact>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameChangeContact>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameChangeContact>>, {serviceName: string;data: PostOverTheBoxServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameChangeContact>>>
    export type PostOverTheBoxServiceNameChangeContactMutationBody = PostOverTheBoxServiceNameChangeContactBody
    export type PostOverTheBoxServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostOverTheBoxServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameChangeContact>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlink a device from a service
 */
export const deleteOverTheBoxServiceNameDevice = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/device`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOverTheBoxServiceNameDeviceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameDevice>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameDevice>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameDevice>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteOverTheBoxServiceNameDevice(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOverTheBoxServiceNameDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameDevice>>>
    
    export type DeleteOverTheBoxServiceNameDeviceMutationError = unknown

    /**
 * @summary Unlink a device from a service
 */
export const useDeleteOverTheBoxServiceNameDevice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameDevice>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOverTheBoxServiceNameDevice>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteOverTheBoxServiceNameDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceNameDevice = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxDeviceOVH>(
      {url: `/overTheBox/${serviceName}/device`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameDeviceQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/device`] as const;
    }

    
export const getGetOverTheBoxServiceNameDeviceQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameDeviceQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>> = ({ signal }) => getOverTheBoxServiceNameDevice(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameDeviceQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>>
export type GetOverTheBoxServiceNameDeviceQueryError = unknown


export function useGetOverTheBoxServiceNameDevice<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDevice<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDevice<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceNameDevice<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDevice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameDeviceQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of actions scheduled for this device
 */
export const getOverTheBoxServiceNameDeviceActions = (
    serviceName: string,
    params?: GetOverTheBoxServiceNameDeviceActionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/${serviceName}/device/actions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameDeviceActionsQueryKey = (serviceName: string,
    params?: GetOverTheBoxServiceNameDeviceActionsParams,) => {
    return [`/overTheBox/${serviceName}/device/actions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOverTheBoxServiceNameDeviceActionsQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError = unknown>(serviceName: string,
    params?: GetOverTheBoxServiceNameDeviceActionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameDeviceActionsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>> = ({ signal }) => getOverTheBoxServiceNameDeviceActions(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameDeviceActionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>>
export type GetOverTheBoxServiceNameDeviceActionsQueryError = unknown


export function useGetOverTheBoxServiceNameDeviceActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetOverTheBoxServiceNameDeviceActionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError = unknown>(
 serviceName: string,
    params?: GetOverTheBoxServiceNameDeviceActionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError = unknown>(
 serviceName: string,
    params?: GetOverTheBoxServiceNameDeviceActionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of actions scheduled for this device
 */

export function useGetOverTheBoxServiceNameDeviceActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError = unknown>(
 serviceName: string,
    params?: GetOverTheBoxServiceNameDeviceActionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameDeviceActionsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a device action on the device
 */
export const postOverTheBoxServiceNameDeviceActions = (
    serviceName: string,
    postOverTheBoxServiceNameDeviceActionsBody: PostOverTheBoxServiceNameDeviceActionsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxDeviceActionOVH>(
      {url: `/overTheBox/${serviceName}/device/actions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameDeviceActionsBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameDeviceActionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceActions>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameDeviceActionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceActions>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameDeviceActionsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceActions>>, {serviceName: string;data: PostOverTheBoxServiceNameDeviceActionsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameDeviceActions(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameDeviceActionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceActions>>>
    export type PostOverTheBoxServiceNameDeviceActionsMutationBody = PostOverTheBoxServiceNameDeviceActionsBody
    export type PostOverTheBoxServiceNameDeviceActionsMutationError = unknown

    /**
 * @summary Create a device action on the device
 */
export const usePostOverTheBoxServiceNameDeviceActions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceActions>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameDeviceActionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceActions>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameDeviceActionsBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameDeviceActionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceNameDeviceActionsActionId = (
    serviceName: string,
    actionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxDeviceActionOVH>(
      {url: `/overTheBox/${serviceName}/device/actions/${actionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameDeviceActionsActionIdQueryKey = (serviceName: string,
    actionId: string,) => {
    return [`/overTheBox/${serviceName}/device/actions/${actionId}`] as const;
    }

    
export const getGetOverTheBoxServiceNameDeviceActionsActionIdQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError = unknown>(serviceName: string,
    actionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameDeviceActionsActionIdQueryKey(serviceName,actionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>> = ({ signal }) => getOverTheBoxServiceNameDeviceActionsActionId(serviceName,actionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && actionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameDeviceActionsActionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>>
export type GetOverTheBoxServiceNameDeviceActionsActionIdQueryError = unknown


export function useGetOverTheBoxServiceNameDeviceActionsActionId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError = unknown>(
 serviceName: string,
    actionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceActionsActionId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError = unknown>(
 serviceName: string,
    actionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceActionsActionId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError = unknown>(
 serviceName: string,
    actionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceNameDeviceActionsActionId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError = unknown>(
 serviceName: string,
    actionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceActionsActionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameDeviceActionsActionIdQueryOptions(serviceName,actionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List the available device actions
 */
export const getOverTheBoxServiceNameDeviceAvailableActions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxAvailableDeviceActionOVH[]>(
      {url: `/overTheBox/${serviceName}/device/availableActions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameDeviceAvailableActionsQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/device/availableActions`] as const;
    }

    
export const getGetOverTheBoxServiceNameDeviceAvailableActionsQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameDeviceAvailableActionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>> = ({ signal }) => getOverTheBoxServiceNameDeviceAvailableActions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameDeviceAvailableActionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>>
export type GetOverTheBoxServiceNameDeviceAvailableActionsQueryError = unknown


export function useGetOverTheBoxServiceNameDeviceAvailableActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceAvailableActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceAvailableActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the available device actions
 */

export function useGetOverTheBoxServiceNameDeviceAvailableActions<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameDeviceAvailableActionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an action to generate a backup
 */
export const postOverTheBoxServiceNameDeviceBackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxDeviceActionOVH>(
      {url: `/overTheBox/${serviceName}/device/backup`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameDeviceBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceBackup>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceBackup>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceBackup>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postOverTheBoxServiceNameDeviceBackup(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameDeviceBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceBackup>>>
    
    export type PostOverTheBoxServiceNameDeviceBackupMutationError = unknown

    /**
 * @summary Create an action to generate a backup
 */
export const usePostOverTheBoxServiceNameDeviceBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceBackup>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceBackup>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameDeviceBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceNameDeviceHardware = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxHardwareOVH>(
      {url: `/overTheBox/${serviceName}/device/hardware`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameDeviceHardwareQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/device/hardware`] as const;
    }

    
export const getGetOverTheBoxServiceNameDeviceHardwareQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameDeviceHardwareQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>> = ({ signal }) => getOverTheBoxServiceNameDeviceHardware(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameDeviceHardwareQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>>
export type GetOverTheBoxServiceNameDeviceHardwareQueryError = unknown


export function useGetOverTheBoxServiceNameDeviceHardware<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceHardware<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameDeviceHardware<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceNameDeviceHardware<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameDeviceHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameDeviceHardwareQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary url to retrieve device logs
 */
export const postOverTheBoxServiceNameDeviceLogs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxTemporaryLogsLinkOVH>(
      {url: `/overTheBox/${serviceName}/device/logs`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameDeviceLogsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceLogs>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceLogs>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceLogs>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postOverTheBoxServiceNameDeviceLogs(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameDeviceLogsMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceLogs>>>
    
    export type PostOverTheBoxServiceNameDeviceLogsMutationError = unknown

    /**
 * @summary Generate a temporary url to retrieve device logs
 */
export const usePostOverTheBoxServiceNameDeviceLogs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceLogs>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceLogs>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameDeviceLogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a group of actions to restore a given backup
 */
export const postOverTheBoxServiceNameDeviceRestoreBackup = (
    serviceName: string,
    postOverTheBoxServiceNameDeviceRestoreBackupBody: PostOverTheBoxServiceNameDeviceRestoreBackupBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxDeviceActionOVH[]>(
      {url: `/overTheBox/${serviceName}/device/restoreBackup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameDeviceRestoreBackupBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameDeviceRestoreBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceRestoreBackup>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameDeviceRestoreBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceRestoreBackup>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameDeviceRestoreBackupBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceRestoreBackup>>, {serviceName: string;data: PostOverTheBoxServiceNameDeviceRestoreBackupBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameDeviceRestoreBackup(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameDeviceRestoreBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceRestoreBackup>>>
    export type PostOverTheBoxServiceNameDeviceRestoreBackupMutationBody = PostOverTheBoxServiceNameDeviceRestoreBackupBody
    export type PostOverTheBoxServiceNameDeviceRestoreBackupMutationError = unknown

    /**
 * @summary Create a group of actions to restore a given backup
 */
export const usePostOverTheBoxServiceNameDeviceRestoreBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceRestoreBackup>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameDeviceRestoreBackupBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameDeviceRestoreBackup>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameDeviceRestoreBackupBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameDeviceRestoreBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Link a device to this service
 */
export const postOverTheBoxServiceNameLinkDevice = (
    serviceName: string,
    postOverTheBoxServiceNameLinkDeviceBody: PostOverTheBoxServiceNameLinkDeviceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/linkDevice`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameLinkDeviceBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameLinkDeviceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkDevice>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameLinkDeviceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkDevice>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameLinkDeviceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkDevice>>, {serviceName: string;data: PostOverTheBoxServiceNameLinkDeviceBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameLinkDevice(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameLinkDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkDevice>>>
    export type PostOverTheBoxServiceNameLinkDeviceMutationBody = PostOverTheBoxServiceNameLinkDeviceBody
    export type PostOverTheBoxServiceNameLinkDeviceMutationError = unknown

    /**
 * @summary Link a device to this service
 */
export const usePostOverTheBoxServiceNameLinkDevice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkDevice>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameLinkDeviceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkDevice>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameLinkDeviceBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameLinkDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Link an available hardware to this service
 */
export const postOverTheBoxServiceNameLinkHardware = (
    serviceName: string,
    postOverTheBoxServiceNameLinkHardwareBody: PostOverTheBoxServiceNameLinkHardwareBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/linkHardware`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameLinkHardwareBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameLinkHardwareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkHardware>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameLinkHardwareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkHardware>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameLinkHardwareBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkHardware>>, {serviceName: string;data: PostOverTheBoxServiceNameLinkHardwareBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameLinkHardware(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameLinkHardwareMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkHardware>>>
    export type PostOverTheBoxServiceNameLinkHardwareMutationBody = PostOverTheBoxServiceNameLinkHardwareBody
    export type PostOverTheBoxServiceNameLinkHardwareMutationError = unknown

    /**
 * @summary Link an available hardware to this service
 */
export const usePostOverTheBoxServiceNameLinkHardware = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkHardware>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameLinkHardwareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameLinkHardware>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameLinkHardwareBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameLinkHardwareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Migrate to the selected overTheBox offer
 */
export const postOverTheBoxServiceNameMigrationChangeOffers = (
    serviceName: string,
    postOverTheBoxServiceNameMigrationChangeOffersBody: PostOverTheBoxServiceNameMigrationChangeOffersBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxOrderMigrationOVH>(
      {url: `/overTheBox/${serviceName}/migration/changeOffers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameMigrationChangeOffersBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameMigrationChangeOffersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameMigrationChangeOffers>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameMigrationChangeOffersBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameMigrationChangeOffers>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameMigrationChangeOffersBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameMigrationChangeOffers>>, {serviceName: string;data: PostOverTheBoxServiceNameMigrationChangeOffersBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameMigrationChangeOffers(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameMigrationChangeOffersMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameMigrationChangeOffers>>>
    export type PostOverTheBoxServiceNameMigrationChangeOffersMutationBody = PostOverTheBoxServiceNameMigrationChangeOffersBody
    export type PostOverTheBoxServiceNameMigrationChangeOffersMutationError = unknown

    /**
 * @summary Migrate to the selected overTheBox offer
 */
export const usePostOverTheBoxServiceNameMigrationChangeOffers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameMigrationChangeOffers>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameMigrationChangeOffersBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameMigrationChangeOffers>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameMigrationChangeOffersBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameMigrationChangeOffersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all available offers one can migrate to
 */
export const getOverTheBoxServiceNameMigrationOffers = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxAvailableMigrationOfferOVH[]>(
      {url: `/overTheBox/${serviceName}/migration/offers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameMigrationOffersQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/migration/offers`] as const;
    }

    
export const getGetOverTheBoxServiceNameMigrationOffersQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameMigrationOffersQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>> = ({ signal }) => getOverTheBoxServiceNameMigrationOffers(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameMigrationOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>>
export type GetOverTheBoxServiceNameMigrationOffersQueryError = unknown


export function useGetOverTheBoxServiceNameMigrationOffers<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameMigrationOffers<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameMigrationOffers<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all available offers one can migrate to
 */

export function useGetOverTheBoxServiceNameMigrationOffers<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameMigrationOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameMigrationOffersQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of remote accesses for the service
 */
export const getOverTheBoxServiceNameRemoteAccesses = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/${serviceName}/remoteAccesses`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameRemoteAccessesQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/remoteAccesses`] as const;
    }

    
export const getGetOverTheBoxServiceNameRemoteAccessesQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameRemoteAccessesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>> = ({ signal }) => getOverTheBoxServiceNameRemoteAccesses(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameRemoteAccessesQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>>
export type GetOverTheBoxServiceNameRemoteAccessesQueryError = unknown


export function useGetOverTheBoxServiceNameRemoteAccesses<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameRemoteAccesses<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameRemoteAccesses<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of remote accesses for the service
 */

export function useGetOverTheBoxServiceNameRemoteAccesses<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccesses>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameRemoteAccessesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new remote access for the service
 */
export const postOverTheBoxServiceNameRemoteAccesses = (
    serviceName: string,
    postOverTheBoxServiceNameRemoteAccessesBody: PostOverTheBoxServiceNameRemoteAccessesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxRemoteAccessOVH>(
      {url: `/overTheBox/${serviceName}/remoteAccesses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOverTheBoxServiceNameRemoteAccessesBody, signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameRemoteAccessesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccesses>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameRemoteAccessesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccesses>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameRemoteAccessesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccesses>>, {serviceName: string;data: PostOverTheBoxServiceNameRemoteAccessesBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOverTheBoxServiceNameRemoteAccesses(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameRemoteAccessesMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccesses>>>
    export type PostOverTheBoxServiceNameRemoteAccessesMutationBody = PostOverTheBoxServiceNameRemoteAccessesBody
    export type PostOverTheBoxServiceNameRemoteAccessesMutationError = unknown

    /**
 * @summary Create a new remote access for the service
 */
export const usePostOverTheBoxServiceNameRemoteAccesses = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccesses>>, TError,{serviceName: string;data: PostOverTheBoxServiceNameRemoteAccessesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccesses>>,
        TError,
        {serviceName: string;data: PostOverTheBoxServiceNameRemoteAccessesBody},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameRemoteAccessesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a remote access
 */
export const deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId = (
    serviceName: string,
    remoteAccessId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/remoteAccesses/${remoteAccessId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError,{serviceName: string;remoteAccessId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError,{serviceName: string;remoteAccessId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, {serviceName: string;remoteAccessId: string}> = (props) => {
          const {serviceName,remoteAccessId} = props ?? {};

          return  deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId(serviceName,remoteAccessId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>>
    
    export type DeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessIdMutationError = unknown

    /**
 * @summary Delete a remote access
 */
export const useDeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError,{serviceName: string;remoteAccessId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>,
        TError,
        {serviceName: string;remoteAccessId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceNameRemoteAccessesRemoteAccessId = (
    serviceName: string,
    remoteAccessId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxRemoteAccessOVH>(
      {url: `/overTheBox/${serviceName}/remoteAccesses/${remoteAccessId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdQueryKey = (serviceName: string,
    remoteAccessId: string,) => {
    return [`/overTheBox/${serviceName}/remoteAccesses/${remoteAccessId}`] as const;
    }

    
export const getGetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError = unknown>(serviceName: string,
    remoteAccessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdQueryKey(serviceName,remoteAccessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>> = ({ signal }) => getOverTheBoxServiceNameRemoteAccessesRemoteAccessId(serviceName,remoteAccessId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && remoteAccessId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>>
export type GetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdQueryError = unknown


export function useGetOverTheBoxServiceNameRemoteAccessesRemoteAccessId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError = unknown>(
 serviceName: string,
    remoteAccessId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameRemoteAccessesRemoteAccessId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError = unknown>(
 serviceName: string,
    remoteAccessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameRemoteAccessesRemoteAccessId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError = unknown>(
 serviceName: string,
    remoteAccessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceNameRemoteAccessesRemoteAccessId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError = unknown>(
 serviceName: string,
    remoteAccessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameRemoteAccessesRemoteAccessId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdQueryOptions(serviceName,remoteAccessId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Authorize the remote access
 */
export const postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize = (
    serviceName: string,
    remoteAccessId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/remoteAccesses/${remoteAccessId}/authorize`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize>>, TError,{serviceName: string;remoteAccessId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize>>, TError,{serviceName: string;remoteAccessId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize>>, {serviceName: string;remoteAccessId: string}> = (props) => {
          const {serviceName,remoteAccessId} = props ?? {};

          return  postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize(serviceName,remoteAccessId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeMutationResult = NonNullable<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize>>>
    
    export type PostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeMutationError = unknown

    /**
 * @summary Authorize the remote access
 */
export const usePostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize>>, TError,{serviceName: string;remoteAccessId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorize>>,
        TError,
        {serviceName: string;remoteAccessId: string},
        TContext
      > => {

      const mutationOptions = getPostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getOverTheBoxServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/overTheBox/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/overTheBox/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetOverTheBoxServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>> = ({ signal }) => getOverTheBoxServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>>
export type GetOverTheBoxServiceNameServiceInfosQueryError = unknown


export function useGetOverTheBoxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetOverTheBoxServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putOverTheBoxServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/overTheBox/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutOverTheBoxServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOverTheBoxServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putOverTheBoxServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOverTheBoxServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putOverTheBoxServiceNameServiceInfos>>>
    export type PutOverTheBoxServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutOverTheBoxServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutOverTheBoxServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOverTheBoxServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOverTheBoxServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutOverTheBoxServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get statistics for an OTB device
 */
export const getOverTheBoxServiceNameStatistics = (
    serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OtbDeviceStatisticsOVH[]>(
      {url: `/overTheBox/${serviceName}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameStatisticsQueryKey = (serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams,) => {
    return [`/overTheBox/${serviceName}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOverTheBoxServiceNameStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError = unknown>(serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameStatisticsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>> = ({ signal }) => getOverTheBoxServiceNameStatistics(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>>
export type GetOverTheBoxServiceNameStatisticsQueryError = unknown


export function useGetOverTheBoxServiceNameStatistics<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameStatistics<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameStatistics<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get statistics for an OTB device
 */

export function useGetOverTheBoxServiceNameStatistics<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError = unknown>(
 serviceName: string,
    params: GetOverTheBoxServiceNameStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameStatisticsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of tasks scheduled for this service
 */
export const getOverTheBoxServiceNameTasks = (
    serviceName: string,
    params?: GetOverTheBoxServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/overTheBox/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameTasksQueryKey = (serviceName: string,
    params?: GetOverTheBoxServiceNameTasksParams,) => {
    return [`/overTheBox/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOverTheBoxServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetOverTheBoxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>> = ({ signal }) => getOverTheBoxServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>>
export type GetOverTheBoxServiceNameTasksQueryError = unknown


export function useGetOverTheBoxServiceNameTasks<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetOverTheBoxServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameTasks<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetOverTheBoxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameTasks<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetOverTheBoxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of tasks scheduled for this service
 */

export function useGetOverTheBoxServiceNameTasks<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetOverTheBoxServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getOverTheBoxServiceNameTasksTaskId = (
    serviceName: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OverTheBoxTaskOVH>(
      {url: `/overTheBox/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOverTheBoxServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: string,) => {
    return [`/overTheBox/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetOverTheBoxServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverTheBoxServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>> = ({ signal }) => getOverTheBoxServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOverTheBoxServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>>
export type GetOverTheBoxServiceNameTasksTaskIdQueryError = unknown


export function useGetOverTheBoxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOverTheBoxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetOverTheBoxServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverTheBoxServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOverTheBoxServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





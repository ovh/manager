/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetServicesParams,
  GetServicesServiceIdConsumptionElementParams,
  GetServicesServiceIdConsumptionForecastElementParams,
  GetServicesServiceIdConsumptionHistoryIdElementParams,
  GetServicesServiceIdConsumptionHistoryParams,
  GetServicesServiceIdSavingsPlansContracts404,
  GetServicesServiceIdSavingsPlansContracts500,
  GetServicesServiceIdSavingsPlansSubscribable404,
  GetServicesServiceIdSavingsPlansSubscribable500,
  GetServicesServiceIdSavingsPlansSubscribableParams,
  GetServicesServiceIdSavingsPlansSubscribed404,
  GetServicesServiceIdSavingsPlansSubscribed500,
  GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404,
  GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500,
  GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404,
  GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500,
  OrderCartGenericProductDefinitionOVH,
  OrderContractOVH,
  PostServicesServiceIdSavingsPlansSubscribeExecute400,
  PostServicesServiceIdSavingsPlansSubscribeExecute404,
  PostServicesServiceIdSavingsPlansSubscribeSimulate400,
  PostServicesServiceIdSavingsPlansSubscribeSimulate404,
  PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction400,
  PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction404,
  PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction500,
  PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize400,
  PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize404,
  PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize500,
  PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId400,
  PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId404,
  PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId500,
  ServicesBillingEngagementEngagementFlushOrderOVH,
  ServicesBillingEngagementEngagementFlushRequestOVH,
  ServicesBillingEngagementEngagementOVH,
  ServicesBillingEngagementEngagementRequestCreationOVH,
  ServicesBillingEngagementEngagementRequestOVH,
  ServicesBillingEngagementUpdateEndRuleRequestOVH,
  ServicesBillingInvoiceOVH,
  ServicesBillingPricingOVH,
  ServicesConsumptionElementOVH,
  ServicesConsumptionSummaryOVH,
  ServicesContactsContactChangeRequestOVH,
  ServicesContactsTaskOVH,
  ServicesExpandedServiceOVH,
  ServicesExpandedTechnicalDetailsOVH,
  ServicesFormDescriptionOVH,
  ServicesFormFormOVH,
  ServicesFormResponseOVH,
  ServicesOperationDetachExecutionRequestOVH,
  ServicesOperationDetachOptionsDefinitionOVH,
  ServicesOperationExecutionRequestOVH,
  ServicesOperationOrderOVH,
  ServicesSavingsPlansChangePeriodEndActionOVH,
  ServicesSavingsPlansChangeSizeOVH,
  ServicesSavingsPlansSavingsPlanOVH,
  ServicesSavingsPlansSavingsPlanPeriodOVH,
  ServicesSavingsPlansSimulatedSavingsPlanOVH,
  ServicesSavingsPlansSubscribableSavingsPlanOfferOVH,
  ServicesSavingsPlansSubscribeOVH,
  ServicesTerminateConfirmServiceTerminationRequestOVH,
  ServicesTerminateTerminationAnswerOVH,
  ServicesUpdateServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getServices = (
    params?: GetServicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/services`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServicesQueryKey = (params?: GetServicesParams,) => {
    return [`/services`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServicesQueryOptions = <TData = Awaited<ReturnType<typeof getServices>>, TError = unknown>(params?: GetServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServices>>> = ({ signal }) => getServices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getServices>>>
export type GetServicesQueryError = unknown


export function useGetServices<TData = Awaited<ReturnType<typeof getServices>>, TError = unknown>(
 params: undefined |  GetServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServices<TData = Awaited<ReturnType<typeof getServices>>, TError = unknown>(
 params?: GetServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServices<TData = Awaited<ReturnType<typeof getServices>>, TError = unknown>(
 params?: GetServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetServices<TData = Awaited<ReturnType<typeof getServices>>, TError = unknown>(
 params?: GetServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details about a service
 */
export const getServicesServiceId = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesExpandedServiceOVH>(
      {url: `/services/${serviceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}`] as const;
    }

    
export const getGetServicesServiceIdQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceId>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceId>>> = ({ signal }) => getServicesServiceId(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceId>>>
export type GetServicesServiceIdQueryError = unknown


export function useGetServicesServiceId<TData = Awaited<ReturnType<typeof getServicesServiceId>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceId<TData = Awaited<ReturnType<typeof getServicesServiceId>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceId<TData = Awaited<ReturnType<typeof getServicesServiceId>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about a service
 */

export function useGetServicesServiceId<TData = Awaited<ReturnType<typeof getServicesServiceId>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putServicesServiceId = (
    serviceId: number,
    servicesUpdateServiceOVH: ServicesUpdateServiceOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/services/${serviceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesUpdateServiceOVH
    },
      options);
    }
  


export const getPutServicesServiceIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceId>>, TError,{serviceId: number;data: ServicesUpdateServiceOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceId>>, TError,{serviceId: number;data: ServicesUpdateServiceOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putServicesServiceId>>, {serviceId: number;data: ServicesUpdateServiceOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  putServicesServiceId(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutServicesServiceIdMutationResult = NonNullable<Awaited<ReturnType<typeof putServicesServiceId>>>
    export type PutServicesServiceIdMutationBody = ServicesUpdateServiceOVH
    export type PutServicesServiceIdMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutServicesServiceId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceId>>, TError,{serviceId: number;data: ServicesUpdateServiceOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putServicesServiceId>>,
        TError,
        {serviceId: number;data: ServicesUpdateServiceOVH},
        TContext
      > => {

      const mutationOptions = getPutServicesServiceIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get engagement details
 */
export const getServicesServiceIdBillingEngagement = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesBillingEngagementEngagementOVH>(
      {url: `/services/${serviceId}/billing/engagement`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdBillingEngagementQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/billing/engagement`] as const;
    }

    
export const getGetServicesServiceIdBillingEngagementQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdBillingEngagementQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>> = ({ signal }) => getServicesServiceIdBillingEngagement(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdBillingEngagementQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>>
export type GetServicesServiceIdBillingEngagementQueryError = unknown


export function useGetServicesServiceIdBillingEngagement<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingEngagement<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingEngagement<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get engagement details
 */

export function useGetServicesServiceIdBillingEngagement<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdBillingEngagementQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all available engagements a given service can subscribe to
 */
export const getServicesServiceIdBillingEngagementAvailable = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesBillingPricingOVH[]>(
      {url: `/services/${serviceId}/billing/engagement/available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdBillingEngagementAvailableQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/billing/engagement/available`] as const;
    }

    
export const getGetServicesServiceIdBillingEngagementAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdBillingEngagementAvailableQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>> = ({ signal }) => getServicesServiceIdBillingEngagementAvailable(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdBillingEngagementAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>>
export type GetServicesServiceIdBillingEngagementAvailableQueryError = unknown


export function useGetServicesServiceIdBillingEngagementAvailable<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingEngagementAvailable<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingEngagementAvailable<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all available engagements a given service can subscribe to
 */

export function useGetServicesServiceIdBillingEngagementAvailable<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdBillingEngagementAvailableQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change your Engagement end rules
 */
export const putServicesServiceIdBillingEngagementEndRule = (
    serviceId: number,
    servicesBillingEngagementUpdateEndRuleRequestOVH: ServicesBillingEngagementUpdateEndRuleRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/services/${serviceId}/billing/engagement/endRule`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesBillingEngagementUpdateEndRuleRequestOVH
    },
      options);
    }
  


export const getPutServicesServiceIdBillingEngagementEndRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdBillingEngagementEndRule>>, TError,{serviceId: number;data: ServicesBillingEngagementUpdateEndRuleRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdBillingEngagementEndRule>>, TError,{serviceId: number;data: ServicesBillingEngagementUpdateEndRuleRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putServicesServiceIdBillingEngagementEndRule>>, {serviceId: number;data: ServicesBillingEngagementUpdateEndRuleRequestOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  putServicesServiceIdBillingEngagementEndRule(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutServicesServiceIdBillingEngagementEndRuleMutationResult = NonNullable<Awaited<ReturnType<typeof putServicesServiceIdBillingEngagementEndRule>>>
    export type PutServicesServiceIdBillingEngagementEndRuleMutationBody = ServicesBillingEngagementUpdateEndRuleRequestOVH
    export type PutServicesServiceIdBillingEngagementEndRuleMutationError = unknown

    /**
 * @summary Change your Engagement end rules
 */
export const usePutServicesServiceIdBillingEngagementEndRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdBillingEngagementEndRule>>, TError,{serviceId: number;data: ServicesBillingEngagementUpdateEndRuleRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putServicesServiceIdBillingEngagementEndRule>>,
        TError,
        {serviceId: number;data: ServicesBillingEngagementUpdateEndRuleRequestOVH},
        TContext
      > => {

      const mutationOptions = getPutServicesServiceIdBillingEngagementEndRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Flush the engagement of this service
 */
export const postServicesServiceIdBillingEngagementFlush = (
    serviceId: number,
    servicesBillingEngagementEngagementFlushRequestOVH: ServicesBillingEngagementEngagementFlushRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesBillingEngagementEngagementFlushOrderOVH>(
      {url: `/services/${serviceId}/billing/engagement/flush`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesBillingEngagementEngagementFlushRequestOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdBillingEngagementFlushMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementFlush>>, TError,{serviceId: number;data: ServicesBillingEngagementEngagementFlushRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementFlush>>, TError,{serviceId: number;data: ServicesBillingEngagementEngagementFlushRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementFlush>>, {serviceId: number;data: ServicesBillingEngagementEngagementFlushRequestOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  postServicesServiceIdBillingEngagementFlush(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdBillingEngagementFlushMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementFlush>>>
    export type PostServicesServiceIdBillingEngagementFlushMutationBody = ServicesBillingEngagementEngagementFlushRequestOVH
    export type PostServicesServiceIdBillingEngagementFlushMutationError = unknown

    /**
 * @summary Flush the engagement of this service
 */
export const usePostServicesServiceIdBillingEngagementFlush = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementFlush>>, TError,{serviceId: number;data: ServicesBillingEngagementEngagementFlushRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementFlush>>,
        TError,
        {serviceId: number;data: ServicesBillingEngagementEngagementFlushRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdBillingEngagementFlushMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the ongoing Engagement request on this Service
 */
export const deleteServicesServiceIdBillingEngagementRequest = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/services/${serviceId}/billing/engagement/request`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteServicesServiceIdBillingEngagementRequestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteServicesServiceIdBillingEngagementRequest>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteServicesServiceIdBillingEngagementRequest>>, TError,{serviceId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteServicesServiceIdBillingEngagementRequest>>, {serviceId: number}> = (props) => {
          const {serviceId} = props ?? {};

          return  deleteServicesServiceIdBillingEngagementRequest(serviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteServicesServiceIdBillingEngagementRequestMutationResult = NonNullable<Awaited<ReturnType<typeof deleteServicesServiceIdBillingEngagementRequest>>>
    
    export type DeleteServicesServiceIdBillingEngagementRequestMutationError = unknown

    /**
 * @summary Delete the ongoing Engagement request on this Service
 */
export const useDeleteServicesServiceIdBillingEngagementRequest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteServicesServiceIdBillingEngagementRequest>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteServicesServiceIdBillingEngagementRequest>>,
        TError,
        {serviceId: number},
        TContext
      > => {

      const mutationOptions = getDeleteServicesServiceIdBillingEngagementRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the ongoing Engagement request on this Service
 */
export const getServicesServiceIdBillingEngagementRequest = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesBillingEngagementEngagementRequestOVH>(
      {url: `/services/${serviceId}/billing/engagement/request`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdBillingEngagementRequestQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/billing/engagement/request`] as const;
    }

    
export const getGetServicesServiceIdBillingEngagementRequestQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdBillingEngagementRequestQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>> = ({ signal }) => getServicesServiceIdBillingEngagementRequest(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdBillingEngagementRequestQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>>
export type GetServicesServiceIdBillingEngagementRequestQueryError = unknown


export function useGetServicesServiceIdBillingEngagementRequest<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingEngagementRequest<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingEngagementRequest<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the ongoing Engagement request on this Service
 */

export function useGetServicesServiceIdBillingEngagementRequest<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingEngagementRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdBillingEngagementRequestQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request an Engagement on this Service
 */
export const postServicesServiceIdBillingEngagementRequest = (
    serviceId: number,
    servicesBillingEngagementEngagementRequestCreationOVH: ServicesBillingEngagementEngagementRequestCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesBillingEngagementEngagementRequestOVH>(
      {url: `/services/${serviceId}/billing/engagement/request`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesBillingEngagementEngagementRequestCreationOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdBillingEngagementRequestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementRequest>>, TError,{serviceId: number;data: ServicesBillingEngagementEngagementRequestCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementRequest>>, TError,{serviceId: number;data: ServicesBillingEngagementEngagementRequestCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementRequest>>, {serviceId: number;data: ServicesBillingEngagementEngagementRequestCreationOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  postServicesServiceIdBillingEngagementRequest(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdBillingEngagementRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementRequest>>>
    export type PostServicesServiceIdBillingEngagementRequestMutationBody = ServicesBillingEngagementEngagementRequestCreationOVH
    export type PostServicesServiceIdBillingEngagementRequestMutationError = unknown

    /**
 * @summary Request an Engagement on this Service
 */
export const usePostServicesServiceIdBillingEngagementRequest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementRequest>>, TError,{serviceId: number;data: ServicesBillingEngagementEngagementRequestCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdBillingEngagementRequest>>,
        TError,
        {serviceId: number;data: ServicesBillingEngagementEngagementRequestCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdBillingEngagementRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available invoices
 */
export const getServicesServiceIdBillingInvoices = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/services/${serviceId}/billing/invoices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdBillingInvoicesQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/billing/invoices`] as const;
    }

    
export const getGetServicesServiceIdBillingInvoicesQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdBillingInvoicesQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>> = ({ signal }) => getServicesServiceIdBillingInvoices(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdBillingInvoicesQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>>
export type GetServicesServiceIdBillingInvoicesQueryError = unknown


export function useGetServicesServiceIdBillingInvoices<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingInvoices<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingInvoices<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available invoices
 */

export function useGetServicesServiceIdBillingInvoices<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdBillingInvoicesQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service's invoices
 */
export const getServicesServiceIdBillingInvoicesInvoiceId = (
    serviceId: number,
    invoiceId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesBillingInvoiceOVH>(
      {url: `/services/${serviceId}/billing/invoices/${invoiceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdBillingInvoicesInvoiceIdQueryKey = (serviceId: number,
    invoiceId: string,) => {
    return [`/services/${serviceId}/billing/invoices/${invoiceId}`] as const;
    }

    
export const getGetServicesServiceIdBillingInvoicesInvoiceIdQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError = unknown>(serviceId: number,
    invoiceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdBillingInvoicesInvoiceIdQueryKey(serviceId,invoiceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>> = ({ signal }) => getServicesServiceIdBillingInvoicesInvoiceId(serviceId,invoiceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && invoiceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdBillingInvoicesInvoiceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>>
export type GetServicesServiceIdBillingInvoicesInvoiceIdQueryError = unknown


export function useGetServicesServiceIdBillingInvoicesInvoiceId<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError = unknown>(
 serviceId: number,
    invoiceId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingInvoicesInvoiceId<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError = unknown>(
 serviceId: number,
    invoiceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdBillingInvoicesInvoiceId<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError = unknown>(
 serviceId: number,
    invoiceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service's invoices
 */

export function useGetServicesServiceIdBillingInvoicesInvoiceId<TData = Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError = unknown>(
 serviceId: number,
    invoiceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdBillingInvoicesInvoiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdBillingInvoicesInvoiceIdQueryOptions(serviceId,invoiceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a summary of the ongoing consumption of your service
 */
export const getServicesServiceIdConsumption = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesConsumptionSummaryOVH>(
      {url: `/services/${serviceId}/consumption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/consumption`] as const;
    }

    
export const getGetServicesServiceIdConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>> = ({ signal }) => getServicesServiceIdConsumption(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>>
export type GetServicesServiceIdConsumptionQueryError = unknown


export function useGetServicesServiceIdConsumption<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumption<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumption<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a summary of the ongoing consumption of your service
 */

export function useGetServicesServiceIdConsumption<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get each resource consumed by your service
 */
export const getServicesServiceIdConsumptionElement = (
    serviceId: number,
    params?: GetServicesServiceIdConsumptionElementParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesConsumptionElementOVH[]>(
      {url: `/services/${serviceId}/consumption/element`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionElementQueryKey = (serviceId: number,
    params?: GetServicesServiceIdConsumptionElementParams,) => {
    return [`/services/${serviceId}/consumption/element`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServicesServiceIdConsumptionElementQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError = unknown>(serviceId: number,
    params?: GetServicesServiceIdConsumptionElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionElementQueryKey(serviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>> = ({ signal }) => getServicesServiceIdConsumptionElement(serviceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionElementQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>>
export type GetServicesServiceIdConsumptionElementQueryError = unknown


export function useGetServicesServiceIdConsumptionElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError = unknown>(
 serviceId: number,
    params: undefined |  GetServicesServiceIdConsumptionElementParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get each resource consumed by your service
 */

export function useGetServicesServiceIdConsumptionElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionElementQueryOptions(serviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a summary of the forecasted consumption of your service
 */
export const getServicesServiceIdConsumptionForecast = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesConsumptionSummaryOVH>(
      {url: `/services/${serviceId}/consumption/forecast`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionForecastQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/consumption/forecast`] as const;
    }

    
export const getGetServicesServiceIdConsumptionForecastQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionForecastQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>> = ({ signal }) => getServicesServiceIdConsumptionForecast(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>>
export type GetServicesServiceIdConsumptionForecastQueryError = unknown


export function useGetServicesServiceIdConsumptionForecast<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionForecast<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionForecast<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a summary of the forecasted consumption of your service
 */

export function useGetServicesServiceIdConsumptionForecast<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionForecastQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get each resource forecasted consumption of your service
 */
export const getServicesServiceIdConsumptionForecastElement = (
    serviceId: number,
    params?: GetServicesServiceIdConsumptionForecastElementParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesConsumptionElementOVH[]>(
      {url: `/services/${serviceId}/consumption/forecast/element`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionForecastElementQueryKey = (serviceId: number,
    params?: GetServicesServiceIdConsumptionForecastElementParams,) => {
    return [`/services/${serviceId}/consumption/forecast/element`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServicesServiceIdConsumptionForecastElementQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError = unknown>(serviceId: number,
    params?: GetServicesServiceIdConsumptionForecastElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionForecastElementQueryKey(serviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>> = ({ signal }) => getServicesServiceIdConsumptionForecastElement(serviceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionForecastElementQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>>
export type GetServicesServiceIdConsumptionForecastElementQueryError = unknown


export function useGetServicesServiceIdConsumptionForecastElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError = unknown>(
 serviceId: number,
    params: undefined |  GetServicesServiceIdConsumptionForecastElementParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionForecastElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionForecastElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionForecastElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionForecastElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get each resource forecasted consumption of your service
 */

export function useGetServicesServiceIdConsumptionForecastElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionForecastElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionForecastElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionForecastElementQueryOptions(serviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List consumption history of your service
 */
export const getServicesServiceIdConsumptionHistory = (
    serviceId: number,
    params?: GetServicesServiceIdConsumptionHistoryParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/services/${serviceId}/consumption/history`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionHistoryQueryKey = (serviceId: number,
    params?: GetServicesServiceIdConsumptionHistoryParams,) => {
    return [`/services/${serviceId}/consumption/history`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServicesServiceIdConsumptionHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError = unknown>(serviceId: number,
    params?: GetServicesServiceIdConsumptionHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionHistoryQueryKey(serviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>> = ({ signal }) => getServicesServiceIdConsumptionHistory(serviceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>>
export type GetServicesServiceIdConsumptionHistoryQueryError = unknown


export function useGetServicesServiceIdConsumptionHistory<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError = unknown>(
 serviceId: number,
    params: undefined |  GetServicesServiceIdConsumptionHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionHistory<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionHistory<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List consumption history of your service
 */

export function useGetServicesServiceIdConsumptionHistory<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError = unknown>(
 serviceId: number,
    params?: GetServicesServiceIdConsumptionHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionHistoryQueryOptions(serviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a summary of the past consumption of your service
 */
export const getServicesServiceIdConsumptionHistoryId = (
    serviceId: number,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesConsumptionSummaryOVH>(
      {url: `/services/${serviceId}/consumption/history/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionHistoryIdQueryKey = (serviceId: number,
    id: number,) => {
    return [`/services/${serviceId}/consumption/history/${id}`] as const;
    }

    
export const getGetServicesServiceIdConsumptionHistoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError = unknown>(serviceId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionHistoryIdQueryKey(serviceId,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>> = ({ signal }) => getServicesServiceIdConsumptionHistoryId(serviceId,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionHistoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>>
export type GetServicesServiceIdConsumptionHistoryIdQueryError = unknown


export function useGetServicesServiceIdConsumptionHistoryId<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError = unknown>(
 serviceId: number,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionHistoryId<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError = unknown>(
 serviceId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionHistoryId<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError = unknown>(
 serviceId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a summary of the past consumption of your service
 */

export function useGetServicesServiceIdConsumptionHistoryId<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError = unknown>(
 serviceId: number,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionHistoryIdQueryOptions(serviceId,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get each resource consumed for the given history
 */
export const getServicesServiceIdConsumptionHistoryIdElement = (
    serviceId: number,
    id: number,
    params?: GetServicesServiceIdConsumptionHistoryIdElementParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesConsumptionElementOVH[]>(
      {url: `/services/${serviceId}/consumption/history/${id}/element`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServicesServiceIdConsumptionHistoryIdElementQueryKey = (serviceId: number,
    id: number,
    params?: GetServicesServiceIdConsumptionHistoryIdElementParams,) => {
    return [`/services/${serviceId}/consumption/history/${id}/element`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServicesServiceIdConsumptionHistoryIdElementQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError = unknown>(serviceId: number,
    id: number,
    params?: GetServicesServiceIdConsumptionHistoryIdElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdConsumptionHistoryIdElementQueryKey(serviceId,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>> = ({ signal }) => getServicesServiceIdConsumptionHistoryIdElement(serviceId,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdConsumptionHistoryIdElementQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>>
export type GetServicesServiceIdConsumptionHistoryIdElementQueryError = unknown


export function useGetServicesServiceIdConsumptionHistoryIdElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError = unknown>(
 serviceId: number,
    id: number,
    params: undefined |  GetServicesServiceIdConsumptionHistoryIdElementParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionHistoryIdElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError = unknown>(
 serviceId: number,
    id: number,
    params?: GetServicesServiceIdConsumptionHistoryIdElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdConsumptionHistoryIdElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError = unknown>(
 serviceId: number,
    id: number,
    params?: GetServicesServiceIdConsumptionHistoryIdElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get each resource consumed for the given history
 */

export function useGetServicesServiceIdConsumptionHistoryIdElement<TData = Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError = unknown>(
 serviceId: number,
    id: number,
    params?: GetServicesServiceIdConsumptionHistoryIdElementParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdConsumptionHistoryIdElement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdConsumptionHistoryIdElementQueryOptions(serviceId,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service contacts
 */
export const putServicesServiceIdContacts = (
    serviceId: number,
    servicesContactsContactChangeRequestOVH: ServicesContactsContactChangeRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<ServicesContactsTaskOVH>(
      {url: `/services/${serviceId}/contacts`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesContactsContactChangeRequestOVH
    },
      options);
    }
  


export const getPutServicesServiceIdContactsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdContacts>>, TError,{serviceId: number;data: ServicesContactsContactChangeRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdContacts>>, TError,{serviceId: number;data: ServicesContactsContactChangeRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putServicesServiceIdContacts>>, {serviceId: number;data: ServicesContactsContactChangeRequestOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  putServicesServiceIdContacts(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutServicesServiceIdContactsMutationResult = NonNullable<Awaited<ReturnType<typeof putServicesServiceIdContacts>>>
    export type PutServicesServiceIdContactsMutationBody = ServicesContactsContactChangeRequestOVH
    export type PutServicesServiceIdContactsMutationError = unknown

    /**
 * @summary Update service contacts
 */
export const usePutServicesServiceIdContacts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdContacts>>, TError,{serviceId: number;data: ServicesContactsContactChangeRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putServicesServiceIdContacts>>,
        TError,
        {serviceId: number;data: ServicesContactsContactChangeRequestOVH},
        TContext
      > => {

      const mutationOptions = getPutServicesServiceIdContactsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List offers this option can be converted to
 */
export const getServicesServiceIdDetach = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/services/${serviceId}/detach`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdDetachQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/detach`] as const;
    }

    
export const getGetServicesServiceIdDetachQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdDetachQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdDetach>>> = ({ signal }) => getServicesServiceIdDetach(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdDetachQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdDetach>>>
export type GetServicesServiceIdDetachQueryError = unknown


export function useGetServicesServiceIdDetach<TData = Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdDetach>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdDetach<TData = Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdDetach>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdDetach<TData = Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List offers this option can be converted to
 */

export function useGetServicesServiceIdDetach<TData = Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetach>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdDetachQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary View an offer this option can be converted to
 */
export const getServicesServiceIdDetachPlanCode = (
    serviceId: number,
    planCode: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH>(
      {url: `/services/${serviceId}/detach/${planCode}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdDetachPlanCodeQueryKey = (serviceId: number,
    planCode: string,) => {
    return [`/services/${serviceId}/detach/${planCode}`] as const;
    }

    
export const getGetServicesServiceIdDetachPlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError = unknown>(serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdDetachPlanCodeQueryKey(serviceId,planCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>> = ({ signal }) => getServicesServiceIdDetachPlanCode(serviceId,planCode, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdDetachPlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>>
export type GetServicesServiceIdDetachPlanCodeQueryError = unknown


export function useGetServicesServiceIdDetachPlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdDetachPlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdDetachPlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary View an offer this option can be converted to
 */

export function useGetServicesServiceIdDetachPlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdDetachPlanCodeQueryOptions(serviceId,planCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the migration to a standalone offer. May require you to pay an Order
 */
export const postServicesServiceIdDetachPlanCodeExecute = (
    serviceId: number,
    planCode: string,
    servicesOperationDetachExecutionRequestOVH: ServicesOperationDetachExecutionRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesOperationOrderOVH>(
      {url: `/services/${serviceId}/detach/${planCode}/execute`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesOperationDetachExecutionRequestOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdDetachPlanCodeExecuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeExecute>>, TError,{serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeExecute>>, TError,{serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeExecute>>, {serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}> = (props) => {
          const {serviceId,planCode,data} = props ?? {};

          return  postServicesServiceIdDetachPlanCodeExecute(serviceId,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdDetachPlanCodeExecuteMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeExecute>>>
    export type PostServicesServiceIdDetachPlanCodeExecuteMutationBody = ServicesOperationDetachExecutionRequestOVH
    export type PostServicesServiceIdDetachPlanCodeExecuteMutationError = unknown

    /**
 * @summary Perform the migration to a standalone offer. May require you to pay an Order
 */
export const usePostServicesServiceIdDetachPlanCodeExecute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeExecute>>, TError,{serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeExecute>>,
        TError,
        {serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdDetachPlanCodeExecuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary View all offers compatible for the detachment for the given option offer
 */
export const getServicesServiceIdDetachPlanCodeOptions = (
    serviceId: number,
    planCode: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesOperationDetachOptionsDefinitionOVH[]>(
      {url: `/services/${serviceId}/detach/${planCode}/options`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdDetachPlanCodeOptionsQueryKey = (serviceId: number,
    planCode: string,) => {
    return [`/services/${serviceId}/detach/${planCode}/options`] as const;
    }

    
export const getGetServicesServiceIdDetachPlanCodeOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError = unknown>(serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdDetachPlanCodeOptionsQueryKey(serviceId,planCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>> = ({ signal }) => getServicesServiceIdDetachPlanCodeOptions(serviceId,planCode, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdDetachPlanCodeOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>>
export type GetServicesServiceIdDetachPlanCodeOptionsQueryError = unknown


export function useGetServicesServiceIdDetachPlanCodeOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError = unknown>(
 serviceId: number,
    planCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdDetachPlanCodeOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdDetachPlanCodeOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary View all offers compatible for the detachment for the given option offer
 */

export function useGetServicesServiceIdDetachPlanCodeOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdDetachPlanCodeOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdDetachPlanCodeOptionsQueryOptions(serviceId,planCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Simulate the migration to a standalone offer. It won't generate any Order or issue any changes to your Service.
 * @summary Simulate the migration to a standalone offer
 */
export const postServicesServiceIdDetachPlanCodeSimulate = (
    serviceId: number,
    planCode: string,
    servicesOperationDetachExecutionRequestOVH: ServicesOperationDetachExecutionRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesOperationOrderOVH>(
      {url: `/services/${serviceId}/detach/${planCode}/simulate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesOperationDetachExecutionRequestOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdDetachPlanCodeSimulateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeSimulate>>, TError,{serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeSimulate>>, TError,{serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeSimulate>>, {serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}> = (props) => {
          const {serviceId,planCode,data} = props ?? {};

          return  postServicesServiceIdDetachPlanCodeSimulate(serviceId,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdDetachPlanCodeSimulateMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeSimulate>>>
    export type PostServicesServiceIdDetachPlanCodeSimulateMutationBody = ServicesOperationDetachExecutionRequestOVH
    export type PostServicesServiceIdDetachPlanCodeSimulateMutationError = unknown

    /**
 * @summary Simulate the migration to a standalone offer
 */
export const usePostServicesServiceIdDetachPlanCodeSimulate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeSimulate>>, TError,{serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdDetachPlanCodeSimulate>>,
        TError,
        {serviceId: number;planCode: string;data: ServicesOperationDetachExecutionRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdDetachPlanCodeSimulateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available forms for service
 */
export const getServicesServiceIdForm = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesFormDescriptionOVH[]>(
      {url: `/services/${serviceId}/form`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdFormQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/form`] as const;
    }

    
export const getGetServicesServiceIdFormQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdFormQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdForm>>> = ({ signal }) => getServicesServiceIdForm(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdFormQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdForm>>>
export type GetServicesServiceIdFormQueryError = unknown


export function useGetServicesServiceIdForm<TData = Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdForm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdForm<TData = Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdForm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdForm<TData = Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available forms for service
 */

export function useGetServicesServiceIdForm<TData = Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdForm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdFormQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get specified form description for service
 */
export const getServicesServiceIdFormFormName = (
    serviceId: number,
    formName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesFormDescriptionOVH>(
      {url: `/services/${serviceId}/form/${formName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdFormFormNameQueryKey = (serviceId: number,
    formName: string,) => {
    return [`/services/${serviceId}/form/${formName}`] as const;
    }

    
export const getGetServicesServiceIdFormFormNameQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError = unknown>(serviceId: number,
    formName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdFormFormNameQueryKey(serviceId,formName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>> = ({ signal }) => getServicesServiceIdFormFormName(serviceId,formName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && formName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdFormFormNameQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>>
export type GetServicesServiceIdFormFormNameQueryError = unknown


export function useGetServicesServiceIdFormFormName<TData = Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError = unknown>(
 serviceId: number,
    formName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdFormFormName<TData = Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError = unknown>(
 serviceId: number,
    formName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdFormFormName<TData = Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError = unknown>(
 serviceId: number,
    formName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get specified form description for service
 */

export function useGetServicesServiceIdFormFormName<TData = Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError = unknown>(
 serviceId: number,
    formName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdFormFormName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdFormFormNameQueryOptions(serviceId,formName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post answers to the form for your service
 */
export const postServicesServiceIdFormFormNameAnswer = (
    serviceId: number,
    formName: string,
    servicesFormFormOVH: ServicesFormFormOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesFormResponseOVH>(
      {url: `/services/${serviceId}/form/${formName}/answer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesFormFormOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdFormFormNameAnswerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdFormFormNameAnswer>>, TError,{serviceId: number;formName: string;data: ServicesFormFormOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdFormFormNameAnswer>>, TError,{serviceId: number;formName: string;data: ServicesFormFormOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdFormFormNameAnswer>>, {serviceId: number;formName: string;data: ServicesFormFormOVH}> = (props) => {
          const {serviceId,formName,data} = props ?? {};

          return  postServicesServiceIdFormFormNameAnswer(serviceId,formName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdFormFormNameAnswerMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdFormFormNameAnswer>>>
    export type PostServicesServiceIdFormFormNameAnswerMutationBody = ServicesFormFormOVH
    export type PostServicesServiceIdFormFormNameAnswerMutationError = unknown

    /**
 * @summary Post answers to the form for your service
 */
export const usePostServicesServiceIdFormFormNameAnswer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdFormFormNameAnswer>>, TError,{serviceId: number;formName: string;data: ServicesFormFormOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdFormFormNameAnswer>>,
        TError,
        {serviceId: number;formName: string;data: ServicesFormFormOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdFormFormNameAnswerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get options of a service
 */
export const getServicesServiceIdOptions = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesExpandedServiceOVH[]>(
      {url: `/services/${serviceId}/options`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdOptionsQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/options`] as const;
    }

    
export const getGetServicesServiceIdOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdOptionsQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdOptions>>> = ({ signal }) => getServicesServiceIdOptions(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdOptions>>>
export type GetServicesServiceIdOptionsQueryError = unknown


export function useGetServicesServiceIdOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get options of a service
 */

export function useGetServicesServiceIdOptions<TData = Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdOptionsQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get possible renew periods of a service
 */
export const getServicesServiceIdRenewPeriodCapacities = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/services/${serviceId}/renewPeriodCapacities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdRenewPeriodCapacitiesQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/renewPeriodCapacities`] as const;
    }

    
export const getGetServicesServiceIdRenewPeriodCapacitiesQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdRenewPeriodCapacitiesQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>> = ({ signal }) => getServicesServiceIdRenewPeriodCapacities(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdRenewPeriodCapacitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>>
export type GetServicesServiceIdRenewPeriodCapacitiesQueryError = unknown


export function useGetServicesServiceIdRenewPeriodCapacities<TData = Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdRenewPeriodCapacities<TData = Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdRenewPeriodCapacities<TData = Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get possible renew periods of a service
 */

export function useGetServicesServiceIdRenewPeriodCapacities<TData = Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdRenewPeriodCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdRenewPeriodCapacitiesQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List contracts automatically agreed when subscribing to savings plan for this project
 */
export const getServicesServiceIdSavingsPlansContracts = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderContractOVH[]>(
      {url: `/services/${serviceId}/savingsPlans/contracts`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdSavingsPlansContractsQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/savingsPlans/contracts`] as const;
    }

    
export const getGetServicesServiceIdSavingsPlansContractsQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError = GetServicesServiceIdSavingsPlansContracts404 | GetServicesServiceIdSavingsPlansContracts500>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdSavingsPlansContractsQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>> = ({ signal }) => getServicesServiceIdSavingsPlansContracts(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdSavingsPlansContractsQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>>
export type GetServicesServiceIdSavingsPlansContractsQueryError = GetServicesServiceIdSavingsPlansContracts404 | GetServicesServiceIdSavingsPlansContracts500


export function useGetServicesServiceIdSavingsPlansContracts<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError = GetServicesServiceIdSavingsPlansContracts404 | GetServicesServiceIdSavingsPlansContracts500>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansContracts<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError = GetServicesServiceIdSavingsPlansContracts404 | GetServicesServiceIdSavingsPlansContracts500>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansContracts<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError = GetServicesServiceIdSavingsPlansContracts404 | GetServicesServiceIdSavingsPlansContracts500>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List contracts automatically agreed when subscribing to savings plan for this project
 */

export function useGetServicesServiceIdSavingsPlansContracts<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError = GetServicesServiceIdSavingsPlansContracts404 | GetServicesServiceIdSavingsPlansContracts500>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansContracts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdSavingsPlansContractsQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscribable Savings Plan commercial offers for a given Subscription
 */
export const getServicesServiceIdSavingsPlansSubscribable = (
    serviceId: number,
    params?: GetServicesServiceIdSavingsPlansSubscribableParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSubscribableSavingsPlanOfferOVH[]>(
      {url: `/services/${serviceId}/savingsPlans/subscribable`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServicesServiceIdSavingsPlansSubscribableQueryKey = (serviceId: number,
    params?: GetServicesServiceIdSavingsPlansSubscribableParams,) => {
    return [`/services/${serviceId}/savingsPlans/subscribable`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServicesServiceIdSavingsPlansSubscribableQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError = GetServicesServiceIdSavingsPlansSubscribable404 | GetServicesServiceIdSavingsPlansSubscribable500>(serviceId: number,
    params?: GetServicesServiceIdSavingsPlansSubscribableParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdSavingsPlansSubscribableQueryKey(serviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>> = ({ signal }) => getServicesServiceIdSavingsPlansSubscribable(serviceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdSavingsPlansSubscribableQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>>
export type GetServicesServiceIdSavingsPlansSubscribableQueryError = GetServicesServiceIdSavingsPlansSubscribable404 | GetServicesServiceIdSavingsPlansSubscribable500


export function useGetServicesServiceIdSavingsPlansSubscribable<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError = GetServicesServiceIdSavingsPlansSubscribable404 | GetServicesServiceIdSavingsPlansSubscribable500>(
 serviceId: number,
    params: undefined |  GetServicesServiceIdSavingsPlansSubscribableParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribable<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError = GetServicesServiceIdSavingsPlansSubscribable404 | GetServicesServiceIdSavingsPlansSubscribable500>(
 serviceId: number,
    params?: GetServicesServiceIdSavingsPlansSubscribableParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribable<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError = GetServicesServiceIdSavingsPlansSubscribable404 | GetServicesServiceIdSavingsPlansSubscribable500>(
 serviceId: number,
    params?: GetServicesServiceIdSavingsPlansSubscribableParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscribable Savings Plan commercial offers for a given Subscription
 */

export function useGetServicesServiceIdSavingsPlansSubscribable<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError = GetServicesServiceIdSavingsPlansSubscribable404 | GetServicesServiceIdSavingsPlansSubscribable500>(
 serviceId: number,
    params?: GetServicesServiceIdSavingsPlansSubscribableParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdSavingsPlansSubscribableQueryOptions(serviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Subscribe to a Savings Plan, applicable contracts will be automatically agreed to.
 */
export const postServicesServiceIdSavingsPlansSubscribeExecute = (
    serviceId: number,
    servicesSavingsPlansSubscribeOVH: ServicesSavingsPlansSubscribeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanOVH>(
      {url: `/services/${serviceId}/savingsPlans/subscribe/execute`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesSavingsPlansSubscribeOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdSavingsPlansSubscribeExecuteMutationOptions = <TError = PostServicesServiceIdSavingsPlansSubscribeExecute400 | PostServicesServiceIdSavingsPlansSubscribeExecute404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeExecute>>, TError,{serviceId: number;data: ServicesSavingsPlansSubscribeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeExecute>>, TError,{serviceId: number;data: ServicesSavingsPlansSubscribeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeExecute>>, {serviceId: number;data: ServicesSavingsPlansSubscribeOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  postServicesServiceIdSavingsPlansSubscribeExecute(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdSavingsPlansSubscribeExecuteMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeExecute>>>
    export type PostServicesServiceIdSavingsPlansSubscribeExecuteMutationBody = ServicesSavingsPlansSubscribeOVH
    export type PostServicesServiceIdSavingsPlansSubscribeExecuteMutationError = PostServicesServiceIdSavingsPlansSubscribeExecute400 | PostServicesServiceIdSavingsPlansSubscribeExecute404

    /**
 * @summary Subscribe to a Savings Plan, applicable contracts will be automatically agreed to.
 */
export const usePostServicesServiceIdSavingsPlansSubscribeExecute = <TError = PostServicesServiceIdSavingsPlansSubscribeExecute400 | PostServicesServiceIdSavingsPlansSubscribeExecute404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeExecute>>, TError,{serviceId: number;data: ServicesSavingsPlansSubscribeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeExecute>>,
        TError,
        {serviceId: number;data: ServicesSavingsPlansSubscribeOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdSavingsPlansSubscribeExecuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Simulate a Subscription to a Savings Plan
 */
export const postServicesServiceIdSavingsPlansSubscribeSimulate = (
    serviceId: number,
    servicesSavingsPlansSubscribeOVH: ServicesSavingsPlansSubscribeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSimulatedSavingsPlanOVH>(
      {url: `/services/${serviceId}/savingsPlans/subscribe/simulate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesSavingsPlansSubscribeOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdSavingsPlansSubscribeSimulateMutationOptions = <TError = PostServicesServiceIdSavingsPlansSubscribeSimulate400 | PostServicesServiceIdSavingsPlansSubscribeSimulate404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeSimulate>>, TError,{serviceId: number;data: ServicesSavingsPlansSubscribeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeSimulate>>, TError,{serviceId: number;data: ServicesSavingsPlansSubscribeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeSimulate>>, {serviceId: number;data: ServicesSavingsPlansSubscribeOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  postServicesServiceIdSavingsPlansSubscribeSimulate(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdSavingsPlansSubscribeSimulateMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeSimulate>>>
    export type PostServicesServiceIdSavingsPlansSubscribeSimulateMutationBody = ServicesSavingsPlansSubscribeOVH
    export type PostServicesServiceIdSavingsPlansSubscribeSimulateMutationError = PostServicesServiceIdSavingsPlansSubscribeSimulate400 | PostServicesServiceIdSavingsPlansSubscribeSimulate404

    /**
 * @summary Simulate a Subscription to a Savings Plan
 */
export const usePostServicesServiceIdSavingsPlansSubscribeSimulate = <TError = PostServicesServiceIdSavingsPlansSubscribeSimulate400 | PostServicesServiceIdSavingsPlansSubscribeSimulate404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeSimulate>>, TError,{serviceId: number;data: ServicesSavingsPlansSubscribeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribeSimulate>>,
        TError,
        {serviceId: number;data: ServicesSavingsPlansSubscribeOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdSavingsPlansSubscribeSimulateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List subscribed Savings Plans
 */
export const getServicesServiceIdSavingsPlansSubscribed = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanOVH[]>(
      {url: `/services/${serviceId}/savingsPlans/subscribed`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdSavingsPlansSubscribedQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/savingsPlans/subscribed`] as const;
    }

    
export const getGetServicesServiceIdSavingsPlansSubscribedQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError = GetServicesServiceIdSavingsPlansSubscribed404 | GetServicesServiceIdSavingsPlansSubscribed500>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdSavingsPlansSubscribedQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>> = ({ signal }) => getServicesServiceIdSavingsPlansSubscribed(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdSavingsPlansSubscribedQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>>
export type GetServicesServiceIdSavingsPlansSubscribedQueryError = GetServicesServiceIdSavingsPlansSubscribed404 | GetServicesServiceIdSavingsPlansSubscribed500


export function useGetServicesServiceIdSavingsPlansSubscribed<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError = GetServicesServiceIdSavingsPlansSubscribed404 | GetServicesServiceIdSavingsPlansSubscribed500>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribed<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError = GetServicesServiceIdSavingsPlansSubscribed404 | GetServicesServiceIdSavingsPlansSubscribed500>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribed<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError = GetServicesServiceIdSavingsPlansSubscribed404 | GetServicesServiceIdSavingsPlansSubscribed500>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscribed Savings Plans
 */

export function useGetServicesServiceIdSavingsPlansSubscribed<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError = GetServicesServiceIdSavingsPlansSubscribed404 | GetServicesServiceIdSavingsPlansSubscribed500>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribed>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdSavingsPlansSubscribedQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch a subscribed Savings Plan
 */
export const getServicesServiceIdSavingsPlansSubscribedSavingsPlanId = (
    serviceId: number,
    savingsPlanId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanOVH>(
      {url: `/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdQueryKey = (serviceId: number,
    savingsPlanId: string,) => {
    return [`/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}`] as const;
    }

    
export const getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500>(serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdQueryKey(serviceId,savingsPlanId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>> = ({ signal }) => getServicesServiceIdSavingsPlansSubscribedSavingsPlanId(serviceId,savingsPlanId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && savingsPlanId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>>
export type GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdQueryError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500


export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanId<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500>(
 serviceId: number,
    savingsPlanId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanId<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500>(
 serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanId<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500>(
 serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch a subscribed Savings Plan
 */

export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanId<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanId500>(
 serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdQueryOptions(serviceId,savingsPlanId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a subscribed Savings Plan
 */
export const putServicesServiceIdSavingsPlansSubscribedSavingsPlanId = (
    serviceId: number,
    savingsPlanId: string,
    servicesSavingsPlansSavingsPlanOVH: NonReadonly<ServicesSavingsPlansSavingsPlanOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanOVH>(
      {url: `/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesSavingsPlansSavingsPlanOVH
    },
      options);
    }
  


export const getPutServicesServiceIdSavingsPlansSubscribedSavingsPlanIdMutationOptions = <TError = PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId400 | PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError,{serviceId: number;savingsPlanId: string;data: NonReadonly<ServicesSavingsPlansSavingsPlanOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError,{serviceId: number;savingsPlanId: string;data: NonReadonly<ServicesSavingsPlansSavingsPlanOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, {serviceId: number;savingsPlanId: string;data: NonReadonly<ServicesSavingsPlansSavingsPlanOVH>}> = (props) => {
          const {serviceId,savingsPlanId,data} = props ?? {};

          return  putServicesServiceIdSavingsPlansSubscribedSavingsPlanId(serviceId,savingsPlanId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutServicesServiceIdSavingsPlansSubscribedSavingsPlanIdMutationResult = NonNullable<Awaited<ReturnType<typeof putServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>>
    export type PutServicesServiceIdSavingsPlansSubscribedSavingsPlanIdMutationBody = NonReadonly<ServicesSavingsPlansSavingsPlanOVH>
    export type PutServicesServiceIdSavingsPlansSubscribedSavingsPlanIdMutationError = PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId400 | PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId500

    /**
 * @summary Update a subscribed Savings Plan
 */
export const usePutServicesServiceIdSavingsPlansSubscribedSavingsPlanId = <TError = PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId400 | PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId404 | PutServicesServiceIdSavingsPlansSubscribedSavingsPlanId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>, TError,{serviceId: number;savingsPlanId: string;data: NonReadonly<ServicesSavingsPlansSavingsPlanOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putServicesServiceIdSavingsPlansSubscribedSavingsPlanId>>,
        TError,
        {serviceId: number;savingsPlanId: string;data: NonReadonly<ServicesSavingsPlansSavingsPlanOVH>},
        TContext
      > => {

      const mutationOptions = getPutServicesServiceIdSavingsPlansSubscribedSavingsPlanIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the action occurring at the end of the Savings Plan period
 */
export const postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction = (
    serviceId: number,
    savingsPlanId: string,
    servicesSavingsPlansChangePeriodEndActionOVH: ServicesSavingsPlansChangePeriodEndActionOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanOVH>(
      {url: `/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}/changePeriodEndAction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesSavingsPlansChangePeriodEndActionOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndActionMutationOptions = <TError = PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction400 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction404 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction>>, TError,{serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangePeriodEndActionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction>>, TError,{serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangePeriodEndActionOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction>>, {serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangePeriodEndActionOVH}> = (props) => {
          const {serviceId,savingsPlanId,data} = props ?? {};

          return  postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction(serviceId,savingsPlanId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndActionMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction>>>
    export type PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndActionMutationBody = ServicesSavingsPlansChangePeriodEndActionOVH
    export type PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndActionMutationError = PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction400 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction404 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction500

    /**
 * @summary Change the action occurring at the end of the Savings Plan period
 */
export const usePostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction = <TError = PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction400 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction404 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction>>, TError,{serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangePeriodEndActionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndAction>>,
        TError,
        {serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangePeriodEndActionOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndActionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Resize the Savings Plan
 */
export const postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize = (
    serviceId: number,
    savingsPlanId: string,
    servicesSavingsPlansChangeSizeOVH: ServicesSavingsPlansChangeSizeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanOVH>(
      {url: `/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}/changeSize`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesSavingsPlansChangeSizeOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSizeMutationOptions = <TError = PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize400 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize404 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize>>, TError,{serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangeSizeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize>>, TError,{serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangeSizeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize>>, {serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangeSizeOVH}> = (props) => {
          const {serviceId,savingsPlanId,data} = props ?? {};

          return  postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize(serviceId,savingsPlanId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSizeMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize>>>
    export type PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSizeMutationBody = ServicesSavingsPlansChangeSizeOVH
    export type PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSizeMutationError = PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize400 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize404 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize500

    /**
 * @summary Resize the Savings Plan
 */
export const usePostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize = <TError = PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize400 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize404 | PostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize>>, TError,{serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangeSizeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSize>>,
        TError,
        {serviceId: number;savingsPlanId: string;data: ServicesSavingsPlansChangeSizeOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List the period history of a given Savings Plan
 */
export const getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods = (
    serviceId: number,
    savingsPlanId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesSavingsPlansSavingsPlanPeriodOVH[]>(
      {url: `/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}/periods`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsQueryKey = (serviceId: number,
    savingsPlanId: string,) => {
    return [`/services/${serviceId}/savingsPlans/subscribed/${savingsPlanId}/periods`] as const;
    }

    
export const getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500>(serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsQueryKey(serviceId,savingsPlanId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>> = ({ signal }) => getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods(serviceId,savingsPlanId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && savingsPlanId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>>
export type GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsQueryError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500


export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500>(
 serviceId: number,
    savingsPlanId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500>(
 serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500>(
 serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List the period history of a given Savings Plan
 */

export function useGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods<TData = Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError = GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods404 | GetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods500>(
 serviceId: number,
    savingsPlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsQueryOptions(serviceId,savingsPlanId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary View the technical details of the service
 */
export const getServicesServiceIdTechnicalDetails = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesExpandedTechnicalDetailsOVH>(
      {url: `/services/${serviceId}/technicalDetails`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdTechnicalDetailsQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/technicalDetails`] as const;
    }

    
export const getGetServicesServiceIdTechnicalDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdTechnicalDetailsQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>> = ({ signal }) => getServicesServiceIdTechnicalDetails(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdTechnicalDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>>
export type GetServicesServiceIdTechnicalDetailsQueryError = unknown


export function useGetServicesServiceIdTechnicalDetails<TData = Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdTechnicalDetails<TData = Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdTechnicalDetails<TData = Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary View the technical details of the service
 */

export function useGetServicesServiceIdTechnicalDetails<TData = Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdTechnicalDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdTechnicalDetailsQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request service termination
 */
export const postServicesServiceIdTerminate = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesTerminateTerminationAnswerOVH>(
      {url: `/services/${serviceId}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostServicesServiceIdTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdTerminate>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdTerminate>>, TError,{serviceId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdTerminate>>, {serviceId: number}> = (props) => {
          const {serviceId} = props ?? {};

          return  postServicesServiceIdTerminate(serviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdTerminate>>>
    
    export type PostServicesServiceIdTerminateMutationError = unknown

    /**
 * @summary Request service termination
 */
export const usePostServicesServiceIdTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdTerminate>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdTerminate>>,
        TError,
        {serviceId: number},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postServicesServiceIdTerminateConfirm = (
    serviceId: number,
    servicesTerminateConfirmServiceTerminationRequestOVH: ServicesTerminateConfirmServiceTerminationRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesTerminateTerminationAnswerOVH>(
      {url: `/services/${serviceId}/terminate/confirm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesTerminateConfirmServiceTerminationRequestOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdTerminateConfirmMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdTerminateConfirm>>, TError,{serviceId: number;data: ServicesTerminateConfirmServiceTerminationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdTerminateConfirm>>, TError,{serviceId: number;data: ServicesTerminateConfirmServiceTerminationRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdTerminateConfirm>>, {serviceId: number;data: ServicesTerminateConfirmServiceTerminationRequestOVH}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  postServicesServiceIdTerminateConfirm(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdTerminateConfirmMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdTerminateConfirm>>>
    export type PostServicesServiceIdTerminateConfirmMutationBody = ServicesTerminateConfirmServiceTerminationRequestOVH
    export type PostServicesServiceIdTerminateConfirmMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostServicesServiceIdTerminateConfirm = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdTerminateConfirm>>, TError,{serviceId: number;data: ServicesTerminateConfirmServiceTerminationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdTerminateConfirm>>,
        TError,
        {serviceId: number;data: ServicesTerminateConfirmServiceTerminationRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdTerminateConfirmMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List offers this option can be converted to
 */
export const getServicesServiceIdUpgrade = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/services/${serviceId}/upgrade`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdUpgradeQueryKey = (serviceId: number,) => {
    return [`/services/${serviceId}/upgrade`] as const;
    }

    
export const getGetServicesServiceIdUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdUpgradeQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>> = ({ signal }) => getServicesServiceIdUpgrade(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>>
export type GetServicesServiceIdUpgradeQueryError = unknown


export function useGetServicesServiceIdUpgrade<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdUpgrade<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdUpgrade<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List offers this option can be converted to
 */

export function useGetServicesServiceIdUpgrade<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdUpgradeQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary View an offer this option can be converted to
 */
export const getServicesServiceIdUpgradePlanCode = (
    serviceId: number,
    planCode: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH>(
      {url: `/services/${serviceId}/upgrade/${planCode}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServicesServiceIdUpgradePlanCodeQueryKey = (serviceId: number,
    planCode: string,) => {
    return [`/services/${serviceId}/upgrade/${planCode}`] as const;
    }

    
export const getGetServicesServiceIdUpgradePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError = unknown>(serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServicesServiceIdUpgradePlanCodeQueryKey(serviceId,planCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>> = ({ signal }) => getServicesServiceIdUpgradePlanCode(serviceId,planCode, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServicesServiceIdUpgradePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>>
export type GetServicesServiceIdUpgradePlanCodeQueryError = unknown


export function useGetServicesServiceIdUpgradePlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdUpgradePlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServicesServiceIdUpgradePlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary View an offer this option can be converted to
 */

export function useGetServicesServiceIdUpgradePlanCode<TData = Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError = unknown>(
 serviceId: number,
    planCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServicesServiceIdUpgradePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServicesServiceIdUpgradePlanCodeQueryOptions(serviceId,planCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the migration to another offer. May require you to pay an Order
 */
export const postServicesServiceIdUpgradePlanCodeExecute = (
    serviceId: number,
    planCode: string,
    servicesOperationExecutionRequestOVH: ServicesOperationExecutionRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesOperationOrderOVH>(
      {url: `/services/${serviceId}/upgrade/${planCode}/execute`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesOperationExecutionRequestOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdUpgradePlanCodeExecuteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeExecute>>, TError,{serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeExecute>>, TError,{serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeExecute>>, {serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}> = (props) => {
          const {serviceId,planCode,data} = props ?? {};

          return  postServicesServiceIdUpgradePlanCodeExecute(serviceId,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdUpgradePlanCodeExecuteMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeExecute>>>
    export type PostServicesServiceIdUpgradePlanCodeExecuteMutationBody = ServicesOperationExecutionRequestOVH
    export type PostServicesServiceIdUpgradePlanCodeExecuteMutationError = unknown

    /**
 * @summary Perform the migration to another offer. May require you to pay an Order
 */
export const usePostServicesServiceIdUpgradePlanCodeExecute = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeExecute>>, TError,{serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeExecute>>,
        TError,
        {serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdUpgradePlanCodeExecuteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Simulate the conversion to another offer. It won't generate any Order or issue any changes to your Service.
 * @summary Simulate the conversion to another offer
 */
export const postServicesServiceIdUpgradePlanCodeSimulate = (
    serviceId: number,
    planCode: string,
    servicesOperationExecutionRequestOVH: ServicesOperationExecutionRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesOperationOrderOVH>(
      {url: `/services/${serviceId}/upgrade/${planCode}/simulate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesOperationExecutionRequestOVH, signal
    },
      options);
    }
  


export const getPostServicesServiceIdUpgradePlanCodeSimulateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeSimulate>>, TError,{serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeSimulate>>, TError,{serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeSimulate>>, {serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}> = (props) => {
          const {serviceId,planCode,data} = props ?? {};

          return  postServicesServiceIdUpgradePlanCodeSimulate(serviceId,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServicesServiceIdUpgradePlanCodeSimulateMutationResult = NonNullable<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeSimulate>>>
    export type PostServicesServiceIdUpgradePlanCodeSimulateMutationBody = ServicesOperationExecutionRequestOVH
    export type PostServicesServiceIdUpgradePlanCodeSimulateMutationError = unknown

    /**
 * @summary Simulate the conversion to another offer
 */
export const usePostServicesServiceIdUpgradePlanCodeSimulate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeSimulate>>, TError,{serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServicesServiceIdUpgradePlanCodeSimulate>>,
        TError,
        {serviceId: number;planCode: string;data: ServicesOperationExecutionRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostServicesServiceIdUpgradePlanCodeSimulateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

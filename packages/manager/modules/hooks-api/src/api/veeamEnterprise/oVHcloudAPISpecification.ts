/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetVeeamVeeamEnterpriseParams,
  GetVeeamVeeamEnterpriseServiceNameTaskParams,
  PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody,
  PostVeeamVeeamEnterpriseServiceNameRegisterBody,
  PostVeeamVeeamEnterpriseServiceNameUpdateBody,
  ServicesServiceOVH,
  VeeamVeeamEnterpriseAccountWithIAMOVH,
  VeeamVeeamEnterpriseTaskOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List Veeam Enterprise Plus services
 */
export const getVeeamVeeamEnterprise = (
    params?: GetVeeamVeeamEnterpriseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/veeam/veeamEnterprise`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVeeamVeeamEnterpriseQueryKey = (params?: GetVeeamVeeamEnterpriseParams,) => {
    return [`/veeam/veeamEnterprise`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVeeamVeeamEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError = unknown>(params?: GetVeeamVeeamEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamVeeamEnterpriseQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>> = ({ signal }) => getVeeamVeeamEnterprise(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamVeeamEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>>
export type GetVeeamVeeamEnterpriseQueryError = unknown


export function useGetVeeamVeeamEnterprise<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError = unknown>(
 params: undefined |  GetVeeamVeeamEnterpriseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterprise<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError = unknown>(
 params?: GetVeeamVeeamEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterprise<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError = unknown>(
 params?: GetVeeamVeeamEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Veeam Enterprise Plus services
 */

export function useGetVeeamVeeamEnterprise<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError = unknown>(
 params?: GetVeeamVeeamEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamVeeamEnterpriseQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Veeam Enterprise Plus
 */
export const getVeeamVeeamEnterpriseServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamVeeamEnterpriseAccountWithIAMOVH>(
      {url: `/veeam/veeamEnterprise/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamVeeamEnterpriseServiceNameQueryKey = (serviceName: string,) => {
    return [`/veeam/veeamEnterprise/${serviceName}`] as const;
    }

    
export const getGetVeeamVeeamEnterpriseServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamVeeamEnterpriseServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>> = ({ signal }) => getVeeamVeeamEnterpriseServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamVeeamEnterpriseServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>>
export type GetVeeamVeeamEnterpriseServiceNameQueryError = unknown


export function useGetVeeamVeeamEnterpriseServiceName<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceName<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceName<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Veeam Enterprise Plus
 */

export function useGetVeeamVeeamEnterpriseServiceName<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamVeeamEnterpriseServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postVeeamVeeamEnterpriseServiceNameConfirmTermination = (
    serviceName: string,
    postVeeamVeeamEnterpriseServiceNameConfirmTerminationBody: PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/veeam/veeamEnterprise/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVeeamVeeamEnterpriseServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostVeeamVeeamEnterpriseServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameConfirmTermination>>, {serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVeeamVeeamEnterpriseServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamVeeamEnterpriseServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameConfirmTermination>>>
    export type PostVeeamVeeamEnterpriseServiceNameConfirmTerminationMutationBody = PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody
    export type PostVeeamVeeamEnterpriseServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostVeeamVeeamEnterpriseServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostVeeamVeeamEnterpriseServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Register Veeam backup server
 */
export const postVeeamVeeamEnterpriseServiceNameRegister = (
    serviceName: string,
    postVeeamVeeamEnterpriseServiceNameRegisterBody: PostVeeamVeeamEnterpriseServiceNameRegisterBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamVeeamEnterpriseTaskOVH[]>(
      {url: `/veeam/veeamEnterprise/${serviceName}/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVeeamVeeamEnterpriseServiceNameRegisterBody, signal
    },
      options);
    }
  


export const getPostVeeamVeeamEnterpriseServiceNameRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameRegister>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameRegisterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameRegister>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameRegisterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameRegister>>, {serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameRegisterBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVeeamVeeamEnterpriseServiceNameRegister(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamVeeamEnterpriseServiceNameRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameRegister>>>
    export type PostVeeamVeeamEnterpriseServiceNameRegisterMutationBody = PostVeeamVeeamEnterpriseServiceNameRegisterBody
    export type PostVeeamVeeamEnterpriseServiceNameRegisterMutationError = unknown

    /**
 * @summary Register Veeam backup server
 */
export const usePostVeeamVeeamEnterpriseServiceNameRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameRegister>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameRegisterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameRegister>>,
        TError,
        {serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameRegisterBody},
        TContext
      > => {

      const mutationOptions = getPostVeeamVeeamEnterpriseServiceNameRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getVeeamVeeamEnterpriseServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/veeam/veeamEnterprise/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamVeeamEnterpriseServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/veeam/veeamEnterprise/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetVeeamVeeamEnterpriseServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamVeeamEnterpriseServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>> = ({ signal }) => getVeeamVeeamEnterpriseServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamVeeamEnterpriseServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>>
export type GetVeeamVeeamEnterpriseServiceNameServiceInfosQueryError = unknown


export function useGetVeeamVeeamEnterpriseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetVeeamVeeamEnterpriseServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamVeeamEnterpriseServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putVeeamVeeamEnterpriseServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/veeam/veeamEnterprise/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutVeeamVeeamEnterpriseServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVeeamVeeamEnterpriseServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putVeeamVeeamEnterpriseServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVeeamVeeamEnterpriseServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putVeeamVeeamEnterpriseServiceNameServiceInfos>>>
    export type PutVeeamVeeamEnterpriseServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutVeeamVeeamEnterpriseServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutVeeamVeeamEnterpriseServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVeeamVeeamEnterpriseServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVeeamVeeamEnterpriseServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutVeeamVeeamEnterpriseServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List operations
 */
export const getVeeamVeeamEnterpriseServiceNameTask = (
    serviceName: string,
    params?: GetVeeamVeeamEnterpriseServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/veeam/veeamEnterprise/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVeeamVeeamEnterpriseServiceNameTaskQueryKey = (serviceName: string,
    params?: GetVeeamVeeamEnterpriseServiceNameTaskParams,) => {
    return [`/veeam/veeamEnterprise/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVeeamVeeamEnterpriseServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetVeeamVeeamEnterpriseServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamVeeamEnterpriseServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>> = ({ signal }) => getVeeamVeeamEnterpriseServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamVeeamEnterpriseServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>>
export type GetVeeamVeeamEnterpriseServiceNameTaskQueryError = unknown


export function useGetVeeamVeeamEnterpriseServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetVeeamVeeamEnterpriseServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetVeeamVeeamEnterpriseServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetVeeamVeeamEnterpriseServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List operations
 */

export function useGetVeeamVeeamEnterpriseServiceNameTask<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetVeeamVeeamEnterpriseServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamVeeamEnterpriseServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get operation
 */
export const getVeeamVeeamEnterpriseServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamVeeamEnterpriseTaskOVH>(
      {url: `/veeam/veeamEnterprise/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVeeamVeeamEnterpriseServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/veeam/veeamEnterprise/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetVeeamVeeamEnterpriseServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVeeamVeeamEnterpriseServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>> = ({ signal }) => getVeeamVeeamEnterpriseServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVeeamVeeamEnterpriseServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>>
export type GetVeeamVeeamEnterpriseServiceNameTaskTaskIdQueryError = unknown


export function useGetVeeamVeeamEnterpriseServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVeeamVeeamEnterpriseServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get operation
 */

export function useGetVeeamVeeamEnterpriseServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVeeamVeeamEnterpriseServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVeeamVeeamEnterpriseServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postVeeamVeeamEnterpriseServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/veeam/veeamEnterprise/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVeeamVeeamEnterpriseServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVeeamVeeamEnterpriseServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamVeeamEnterpriseServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameTerminate>>>
    
    export type PostVeeamVeeamEnterpriseServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostVeeamVeeamEnterpriseServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVeeamVeeamEnterpriseServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update Veeam Enterprise Plus configuration
 */
export const postVeeamVeeamEnterpriseServiceNameUpdate = (
    serviceName: string,
    postVeeamVeeamEnterpriseServiceNameUpdateBody: PostVeeamVeeamEnterpriseServiceNameUpdateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VeeamVeeamEnterpriseTaskOVH[]>(
      {url: `/veeam/veeamEnterprise/${serviceName}/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVeeamVeeamEnterpriseServiceNameUpdateBody, signal
    },
      options);
    }
  


export const getPostVeeamVeeamEnterpriseServiceNameUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameUpdate>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameUpdate>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameUpdateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameUpdate>>, {serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameUpdateBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVeeamVeeamEnterpriseServiceNameUpdate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVeeamVeeamEnterpriseServiceNameUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameUpdate>>>
    export type PostVeeamVeeamEnterpriseServiceNameUpdateMutationBody = PostVeeamVeeamEnterpriseServiceNameUpdateBody
    export type PostVeeamVeeamEnterpriseServiceNameUpdateMutationError = unknown

    /**
 * @summary Update Veeam Enterprise Plus configuration
 */
export const usePostVeeamVeeamEnterpriseServiceNameUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameUpdate>>, TError,{serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameUpdateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVeeamVeeamEnterpriseServiceNameUpdate>>,
        TError,
        {serviceName: string;data: PostVeeamVeeamEnterpriseServiceNameUpdateBody},
        TContext
      > => {

      const mutationOptions = getPostVeeamVeeamEnterpriseServiceNameUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetIpIpAntihackParams,
  GetIpIpArpParams,
  GetIpIpFirewallIpOnFirewallRuleParams,
  GetIpIpFirewallParams,
  GetIpIpLicenseCloudLinuxParams,
  GetIpIpLicenseCpanelParams,
  GetIpIpLicenseDirectadminParams,
  GetIpIpLicensePleskParams,
  GetIpIpLicenseSqlserverParams,
  GetIpIpLicenseVirtuozzoParams,
  GetIpIpLicenseWindowsParams,
  GetIpIpLicenseWorklightParams,
  GetIpIpMitigationParams,
  GetIpIpPhishingParams,
  GetIpIpSpamIpSpammingStatsParams,
  GetIpIpSpamParams,
  GetIpIpTaskParams,
  GetIpParams,
  GetIpServiceParams,
  IpAntiphishingOVH,
  IpArpBlockedIpOVH,
  IpBlockOVH,
  IpBlockedIpOVH,
  IpByoipAggregationPreviewOVH,
  IpByoipSlicingPreviewOVH,
  IpCampusOVH,
  IpDestinationsOVH,
  IpFirewallIpOVH,
  IpFirewallNetworkRuleOVH,
  IpGameMitigationOVH,
  IpGameMitigationRuleOVH,
  IpIpMigrationTokenOVH,
  IpIpOVH,
  IpIpTaskOVH,
  IpIpWithIAMOVH,
  IpMitigationIpOVH,
  IpMitigationProfileOVH,
  IpOVH,
  IpReverseDelegationOVH,
  IpReverseIpOVH,
  IpRipeInfosOVH,
  IpServiceIpOVH,
  IpServiceIpWithIAMOVH,
  IpSpamIpOVH,
  IpSpamStatsOVH,
  Ipv4OVH,
  PostIpIpBringYourOwnIpAggregateBody,
  PostIpIpBringYourOwnIpSliceBody,
  PostIpIpChangeOrgBody,
  PostIpIpDelegationBody,
  PostIpIpFirewallBody,
  PostIpIpFirewallIpOnFirewallRuleBody,
  PostIpIpGameIpOnGameRuleBody,
  PostIpIpMigrationTokenBody,
  PostIpIpMitigationBody,
  PostIpIpMitigationProfilesBody,
  PostIpIpMoveBody,
  PostIpIpReverseBody,
  PostIpServiceServiceNameChangeContactBody,
  PostIpServiceServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Your OVH IPs
 */
export const getIp = (
    params?: GetIpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/ip`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpQueryKey = (params?: GetIpParams,) => {
    return [`/ip`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpQueryOptions = <TData = Awaited<ReturnType<typeof getIp>>, TError = unknown>(params?: GetIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIp>>> = ({ signal }) => getIp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpQueryResult = NonNullable<Awaited<ReturnType<typeof getIp>>>
export type GetIpQueryError = unknown


export function useGetIp<TData = Awaited<ReturnType<typeof getIp>>, TError = unknown>(
 params: undefined |  GetIpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIp<TData = Awaited<ReturnType<typeof getIp>>, TError = unknown>(
 params?: GetIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIp<TData = Awaited<ReturnType<typeof getIp>>, TError = unknown>(
 params?: GetIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your OVH IPs
 */

export function useGetIp<TData = Awaited<ReturnType<typeof getIp>>, TError = unknown>(
 params?: GetIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get IP campuses
 */
export const getIpCampus = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpCampusOVH[]>(
      {url: `/ip/campus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpCampusQueryKey = () => {
    return [`/ip/campus`] as const;
    }

    
export const getGetIpCampusQueryOptions = <TData = Awaited<ReturnType<typeof getIpCampus>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpCampus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpCampusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpCampus>>> = ({ signal }) => getIpCampus(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpCampus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpCampusQueryResult = NonNullable<Awaited<ReturnType<typeof getIpCampus>>>
export type GetIpCampusQueryError = unknown


export function useGetIpCampus<TData = Awaited<ReturnType<typeof getIpCampus>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpCampus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpCampus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpCampus<TData = Awaited<ReturnType<typeof getIpCampus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpCampus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpCampus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpCampus<TData = Awaited<ReturnType<typeof getIpCampus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpCampus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get IP campuses
 */

export function useGetIpCampus<TData = Awaited<ReturnType<typeof getIpCampus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpCampus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpCampusQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your ip services
 */
export const getIpService = (
    params?: GetIpServiceParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/service`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpServiceQueryKey = (params?: GetIpServiceParams,) => {
    return [`/ip/service`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpServiceQueryOptions = <TData = Awaited<ReturnType<typeof getIpService>>, TError = unknown>(params?: GetIpServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpServiceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpService>>> = ({ signal }) => getIpService(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getIpService>>>
export type GetIpServiceQueryError = unknown


export function useGetIpService<TData = Awaited<ReturnType<typeof getIpService>>, TError = unknown>(
 params: undefined |  GetIpServiceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpService<TData = Awaited<ReturnType<typeof getIpService>>, TError = unknown>(
 params?: GetIpServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpService<TData = Awaited<ReturnType<typeof getIpService>>, TError = unknown>(
 params?: GetIpServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your ip services
 */

export function useGetIpService<TData = Awaited<ReturnType<typeof getIpService>>, TError = unknown>(
 params?: GetIpServiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpServiceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpServiceServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpServiceIpWithIAMOVH>(
      {url: `/ip/service/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpServiceServiceNameQueryKey = (serviceName: string,) => {
    return [`/ip/service/${serviceName}`] as const;
    }

    
export const getGetIpServiceServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getIpServiceServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpServiceServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpServiceServiceName>>> = ({ signal }) => getIpServiceServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpServiceServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getIpServiceServiceName>>>
export type GetIpServiceServiceNameQueryError = unknown


export function useGetIpServiceServiceName<TData = Awaited<ReturnType<typeof getIpServiceServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpServiceServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpServiceServiceName<TData = Awaited<ReturnType<typeof getIpServiceServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpServiceServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpServiceServiceName<TData = Awaited<ReturnType<typeof getIpServiceServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpServiceServiceName<TData = Awaited<ReturnType<typeof getIpServiceServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpServiceServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpServiceServiceName = (
    serviceName: string,
    ipServiceIpOVH: NonReadonly<IpServiceIpOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/service/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipServiceIpOVH
    },
      options);
    }
  


export const getPutIpServiceServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpServiceServiceName>>, TError,{serviceName: string;data: NonReadonly<IpServiceIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpServiceServiceName>>, TError,{serviceName: string;data: NonReadonly<IpServiceIpOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpServiceServiceName>>, {serviceName: string;data: NonReadonly<IpServiceIpOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putIpServiceServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpServiceServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putIpServiceServiceName>>>
    export type PutIpServiceServiceNameMutationBody = NonReadonly<IpServiceIpOVH>
    export type PutIpServiceServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpServiceServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpServiceServiceName>>, TError,{serviceName: string;data: NonReadonly<IpServiceIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpServiceServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<IpServiceIpOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpServiceServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postIpServiceServiceNameChangeContact = (
    serviceName: string,
    postIpServiceServiceNameChangeContactBody: PostIpServiceServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ip/service/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpServiceServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostIpServiceServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameChangeContact>>, TError,{serviceName: string;data: PostIpServiceServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameChangeContact>>, TError,{serviceName: string;data: PostIpServiceServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpServiceServiceNameChangeContact>>, {serviceName: string;data: PostIpServiceServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postIpServiceServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpServiceServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postIpServiceServiceNameChangeContact>>>
    export type PostIpServiceServiceNameChangeContactMutationBody = PostIpServiceServiceNameChangeContactBody
    export type PostIpServiceServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostIpServiceServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameChangeContact>>, TError,{serviceName: string;data: PostIpServiceServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpServiceServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostIpServiceServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostIpServiceServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postIpServiceServiceNameConfirmTermination = (
    serviceName: string,
    postIpServiceServiceNameConfirmTerminationBody: PostIpServiceServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/ip/service/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpServiceServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostIpServiceServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostIpServiceServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostIpServiceServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpServiceServiceNameConfirmTermination>>, {serviceName: string;data: PostIpServiceServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postIpServiceServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpServiceServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postIpServiceServiceNameConfirmTermination>>>
    export type PostIpServiceServiceNameConfirmTerminationMutationBody = PostIpServiceServiceNameConfirmTerminationBody
    export type PostIpServiceServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostIpServiceServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostIpServiceServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpServiceServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostIpServiceServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostIpServiceServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getIpServiceServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/ip/service/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpServiceServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/ip/service/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetIpServiceServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpServiceServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>> = ({ signal }) => getIpServiceServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpServiceServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>>
export type GetIpServiceServiceNameServiceInfosQueryError = unknown


export function useGetIpServiceServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpServiceServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpServiceServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetIpServiceServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpServiceServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpServiceServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putIpServiceServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/service/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutIpServiceServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpServiceServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpServiceServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpServiceServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putIpServiceServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpServiceServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putIpServiceServiceNameServiceInfos>>>
    export type PutIpServiceServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutIpServiceServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutIpServiceServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpServiceServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpServiceServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpServiceServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postIpServiceServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/ip/service/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostIpServiceServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpServiceServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postIpServiceServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpServiceServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postIpServiceServiceNameTerminate>>>
    
    export type PostIpServiceServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostIpServiceServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpServiceServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpServiceServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostIpServiceServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIp = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpWithIAMOVH>(
      {url: `/ip/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}`] as const;
    }

    
export const getGetIpIpQueryOptions = <TData = Awaited<ReturnType<typeof getIpIp>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIp>>> = ({ signal }) => getIpIp(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIp>>>
export type GetIpIpQueryError = unknown


export function useGetIpIp<TData = Awaited<ReturnType<typeof getIpIp>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIp<TData = Awaited<ReturnType<typeof getIpIp>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIp<TData = Awaited<ReturnType<typeof getIpIp>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIp<TData = Awaited<ReturnType<typeof getIpIp>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpIp = (
    ip: IpBlockOVH,
    ipIpOVH: NonReadonly<IpIpOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipIpOVH
    },
      options);
    }
  


export const getPutIpIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIp>>, TError,{ip: IpBlockOVH;data: NonReadonly<IpIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpIp>>, TError,{ip: IpBlockOVH;data: NonReadonly<IpIpOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpIp>>, {ip: IpBlockOVH;data: NonReadonly<IpIpOVH>}> = (props) => {
          const {ip,data} = props ?? {};

          return  putIpIp(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpIpMutationResult = NonNullable<Awaited<ReturnType<typeof putIpIp>>>
    export type PutIpIpMutationBody = NonReadonly<IpIpOVH>
    export type PutIpIpMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIp>>, TError,{ip: IpBlockOVH;data: NonReadonly<IpIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpIp>>,
        TError,
        {ip: IpBlockOVH;data: NonReadonly<IpIpOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Anti-Hack blocked IP
 */
export const getIpIpAntihack = (
    ip: IpBlockOVH,
    params?: GetIpIpAntihackParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/antihack`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpAntihackQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpAntihackParams,) => {
    return [`/ip/${ip}/antihack`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpAntihackQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpAntihack>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpAntihackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpAntihackQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpAntihack>>> = ({ signal }) => getIpIpAntihack(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpAntihackQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpAntihack>>>
export type GetIpIpAntihackQueryError = unknown


export function useGetIpIpAntihack<TData = Awaited<ReturnType<typeof getIpIpAntihack>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpAntihackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpAntihack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpAntihack<TData = Awaited<ReturnType<typeof getIpIpAntihack>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpAntihackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpAntihack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpAntihack<TData = Awaited<ReturnType<typeof getIpIpAntihack>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpAntihackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Anti-Hack blocked IP
 */

export function useGetIpIpAntihack<TData = Awaited<ReturnType<typeof getIpIpAntihack>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpAntihackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpAntihackQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpAntihackIpBlocked = (
    ip: IpBlockOVH,
    ipBlocked: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockedIpOVH>(
      {url: `/ip/${ip}/antihack/${ipBlocked}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpAntihackIpBlockedQueryKey = (ip: IpBlockOVH,
    ipBlocked: Ipv4OVH,) => {
    return [`/ip/${ip}/antihack/${ipBlocked}`] as const;
    }

    
export const getGetIpIpAntihackIpBlockedQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError = unknown>(ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpAntihackIpBlockedQueryKey(ip,ipBlocked);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>> = ({ signal }) => getIpIpAntihackIpBlocked(ip,ipBlocked, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipBlocked), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpAntihackIpBlockedQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>>
export type GetIpIpAntihackIpBlockedQueryError = unknown


export function useGetIpIpAntihackIpBlocked<TData = Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpAntihackIpBlocked<TData = Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpAntihackIpBlocked<TData = Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpAntihackIpBlocked<TData = Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpAntihackIpBlocked>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpAntihackIpBlockedQueryOptions(ip,ipBlocked,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Unblock this IP
 */
export const postIpIpAntihackIpBlockedUnblock = (
    ip: IpBlockOVH,
    ipBlocked: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/antihack/${ipBlocked}/unblock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostIpIpAntihackIpBlockedUnblockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpAntihackIpBlockedUnblock>>, TError,{ip: IpBlockOVH;ipBlocked: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpAntihackIpBlockedUnblock>>, TError,{ip: IpBlockOVH;ipBlocked: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpAntihackIpBlockedUnblock>>, {ip: IpBlockOVH;ipBlocked: Ipv4OVH}> = (props) => {
          const {ip,ipBlocked} = props ?? {};

          return  postIpIpAntihackIpBlockedUnblock(ip,ipBlocked,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpAntihackIpBlockedUnblockMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpAntihackIpBlockedUnblock>>>
    
    export type PostIpIpAntihackIpBlockedUnblockMutationError = unknown

    /**
 * @summary Unblock this IP
 */
export const usePostIpIpAntihackIpBlockedUnblock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpAntihackIpBlockedUnblock>>, TError,{ip: IpBlockOVH;ipBlocked: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpAntihackIpBlockedUnblock>>,
        TError,
        {ip: IpBlockOVH;ipBlocked: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getPostIpIpAntihackIpBlockedUnblockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ARP blocked IP
 */
export const getIpIpArp = (
    ip: IpBlockOVH,
    params?: GetIpIpArpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/arp`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpArpQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpArpParams,) => {
    return [`/ip/${ip}/arp`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpArpQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpArp>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpArpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpArpQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpArp>>> = ({ signal }) => getIpIpArp(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpArp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpArpQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpArp>>>
export type GetIpIpArpQueryError = unknown


export function useGetIpIpArp<TData = Awaited<ReturnType<typeof getIpIpArp>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpArpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpArp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpArp<TData = Awaited<ReturnType<typeof getIpIpArp>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpArpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpArp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpArp<TData = Awaited<ReturnType<typeof getIpIpArp>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpArpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ARP blocked IP
 */

export function useGetIpIpArp<TData = Awaited<ReturnType<typeof getIpIpArp>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpArpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpArpQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpArpIpBlocked = (
    ip: IpBlockOVH,
    ipBlocked: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpArpBlockedIpOVH>(
      {url: `/ip/${ip}/arp/${ipBlocked}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpArpIpBlockedQueryKey = (ip: IpBlockOVH,
    ipBlocked: Ipv4OVH,) => {
    return [`/ip/${ip}/arp/${ipBlocked}`] as const;
    }

    
export const getGetIpIpArpIpBlockedQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError = unknown>(ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpArpIpBlockedQueryKey(ip,ipBlocked);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>> = ({ signal }) => getIpIpArpIpBlocked(ip,ipBlocked, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipBlocked), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpArpIpBlockedQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>>
export type GetIpIpArpIpBlockedQueryError = unknown


export function useGetIpIpArpIpBlocked<TData = Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpArpIpBlocked>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpArpIpBlocked<TData = Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpArpIpBlocked>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpArpIpBlocked<TData = Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpArpIpBlocked<TData = Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError = unknown>(
 ip: IpBlockOVH,
    ipBlocked: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpArpIpBlocked>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpArpIpBlockedQueryOptions(ip,ipBlocked,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Unblock this IP
 */
export const postIpIpArpIpBlockedUnblock = (
    ip: IpBlockOVH,
    ipBlocked: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/arp/${ipBlocked}/unblock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostIpIpArpIpBlockedUnblockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpArpIpBlockedUnblock>>, TError,{ip: IpBlockOVH;ipBlocked: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpArpIpBlockedUnblock>>, TError,{ip: IpBlockOVH;ipBlocked: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpArpIpBlockedUnblock>>, {ip: IpBlockOVH;ipBlocked: Ipv4OVH}> = (props) => {
          const {ip,ipBlocked} = props ?? {};

          return  postIpIpArpIpBlockedUnblock(ip,ipBlocked,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpArpIpBlockedUnblockMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpArpIpBlockedUnblock>>>
    
    export type PostIpIpArpIpBlockedUnblockMutationError = unknown

    /**
 * @summary Unblock this IP
 */
export const usePostIpIpArpIpBlockedUnblock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpArpIpBlockedUnblock>>, TError,{ip: IpBlockOVH;ipBlocked: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpArpIpBlockedUnblock>>,
        TError,
        {ip: IpBlockOVH;ipBlocked: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getPostIpIpArpIpBlockedUnblockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get available aggregation configurations for this BYOIP Additional IP and it's neighbor(s)
 */
export const getIpIpBringYourOwnIpAggregate = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpByoipAggregationPreviewOVH[]>(
      {url: `/ip/${ip}/bringYourOwnIp/aggregate`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpBringYourOwnIpAggregateQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/bringYourOwnIp/aggregate`] as const;
    }

    
export const getGetIpIpBringYourOwnIpAggregateQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpBringYourOwnIpAggregateQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>> = ({ signal }) => getIpIpBringYourOwnIpAggregate(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpBringYourOwnIpAggregateQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>>
export type GetIpIpBringYourOwnIpAggregateQueryError = unknown


export function useGetIpIpBringYourOwnIpAggregate<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpBringYourOwnIpAggregate<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpBringYourOwnIpAggregate<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available aggregation configurations for this BYOIP Additional IP and it's neighbor(s)
 */

export function useGetIpIpBringYourOwnIpAggregate<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpAggregate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpBringYourOwnIpAggregateQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Aggregate a sliced BYOIP Additional IPs and it's neighbor(s) into a single bigger Additional IP parent
 */
export const postIpIpBringYourOwnIpAggregate = (
    ip: IpBlockOVH,
    postIpIpBringYourOwnIpAggregateBody: PostIpIpBringYourOwnIpAggregateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpTaskOVH>(
      {url: `/ip/${ip}/bringYourOwnIp/aggregate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpBringYourOwnIpAggregateBody, signal
    },
      options);
    }
  


export const getPostIpIpBringYourOwnIpAggregateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpBringYourOwnIpAggregate>>, TError,{ip: IpBlockOVH;data: PostIpIpBringYourOwnIpAggregateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpBringYourOwnIpAggregate>>, TError,{ip: IpBlockOVH;data: PostIpIpBringYourOwnIpAggregateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpBringYourOwnIpAggregate>>, {ip: IpBlockOVH;data: PostIpIpBringYourOwnIpAggregateBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpBringYourOwnIpAggregate(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpBringYourOwnIpAggregateMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpBringYourOwnIpAggregate>>>
    export type PostIpIpBringYourOwnIpAggregateMutationBody = PostIpIpBringYourOwnIpAggregateBody
    export type PostIpIpBringYourOwnIpAggregateMutationError = unknown

    /**
 * @summary Aggregate a sliced BYOIP Additional IPs and it's neighbor(s) into a single bigger Additional IP parent
 */
export const usePostIpIpBringYourOwnIpAggregate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpBringYourOwnIpAggregate>>, TError,{ip: IpBlockOVH;data: PostIpIpBringYourOwnIpAggregateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpBringYourOwnIpAggregate>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpBringYourOwnIpAggregateBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpBringYourOwnIpAggregateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get available slicing configurations for this BYOIP Additional IP
 */
export const getIpIpBringYourOwnIpSlice = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpByoipSlicingPreviewOVH[]>(
      {url: `/ip/${ip}/bringYourOwnIp/slice`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpBringYourOwnIpSliceQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/bringYourOwnIp/slice`] as const;
    }

    
export const getGetIpIpBringYourOwnIpSliceQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpBringYourOwnIpSliceQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>> = ({ signal }) => getIpIpBringYourOwnIpSlice(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpBringYourOwnIpSliceQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>>
export type GetIpIpBringYourOwnIpSliceQueryError = unknown


export function useGetIpIpBringYourOwnIpSlice<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpBringYourOwnIpSlice<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpBringYourOwnIpSlice<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available slicing configurations for this BYOIP Additional IP
 */

export function useGetIpIpBringYourOwnIpSlice<TData = Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpBringYourOwnIpSlice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpBringYourOwnIpSliceQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Slice a BYOIP Additional IP into smaller Additional IPs
 */
export const postIpIpBringYourOwnIpSlice = (
    ip: IpBlockOVH,
    postIpIpBringYourOwnIpSliceBody: PostIpIpBringYourOwnIpSliceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpTaskOVH>(
      {url: `/ip/${ip}/bringYourOwnIp/slice`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpBringYourOwnIpSliceBody, signal
    },
      options);
    }
  


export const getPostIpIpBringYourOwnIpSliceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpBringYourOwnIpSlice>>, TError,{ip: IpBlockOVH;data: PostIpIpBringYourOwnIpSliceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpBringYourOwnIpSlice>>, TError,{ip: IpBlockOVH;data: PostIpIpBringYourOwnIpSliceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpBringYourOwnIpSlice>>, {ip: IpBlockOVH;data: PostIpIpBringYourOwnIpSliceBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpBringYourOwnIpSlice(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpBringYourOwnIpSliceMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpBringYourOwnIpSlice>>>
    export type PostIpIpBringYourOwnIpSliceMutationBody = PostIpIpBringYourOwnIpSliceBody
    export type PostIpIpBringYourOwnIpSliceMutationError = unknown

    /**
 * @summary Slice a BYOIP Additional IP into smaller Additional IPs
 */
export const usePostIpIpBringYourOwnIpSlice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpBringYourOwnIpSlice>>, TError,{ip: IpBlockOVH;data: PostIpIpBringYourOwnIpSliceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpBringYourOwnIpSlice>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpBringYourOwnIpSliceBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpBringYourOwnIpSliceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change organisation of this IP
 */
export const postIpIpChangeOrg = (
    ip: IpBlockOVH,
    postIpIpChangeOrgBody: PostIpIpChangeOrgBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpTaskOVH>(
      {url: `/ip/${ip}/changeOrg`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpChangeOrgBody, signal
    },
      options);
    }
  


export const getPostIpIpChangeOrgMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpChangeOrg>>, TError,{ip: IpBlockOVH;data: PostIpIpChangeOrgBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpChangeOrg>>, TError,{ip: IpBlockOVH;data: PostIpIpChangeOrgBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpChangeOrg>>, {ip: IpBlockOVH;data: PostIpIpChangeOrgBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpChangeOrg(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpChangeOrgMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpChangeOrg>>>
    export type PostIpIpChangeOrgMutationBody = PostIpIpChangeOrgBody
    export type PostIpIpChangeOrgMutationError = unknown

    /**
 * @summary Change organisation of this IP
 */
export const usePostIpIpChangeOrg = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpChangeOrg>>, TError,{ip: IpBlockOVH;data: PostIpIpChangeOrgBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpChangeOrg>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpChangeOrgBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpChangeOrgMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reverse delegation on IPv6 subnet
 */
export const getIpIpDelegation = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/delegation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpDelegationQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/delegation`] as const;
    }

    
export const getGetIpIpDelegationQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpDelegation>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpDelegationQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpDelegation>>> = ({ signal }) => getIpIpDelegation(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpDelegationQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpDelegation>>>
export type GetIpIpDelegationQueryError = unknown


export function useGetIpIpDelegation<TData = Awaited<ReturnType<typeof getIpIpDelegation>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpDelegation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpDelegation<TData = Awaited<ReturnType<typeof getIpIpDelegation>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpDelegation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpDelegation<TData = Awaited<ReturnType<typeof getIpIpDelegation>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Reverse delegation on IPv6 subnet
 */

export function useGetIpIpDelegation<TData = Awaited<ReturnType<typeof getIpIpDelegation>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpDelegationQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add target for reverse delegation on IPv6 subnet
 */
export const postIpIpDelegation = (
    ip: IpBlockOVH,
    postIpIpDelegationBody: PostIpIpDelegationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpReverseDelegationOVH>(
      {url: `/ip/${ip}/delegation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpDelegationBody, signal
    },
      options);
    }
  


export const getPostIpIpDelegationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpDelegation>>, TError,{ip: IpBlockOVH;data: PostIpIpDelegationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpDelegation>>, TError,{ip: IpBlockOVH;data: PostIpIpDelegationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpDelegation>>, {ip: IpBlockOVH;data: PostIpIpDelegationBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpDelegation(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpDelegationMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpDelegation>>>
    export type PostIpIpDelegationMutationBody = PostIpIpDelegationBody
    export type PostIpIpDelegationMutationError = unknown

    /**
 * @summary Add target for reverse delegation on IPv6 subnet
 */
export const usePostIpIpDelegation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpDelegation>>, TError,{ip: IpBlockOVH;data: PostIpIpDelegationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpDelegation>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpDelegationBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpDelegationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a target for reverse delegation on IPv6 subnet
 */
export const deleteIpIpDelegationTarget = (
    ip: IpBlockOVH,
    target: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/delegation/${target}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpDelegationTargetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpDelegationTarget>>, TError,{ip: IpBlockOVH;target: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpDelegationTarget>>, TError,{ip: IpBlockOVH;target: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpDelegationTarget>>, {ip: IpBlockOVH;target: string}> = (props) => {
          const {ip,target} = props ?? {};

          return  deleteIpIpDelegationTarget(ip,target,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpDelegationTargetMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpDelegationTarget>>>
    
    export type DeleteIpIpDelegationTargetMutationError = unknown

    /**
 * @summary Delete a target for reverse delegation on IPv6 subnet
 */
export const useDeleteIpIpDelegationTarget = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpDelegationTarget>>, TError,{ip: IpBlockOVH;target: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpDelegationTarget>>,
        TError,
        {ip: IpBlockOVH;target: string},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpDelegationTargetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpDelegationTarget = (
    ip: IpBlockOVH,
    target: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpReverseDelegationOVH>(
      {url: `/ip/${ip}/delegation/${target}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpDelegationTargetQueryKey = (ip: IpBlockOVH,
    target: string,) => {
    return [`/ip/${ip}/delegation/${target}`] as const;
    }

    
export const getGetIpIpDelegationTargetQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError = unknown>(ip: IpBlockOVH,
    target: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpDelegationTargetQueryKey(ip,target);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpDelegationTarget>>> = ({ signal }) => getIpIpDelegationTarget(ip,target, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && target), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpDelegationTargetQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpDelegationTarget>>>
export type GetIpIpDelegationTargetQueryError = unknown


export function useGetIpIpDelegationTarget<TData = Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError = unknown>(
 ip: IpBlockOVH,
    target: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpDelegationTarget>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpDelegationTarget<TData = Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError = unknown>(
 ip: IpBlockOVH,
    target: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpDelegationTarget>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpDelegationTarget<TData = Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError = unknown>(
 ip: IpBlockOVH,
    target: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpDelegationTarget<TData = Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError = unknown>(
 ip: IpBlockOVH,
    target: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpDelegationTarget>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpDelegationTargetQueryOptions(ip,target,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ip under firewall
 */
export const getIpIpFirewall = (
    ip: IpBlockOVH,
    params?: GetIpIpFirewallParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/firewall`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpFirewallQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpFirewallParams,) => {
    return [`/ip/${ip}/firewall`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpFirewallQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpFirewall>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpFirewallQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpFirewall>>> = ({ signal }) => getIpIpFirewall(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpFirewallQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpFirewall>>>
export type GetIpIpFirewallQueryError = unknown


export function useGetIpIpFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpFirewallParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ip under firewall
 */

export function useGetIpIpFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpFirewallQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary AntiDDOS option. Add new IP on firewall
 */
export const postIpIpFirewall = (
    ip: IpBlockOVH,
    postIpIpFirewallBody: PostIpIpFirewallBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpFirewallIpOVH>(
      {url: `/ip/${ip}/firewall`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpFirewallBody, signal
    },
      options);
    }
  


export const getPostIpIpFirewallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpFirewall>>, TError,{ip: IpBlockOVH;data: PostIpIpFirewallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpFirewall>>, TError,{ip: IpBlockOVH;data: PostIpIpFirewallBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpFirewall>>, {ip: IpBlockOVH;data: PostIpIpFirewallBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpFirewall(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpFirewallMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpFirewall>>>
    export type PostIpIpFirewallMutationBody = PostIpIpFirewallBody
    export type PostIpIpFirewallMutationError = unknown

    /**
 * @summary AntiDDOS option. Add new IP on firewall
 */
export const usePostIpIpFirewall = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpFirewall>>, TError,{ip: IpBlockOVH;data: PostIpIpFirewallBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpFirewall>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpFirewallBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpFirewallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary AntiDDOS option. Delete IP and rules from firewall
 */
export const deleteIpIpFirewallIpOnFirewall = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpFirewallIpOnFirewallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewall>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewall>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewall>>, {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH}> = (props) => {
          const {ip,ipOnFirewall} = props ?? {};

          return  deleteIpIpFirewallIpOnFirewall(ip,ipOnFirewall,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpFirewallIpOnFirewallMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewall>>>
    
    export type DeleteIpIpFirewallIpOnFirewallMutationError = unknown

    /**
 * @summary AntiDDOS option. Delete IP and rules from firewall
 */
export const useDeleteIpIpFirewallIpOnFirewall = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewall>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewall>>,
        TError,
        {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpFirewallIpOnFirewallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpFirewallIpOnFirewall = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpFirewallIpOVH>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpFirewallIpOnFirewallQueryKey = (ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,) => {
    return [`/ip/${ip}/firewall/${ipOnFirewall}`] as const;
    }

    
export const getGetIpIpFirewallIpOnFirewallQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError = unknown>(ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpFirewallIpOnFirewallQueryKey(ip,ipOnFirewall);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>> = ({ signal }) => getIpIpFirewallIpOnFirewall(ip,ipOnFirewall, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnFirewall), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpFirewallIpOnFirewallQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>>
export type GetIpIpFirewallIpOnFirewallQueryError = unknown


export function useGetIpIpFirewallIpOnFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewallIpOnFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewallIpOnFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpFirewallIpOnFirewall<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpFirewallIpOnFirewallQueryOptions(ip,ipOnFirewall,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpIpFirewallIpOnFirewall = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    ipFirewallIpOVH: NonReadonly<IpFirewallIpOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipFirewallIpOVH
    },
      options);
    }
  


export const getPutIpIpFirewallIpOnFirewallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpFirewallIpOnFirewall>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: NonReadonly<IpFirewallIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpIpFirewallIpOnFirewall>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: NonReadonly<IpFirewallIpOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpIpFirewallIpOnFirewall>>, {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: NonReadonly<IpFirewallIpOVH>}> = (props) => {
          const {ip,ipOnFirewall,data} = props ?? {};

          return  putIpIpFirewallIpOnFirewall(ip,ipOnFirewall,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpIpFirewallIpOnFirewallMutationResult = NonNullable<Awaited<ReturnType<typeof putIpIpFirewallIpOnFirewall>>>
    export type PutIpIpFirewallIpOnFirewallMutationBody = NonReadonly<IpFirewallIpOVH>
    export type PutIpIpFirewallIpOnFirewallMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpIpFirewallIpOnFirewall = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpFirewallIpOnFirewall>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: NonReadonly<IpFirewallIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpIpFirewallIpOnFirewall>>,
        TError,
        {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: NonReadonly<IpFirewallIpOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpIpFirewallIpOnFirewallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Rules for this IP
 */
export const getIpIpFirewallIpOnFirewallRule = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params?: GetIpIpFirewallIpOnFirewallRuleParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}/rule`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpFirewallIpOnFirewallRuleQueryKey = (ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params?: GetIpIpFirewallIpOnFirewallRuleParams,) => {
    return [`/ip/${ip}/firewall/${ipOnFirewall}/rule`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpFirewallIpOnFirewallRuleQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError = unknown>(ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params?: GetIpIpFirewallIpOnFirewallRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpFirewallIpOnFirewallRuleQueryKey(ip,ipOnFirewall,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>> = ({ signal }) => getIpIpFirewallIpOnFirewallRule(ip,ipOnFirewall,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnFirewall), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpFirewallIpOnFirewallRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>>
export type GetIpIpFirewallIpOnFirewallRuleQueryError = unknown


export function useGetIpIpFirewallIpOnFirewallRule<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params: undefined |  GetIpIpFirewallIpOnFirewallRuleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewallIpOnFirewallRule<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params?: GetIpIpFirewallIpOnFirewallRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewallIpOnFirewallRule<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params?: GetIpIpFirewallIpOnFirewallRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Rules for this IP
 */

export function useGetIpIpFirewallIpOnFirewallRule<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    params?: GetIpIpFirewallIpOnFirewallRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpFirewallIpOnFirewallRuleQueryOptions(ip,ipOnFirewall,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary AntiDDOS option. Add new rule on your IP
 */
export const postIpIpFirewallIpOnFirewallRule = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    postIpIpFirewallIpOnFirewallRuleBody: PostIpIpFirewallIpOnFirewallRuleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpFirewallNetworkRuleOVH>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}/rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpFirewallIpOnFirewallRuleBody, signal
    },
      options);
    }
  


export const getPostIpIpFirewallIpOnFirewallRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpFirewallIpOnFirewallRule>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: PostIpIpFirewallIpOnFirewallRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpFirewallIpOnFirewallRule>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: PostIpIpFirewallIpOnFirewallRuleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpFirewallIpOnFirewallRule>>, {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: PostIpIpFirewallIpOnFirewallRuleBody}> = (props) => {
          const {ip,ipOnFirewall,data} = props ?? {};

          return  postIpIpFirewallIpOnFirewallRule(ip,ipOnFirewall,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpFirewallIpOnFirewallRuleMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpFirewallIpOnFirewallRule>>>
    export type PostIpIpFirewallIpOnFirewallRuleMutationBody = PostIpIpFirewallIpOnFirewallRuleBody
    export type PostIpIpFirewallIpOnFirewallRuleMutationError = unknown

    /**
 * @summary AntiDDOS option. Add new rule on your IP
 */
export const usePostIpIpFirewallIpOnFirewallRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpFirewallIpOnFirewallRule>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: PostIpIpFirewallIpOnFirewallRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpFirewallIpOnFirewallRule>>,
        TError,
        {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;data: PostIpIpFirewallIpOnFirewallRuleBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpFirewallIpOnFirewallRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary AntiDDOS option. Delete rule
 */
export const deleteIpIpFirewallIpOnFirewallRuleSequence = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<IpFirewallNetworkRuleOVH>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}/rule/${sequence}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpFirewallIpOnFirewallRuleSequenceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewallRuleSequence>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;sequence: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewallRuleSequence>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;sequence: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewallRuleSequence>>, {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;sequence: number}> = (props) => {
          const {ip,ipOnFirewall,sequence} = props ?? {};

          return  deleteIpIpFirewallIpOnFirewallRuleSequence(ip,ipOnFirewall,sequence,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpFirewallIpOnFirewallRuleSequenceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewallRuleSequence>>>
    
    export type DeleteIpIpFirewallIpOnFirewallRuleSequenceMutationError = unknown

    /**
 * @summary AntiDDOS option. Delete rule
 */
export const useDeleteIpIpFirewallIpOnFirewallRuleSequence = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewallRuleSequence>>, TError,{ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;sequence: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpFirewallIpOnFirewallRuleSequence>>,
        TError,
        {ip: IpBlockOVH;ipOnFirewall: Ipv4OVH;sequence: number},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpFirewallIpOnFirewallRuleSequenceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpFirewallIpOnFirewallRuleSequence = (
    ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpFirewallNetworkRuleOVH>(
      {url: `/ip/${ip}/firewall/${ipOnFirewall}/rule/${sequence}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpFirewallIpOnFirewallRuleSequenceQueryKey = (ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number,) => {
    return [`/ip/${ip}/firewall/${ipOnFirewall}/rule/${sequence}`] as const;
    }

    
export const getGetIpIpFirewallIpOnFirewallRuleSequenceQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError = unknown>(ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpFirewallIpOnFirewallRuleSequenceQueryKey(ip,ipOnFirewall,sequence);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>> = ({ signal }) => getIpIpFirewallIpOnFirewallRuleSequence(ip,ipOnFirewall,sequence, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnFirewall && sequence), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpFirewallIpOnFirewallRuleSequenceQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>>
export type GetIpIpFirewallIpOnFirewallRuleSequenceQueryError = unknown


export function useGetIpIpFirewallIpOnFirewallRuleSequence<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewallIpOnFirewallRuleSequence<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpFirewallIpOnFirewallRuleSequence<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpFirewallIpOnFirewallRuleSequence<TData = Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnFirewall: Ipv4OVH,
    sequence: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpFirewallIpOnFirewallRuleSequence>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpFirewallIpOnFirewallRuleSequenceQueryOptions(ip,ipOnFirewall,sequence,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ip under game anti-ddos
 */
export const getIpIpGame = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/game`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpGameQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/game`] as const;
    }

    
export const getGetIpIpGameQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpGame>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGame>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpGameQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpGame>>> = ({ signal }) => getIpIpGame(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpGame>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpGameQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpGame>>>
export type GetIpIpGameQueryError = unknown


export function useGetIpIpGame<TData = Awaited<ReturnType<typeof getIpIpGame>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGame>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGame>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGame<TData = Awaited<ReturnType<typeof getIpIpGame>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGame>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGame>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGame<TData = Awaited<ReturnType<typeof getIpIpGame>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGame>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ip under game anti-ddos
 */

export function useGetIpIpGame<TData = Awaited<ReturnType<typeof getIpIpGame>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGame>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpGameQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpGameIpOnGame = (
    ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpGameMitigationOVH>(
      {url: `/ip/${ip}/game/${ipOnGame}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpGameIpOnGameQueryKey = (ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,) => {
    return [`/ip/${ip}/game/${ipOnGame}`] as const;
    }

    
export const getGetIpIpGameIpOnGameQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError = unknown>(ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpGameIpOnGameQueryKey(ip,ipOnGame);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>> = ({ signal }) => getIpIpGameIpOnGame(ip,ipOnGame, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnGame), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpGameIpOnGameQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>>
export type GetIpIpGameIpOnGameQueryError = unknown


export function useGetIpIpGameIpOnGame<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGameIpOnGame>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGameIpOnGame<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGameIpOnGame>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGameIpOnGame<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpGameIpOnGame<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGame>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpGameIpOnGameQueryOptions(ip,ipOnGame,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpIpGameIpOnGame = (
    ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    ipGameMitigationOVH: NonReadonly<IpGameMitigationOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/game/${ipOnGame}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipGameMitigationOVH
    },
      options);
    }
  


export const getPutIpIpGameIpOnGameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpGameIpOnGame>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: NonReadonly<IpGameMitigationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpIpGameIpOnGame>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: NonReadonly<IpGameMitigationOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpIpGameIpOnGame>>, {ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: NonReadonly<IpGameMitigationOVH>}> = (props) => {
          const {ip,ipOnGame,data} = props ?? {};

          return  putIpIpGameIpOnGame(ip,ipOnGame,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpIpGameIpOnGameMutationResult = NonNullable<Awaited<ReturnType<typeof putIpIpGameIpOnGame>>>
    export type PutIpIpGameIpOnGameMutationBody = NonReadonly<IpGameMitigationOVH>
    export type PutIpIpGameIpOnGameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpIpGameIpOnGame = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpGameIpOnGame>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: NonReadonly<IpGameMitigationOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpIpGameIpOnGame>>,
        TError,
        {ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: NonReadonly<IpGameMitigationOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpIpGameIpOnGameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary IDs of rules configured for this IP
 */
export const getIpIpGameIpOnGameRule = (
    ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ip/${ip}/game/${ipOnGame}/rule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpGameIpOnGameRuleQueryKey = (ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,) => {
    return [`/ip/${ip}/game/${ipOnGame}/rule`] as const;
    }

    
export const getGetIpIpGameIpOnGameRuleQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError = unknown>(ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpGameIpOnGameRuleQueryKey(ip,ipOnGame);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>> = ({ signal }) => getIpIpGameIpOnGameRule(ip,ipOnGame, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnGame), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpGameIpOnGameRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>>
export type GetIpIpGameIpOnGameRuleQueryError = unknown


export function useGetIpIpGameIpOnGameRule<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGameIpOnGameRule<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGameIpOnGameRule<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary IDs of rules configured for this IP
 */

export function useGetIpIpGameIpOnGameRule<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpGameIpOnGameRuleQueryOptions(ip,ipOnGame,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add new rule on your IP
 */
export const postIpIpGameIpOnGameRule = (
    ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    postIpIpGameIpOnGameRuleBody: PostIpIpGameIpOnGameRuleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpGameMitigationRuleOVH>(
      {url: `/ip/${ip}/game/${ipOnGame}/rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpGameIpOnGameRuleBody, signal
    },
      options);
    }
  


export const getPostIpIpGameIpOnGameRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpGameIpOnGameRule>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: PostIpIpGameIpOnGameRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpGameIpOnGameRule>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: PostIpIpGameIpOnGameRuleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpGameIpOnGameRule>>, {ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: PostIpIpGameIpOnGameRuleBody}> = (props) => {
          const {ip,ipOnGame,data} = props ?? {};

          return  postIpIpGameIpOnGameRule(ip,ipOnGame,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpGameIpOnGameRuleMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpGameIpOnGameRule>>>
    export type PostIpIpGameIpOnGameRuleMutationBody = PostIpIpGameIpOnGameRuleBody
    export type PostIpIpGameIpOnGameRuleMutationError = unknown

    /**
 * @summary Add new rule on your IP
 */
export const usePostIpIpGameIpOnGameRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpGameIpOnGameRule>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: PostIpIpGameIpOnGameRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpGameIpOnGameRule>>,
        TError,
        {ip: IpBlockOVH;ipOnGame: Ipv4OVH;data: PostIpIpGameIpOnGameRuleBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpGameIpOnGameRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete rule
 */
export const deleteIpIpGameIpOnGameRuleId = (
    ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<IpGameMitigationRuleOVH>(
      {url: `/ip/${ip}/game/${ipOnGame}/rule/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpGameIpOnGameRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpGameIpOnGameRuleId>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpGameIpOnGameRuleId>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpGameIpOnGameRuleId>>, {ip: IpBlockOVH;ipOnGame: Ipv4OVH;id: number}> = (props) => {
          const {ip,ipOnGame,id} = props ?? {};

          return  deleteIpIpGameIpOnGameRuleId(ip,ipOnGame,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpGameIpOnGameRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpGameIpOnGameRuleId>>>
    
    export type DeleteIpIpGameIpOnGameRuleIdMutationError = unknown

    /**
 * @summary Delete rule
 */
export const useDeleteIpIpGameIpOnGameRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpGameIpOnGameRuleId>>, TError,{ip: IpBlockOVH;ipOnGame: Ipv4OVH;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpGameIpOnGameRuleId>>,
        TError,
        {ip: IpBlockOVH;ipOnGame: Ipv4OVH;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpGameIpOnGameRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpGameIpOnGameRuleId = (
    ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpGameMitigationRuleOVH>(
      {url: `/ip/${ip}/game/${ipOnGame}/rule/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpGameIpOnGameRuleIdQueryKey = (ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number,) => {
    return [`/ip/${ip}/game/${ipOnGame}/rule/${id}`] as const;
    }

    
export const getGetIpIpGameIpOnGameRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError = unknown>(ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpGameIpOnGameRuleIdQueryKey(ip,ipOnGame,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>> = ({ signal }) => getIpIpGameIpOnGameRuleId(ip,ipOnGame,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnGame && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpGameIpOnGameRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>>
export type GetIpIpGameIpOnGameRuleIdQueryError = unknown


export function useGetIpIpGameIpOnGameRuleId<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGameIpOnGameRuleId<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpGameIpOnGameRuleId<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpGameIpOnGameRuleId<TData = Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnGame: Ipv4OVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpGameIpOnGameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpGameIpOnGameRuleIdQueryOptions(ip,ipOnGame,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cloud Linux licenses associated to this IP
 */
export const getIpIpLicenseCloudLinux = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseCloudLinuxParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/cloudLinux`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseCloudLinuxQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseCloudLinuxParams,) => {
    return [`/ip/${ip}/license/cloudLinux`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseCloudLinuxQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseCloudLinuxQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>> = ({ signal }) => getIpIpLicenseCloudLinux(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseCloudLinuxQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>>
export type GetIpIpLicenseCloudLinuxQueryError = unknown


export function useGetIpIpLicenseCloudLinux<TData = Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseCloudLinuxParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseCloudLinux<TData = Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseCloudLinux<TData = Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Cloud Linux licenses associated to this IP
 */

export function useGetIpIpLicenseCloudLinux<TData = Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseCloudLinuxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCloudLinux>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseCloudLinuxQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cpanel licenses associated to this IP
 */
export const getIpIpLicenseCpanel = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseCpanelParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/cpanel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseCpanelQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseCpanelParams,) => {
    return [`/ip/${ip}/license/cpanel`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseCpanelQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseCpanelQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>> = ({ signal }) => getIpIpLicenseCpanel(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseCpanelQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>>
export type GetIpIpLicenseCpanelQueryError = unknown


export function useGetIpIpLicenseCpanel<TData = Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseCpanelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseCpanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseCpanel<TData = Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseCpanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseCpanel<TData = Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Cpanel licenses associated to this IP
 */

export function useGetIpIpLicenseCpanel<TData = Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseCpanelQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary DirectAdmin licenses associated to this IP
 */
export const getIpIpLicenseDirectadmin = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseDirectadminParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/directadmin`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseDirectadminQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseDirectadminParams,) => {
    return [`/ip/${ip}/license/directadmin`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseDirectadminQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseDirectadminQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>> = ({ signal }) => getIpIpLicenseDirectadmin(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseDirectadminQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>>
export type GetIpIpLicenseDirectadminQueryError = unknown


export function useGetIpIpLicenseDirectadmin<TData = Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseDirectadminParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseDirectadmin<TData = Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseDirectadmin<TData = Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary DirectAdmin licenses associated to this IP
 */

export function useGetIpIpLicenseDirectadmin<TData = Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseDirectadminParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseDirectadmin>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseDirectadminQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Plesk licenses associated to this IP
 */
export const getIpIpLicensePlesk = (
    ip: IpBlockOVH,
    params?: GetIpIpLicensePleskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/plesk`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicensePleskQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicensePleskParams,) => {
    return [`/ip/${ip}/license/plesk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicensePleskQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicensePlesk>>> = ({ signal }) => getIpIpLicensePlesk(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicensePlesk>>>
export type GetIpIpLicensePleskQueryError = unknown


export function useGetIpIpLicensePlesk<TData = Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicensePleskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicensePlesk<TData = Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicensePlesk<TData = Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Plesk licenses associated to this IP
 */

export function useGetIpIpLicensePlesk<TData = Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicensePleskQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary SQL Server licenses associated to this IP
 */
export const getIpIpLicenseSqlserver = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseSqlserverParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/sqlserver`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseSqlserverQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseSqlserverParams,) => {
    return [`/ip/${ip}/license/sqlserver`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseSqlserverQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseSqlserverQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>> = ({ signal }) => getIpIpLicenseSqlserver(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseSqlserverQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>>
export type GetIpIpLicenseSqlserverQueryError = unknown


export function useGetIpIpLicenseSqlserver<TData = Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseSqlserverParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseSqlserver<TData = Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseSqlserver<TData = Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary SQL Server licenses associated to this IP
 */

export function useGetIpIpLicenseSqlserver<TData = Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseSqlserverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseSqlserverQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Virtuozzo licenses associated to this IP
 */
export const getIpIpLicenseVirtuozzo = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseVirtuozzoParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/virtuozzo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseVirtuozzoQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseVirtuozzoParams,) => {
    return [`/ip/${ip}/license/virtuozzo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseVirtuozzoQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseVirtuozzoQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>> = ({ signal }) => getIpIpLicenseVirtuozzo(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseVirtuozzoQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>>
export type GetIpIpLicenseVirtuozzoQueryError = unknown


export function useGetIpIpLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseVirtuozzoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Virtuozzo licenses associated to this IP
 */

export function useGetIpIpLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseVirtuozzo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseVirtuozzoQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Windows licenses associated to this IP
 */
export const getIpIpLicenseWindows = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseWindowsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/windows`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseWindowsQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseWindowsParams,) => {
    return [`/ip/${ip}/license/windows`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseWindowsQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseWindows>>> = ({ signal }) => getIpIpLicenseWindows(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseWindows>>>
export type GetIpIpLicenseWindowsQueryError = unknown


export function useGetIpIpLicenseWindows<TData = Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseWindowsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseWindows<TData = Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseWindows<TData = Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Windows licenses associated to this IP
 */

export function useGetIpIpLicenseWindows<TData = Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseWindowsQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary WorkLight licenses associated to this IP
 */
export const getIpIpLicenseWorklight = (
    ip: IpBlockOVH,
    params?: GetIpIpLicenseWorklightParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ip/${ip}/license/worklight`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpLicenseWorklightQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpLicenseWorklightParams,) => {
    return [`/ip/${ip}/license/worklight`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpLicenseWorklightQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpLicenseWorklightQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>> = ({ signal }) => getIpIpLicenseWorklight(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpLicenseWorklightQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>>
export type GetIpIpLicenseWorklightQueryError = unknown


export function useGetIpIpLicenseWorklight<TData = Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpLicenseWorklightParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseWorklight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseWorklight<TData = Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpLicenseWorklight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpLicenseWorklight<TData = Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary WorkLight licenses associated to this IP
 */

export function useGetIpIpLicenseWorklight<TData = Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpLicenseWorklightParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpLicenseWorklight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpLicenseWorklightQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpMigrationToken = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpMigrationTokenOVH>(
      {url: `/ip/${ip}/migrationToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpMigrationTokenQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/migrationToken`] as const;
    }

    
export const getGetIpIpMigrationTokenQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpMigrationTokenQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpMigrationToken>>> = ({ signal }) => getIpIpMigrationToken(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpMigrationTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpMigrationToken>>>
export type GetIpIpMigrationTokenQueryError = unknown


export function useGetIpIpMigrationToken<TData = Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMigrationToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMigrationToken<TData = Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMigrationToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMigrationToken<TData = Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpMigrationToken<TData = Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMigrationToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpMigrationTokenQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a migration token
 */
export const postIpIpMigrationToken = (
    ip: IpBlockOVH,
    postIpIpMigrationTokenBody: PostIpIpMigrationTokenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpMigrationTokenOVH>(
      {url: `/ip/${ip}/migrationToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpMigrationTokenBody, signal
    },
      options);
    }
  


export const getPostIpIpMigrationTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMigrationToken>>, TError,{ip: IpBlockOVH;data: PostIpIpMigrationTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpMigrationToken>>, TError,{ip: IpBlockOVH;data: PostIpIpMigrationTokenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpMigrationToken>>, {ip: IpBlockOVH;data: PostIpIpMigrationTokenBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpMigrationToken(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpMigrationTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpMigrationToken>>>
    export type PostIpIpMigrationTokenMutationBody = PostIpIpMigrationTokenBody
    export type PostIpIpMigrationTokenMutationError = unknown

    /**
 * @summary Generate a migration token
 */
export const usePostIpIpMigrationToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMigrationToken>>, TError,{ip: IpBlockOVH;data: PostIpIpMigrationTokenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpMigrationToken>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpMigrationTokenBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpMigrationTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ip under mitigation
 */
export const getIpIpMitigation = (
    ip: IpBlockOVH,
    params?: GetIpIpMitigationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/mitigation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpMitigationQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpMitigationParams,) => {
    return [`/ip/${ip}/mitigation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpMitigationQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpMitigation>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpMitigationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpMitigationQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpMitigation>>> = ({ signal }) => getIpIpMitigation(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpMitigationQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpMitigation>>>
export type GetIpIpMitigationQueryError = unknown


export function useGetIpIpMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpMitigationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpMitigationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpMitigationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ip under mitigation
 */

export function useGetIpIpMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpMitigationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpMitigationQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary AntiDDOS option. Add new IP on permanent mitigation
 */
export const postIpIpMitigation = (
    ip: IpBlockOVH,
    postIpIpMitigationBody: PostIpIpMitigationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpMitigationIpOVH>(
      {url: `/ip/${ip}/mitigation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpMitigationBody, signal
    },
      options);
    }
  


export const getPostIpIpMitigationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMitigation>>, TError,{ip: IpBlockOVH;data: PostIpIpMitigationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpMitigation>>, TError,{ip: IpBlockOVH;data: PostIpIpMitigationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpMitigation>>, {ip: IpBlockOVH;data: PostIpIpMitigationBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpMitigation(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpMitigationMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpMitigation>>>
    export type PostIpIpMitigationMutationBody = PostIpIpMitigationBody
    export type PostIpIpMitigationMutationError = unknown

    /**
 * @summary AntiDDOS option. Add new IP on permanent mitigation
 */
export const usePostIpIpMitigation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMitigation>>, TError,{ip: IpBlockOVH;data: PostIpIpMitigationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpMitigation>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpMitigationBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpMitigationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary AntiDDOS option. Delete IP from mitigation
 */
export const deleteIpIpMitigationIpOnMitigation = (
    ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<IpMitigationIpOVH>(
      {url: `/ip/${ip}/mitigation/${ipOnMitigation}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpMitigationIpOnMitigationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpMitigationIpOnMitigation>>, TError,{ip: IpBlockOVH;ipOnMitigation: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpMitigationIpOnMitigation>>, TError,{ip: IpBlockOVH;ipOnMitigation: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpMitigationIpOnMitigation>>, {ip: IpBlockOVH;ipOnMitigation: Ipv4OVH}> = (props) => {
          const {ip,ipOnMitigation} = props ?? {};

          return  deleteIpIpMitigationIpOnMitigation(ip,ipOnMitigation,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpMitigationIpOnMitigationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpMitigationIpOnMitigation>>>
    
    export type DeleteIpIpMitigationIpOnMitigationMutationError = unknown

    /**
 * @summary AntiDDOS option. Delete IP from mitigation
 */
export const useDeleteIpIpMitigationIpOnMitigation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpMitigationIpOnMitigation>>, TError,{ip: IpBlockOVH;ipOnMitigation: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpMitigationIpOnMitigation>>,
        TError,
        {ip: IpBlockOVH;ipOnMitigation: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpMitigationIpOnMitigationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpMitigationIpOnMitigation = (
    ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpMitigationIpOVH>(
      {url: `/ip/${ip}/mitigation/${ipOnMitigation}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpMitigationIpOnMitigationQueryKey = (ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH,) => {
    return [`/ip/${ip}/mitigation/${ipOnMitigation}`] as const;
    }

    
export const getGetIpIpMitigationIpOnMitigationQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError = unknown>(ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpMitigationIpOnMitigationQueryKey(ip,ipOnMitigation);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>> = ({ signal }) => getIpIpMitigationIpOnMitigation(ip,ipOnMitigation, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipOnMitigation), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpMitigationIpOnMitigationQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>>
export type GetIpIpMitigationIpOnMitigationQueryError = unknown


export function useGetIpIpMitigationIpOnMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigationIpOnMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigationIpOnMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpMitigationIpOnMitigation<TData = Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError = unknown>(
 ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationIpOnMitigation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpMitigationIpOnMitigationQueryOptions(ip,ipOnMitigation,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpIpMitigationIpOnMitigation = (
    ip: IpBlockOVH,
    ipOnMitigation: Ipv4OVH,
    ipMitigationIpOVH: NonReadonly<IpMitigationIpOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/mitigation/${ipOnMitigation}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipMitigationIpOVH
    },
      options);
    }
  


export const getPutIpIpMitigationIpOnMitigationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpMitigationIpOnMitigation>>, TError,{ip: IpBlockOVH;ipOnMitigation: Ipv4OVH;data: NonReadonly<IpMitigationIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpIpMitigationIpOnMitigation>>, TError,{ip: IpBlockOVH;ipOnMitigation: Ipv4OVH;data: NonReadonly<IpMitigationIpOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpIpMitigationIpOnMitigation>>, {ip: IpBlockOVH;ipOnMitigation: Ipv4OVH;data: NonReadonly<IpMitigationIpOVH>}> = (props) => {
          const {ip,ipOnMitigation,data} = props ?? {};

          return  putIpIpMitigationIpOnMitigation(ip,ipOnMitigation,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpIpMitigationIpOnMitigationMutationResult = NonNullable<Awaited<ReturnType<typeof putIpIpMitigationIpOnMitigation>>>
    export type PutIpIpMitigationIpOnMitigationMutationBody = NonReadonly<IpMitigationIpOVH>
    export type PutIpIpMitigationIpOnMitigationMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpIpMitigationIpOnMitigation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpMitigationIpOnMitigation>>, TError,{ip: IpBlockOVH;ipOnMitigation: Ipv4OVH;data: NonReadonly<IpMitigationIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpIpMitigationIpOnMitigation>>,
        TError,
        {ip: IpBlockOVH;ipOnMitigation: Ipv4OVH;data: NonReadonly<IpMitigationIpOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpIpMitigationIpOnMitigationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Manage mitigation profile on your IPs
 */
export const getIpIpMitigationProfiles = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/mitigationProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpMitigationProfilesQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/mitigationProfiles`] as const;
    }

    
export const getGetIpIpMitigationProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpMitigationProfilesQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>> = ({ signal }) => getIpIpMitigationProfiles(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpMitigationProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>>
export type GetIpIpMitigationProfilesQueryError = unknown


export function useGetIpIpMitigationProfiles<TData = Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigationProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigationProfiles<TData = Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigationProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigationProfiles<TData = Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Manage mitigation profile on your IPs
 */

export function useGetIpIpMitigationProfiles<TData = Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpMitigationProfilesQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new profile for one of your ip
 */
export const postIpIpMitigationProfiles = (
    ip: IpBlockOVH,
    postIpIpMitigationProfilesBody: PostIpIpMitigationProfilesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpMitigationProfileOVH>(
      {url: `/ip/${ip}/mitigationProfiles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpMitigationProfilesBody, signal
    },
      options);
    }
  


export const getPostIpIpMitigationProfilesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMitigationProfiles>>, TError,{ip: IpBlockOVH;data: PostIpIpMitigationProfilesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpMitigationProfiles>>, TError,{ip: IpBlockOVH;data: PostIpIpMitigationProfilesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpMitigationProfiles>>, {ip: IpBlockOVH;data: PostIpIpMitigationProfilesBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpMitigationProfiles(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpMitigationProfilesMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpMitigationProfiles>>>
    export type PostIpIpMitigationProfilesMutationBody = PostIpIpMitigationProfilesBody
    export type PostIpIpMitigationProfilesMutationError = unknown

    /**
 * @summary Create new profile for one of your ip
 */
export const usePostIpIpMitigationProfiles = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMitigationProfiles>>, TError,{ip: IpBlockOVH;data: PostIpIpMitigationProfilesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpMitigationProfiles>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpMitigationProfilesBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpMitigationProfilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete mitigation profile
 */
export const deleteIpIpMitigationProfilesIpMitigationProfile = (
    ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/mitigationProfiles/${ipMitigationProfile}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpMitigationProfilesIpMitigationProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpMitigationProfilesIpMitigationProfile>>, TError,{ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpMitigationProfilesIpMitigationProfile>>, TError,{ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpMitigationProfilesIpMitigationProfile>>, {ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH}> = (props) => {
          const {ip,ipMitigationProfile} = props ?? {};

          return  deleteIpIpMitigationProfilesIpMitigationProfile(ip,ipMitigationProfile,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpMitigationProfilesIpMitigationProfileMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpMitigationProfilesIpMitigationProfile>>>
    
    export type DeleteIpIpMitigationProfilesIpMitigationProfileMutationError = unknown

    /**
 * @summary Delete mitigation profile
 */
export const useDeleteIpIpMitigationProfilesIpMitigationProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpMitigationProfilesIpMitigationProfile>>, TError,{ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpMitigationProfilesIpMitigationProfile>>,
        TError,
        {ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpMitigationProfilesIpMitigationProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpMitigationProfilesIpMitigationProfile = (
    ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpMitigationProfileOVH>(
      {url: `/ip/${ip}/mitigationProfiles/${ipMitigationProfile}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpMitigationProfilesIpMitigationProfileQueryKey = (ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH,) => {
    return [`/ip/${ip}/mitigationProfiles/${ipMitigationProfile}`] as const;
    }

    
export const getGetIpIpMitigationProfilesIpMitigationProfileQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError = unknown>(ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpMitigationProfilesIpMitigationProfileQueryKey(ip,ipMitigationProfile);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>> = ({ signal }) => getIpIpMitigationProfilesIpMitigationProfile(ip,ipMitigationProfile, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipMitigationProfile), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpMitigationProfilesIpMitigationProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>>
export type GetIpIpMitigationProfilesIpMitigationProfileQueryError = unknown


export function useGetIpIpMitigationProfilesIpMitigationProfile<TData = Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError = unknown>(
 ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigationProfilesIpMitigationProfile<TData = Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError = unknown>(
 ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMitigationProfilesIpMitigationProfile<TData = Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError = unknown>(
 ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpMitigationProfilesIpMitigationProfile<TData = Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError = unknown>(
 ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMitigationProfilesIpMitigationProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpMitigationProfilesIpMitigationProfileQueryOptions(ip,ipMitigationProfile,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpIpMitigationProfilesIpMitigationProfile = (
    ip: IpBlockOVH,
    ipMitigationProfile: Ipv4OVH,
    ipMitigationProfileOVH: NonReadonly<IpMitigationProfileOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/mitigationProfiles/${ipMitigationProfile}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipMitigationProfileOVH
    },
      options);
    }
  


export const getPutIpIpMitigationProfilesIpMitigationProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpMitigationProfilesIpMitigationProfile>>, TError,{ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH;data: NonReadonly<IpMitigationProfileOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpIpMitigationProfilesIpMitigationProfile>>, TError,{ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH;data: NonReadonly<IpMitigationProfileOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpIpMitigationProfilesIpMitigationProfile>>, {ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH;data: NonReadonly<IpMitigationProfileOVH>}> = (props) => {
          const {ip,ipMitigationProfile,data} = props ?? {};

          return  putIpIpMitigationProfilesIpMitigationProfile(ip,ipMitigationProfile,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpIpMitigationProfilesIpMitigationProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putIpIpMitigationProfilesIpMitigationProfile>>>
    export type PutIpIpMitigationProfilesIpMitigationProfileMutationBody = NonReadonly<IpMitigationProfileOVH>
    export type PutIpIpMitigationProfilesIpMitigationProfileMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpIpMitigationProfilesIpMitigationProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpMitigationProfilesIpMitigationProfile>>, TError,{ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH;data: NonReadonly<IpMitigationProfileOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpIpMitigationProfilesIpMitigationProfile>>,
        TError,
        {ip: IpBlockOVH;ipMitigationProfile: Ipv4OVH;data: NonReadonly<IpMitigationProfileOVH>},
        TContext
      > => {

      const mutationOptions = getPutIpIpMitigationProfilesIpMitigationProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List services available as a destination
 */
export const getIpIpMove = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpDestinationsOVH>(
      {url: `/ip/${ip}/move`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpMoveQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/move`] as const;
    }

    
export const getGetIpIpMoveQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpMove>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMove>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpMoveQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpMove>>> = ({ signal }) => getIpIpMove(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpMove>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpMoveQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpMove>>>
export type GetIpIpMoveQueryError = unknown


export function useGetIpIpMove<TData = Awaited<ReturnType<typeof getIpIpMove>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMove>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMove>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMove<TData = Awaited<ReturnType<typeof getIpIpMove>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMove>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpMove>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpMove<TData = Awaited<ReturnType<typeof getIpIpMove>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMove>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List services available as a destination
 */

export function useGetIpIpMove<TData = Awaited<ReturnType<typeof getIpIpMove>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpMove>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpMoveQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move this IP to another service
 */
export const postIpIpMove = (
    ip: IpBlockOVH,
    postIpIpMoveBody: PostIpIpMoveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpTaskOVH>(
      {url: `/ip/${ip}/move`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpMoveBody, signal
    },
      options);
    }
  


export const getPostIpIpMoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMove>>, TError,{ip: IpBlockOVH;data: PostIpIpMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpMove>>, TError,{ip: IpBlockOVH;data: PostIpIpMoveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpMove>>, {ip: IpBlockOVH;data: PostIpIpMoveBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpMove(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpMove>>>
    export type PostIpIpMoveMutationBody = PostIpIpMoveBody
    export type PostIpIpMoveMutationError = unknown

    /**
 * @summary Move this IP to another service
 */
export const usePostIpIpMove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpMove>>, TError,{ip: IpBlockOVH;data: PostIpIpMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpMove>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpMoveBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpMoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Park this IP
 */
export const postIpIpPark = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpTaskOVH>(
      {url: `/ip/${ip}/park`, method: 'POST', signal
    },
      options);
    }
  


export const getPostIpIpParkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpPark>>, TError,{ip: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpPark>>, TError,{ip: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpPark>>, {ip: IpBlockOVH}> = (props) => {
          const {ip} = props ?? {};

          return  postIpIpPark(ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpParkMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpPark>>>
    
    export type PostIpIpParkMutationError = unknown

    /**
 * @summary Park this IP
 */
export const usePostIpIpPark = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpPark>>, TError,{ip: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpPark>>,
        TError,
        {ip: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getPostIpIpParkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ip under anti-phishing
 */
export const getIpIpPhishing = (
    ip: IpBlockOVH,
    params?: GetIpIpPhishingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ip/${ip}/phishing`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpPhishingQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpPhishingParams,) => {
    return [`/ip/${ip}/phishing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpPhishingQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpPhishing>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpPhishingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpPhishingQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpPhishing>>> = ({ signal }) => getIpIpPhishing(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpPhishingQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpPhishing>>>
export type GetIpIpPhishingQueryError = unknown


export function useGetIpIpPhishing<TData = Awaited<ReturnType<typeof getIpIpPhishing>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpPhishingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpPhishing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpPhishing<TData = Awaited<ReturnType<typeof getIpIpPhishing>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpPhishingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpPhishing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpPhishing<TData = Awaited<ReturnType<typeof getIpIpPhishing>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpPhishingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ip under anti-phishing
 */

export function useGetIpIpPhishing<TData = Awaited<ReturnType<typeof getIpIpPhishing>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpPhishingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpPhishingQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpPhishingId = (
    ip: IpBlockOVH,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpAntiphishingOVH>(
      {url: `/ip/${ip}/phishing/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpPhishingIdQueryKey = (ip: IpBlockOVH,
    id: number,) => {
    return [`/ip/${ip}/phishing/${id}`] as const;
    }

    
export const getGetIpIpPhishingIdQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpPhishingId>>, TError = unknown>(ip: IpBlockOVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpPhishingIdQueryKey(ip,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpPhishingId>>> = ({ signal }) => getIpIpPhishingId(ip,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishingId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpPhishingIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpPhishingId>>>
export type GetIpIpPhishingIdQueryError = unknown


export function useGetIpIpPhishingId<TData = Awaited<ReturnType<typeof getIpIpPhishingId>>, TError = unknown>(
 ip: IpBlockOVH,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishingId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpPhishingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpPhishingId<TData = Awaited<ReturnType<typeof getIpIpPhishingId>>, TError = unknown>(
 ip: IpBlockOVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishingId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpPhishingId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpPhishingId<TData = Awaited<ReturnType<typeof getIpIpPhishingId>>, TError = unknown>(
 ip: IpBlockOVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpPhishingId<TData = Awaited<ReturnType<typeof getIpIpPhishingId>>, TError = unknown>(
 ip: IpBlockOVH,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpPhishingId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpPhishingIdQueryOptions(ip,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reverse on your ip
 */
export const getIpIpReverse = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/ip/${ip}/reverse`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpReverseQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/reverse`] as const;
    }

    
export const getGetIpIpReverseQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpReverse>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpReverseQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpReverse>>> = ({ signal }) => getIpIpReverse(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpReverseQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpReverse>>>
export type GetIpIpReverseQueryError = unknown


export function useGetIpIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverse>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpReverse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverse>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpReverse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverse>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Reverse on your ip
 */

export function useGetIpIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverse>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpReverseQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add reverse on an ip
 */
export const postIpIpReverse = (
    ip: IpBlockOVH,
    postIpIpReverseBody: PostIpIpReverseBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpReverseIpOVH>(
      {url: `/ip/${ip}/reverse`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postIpIpReverseBody, signal
    },
      options);
    }
  


export const getPostIpIpReverseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpReverse>>, TError,{ip: IpBlockOVH;data: PostIpIpReverseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpReverse>>, TError,{ip: IpBlockOVH;data: PostIpIpReverseBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpReverse>>, {ip: IpBlockOVH;data: PostIpIpReverseBody}> = (props) => {
          const {ip,data} = props ?? {};

          return  postIpIpReverse(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpReverseMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpReverse>>>
    export type PostIpIpReverseMutationBody = PostIpIpReverseBody
    export type PostIpIpReverseMutationError = unknown

    /**
 * @summary Add reverse on an ip
 */
export const usePostIpIpReverse = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpReverse>>, TError,{ip: IpBlockOVH;data: PostIpIpReverseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpReverse>>,
        TError,
        {ip: IpBlockOVH;data: PostIpIpReverseBody},
        TContext
      > => {

      const mutationOptions = getPostIpIpReverseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a reverse on one IP
 */
export const deleteIpIpReverseIpReverse = (
    ip: IpBlockOVH,
    ipReverse: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/reverse/${ipReverse}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIpIpReverseIpReverseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpReverseIpReverse>>, TError,{ip: IpBlockOVH;ipReverse: IpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpReverseIpReverse>>, TError,{ip: IpBlockOVH;ipReverse: IpOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIpIpReverseIpReverse>>, {ip: IpBlockOVH;ipReverse: IpOVH}> = (props) => {
          const {ip,ipReverse} = props ?? {};

          return  deleteIpIpReverseIpReverse(ip,ipReverse,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIpIpReverseIpReverseMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIpIpReverseIpReverse>>>
    
    export type DeleteIpIpReverseIpReverseMutationError = unknown

    /**
 * @summary Delete a reverse on one IP
 */
export const useDeleteIpIpReverseIpReverse = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIpIpReverseIpReverse>>, TError,{ip: IpBlockOVH;ipReverse: IpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIpIpReverseIpReverse>>,
        TError,
        {ip: IpBlockOVH;ipReverse: IpOVH},
        TContext
      > => {

      const mutationOptions = getDeleteIpIpReverseIpReverseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getIpIpReverseIpReverse = (
    ip: IpBlockOVH,
    ipReverse: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpReverseIpOVH>(
      {url: `/ip/${ip}/reverse/${ipReverse}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpReverseIpReverseQueryKey = (ip: IpBlockOVH,
    ipReverse: IpOVH,) => {
    return [`/ip/${ip}/reverse/${ipReverse}`] as const;
    }

    
export const getGetIpIpReverseIpReverseQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError = unknown>(ip: IpBlockOVH,
    ipReverse: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpReverseIpReverseQueryKey(ip,ipReverse);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>> = ({ signal }) => getIpIpReverseIpReverse(ip,ipReverse, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipReverse), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpReverseIpReverseQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>>
export type GetIpIpReverseIpReverseQueryError = unknown


export function useGetIpIpReverseIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError = unknown>(
 ip: IpBlockOVH,
    ipReverse: IpOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpReverseIpReverse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpReverseIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError = unknown>(
 ip: IpBlockOVH,
    ipReverse: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpReverseIpReverse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpReverseIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError = unknown>(
 ip: IpBlockOVH,
    ipReverse: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpReverseIpReverse<TData = Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError = unknown>(
 ip: IpBlockOVH,
    ipReverse: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpReverseIpReverse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpReverseIpReverseQueryOptions(ip,ipReverse,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpRipe = (
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpRipeInfosOVH>(
      {url: `/ip/${ip}/ripe`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpRipeQueryKey = (ip: IpBlockOVH,) => {
    return [`/ip/${ip}/ripe`] as const;
    }

    
export const getGetIpIpRipeQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpRipe>>, TError = unknown>(ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpRipe>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpRipeQueryKey(ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpRipe>>> = ({ signal }) => getIpIpRipe(ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpRipe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpRipeQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpRipe>>>
export type GetIpIpRipeQueryError = unknown


export function useGetIpIpRipe<TData = Awaited<ReturnType<typeof getIpIpRipe>>, TError = unknown>(
 ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpRipe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpRipe>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpRipe<TData = Awaited<ReturnType<typeof getIpIpRipe>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpRipe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpRipe>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpRipe<TData = Awaited<ReturnType<typeof getIpIpRipe>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpRipe>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpRipe<TData = Awaited<ReturnType<typeof getIpIpRipe>>, TError = unknown>(
 ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpRipe>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpRipeQueryOptions(ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putIpIpRipe = (
    ip: IpBlockOVH,
    ipRipeInfosOVH: IpRipeInfosOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ip/${ip}/ripe`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ipRipeInfosOVH
    },
      options);
    }
  


export const getPutIpIpRipeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpRipe>>, TError,{ip: IpBlockOVH;data: IpRipeInfosOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putIpIpRipe>>, TError,{ip: IpBlockOVH;data: IpRipeInfosOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIpIpRipe>>, {ip: IpBlockOVH;data: IpRipeInfosOVH}> = (props) => {
          const {ip,data} = props ?? {};

          return  putIpIpRipe(ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIpIpRipeMutationResult = NonNullable<Awaited<ReturnType<typeof putIpIpRipe>>>
    export type PutIpIpRipeMutationBody = IpRipeInfosOVH
    export type PutIpIpRipeMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutIpIpRipe = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIpIpRipe>>, TError,{ip: IpBlockOVH;data: IpRipeInfosOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIpIpRipe>>,
        TError,
        {ip: IpBlockOVH;data: IpRipeInfosOVH},
        TContext
      > => {

      const mutationOptions = getPutIpIpRipeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ip spamming
 */
export const getIpIpSpam = (
    ip: IpBlockOVH,
    params?: GetIpIpSpamParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv4OVH[]>(
      {url: `/ip/${ip}/spam`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpSpamQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpSpamParams,) => {
    return [`/ip/${ip}/spam`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpSpamQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpSpam>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpSpamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpSpamQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpSpam>>> = ({ signal }) => getIpIpSpam(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpam>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpSpamQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpSpam>>>
export type GetIpIpSpamQueryError = unknown


export function useGetIpIpSpam<TData = Awaited<ReturnType<typeof getIpIpSpam>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpSpamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpam>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpSpam>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpSpam<TData = Awaited<ReturnType<typeof getIpIpSpam>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpSpamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpam>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpSpam>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpSpam<TData = Awaited<ReturnType<typeof getIpIpSpam>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpSpamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ip spamming
 */

export function useGetIpIpSpam<TData = Awaited<ReturnType<typeof getIpIpSpam>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpSpamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpSpamQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpSpamIpSpamming = (
    ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpSpamIpOVH>(
      {url: `/ip/${ip}/spam/${ipSpamming}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpSpamIpSpammingQueryKey = (ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,) => {
    return [`/ip/${ip}/spam/${ipSpamming}`] as const;
    }

    
export const getGetIpIpSpamIpSpammingQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError = unknown>(ip: IpBlockOVH,
    ipSpamming: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpSpamIpSpammingQueryKey(ip,ipSpamming);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>> = ({ signal }) => getIpIpSpamIpSpamming(ip,ipSpamming, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipSpamming), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpSpamIpSpammingQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>>
export type GetIpIpSpamIpSpammingQueryError = unknown


export function useGetIpIpSpamIpSpamming<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpSpamIpSpamming<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpSpamIpSpamming<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpSpamIpSpamming<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpamming>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpSpamIpSpammingQueryOptions(ip,ipSpamming,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get statistics about the email traffic
 */
export const getIpIpSpamIpSpammingStats = (
    ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpSpamStatsOVH[]>(
      {url: `/ip/${ip}/spam/${ipSpamming}/stats`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpSpamIpSpammingStatsQueryKey = (ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams,) => {
    return [`/ip/${ip}/spam/${ipSpamming}/stats`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpSpamIpSpammingStatsQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError = unknown>(ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpSpamIpSpammingStatsQueryKey(ip,ipSpamming,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>> = ({ signal }) => getIpIpSpamIpSpammingStats(ip,ipSpamming,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && ipSpamming), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpSpamIpSpammingStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>>
export type GetIpIpSpamIpSpammingStatsQueryError = unknown


export function useGetIpIpSpamIpSpammingStats<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpSpamIpSpammingStats<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpSpamIpSpammingStats<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get statistics about the email traffic
 */

export function useGetIpIpSpamIpSpammingStats<TData = Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError = unknown>(
 ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
    params: GetIpIpSpamIpSpammingStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpSpamIpSpammingStats>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpSpamIpSpammingStatsQueryOptions(ip,ipSpamming,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Release the ip from anti-spam system
 */
export const postIpIpSpamIpSpammingUnblock = (
    ip: IpBlockOVH,
    ipSpamming: Ipv4OVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpSpamIpOVH>(
      {url: `/ip/${ip}/spam/${ipSpamming}/unblock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostIpIpSpamIpSpammingUnblockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpSpamIpSpammingUnblock>>, TError,{ip: IpBlockOVH;ipSpamming: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postIpIpSpamIpSpammingUnblock>>, TError,{ip: IpBlockOVH;ipSpamming: Ipv4OVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIpIpSpamIpSpammingUnblock>>, {ip: IpBlockOVH;ipSpamming: Ipv4OVH}> = (props) => {
          const {ip,ipSpamming} = props ?? {};

          return  postIpIpSpamIpSpammingUnblock(ip,ipSpamming,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIpIpSpamIpSpammingUnblockMutationResult = NonNullable<Awaited<ReturnType<typeof postIpIpSpamIpSpammingUnblock>>>
    
    export type PostIpIpSpamIpSpammingUnblockMutationError = unknown

    /**
 * @summary Release the ip from anti-spam system
 */
export const usePostIpIpSpamIpSpammingUnblock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIpIpSpamIpSpammingUnblock>>, TError,{ip: IpBlockOVH;ipSpamming: Ipv4OVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIpIpSpamIpSpammingUnblock>>,
        TError,
        {ip: IpBlockOVH;ipSpamming: Ipv4OVH},
        TContext
      > => {

      const mutationOptions = getPostIpIpSpamIpSpammingUnblockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary IP tasks
 */
export const getIpIpTask = (
    ip: IpBlockOVH,
    params?: GetIpIpTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ip/${ip}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIpIpTaskQueryKey = (ip: IpBlockOVH,
    params?: GetIpIpTaskParams,) => {
    return [`/ip/${ip}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIpIpTaskQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpTask>>, TError = unknown>(ip: IpBlockOVH,
    params?: GetIpIpTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpTaskQueryKey(ip,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpTask>>> = ({ signal }) => getIpIpTask(ip,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpTask>>>
export type GetIpIpTaskQueryError = unknown


export function useGetIpIpTask<TData = Awaited<ReturnType<typeof getIpIpTask>>, TError = unknown>(
 ip: IpBlockOVH,
    params: undefined |  GetIpIpTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpTask<TData = Awaited<ReturnType<typeof getIpIpTask>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpTask<TData = Awaited<ReturnType<typeof getIpIpTask>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary IP tasks
 */

export function useGetIpIpTask<TData = Awaited<ReturnType<typeof getIpIpTask>>, TError = unknown>(
 ip: IpBlockOVH,
    params?: GetIpIpTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpTaskQueryOptions(ip,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getIpIpTaskTaskId = (
    ip: IpBlockOVH,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpIpTaskOVH>(
      {url: `/ip/${ip}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIpIpTaskTaskIdQueryKey = (ip: IpBlockOVH,
    taskId: number,) => {
    return [`/ip/${ip}/task/${taskId}`] as const;
    }

    
export const getGetIpIpTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError = unknown>(ip: IpBlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIpIpTaskTaskIdQueryKey(ip,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIpIpTaskTaskId>>> = ({ signal }) => getIpIpTaskTaskId(ip,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ip && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIpIpTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIpIpTaskTaskId>>>
export type GetIpIpTaskTaskIdQueryError = unknown


export function useGetIpIpTaskTaskId<TData = Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError = unknown>(
 ip: IpBlockOVH,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpTaskTaskId<TData = Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError = unknown>(
 ip: IpBlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIpIpTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIpIpTaskTaskId<TData = Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError = unknown>(
 ip: IpBlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetIpIpTaskTaskId<TData = Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError = unknown>(
 ip: IpBlockOVH,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIpIpTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIpIpTaskTaskIdQueryOptions(ip,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





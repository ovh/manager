/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetIpIpTaskParams = {
/**
 * Filter the value of function property (=)
 */
function?: IpTaskFunctionEnumOVH;
/**
 * Filter the value of status property (=)
 */
status?: IpTaskStatusEnumOVH;
};

export type GetIpIpSpamIpSpammingStatsParams = {
/**
 * Start date
 */
from: string;
/**
 * End date
 */
to: string;
};

export type GetIpIpSpamParams = {
/**
 * Filter the value of state property (=)
 */
state?: IpSpamStateEnumOVH;
};

export type PostIpIpReverseBody = {
  ipReverse: IpOVH;
  reverse: string;
};

export type GetIpIpPhishingParams = {
/**
 * Filter the value of ipOnAntiphishing property (within or equals)
 */
ipOnAntiphishing?: Ipv4OVH;
/**
 * Filter the value of state property (=)
 */
state?: IpAntiphishingStateEnumOVH;
};

export type PostIpIpMoveBody = {
  /** Nexthop of destination service */
  nexthop?: string;
  /** Service destination */
  to: string;
};

export type PostIpIpMitigationProfilesBody = {
  /** Delay to wait before remove ip from auto mitigation after an attack */
  autoMitigationTimeOut: IpMitigationProfileAutoMitigationTimeOutEnumOVH;
  ipMitigationProfile: Ipv4OVH;
};

export type PostIpIpMitigationBody = {
  ipOnMitigation: Ipv4OVH;
};

export type GetIpIpMitigationParams = {
/**
 * Filter the value of auto property (=)
 */
auto?: boolean;
/**
 * Filter the value of state property (=)
 */
state?: IpMitigationStateEnumOVH;
};

export type PostIpIpMigrationTokenBody = {
  /** destination customer ID */
  customerId: string;
};

export type GetIpIpLicenseWorklightParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicenseWindowsParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicenseVirtuozzoParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicenseSqlserverParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicensePleskParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicenseDirectadminParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicenseCpanelParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type GetIpIpLicenseCloudLinuxParams = {
/**
 * Filter the value of ipAddress property (=)
 */
ipAddress?: Ipv4OVH;
};

export type PostIpIpGameIpOnGameRuleBody = {
  /** The UDP port range to apply the rule on */
  ports: ComplexTypeRangeLongOVH;
  /** The protocol running behind the given port(s). See supportedProtocols on the IP to know which values are valid here */
  protocol: IpGameMitigationRuleProtocolEnumOVH;
};

export type PostIpIpFirewallIpOnFirewallRuleBody = {
  /** Action on this rule */
  action: IpFirewallActionEnumOVH;
  /** Destination port for your rule. Only with TCP/UDP protocol */
  destinationPort?: number;
  /** Network protocol */
  protocol: IpFirewallProtocolEnumOVH;
  /** Sequence number of your rule */
  sequence: IpFirewallSequenceRangeEnumOVH;
  /** Source ip for your rule. Any if not set */
  source?: Ipv4BlockOVH;
  /** Source port for your rule. Only with TCP/UDP protocol */
  sourcePort?: number;
  /** Option on your rule. Can only be used with TCP protocol */
  tcpOption?: IpFirewallOptionTCPOVH;
};

export type GetIpIpFirewallIpOnFirewallRuleParams = {
/**
 * Filter the value of state property (=)
 */
state?: IpFirewallRuleStateEnumOVH;
};

export type PostIpIpFirewallBody = {
  ipOnFirewall: Ipv4OVH;
};

export type GetIpIpFirewallParams = {
/**
 * Filter the value of enabled property (=)
 */
enabled?: boolean;
/**
 * Filter the value of state property (=)
 */
state?: IpFirewallStateEnumOVH;
};

export type PostIpIpDelegationBody = {
  /** Target for reverse delegation on IPv6 */
  target: string;
};

export type PostIpIpChangeOrgBody = {
  /** Your organisation id (RIPE_XXXX) to add on block informations */
  organisation: string;
};

export type PostIpIpBringYourOwnIpSliceBody = {
  /** Size (ip mask) of the IPs to create inside given IP */
  slicingSize: number;
};

export type PostIpIpBringYourOwnIpAggregateBody = {
  /** IP range to create by aggregation of all it's children */
  aggregationIp: IpBlockOVH;
};

export type GetIpIpArpParams = {
/**
 * Filter the value of state property (=)
 */
state?: IpArpStateEnumOVH;
};

export type GetIpIpAntihackParams = {
/**
 * Filter the value of state property (=)
 */
state?: IpBlockedIpStateEnumOVH;
};

export type PostIpServiceServiceNameConfirmTerminationBody = {
  /** Commentary about your termination request */
  commentary?: string;
  /** What next after your termination request */
  futureUse?: ServiceTerminationFutureUseEnumOVH;
  /** Reason of your termination request */
  reason?: ServiceTerminationReasonEnumOVH;
  /** The termination token sent by email to the admin contact */
  token: string;
};

export type PostIpServiceServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetIpServiceParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

export type GetIpParams = {
/**
 * Filter the value of campus property (ilike) (alpha)
 */
campus?: string;
/**
 * Filter the value of description property (like)
 */
description?: string;
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
/**
 * Filter the value of ip property (contains or equals)
 */
ip?: IpBlockOVH;
/**
 * Filter the value of isAdditionalIp property (=) (alpha)
 */
isAdditionalIp?: boolean;
/**
 * Filter the value of routedTo.serviceName property (like)
 */
'routedTo.serviceName'?: string;
/**
 * Filter the value of type property (=)
 */
type?: IpIpTypeEnumOVH;
/**
 * Filter the value of version property (=) (alpha)
 */
version?: IpIpVersionEnumOVH;
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * All reasons you can provide for a service termination
 */
export type ServiceTerminationReasonEnumOVH = typeof ServiceTerminationReasonEnumOVH[keyof typeof ServiceTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationReasonEnumOVH = {
  FEATURES_DONT_SUIT_ME: 'FEATURES_DONT_SUIT_ME',
  LACK_OF_PERFORMANCES: 'LACK_OF_PERFORMANCES',
  MIGRATED_TO_ANOTHER_OVH_PRODUCT: 'MIGRATED_TO_ANOTHER_OVH_PRODUCT',
  MIGRATED_TO_COMPETITOR: 'MIGRATED_TO_COMPETITOR',
  NOT_ENOUGH_RECOGNITION: 'NOT_ENOUGH_RECOGNITION',
  NOT_NEEDED_ANYMORE: 'NOT_NEEDED_ANYMORE',
  NOT_RELIABLE: 'NOT_RELIABLE',
  NO_ANSWER: 'NO_ANSWER',
  OTHER: 'OTHER',
  PRODUCT_DIMENSION_DONT_SUIT_ME: 'PRODUCT_DIMENSION_DONT_SUIT_ME',
  PRODUCT_TOOLS_DONT_SUIT_ME: 'PRODUCT_TOOLS_DONT_SUIT_ME',
  TOO_EXPENSIVE: 'TOO_EXPENSIVE',
  TOO_HARD_TO_USE: 'TOO_HARD_TO_USE',
  UNSATIFIED_BY_CUSTOMER_SUPPORT: 'UNSATIFIED_BY_CUSTOMER_SUPPORT',
} as const;

/**
 * All future uses you can provide for a service termination
 */
export type ServiceTerminationFutureUseEnumOVH = typeof ServiceTerminationFutureUseEnumOVH[keyof typeof ServiceTerminationFutureUseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationFutureUseEnumOVH = {
  NOT_REPLACING_SERVICE: 'NOT_REPLACING_SERVICE',
  OTHER: 'OTHER',
  SUBSCRIBE_AN_OTHER_SERVICE: 'SUBSCRIBE_AN_OTHER_SERVICE',
  SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR',
  SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR',
} as const;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * different task status
 */
export type IpTaskStatusEnumOVH = typeof IpTaskStatusEnumOVH[keyof typeof IpTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  customerError: 'customerError',
  doing: 'doing',
  done: 'done',
  init: 'init',
  ovhError: 'ovhError',
  todo: 'todo',
} as const;

/**
 * different task operation
 */
export type IpTaskFunctionEnumOVH = typeof IpTaskFunctionEnumOVH[keyof typeof IpTaskFunctionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpTaskFunctionEnumOVH = {
  arinBlockReassign: 'arinBlockReassign',
  changeRipeOrg: 'changeRipeOrg',
  checkAndReleaseIp: 'checkAndReleaseIp',
  genericMoveFloatingIp: 'genericMoveFloatingIp',
  supernetByoipFailoverPartitioning: 'supernetByoipFailoverPartitioning',
} as const;

/**
 * Spam's target information
 */
export interface IpSpamTargetOVH {
  /** Timestamp when the email was sent */
  date?: number;
  /** IP address of the target */
  destinationIp?: Ipv4OVH;
  /** The message-id of the email */
  messageId?: string;
  /** Spam score for the email */
  spamscore?: number;
}

/**
 * Spam statistics about an IP address
 */
export interface IpSpamStatsOVH {
  /**
   * Average spam score.
   * @nullable
   */
  averageSpamscore?: number | null;
  /**
   * Detailed list of the spams
   * @nullable
   */
  detectedSpams?: IpSpamTargetOVH[] | null;
  /** Number of spams sent */
  numberOfSpams?: number;
  /** Time when the IP address was blocked */
  timestamp?: number;
  /** Number of emails sent */
  total?: number;
}

/**
 * Possible values for spam state
 */
export type IpSpamStateEnumOVH = typeof IpSpamStateEnumOVH[keyof typeof IpSpamStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpSpamStateEnumOVH = {
  blockedForSpam: 'blockedForSpam',
  unblocked: 'unblocked',
  unblocking: 'unblocking',
} as const;

/**
 * Your IP spam stats
 */
export interface IpSpamIpOVH {
  /** Last date the ip was blocked */
  readonly date?: string;
  /** IP address which is sending spam */
  readonly ipSpamming?: Ipv4OVH;
  /** Current state of the ip */
  readonly state?: IpSpamStateEnumOVH;
  /** Time (in seconds) while the IP will be blocked */
  readonly time?: number;
}

/**
 * Routage information
 * @nullable
 */
export type IpServiceIpWithIAMOVHRoutedTo = IpRoutedToOVH | null;

/**
 * IAM resource metadata
 * @nullable
 */
export type IpServiceIpWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * @nullable
 */
export type IpServiceIpWithIAMOVHCountry = CoreTypesCountryEnumOVH | null;

/**
 * Your IP linked to service
 */
export interface IpServiceIpWithIAMOVH {
  readonly canBeTerminated?: boolean;
  /** @nullable */
  readonly country?: IpServiceIpWithIAMOVHCountry;
  /**
   * Custom description on your ip
   * @nullable
   */
  description?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: IpServiceIpWithIAMOVHIam;
  readonly ip?: IpBlockOVH;
  /**
   * IP block organisation Id
   * @nullable
   */
  readonly organisationId?: string | null;
  /**
   * Routage information
   * @nullable
   */
  readonly routedTo?: IpServiceIpWithIAMOVHRoutedTo;
  readonly type?: IpIpTypeEnumOVH;
}

/**
 * Routage information
 * @nullable
 */
export type IpServiceIpOVHRoutedTo = IpRoutedToOVH | null;

/**
 * @nullable
 */
export type IpServiceIpOVHCountry = CoreTypesCountryEnumOVH | null;

/**
 * Your IP linked to service
 */
export interface IpServiceIpOVH {
  readonly canBeTerminated?: boolean;
  /** @nullable */
  readonly country?: IpServiceIpOVHCountry;
  /**
   * Custom description on your ip
   * @nullable
   */
  description?: string | null;
  readonly ip?: IpBlockOVH;
  /**
   * IP block organisation Id
   * @nullable
   */
  readonly organisationId?: string | null;
  /**
   * Routage information
   * @nullable
   */
  readonly routedTo?: IpServiceIpOVHRoutedTo;
  readonly type?: IpIpTypeEnumOVH;
}

/**
 * Information about routing
 */
export interface IpRoutedToOVH {
  /**
   * Service where ip is routed to
   * @nullable
   */
  serviceName?: string | null;
}

/**
 * IP block RIPE informations
 */
export interface IpRipeInfosOVH {
  /** @nullable */
  description?: string | null;
  /** @nullable */
  netname?: string | null;
}

/**
 * Your reverse records on IP
 */
export interface IpReverseIpOVH {
  readonly ipReverse?: IpOVH;
  readonly reverse?: string;
}

/**
 * Your reverse delegations on IPv6 subnet
 */
export interface IpReverseDelegationOVH {
  /** NS target for delegation */
  readonly target?: string;
}

/**
 * Possible values for mitigation state
 */
export type IpMitigationStateEnumOVH = typeof IpMitigationStateEnumOVH[keyof typeof IpMitigationStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpMitigationStateEnumOVH = {
  creationPending: 'creationPending',
  ok: 'ok',
  removalPending: 'removalPending',
} as const;

/**
 * Possible values for mitigation profile state
 */
export type IpMitigationProfileStateEnumOVH = typeof IpMitigationProfileStateEnumOVH[keyof typeof IpMitigationProfileStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpMitigationProfileStateEnumOVH = {
  ok: 'ok',
  tasksPending: 'tasksPending',
} as const;

/**
 * Possible values for auto mitigation timeout (minutes)
 */
export type IpMitigationProfileAutoMitigationTimeOutEnumOVH = typeof IpMitigationProfileAutoMitigationTimeOutEnumOVH[keyof typeof IpMitigationProfileAutoMitigationTimeOutEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpMitigationProfileAutoMitigationTimeOutEnumOVH = {
  NUMBER_0: 0,
  NUMBER_15: 15,
  NUMBER_60: 60,
  NUMBER_360: 360,
  NUMBER_1560: 1560,
} as const;

/**
 * Mitigation profile for your ip
 */
export interface IpMitigationProfileOVH {
  /** Delay to wait before remove ip from auto mitigation after an attack */
  autoMitigationTimeOut?: IpMitigationProfileAutoMitigationTimeOutEnumOVH;
  readonly ipMitigationProfile?: Ipv4OVH;
  /** Current state of your mitigation profile */
  readonly state?: IpMitigationProfileStateEnumOVH;
}

/**
 * Your IP on mitigation
 */
export interface IpMitigationIpOVH {
  /** Set on true if your ip is on auto-mitigation */
  readonly auto?: boolean;
  readonly ipOnMitigation?: Ipv4OVH;
  /** Set on true if your ip is on permanent mitigation */
  permanent?: boolean;
  /** Current state of your ip on mitigation */
  readonly state?: IpMitigationStateEnumOVH;
}

/**
 * Routage information
 * @nullable
 */
export type IpIpWithIAMOVHRoutedTo = IpRoutedToOVH | null;

/**
 * IAM resource metadata
 * @nullable
 */
export type IpIpWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * @nullable
 */
export type IpIpWithIAMOVHCountry = CoreTypesCountryEnumOVH | null;

/**
 * Possible values for IP version
 */
export type IpIpVersionEnumOVH = typeof IpIpVersionEnumOVH[keyof typeof IpIpVersionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpIpVersionEnumOVH = {
  NUMBER_4: 4,
  NUMBER_6: 6,
} as const;

/**
 * Possible values for ip type
 */
export type IpIpTypeEnumOVH = typeof IpIpTypeEnumOVH[keyof typeof IpIpTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpIpTypeEnumOVH = {
  cdn: 'cdn',
  cloud: 'cloud',
  dedicated: 'dedicated',
  failover: 'failover',
  hosted_ssl: 'hosted_ssl',
  housing: 'housing',
  loadBalancing: 'loadBalancing',
  mail: 'mail',
  overthebox: 'overthebox',
  pcc: 'pcc',
  pci: 'pci',
  private: 'private',
  vpn: 'vpn',
  vps: 'vps',
  vrack: 'vrack',
  xdsl: 'xdsl',
} as const;

/**
 * Your IP
 */
export interface IpIpWithIAMOVH {
  /** Is this IP part of the Bring your own IP program (alpha) */
  readonly bringYourOwnIp?: boolean;
  /**
   * Where is the IP used/usable (alpha)
   * @nullable
   */
  readonly campus?: string | null;
  readonly canBeTerminated?: boolean;
  /** @nullable */
  readonly country?: IpIpWithIAMOVHCountry;
  /**
   * Custom description on your ip
   * @nullable
   */
  description?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: IpIpWithIAMOVHIam;
  readonly ip?: IpBlockOVH;
  /** Is this IP an Additional IP (alpha) */
  readonly isAdditionalIp?: boolean;
  /**
   * IP block organisation Id
   * @nullable
   */
  readonly organisationId?: string | null;
  /**
   * Where is the IP used/usable, in the form of region codenames (alpha)
   * @nullable
   */
  readonly regions?: readonly CoreTypesRegionCodenameEnumOVH[] | null;
  /**
   * Regional Internet Registry of the IP (alpha)
   * @nullable
   */
  readonly rir?: string | null;
  /**
   * Routage information
   * @nullable
   */
  readonly routedTo?: IpIpWithIAMOVHRoutedTo;
  readonly type?: IpIpTypeEnumOVH;
  /** Version of the IP (alpha) */
  readonly version?: IpIpVersionEnumOVH;
}

/**
 * Destination for moveFloatingIp tasks
 * @nullable
 */
export type IpIpTaskOVHDestination = IpRoutedToOVH | null;

/**
 * IP tasks
 */
export interface IpIpTaskOVH {
  /**
   * Details of this task
   * @nullable
   */
  readonly comment?: string | null;
  /**
   * Destination for moveFloatingIp tasks
   * @nullable
   */
  readonly destination?: IpIpTaskOVHDestination;
  /**
   * Completion date
   * @nullable
   */
  readonly doneDate?: string | null;
  /** Function name */
  readonly function?: IpTaskFunctionEnumOVH;
  /**
   * last update
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** Task Creation date */
  readonly startDate?: string;
  /** Task status */
  readonly status?: IpTaskStatusEnumOVH;
  /** the id of the task */
  readonly taskId?: number;
}

/**
 * IP migration to OVH
 */
export interface IpIpMigrationTokenOVH {
  /** destination customer ID */
  readonly customerId?: string;
  /** migration token */
  readonly token?: string;
}

/**
 * Routage information
 * @nullable
 */
export type IpIpOVHRoutedTo = IpRoutedToOVH | null;

/**
 * @nullable
 */
export type IpIpOVHCountry = CoreTypesCountryEnumOVH | null;

/**
 * Your IP
 */
export interface IpIpOVH {
  /** Is this IP part of the Bring your own IP program (alpha) */
  readonly bringYourOwnIp?: boolean;
  /**
   * Where is the IP used/usable (alpha)
   * @nullable
   */
  readonly campus?: string | null;
  readonly canBeTerminated?: boolean;
  /** @nullable */
  readonly country?: IpIpOVHCountry;
  /**
   * Custom description on your ip
   * @nullable
   */
  description?: string | null;
  readonly ip?: IpBlockOVH;
  /** Is this IP an Additional IP (alpha) */
  readonly isAdditionalIp?: boolean;
  /**
   * IP block organisation Id
   * @nullable
   */
  readonly organisationId?: string | null;
  /**
   * Where is the IP used/usable, in the form of region codenames (alpha)
   * @nullable
   */
  readonly regions?: readonly CoreTypesRegionCodenameEnumOVH[] | null;
  /**
   * Regional Internet Registry of the IP (alpha)
   * @nullable
   */
  readonly rir?: string | null;
  /**
   * Routage information
   * @nullable
   */
  readonly routedTo?: IpIpOVHRoutedTo;
  readonly type?: IpIpTypeEnumOVH;
  /** Version of the IP (alpha) */
  readonly version?: IpIpVersionEnumOVH;
}

/**
 * Possible values for udp mitigation rule state
 */
export type IpGameMitigationStateEnumOVH = typeof IpGameMitigationStateEnumOVH[keyof typeof IpGameMitigationStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpGameMitigationStateEnumOVH = {
  cleanRulesPending: 'cleanRulesPending',
  firewallModeDisablePending: 'firewallModeDisablePending',
  firewallModeEnablePending: 'firewallModeEnablePending',
  ok: 'ok',
} as const;

/**
 * Possible values for game mitigation rule state
 */
export type IpGameMitigationRuleStateEnumOVH = typeof IpGameMitigationRuleStateEnumOVH[keyof typeof IpGameMitigationRuleStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpGameMitigationRuleStateEnumOVH = {
  createRulePending: 'createRulePending',
  deleteRulePending: 'deleteRulePending',
  ok: 'ok',
} as const;

/**
 * Possible values for game rule protocol
 */
export type IpGameMitigationRuleProtocolEnumOVH = typeof IpGameMitigationRuleProtocolEnumOVH[keyof typeof IpGameMitigationRuleProtocolEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpGameMitigationRuleProtocolEnumOVH = {
  arkSurvivalEvolved: 'arkSurvivalEvolved',
  'arkSurvivalEvolvedV31178+': 'arkSurvivalEvolvedV311.78+',
  arma: 'arma',
  counterStrike2: 'counterStrike2',
  fiveM: 'fiveM',
  gtaMultiTheftAutoSanAndreas: 'gtaMultiTheftAutoSanAndreas',
  gtaSanAndreasMultiplayerMod: 'gtaSanAndreasMultiplayerMod',
  hl2Source: 'hl2Source',
  minecraftBedrockWithRacknetCookie: 'minecraftBedrockWithRacknetCookie',
  minecraftJava: 'minecraftJava',
  minecraftPocketEdition: 'minecraftPocketEdition',
  minecraftQuery: 'minecraftQuery',
  mumble: 'mumble',
  other: 'other',
  rust: 'rust',
  teamspeak2: 'teamspeak2',
  teamspeak3: 'teamspeak3',
  trackmaniaShootmania: 'trackmaniaShootmania',
  valheim: 'valheim',
} as const;

/**
 * Rule on ip:ports
 */
export interface IpGameMitigationRuleOVH {
  /** ID of the rule */
  readonly id?: number;
  readonly ports?: ComplexTypeRangeLongOVH;
  readonly protocol?: IpGameMitigationRuleProtocolEnumOVH;
  /** Current state of your rule */
  readonly state?: IpGameMitigationRuleStateEnumOVH;
}

/**
 * GAME Anti-DDoS
 */
export interface IpGameMitigationOVH {
  /** Firewall mode : in UDP, only allow traffic matching your rules (as well as established traffic). If not enabled, traffic to ports not defined in your rules will be permited. TCP traffic is unaffected by this. */
  firewallModeEnabled?: boolean;
  readonly ipOnGame?: Ipv4OVH;
  /** Maximum number of rules for this IP */
  readonly maxRules?: number;
  readonly state?: IpGameMitigationStateEnumOVH;
  /** List of protocols available on this IP */
  readonly supportedProtocols?: readonly IpGameMitigationRuleProtocolEnumOVH[];
}

/**
 * Possible values for TCP option - only for TCP protocol
 */
export type IpFirewallTCPOptionEnumOVH = typeof IpFirewallTCPOptionEnumOVH[keyof typeof IpFirewallTCPOptionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpFirewallTCPOptionEnumOVH = {
  established: 'established',
  syn: 'syn',
} as const;

/**
 * Possible values for firewall ip state
 */
export type IpFirewallStateEnumOVH = typeof IpFirewallStateEnumOVH[keyof typeof IpFirewallStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpFirewallStateEnumOVH = {
  disableFirewallPending: 'disableFirewallPending',
  enableFirewallPending: 'enableFirewallPending',
  ok: 'ok',
} as const;

/**
 * Possible values for action
 */
export type IpFirewallSequenceRangeEnumOVH = typeof IpFirewallSequenceRangeEnumOVH[keyof typeof IpFirewallSequenceRangeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpFirewallSequenceRangeEnumOVH = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
  NUMBER_12: 12,
  NUMBER_13: 13,
  NUMBER_14: 14,
  NUMBER_15: 15,
  NUMBER_16: 16,
  NUMBER_17: 17,
  NUMBER_18: 18,
  NUMBER_19: 19,
} as const;

/**
 * Possible values for firewall rule state
 */
export type IpFirewallRuleStateEnumOVH = typeof IpFirewallRuleStateEnumOVH[keyof typeof IpFirewallRuleStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpFirewallRuleStateEnumOVH = {
  creationPending: 'creationPending',
  ok: 'ok',
  removalPending: 'removalPending',
} as const;

/**
 * Possible values for protocol
 */
export type IpFirewallProtocolEnumOVH = typeof IpFirewallProtocolEnumOVH[keyof typeof IpFirewallProtocolEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpFirewallProtocolEnumOVH = {
  ah: 'ah',
  esp: 'esp',
  gre: 'gre',
  icmp: 'icmp',
  ipv4: 'ipv4',
  tcp: 'tcp',
  udp: 'udp',
} as const;

/**
 * TCP option
 * @nullable
 */
export type IpFirewallOptionTCPOVHOption = IpFirewallTCPOptionEnumOVH | null;

/**
 * Possible option for TCP
 */
export interface IpFirewallOptionTCPOVH {
  /**
   * TCP fragments
   * @nullable
   */
  fragments?: boolean | null;
  /**
   * TCP option
   * @nullable
   */
  option?: IpFirewallOptionTCPOVHOption;
}

/**
 * Your IP on firewall
 */
export interface IpFirewallIpOVH {
  enabled?: boolean;
  readonly ipOnFirewall?: Ipv4OVH;
  /** Current state of your ip on firewall */
  readonly state?: IpFirewallStateEnumOVH;
}

/**
 * Possible values for action
 */
export type IpFirewallActionEnumOVH = typeof IpFirewallActionEnumOVH[keyof typeof IpFirewallActionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpFirewallActionEnumOVH = {
  deny: 'deny',
  permit: 'permit',
} as const;

/**
 * Rule on ip
 */
export interface IpFirewallNetworkRuleOVH {
  /** Action on this rule */
  readonly action?: IpFirewallActionEnumOVH;
  readonly creationDate?: string;
  /** Destination ip for your rule */
  readonly destination?: string;
  /**
   * Destination port range for your rule. Only with TCP/UDP protocol
   * @nullable
   */
  readonly destinationPort?: string | null;
  /**
   * Fragments option
   * @nullable
   */
  readonly fragments?: boolean | null;
  /** Network protocol */
  readonly protocol?: IpFirewallProtocolEnumOVH;
  readonly rule?: string;
  readonly sequence?: number;
  /** Source ip for your rule */
  readonly source?: string;
  /**
   * Source port range for your rule. Only with TCP/UDP protocol
   * @nullable
   */
  readonly sourcePort?: string | null;
  /** Current state of your rule */
  readonly state?: IpFirewallRuleStateEnumOVH;
  /**
   * TCP option on your rule
   * @nullable
   */
  readonly tcpOption?: string | null;
}

/**
 * A structure given service and its nexthops as a destination for failover ips
 */
export interface IpDestinationOVH {
  /**
   * Nexthops available on this service
   * @nullable
   */
  nexthop?: string[] | null;
  /** Service destination */
  service?: string;
}

/**
 * A structure given all services allowed as a destination for this ip
 */
export interface IpDestinationsOVH {
  /**
   * list of public cloud projects
   * @nullable
   */
  cloudProject?: IpDestinationOVH[] | null;
  /**
   * list of dedicated clouds
   * @nullable
   */
  dedicatedCloud?: IpDestinationOVH[] | null;
  /**
   * list of dedicated servers
   * @nullable
   */
  dedicatedServer?: IpDestinationOVH[] | null;
  /**
   * list of hosting reseller services
   * @nullable
   */
  hostingReseller?: IpDestinationOVH[] | null;
  /**
   * list of load balancing services
   * @nullable
   */
  ipLoadbalancing?: IpDestinationOVH[] | null;
  /**
   * list of vps
   * @nullable
   */
  vps?: IpDestinationOVH[] | null;
}

/**
 * Possible values for IP campuses' names
 */
export type IpCampusEnumOVH = typeof IpCampusEnumOVH[keyof typeof IpCampusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpCampusEnumOVH = {
  BHS: 'BHS',
  ERI: 'ERI',
  GRA: 'GRA',
  HIL: 'HIL',
  LIM: 'LIM',
  RBX: 'RBX',
  SBG: 'SBG',
  SGP: 'SGP',
  SYD: 'SYD',
  VIN: 'VIN',
  WAW: 'WAW',
  YNM: 'YNM',
  YYZ: 'YYZ',
} as const;

/**
 * Campus of an IP address
 */
export interface IpCampusOVH {
  /** List of RIRs whose IPs can be imported in the campus */
  bringYourOwnIpSupportedRirForIp?: string[];
  /** List of datacenters in the campus */
  datacenters?: DedicatedDatacenterEnumOVH[];
  /** Description of the campus */
  description?: string;
  /** Campus name */
  name?: IpCampusEnumOVH;
}

/**
 * Preview of an IP slicing on BYOIP Additional IPs
 */
export interface IpByoipSlicingPreviewOVH {
  /** Additional IP(s) that will be created */
  childrenIps?: IpBlockOVH[];
  /** Slicing size */
  slicingSize?: number;
}

/**
 * Preview of an IP aggregation on BYOIP Additional IPs
 */
export interface IpByoipAggregationPreviewOVH {
  /** Aggregation Additional IP that will be created */
  aggregationIp?: IpBlockOVH;
  /** Existing Additional IP(s) that will be aggregated */
  childrenIps?: IpBlockOVH[];
}

/**
 * Possible values for IP state
 */
export type IpBlockedIpStateEnumOVH = typeof IpBlockedIpStateEnumOVH[keyof typeof IpBlockedIpStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpBlockedIpStateEnumOVH = {
  blocked: 'blocked',
  unblocking: 'unblocking',
} as const;

/**
 * Blocked IP information
 */
export interface IpBlockedIpOVH {
  /** The last blocking date */
  readonly blockedSince?: string;
  /** your IP */
  readonly ipBlocked?: Ipv4OVH;
  /**
   * Logs
   * @nullable
   */
  readonly logs?: string | null;
  /** this IP address state */
  readonly state?: IpBlockedIpStateEnumOVH;
  /** Time (in seconds) remaining before you can request your IP to be unblocked */
  readonly time?: number;
}

/**
 * Possible values for IP state
 */
export type IpArpStateEnumOVH = typeof IpArpStateEnumOVH[keyof typeof IpArpStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpArpStateEnumOVH = {
  blocked: 'blocked',
  unblocking: 'unblocking',
} as const;

/**
 * ARP blocked IP information
 */
export interface IpArpBlockedIpOVH {
  /** The last blocking date */
  readonly blockedSince?: string;
  /** your IP */
  readonly ipBlocked?: Ipv4OVH;
  /**
   * ARP logs
   * @nullable
   */
  readonly logs?: string | null;
  /** this IP address state */
  readonly state?: IpArpStateEnumOVH;
  /** Time (in seconds) remaining before you can request your IP to be unblocked */
  readonly time?: number;
}

/**
 * Possible values for antiphishing state
 */
export type IpAntiphishingStateEnumOVH = typeof IpAntiphishingStateEnumOVH[keyof typeof IpAntiphishingStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IpAntiphishingStateEnumOVH = {
  blocked: 'blocked',
  blocking: 'blocking',
  unblocked: 'unblocked',
  unblocking: 'unblocking',
} as const;

/**
 * Phishing URLs hosted on your IP
 */
export interface IpAntiphishingOVH {
  /** Date of the event */
  readonly creationDate?: string;
  /** Internal ID of the phishing entry */
  readonly id?: number;
  /** IP address hosting the phishing URL */
  readonly ipOnAntiphishing?: Ipv4OVH;
  /** Current state of the phishing */
  readonly state?: IpAntiphishingStateEnumOVH;
  /** Phishing URL */
  readonly urlPhishing?: string;
}

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * ovh datacenter
 */
export type DedicatedDatacenterEnumOVH = typeof DedicatedDatacenterEnumOVH[keyof typeof DedicatedDatacenterEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedicatedDatacenterEnumOVH = {
  bhs1: 'bhs1',
  bhs2: 'bhs2',
  bhs3: 'bhs3',
  bhs4: 'bhs4',
  bhs5: 'bhs5',
  bhs6: 'bhs6',
  bhs7: 'bhs7',
  bhs8: 'bhs8',
  cch01: 'cch01',
  crx1: 'crx1',
  crx2: 'crx2',
  dc1: 'dc1',
  eri1: 'eri1',
  eri2: 'eri2',
  gra04: 'gra04',
  gra1: 'gra1',
  gra2: 'gra2',
  gra3: 'gra3',
  gsw: 'gsw',
  hdf01: 'hdf01',
  hil1: 'hil1',
  ieb01: 'ieb01',
  'lil1-int1': 'lil1-int1',
  lim1: 'lim1',
  lim2: 'lim2',
  lim3: 'lim3',
  mr901: 'mr901',
  p19: 'p19',
  rbx: 'rbx',
  'rbx-hz': 'rbx-hz',
  rbx1: 'rbx1',
  rbx10: 'rbx10',
  rbx2: 'rbx2',
  rbx3: 'rbx3',
  rbx4: 'rbx4',
  rbx5: 'rbx5',
  rbx6: 'rbx6',
  rbx7: 'rbx7',
  rbx8: 'rbx8',
  rbx9: 'rbx9',
  sbg1: 'sbg1',
  sbg2: 'sbg2',
  sbg3: 'sbg3',
  sbg4: 'sbg4',
  sbg5: 'sbg5',
  sgp02: 'sgp02',
  sgp1: 'sgp1',
  syd03: 'syd03',
  syd1: 'syd1',
  syd2: 'syd2',
  vin1: 'vin1',
  waw1: 'waw1',
  ynm1: 'ynm1',
  yyz01: 'yyz01',
} as const;

/**
 * Region names
 */
export type CoreTypesRegionCodenameEnumOVH = typeof CoreTypesRegionCodenameEnumOVH[keyof typeof CoreTypesRegionCodenameEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesRegionCodenameEnumOVH = {
  'af-north-lz-rba': 'af-north-lz-rba',
  'ap-south-mum': 'ap-south-mum',
  'ap-southeast-sgp': 'ap-southeast-sgp',
  'ap-southeast-syd': 'ap-southeast-syd',
  'ca-east-bhs': 'ca-east-bhs',
  'ca-east-tor': 'ca-east-tor',
  'eu-central-waw': 'eu-central-waw',
  'eu-east-lz-prg': 'eu-east-lz-prg',
  'eu-north-lz-osl': 'eu-north-lz-osl',
  'eu-north-lz-sto': 'eu-north-lz-sto',
  'eu-south-lz-mad': 'eu-south-lz-mad',
  'eu-south-lz-mil': 'eu-south-lz-mil',
  'eu-south-mil': 'eu-south-mil',
  'eu-west-eri': 'eu-west-eri',
  'eu-west-gra': 'eu-west-gra',
  'eu-west-lim': 'eu-west-lim',
  'eu-west-lz-ams': 'eu-west-lz-ams',
  'eu-west-lz-bru': 'eu-west-lz-bru',
  'eu-west-lz-dln': 'eu-west-lz-dln',
  'eu-west-lz-lux': 'eu-west-lz-lux',
  'eu-west-lz-mrs': 'eu-west-lz-mrs',
  'eu-west-lz-vie': 'eu-west-lz-vie',
  'eu-west-lz-zrh': 'eu-west-lz-zrh',
  'eu-west-par': 'eu-west-par',
  'eu-west-rbx': 'eu-west-rbx',
  'eu-west-sbg': 'eu-west-sbg',
  'us-east-lz-atl': 'us-east-lz-atl',
  'us-east-lz-bos': 'us-east-lz-bos',
  'us-east-lz-chi': 'us-east-lz-chi',
  'us-east-lz-dal': 'us-east-lz-dal',
  'us-east-lz-mia': 'us-east-lz-mia',
  'us-east-lz-nyc': 'us-east-lz-nyc',
  'us-east-vin': 'us-east-vin',
  'us-west-hil': 'us-west-hil',
  'us-west-lz-den': 'us-west-lz-den',
  'us-west-lz-lax': 'us-west-lz-lax',
  'us-west-lz-pao': 'us-west-lz-pao',
  'us-west-lz-sea': 'us-west-lz-sea',
} as const;

/**
 * ISO country codes
 */
export type CoreTypesCountryEnumOVH = typeof CoreTypesCountryEnumOVH[keyof typeof CoreTypesCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;

/**
 * Start and end points (inclusive) of a range
 */
export interface ComplexTypeRangeLongOVH {
  from?: number;
  to?: number;
}


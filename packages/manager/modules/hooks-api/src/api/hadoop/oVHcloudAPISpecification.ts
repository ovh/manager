/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ClusterHadoopClusterConsumptionOVH,
  ClusterHadoopHadoopWithIAMOVH,
  ClusterHadoopNetworkAclOVH,
  ClusterHadoopNodeBillingProfileOVH,
  ClusterHadoopNodeConsumptionOVH,
  ClusterHadoopNodeOVH,
  ClusterHadoopOrderInformationsOVH,
  ClusterHadoopRoleOVH,
  ClusterHadoopRoleTypeEnumOVH,
  ClusterHadoopTaskOVH,
  ClusterHadoopUserOVH,
  GetClusterHadoopParams,
  GetClusterHadoopServiceNameNodeParams,
  GetClusterHadoopServiceNameTaskParams,
  IpBlockOVH,
  PostClusterHadoopServiceNameNetworkAclBody,
  PostClusterHadoopServiceNameNodeHostnameRoleBody,
  PostClusterHadoopServiceNameOrderNewNodeHourlyBody,
  PostClusterHadoopServiceNameServiceRestartBody,
  PostClusterHadoopServiceNameServiceStartBody,
  PostClusterHadoopServiceNameServiceStopBody,
  PostClusterHadoopServiceNameUserBody,
  PostClusterHadoopServiceNameUserUsernameResetPasswordBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getClusterHadoop = (
    params?: GetClusterHadoopParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cluster/hadoop`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetClusterHadoopQueryKey = (params?: GetClusterHadoopParams,) => {
    return [`/cluster/hadoop`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClusterHadoopQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoop>>, TError = unknown>(params?: GetClusterHadoopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoop>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoop>>> = ({ signal }) => getClusterHadoop(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoop>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoop>>>
export type GetClusterHadoopQueryError = unknown


export function useGetClusterHadoop<TData = Awaited<ReturnType<typeof getClusterHadoop>>, TError = unknown>(
 params: undefined |  GetClusterHadoopParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoop>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoop>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoop<TData = Awaited<ReturnType<typeof getClusterHadoop>>, TError = unknown>(
 params?: GetClusterHadoopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoop>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoop>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoop<TData = Awaited<ReturnType<typeof getClusterHadoop>>, TError = unknown>(
 params?: GetClusterHadoopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoop>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetClusterHadoop<TData = Awaited<ReturnType<typeof getClusterHadoop>>, TError = unknown>(
 params?: GetClusterHadoopParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoop>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about the order of one cluster
 */
export const getClusterHadoopOrderInformations = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopOrderInformationsOVH>(
      {url: `/cluster/hadoop/orderInformations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopOrderInformationsQueryKey = () => {
    return [`/cluster/hadoop/orderInformations`] as const;
    }

    
export const getGetClusterHadoopOrderInformationsQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopOrderInformationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>> = ({ signal }) => getClusterHadoopOrderInformations(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopOrderInformationsQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>>
export type GetClusterHadoopOrderInformationsQueryError = unknown


export function useGetClusterHadoopOrderInformations<TData = Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopOrderInformations<TData = Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopOrderInformations<TData = Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about the order of one cluster
 */

export function useGetClusterHadoopOrderInformations<TData = Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderInformations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopOrderInformationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable node profiles and their characteristics
 */
export const getClusterHadoopOrderableNodeProfiles = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopNodeBillingProfileOVH[]>(
      {url: `/cluster/hadoop/orderableNodeProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopOrderableNodeProfilesQueryKey = () => {
    return [`/cluster/hadoop/orderableNodeProfiles`] as const;
    }

    
export const getGetClusterHadoopOrderableNodeProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopOrderableNodeProfilesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>> = ({ signal }) => getClusterHadoopOrderableNodeProfiles(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopOrderableNodeProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>>
export type GetClusterHadoopOrderableNodeProfilesQueryError = unknown


export function useGetClusterHadoopOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable node profiles and their characteristics
 */

export function useGetClusterHadoopOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopOrderableNodeProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopOrderableNodeProfilesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getClusterHadoopServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopHadoopWithIAMOVH>(
      {url: `/cluster/hadoop/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}`] as const;
    }

    
export const getGetClusterHadoopServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceName>>> = ({ signal }) => getClusterHadoopServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceName>>>
export type GetClusterHadoopServiceNameQueryError = unknown


export function useGetClusterHadoopServiceName<TData = Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceName<TData = Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceName<TData = Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetClusterHadoopServiceName<TData = Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the current consumptions that you will billed for on the next bill
 */
export const getClusterHadoopServiceNameConsumptions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopClusterConsumptionOVH>(
      {url: `/cluster/hadoop/${serviceName}/consumptions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameConsumptionsQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/consumptions`] as const;
    }

    
export const getGetClusterHadoopServiceNameConsumptionsQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameConsumptionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>> = ({ signal }) => getClusterHadoopServiceNameConsumptions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameConsumptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>>
export type GetClusterHadoopServiceNameConsumptionsQueryError = unknown


export function useGetClusterHadoopServiceNameConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current consumptions that you will billed for on the next bill
 */

export function useGetClusterHadoopServiceNameConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameConsumptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameConsumptionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Network ACL associated with this Hadoop Cluster
 */
export const getClusterHadoopServiceNameNetworkAcl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/cluster/hadoop/${serviceName}/networkAcl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNetworkAclQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/networkAcl`] as const;
    }

    
export const getGetClusterHadoopServiceNameNetworkAclQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNetworkAclQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>> = ({ signal }) => getClusterHadoopServiceNameNetworkAcl(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNetworkAclQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>>
export type GetClusterHadoopServiceNameNetworkAclQueryError = unknown


export function useGetClusterHadoopServiceNameNetworkAcl<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNetworkAcl<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNetworkAcl<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Network ACL associated with this Hadoop Cluster
 */

export function useGetClusterHadoopServiceNameNetworkAcl<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNetworkAclQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an ACL to your cluster
 */
export const postClusterHadoopServiceNameNetworkAcl = (
    serviceName: string,
    postClusterHadoopServiceNameNetworkAclBody: PostClusterHadoopServiceNameNetworkAclBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/networkAcl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameNetworkAclBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNetworkAclMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNetworkAcl>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameNetworkAclBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNetworkAcl>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameNetworkAclBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNetworkAcl>>, {serviceName: string;data: PostClusterHadoopServiceNameNetworkAclBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postClusterHadoopServiceNameNetworkAcl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNetworkAclMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNetworkAcl>>>
    export type PostClusterHadoopServiceNameNetworkAclMutationBody = PostClusterHadoopServiceNameNetworkAclBody
    export type PostClusterHadoopServiceNameNetworkAclMutationError = unknown

    /**
 * @summary Add an ACL to your cluster
 */
export const usePostClusterHadoopServiceNameNetworkAcl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNetworkAcl>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameNetworkAclBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNetworkAcl>>,
        TError,
        {serviceName: string;data: PostClusterHadoopServiceNameNetworkAclBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNetworkAclMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this ACL
 */
export const deleteClusterHadoopServiceNameNetworkAclBlock = (
    serviceName: string,
    block: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/networkAcl/${block}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteClusterHadoopServiceNameNetworkAclBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNetworkAclBlock>>, TError,{serviceName: string;block: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNetworkAclBlock>>, TError,{serviceName: string;block: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNetworkAclBlock>>, {serviceName: string;block: IpBlockOVH}> = (props) => {
          const {serviceName,block} = props ?? {};

          return  deleteClusterHadoopServiceNameNetworkAclBlock(serviceName,block,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteClusterHadoopServiceNameNetworkAclBlockMutationResult = NonNullable<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNetworkAclBlock>>>
    
    export type DeleteClusterHadoopServiceNameNetworkAclBlockMutationError = unknown

    /**
 * @summary Remove this ACL
 */
export const useDeleteClusterHadoopServiceNameNetworkAclBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNetworkAclBlock>>, TError,{serviceName: string;block: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNetworkAclBlock>>,
        TError,
        {serviceName: string;block: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteClusterHadoopServiceNameNetworkAclBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getClusterHadoopServiceNameNetworkAclBlock = (
    serviceName: string,
    block: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopNetworkAclOVH>(
      {url: `/cluster/hadoop/${serviceName}/networkAcl/${block}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNetworkAclBlockQueryKey = (serviceName: string,
    block: IpBlockOVH,) => {
    return [`/cluster/hadoop/${serviceName}/networkAcl/${block}`] as const;
    }

    
export const getGetClusterHadoopServiceNameNetworkAclBlockQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError = unknown>(serviceName: string,
    block: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNetworkAclBlockQueryKey(serviceName,block);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>> = ({ signal }) => getClusterHadoopServiceNameNetworkAclBlock(serviceName,block, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && block), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNetworkAclBlockQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>>
export type GetClusterHadoopServiceNameNetworkAclBlockQueryError = unknown


export function useGetClusterHadoopServiceNameNetworkAclBlock<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError = unknown>(
 serviceName: string,
    block: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNetworkAclBlock<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError = unknown>(
 serviceName: string,
    block: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNetworkAclBlock<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError = unknown>(
 serviceName: string,
    block: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetClusterHadoopServiceNameNetworkAclBlock<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError = unknown>(
 serviceName: string,
    block: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNetworkAclBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNetworkAclBlockQueryOptions(serviceName,block,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putClusterHadoopServiceNameNetworkAclBlock = (
    serviceName: string,
    block: IpBlockOVH,
    clusterHadoopNetworkAclOVH: NonReadonly<ClusterHadoopNetworkAclOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/cluster/hadoop/${serviceName}/networkAcl/${block}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clusterHadoopNetworkAclOVH
    },
      options);
    }
  


export const getPutClusterHadoopServiceNameNetworkAclBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameNetworkAclBlock>>, TError,{serviceName: string;block: IpBlockOVH;data: NonReadonly<ClusterHadoopNetworkAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameNetworkAclBlock>>, TError,{serviceName: string;block: IpBlockOVH;data: NonReadonly<ClusterHadoopNetworkAclOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putClusterHadoopServiceNameNetworkAclBlock>>, {serviceName: string;block: IpBlockOVH;data: NonReadonly<ClusterHadoopNetworkAclOVH>}> = (props) => {
          const {serviceName,block,data} = props ?? {};

          return  putClusterHadoopServiceNameNetworkAclBlock(serviceName,block,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutClusterHadoopServiceNameNetworkAclBlockMutationResult = NonNullable<Awaited<ReturnType<typeof putClusterHadoopServiceNameNetworkAclBlock>>>
    export type PutClusterHadoopServiceNameNetworkAclBlockMutationBody = NonReadonly<ClusterHadoopNetworkAclOVH>
    export type PutClusterHadoopServiceNameNetworkAclBlockMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutClusterHadoopServiceNameNetworkAclBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameNetworkAclBlock>>, TError,{serviceName: string;block: IpBlockOVH;data: NonReadonly<ClusterHadoopNetworkAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putClusterHadoopServiceNameNetworkAclBlock>>,
        TError,
        {serviceName: string;block: IpBlockOVH;data: NonReadonly<ClusterHadoopNetworkAclOVH>},
        TContext
      > => {

      const mutationOptions = getPutClusterHadoopServiceNameNetworkAclBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Nodes of the Cluster
 */
export const getClusterHadoopServiceNameNode = (
    serviceName: string,
    params?: GetClusterHadoopServiceNameNodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cluster/hadoop/${serviceName}/node`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNodeQueryKey = (serviceName: string,
    params?: GetClusterHadoopServiceNameNodeParams,) => {
    return [`/cluster/hadoop/${serviceName}/node`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClusterHadoopServiceNameNodeQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError = unknown>(serviceName: string,
    params?: GetClusterHadoopServiceNameNodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNodeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>> = ({ signal }) => getClusterHadoopServiceNameNode(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNodeQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>>
export type GetClusterHadoopServiceNameNodeQueryError = unknown


export function useGetClusterHadoopServiceNameNode<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetClusterHadoopServiceNameNodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNode<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError = unknown>(
 serviceName: string,
    params?: GetClusterHadoopServiceNameNodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNode<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError = unknown>(
 serviceName: string,
    params?: GetClusterHadoopServiceNameNodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Nodes of the Cluster
 */

export function useGetClusterHadoopServiceNameNode<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError = unknown>(
 serviceName: string,
    params?: GetClusterHadoopServiceNameNodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNodeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove this Node from the Cluster
 */
export const deleteClusterHadoopServiceNameNodeHostname = (
    serviceName: string,
    hostname: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteClusterHadoopServiceNameNodeHostnameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostname>>, TError,{serviceName: string;hostname: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostname>>, TError,{serviceName: string;hostname: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostname>>, {serviceName: string;hostname: string}> = (props) => {
          const {serviceName,hostname} = props ?? {};

          return  deleteClusterHadoopServiceNameNodeHostname(serviceName,hostname,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteClusterHadoopServiceNameNodeHostnameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostname>>>
    
    export type DeleteClusterHadoopServiceNameNodeHostnameMutationError = unknown

    /**
 * @summary Remove this Node from the Cluster
 */
export const useDeleteClusterHadoopServiceNameNodeHostname = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostname>>, TError,{serviceName: string;hostname: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostname>>,
        TError,
        {serviceName: string;hostname: string},
        TContext
      > => {

      const mutationOptions = getDeleteClusterHadoopServiceNameNodeHostnameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getClusterHadoopServiceNameNodeHostname = (
    serviceName: string,
    hostname: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopNodeOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNodeHostnameQueryKey = (serviceName: string,
    hostname: string,) => {
    return [`/cluster/hadoop/${serviceName}/node/${hostname}`] as const;
    }

    
export const getGetClusterHadoopServiceNameNodeHostnameQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError = unknown>(serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNodeHostnameQueryKey(serviceName,hostname);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>> = ({ signal }) => getClusterHadoopServiceNameNodeHostname(serviceName,hostname, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && hostname), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNodeHostnameQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>>
export type GetClusterHadoopServiceNameNodeHostnameQueryError = unknown


export function useGetClusterHadoopServiceNameNodeHostname<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError = unknown>(
 serviceName: string,
    hostname: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeHostname<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError = unknown>(
 serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeHostname<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError = unknown>(
 serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetClusterHadoopServiceNameNodeHostname<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError = unknown>(
 serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostname>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNodeHostnameQueryOptions(serviceName,hostname,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Decommission the node and all the services on it
 */
export const postClusterHadoopServiceNameNodeHostnameDecommission = (
    serviceName: string,
    hostname: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/decommission`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNodeHostnameDecommissionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameDecommission>>, TError,{serviceName: string;hostname: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameDecommission>>, TError,{serviceName: string;hostname: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameDecommission>>, {serviceName: string;hostname: string}> = (props) => {
          const {serviceName,hostname} = props ?? {};

          return  postClusterHadoopServiceNameNodeHostnameDecommission(serviceName,hostname,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNodeHostnameDecommissionMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameDecommission>>>
    
    export type PostClusterHadoopServiceNameNodeHostnameDecommissionMutationError = unknown

    /**
 * @summary Decommission the node and all the services on it
 */
export const usePostClusterHadoopServiceNameNodeHostnameDecommission = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameDecommission>>, TError,{serviceName: string;hostname: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameDecommission>>,
        TError,
        {serviceName: string;hostname: string},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNodeHostnameDecommissionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Recommission the node and all the services on it
 */
export const postClusterHadoopServiceNameNodeHostnameRecommission = (
    serviceName: string,
    hostname: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/recommission`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNodeHostnameRecommissionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRecommission>>, TError,{serviceName: string;hostname: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRecommission>>, TError,{serviceName: string;hostname: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRecommission>>, {serviceName: string;hostname: string}> = (props) => {
          const {serviceName,hostname} = props ?? {};

          return  postClusterHadoopServiceNameNodeHostnameRecommission(serviceName,hostname,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNodeHostnameRecommissionMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRecommission>>>
    
    export type PostClusterHadoopServiceNameNodeHostnameRecommissionMutationError = unknown

    /**
 * @summary Recommission the node and all the services on it
 */
export const usePostClusterHadoopServiceNameNodeHostnameRecommission = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRecommission>>, TError,{serviceName: string;hostname: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRecommission>>,
        TError,
        {serviceName: string;hostname: string},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNodeHostnameRecommissionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Roles (ie set of Hadoop services) of the Node
 */
export const getClusterHadoopServiceNameNodeHostnameRole = (
    serviceName: string,
    hostname: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopRoleTypeEnumOVH[]>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNodeHostnameRoleQueryKey = (serviceName: string,
    hostname: string,) => {
    return [`/cluster/hadoop/${serviceName}/node/${hostname}/role`] as const;
    }

    
export const getGetClusterHadoopServiceNameNodeHostnameRoleQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError = unknown>(serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNodeHostnameRoleQueryKey(serviceName,hostname);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>> = ({ signal }) => getClusterHadoopServiceNameNodeHostnameRole(serviceName,hostname, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && hostname), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNodeHostnameRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>>
export type GetClusterHadoopServiceNameNodeHostnameRoleQueryError = unknown


export function useGetClusterHadoopServiceNameNodeHostnameRole<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError = unknown>(
 serviceName: string,
    hostname: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeHostnameRole<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError = unknown>(
 serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeHostnameRole<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError = unknown>(
 serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Roles (ie set of Hadoop services) of the Node
 */

export function useGetClusterHadoopServiceNameNodeHostnameRole<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError = unknown>(
 serviceName: string,
    hostname: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRole>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNodeHostnameRoleQueryOptions(serviceName,hostname,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add the Role to the Node
 */
export const postClusterHadoopServiceNameNodeHostnameRole = (
    serviceName: string,
    hostname: string,
    postClusterHadoopServiceNameNodeHostnameRoleBody: PostClusterHadoopServiceNameNodeHostnameRoleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameNodeHostnameRoleBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNodeHostnameRoleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRole>>, TError,{serviceName: string;hostname: string;data: PostClusterHadoopServiceNameNodeHostnameRoleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRole>>, TError,{serviceName: string;hostname: string;data: PostClusterHadoopServiceNameNodeHostnameRoleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRole>>, {serviceName: string;hostname: string;data: PostClusterHadoopServiceNameNodeHostnameRoleBody}> = (props) => {
          const {serviceName,hostname,data} = props ?? {};

          return  postClusterHadoopServiceNameNodeHostnameRole(serviceName,hostname,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNodeHostnameRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRole>>>
    export type PostClusterHadoopServiceNameNodeHostnameRoleMutationBody = PostClusterHadoopServiceNameNodeHostnameRoleBody
    export type PostClusterHadoopServiceNameNodeHostnameRoleMutationError = unknown

    /**
 * @summary Add the Role to the Node
 */
export const usePostClusterHadoopServiceNameNodeHostnameRole = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRole>>, TError,{serviceName: string;hostname: string;data: PostClusterHadoopServiceNameNodeHostnameRoleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRole>>,
        TError,
        {serviceName: string;hostname: string;data: PostClusterHadoopServiceNameNodeHostnameRoleBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNodeHostnameRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this Role from the Node
 */
export const deleteClusterHadoopServiceNameNodeHostnameRoleType = (
    serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role/${type}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteClusterHadoopServiceNameNodeHostnameRoleTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostnameRoleType>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostnameRoleType>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostnameRoleType>>, {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}> = (props) => {
          const {serviceName,hostname,type} = props ?? {};

          return  deleteClusterHadoopServiceNameNodeHostnameRoleType(serviceName,hostname,type,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteClusterHadoopServiceNameNodeHostnameRoleTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostnameRoleType>>>
    
    export type DeleteClusterHadoopServiceNameNodeHostnameRoleTypeMutationError = unknown

    /**
 * @summary Remove this Role from the Node
 */
export const useDeleteClusterHadoopServiceNameNodeHostnameRoleType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostnameRoleType>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteClusterHadoopServiceNameNodeHostnameRoleType>>,
        TError,
        {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH},
        TContext
      > => {

      const mutationOptions = getDeleteClusterHadoopServiceNameNodeHostnameRoleTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getClusterHadoopServiceNameNodeHostnameRoleType = (
    serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopRoleOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role/${type}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNodeHostnameRoleTypeQueryKey = (serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH,) => {
    return [`/cluster/hadoop/${serviceName}/node/${hostname}/role/${type}`] as const;
    }

    
export const getGetClusterHadoopServiceNameNodeHostnameRoleTypeQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError = unknown>(serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNodeHostnameRoleTypeQueryKey(serviceName,hostname,type);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>> = ({ signal }) => getClusterHadoopServiceNameNodeHostnameRoleType(serviceName,hostname,type, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && hostname && type), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNodeHostnameRoleTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>>
export type GetClusterHadoopServiceNameNodeHostnameRoleTypeQueryError = unknown


export function useGetClusterHadoopServiceNameNodeHostnameRoleType<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError = unknown>(
 serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeHostnameRoleType<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError = unknown>(
 serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeHostnameRoleType<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError = unknown>(
 serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetClusterHadoopServiceNameNodeHostnameRoleType<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError = unknown>(
 serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeHostnameRoleType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNodeHostnameRoleTypeQueryOptions(serviceName,hostname,type,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Restart the role on the node (THIS ACTION WILL RESTART OTHER DEPENDANT ROLES)
 */
export const postClusterHadoopServiceNameNodeHostnameRoleTypeRestart = (
    serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role/${type}/restart`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNodeHostnameRoleTypeRestartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeRestart>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeRestart>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeRestart>>, {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}> = (props) => {
          const {serviceName,hostname,type} = props ?? {};

          return  postClusterHadoopServiceNameNodeHostnameRoleTypeRestart(serviceName,hostname,type,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNodeHostnameRoleTypeRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeRestart>>>
    
    export type PostClusterHadoopServiceNameNodeHostnameRoleTypeRestartMutationError = unknown

    /**
 * @summary Restart the role on the node (THIS ACTION WILL RESTART OTHER DEPENDANT ROLES)
 */
export const usePostClusterHadoopServiceNameNodeHostnameRoleTypeRestart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeRestart>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeRestart>>,
        TError,
        {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNodeHostnameRoleTypeRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Start the role on the node
 */
export const postClusterHadoopServiceNameNodeHostnameRoleTypeStart = (
    serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role/${type}/start`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNodeHostnameRoleTypeStartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStart>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStart>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStart>>, {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}> = (props) => {
          const {serviceName,hostname,type} = props ?? {};

          return  postClusterHadoopServiceNameNodeHostnameRoleTypeStart(serviceName,hostname,type,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNodeHostnameRoleTypeStartMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStart>>>
    
    export type PostClusterHadoopServiceNameNodeHostnameRoleTypeStartMutationError = unknown

    /**
 * @summary Start the role on the node
 */
export const usePostClusterHadoopServiceNameNodeHostnameRoleTypeStart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStart>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStart>>,
        TError,
        {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNodeHostnameRoleTypeStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Stop the role on the node (THIS ACTION WILL STOP OTHER DEPENDANT ROLES)
 */
export const postClusterHadoopServiceNameNodeHostnameRoleTypeStop = (
    serviceName: string,
    hostname: string,
    type: ClusterHadoopRoleTypeEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/node/${hostname}/role/${type}/stop`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameNodeHostnameRoleTypeStopMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStop>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStop>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStop>>, {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}> = (props) => {
          const {serviceName,hostname,type} = props ?? {};

          return  postClusterHadoopServiceNameNodeHostnameRoleTypeStop(serviceName,hostname,type,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameNodeHostnameRoleTypeStopMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStop>>>
    
    export type PostClusterHadoopServiceNameNodeHostnameRoleTypeStopMutationError = unknown

    /**
 * @summary Stop the role on the node (THIS ACTION WILL STOP OTHER DEPENDANT ROLES)
 */
export const usePostClusterHadoopServiceNameNodeHostnameRoleTypeStop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStop>>, TError,{serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameNodeHostnameRoleTypeStop>>,
        TError,
        {serviceName: string;hostname: string;type: ClusterHadoopRoleTypeEnumOVH},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameNodeHostnameRoleTypeStopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Detailed description for each Node profile
 */
export const getClusterHadoopServiceNameNodeBillingProfiles = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopNodeBillingProfileOVH[]>(
      {url: `/cluster/hadoop/${serviceName}/nodeBillingProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNodeBillingProfilesQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/nodeBillingProfiles`] as const;
    }

    
export const getGetClusterHadoopServiceNameNodeBillingProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNodeBillingProfilesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>> = ({ signal }) => getClusterHadoopServiceNameNodeBillingProfiles(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNodeBillingProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>>
export type GetClusterHadoopServiceNameNodeBillingProfilesQueryError = unknown


export function useGetClusterHadoopServiceNameNodeBillingProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeBillingProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeBillingProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detailed description for each Node profile
 */

export function useGetClusterHadoopServiceNameNodeBillingProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeBillingProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNodeBillingProfilesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the current node consumptions that you will billed for on the next bill
 */
export const getClusterHadoopServiceNameNodeConsumptions = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopNodeConsumptionOVH[]>(
      {url: `/cluster/hadoop/${serviceName}/nodeConsumptions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameNodeConsumptionsQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/nodeConsumptions`] as const;
    }

    
export const getGetClusterHadoopServiceNameNodeConsumptionsQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameNodeConsumptionsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>> = ({ signal }) => getClusterHadoopServiceNameNodeConsumptions(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameNodeConsumptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>>
export type GetClusterHadoopServiceNameNodeConsumptionsQueryError = unknown


export function useGetClusterHadoopServiceNameNodeConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameNodeConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current node consumptions that you will billed for on the next bill
 */

export function useGetClusterHadoopServiceNameNodeConsumptions<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameNodeConsumptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameNodeConsumptionsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Order a new node in the cluster
 */
export const postClusterHadoopServiceNameOrderNewNodeHourly = (
    serviceName: string,
    postClusterHadoopServiceNameOrderNewNodeHourlyBody: PostClusterHadoopServiceNameOrderNewNodeHourlyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/orderNewNodeHourly`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameOrderNewNodeHourlyBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameOrderNewNodeHourlyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameOrderNewNodeHourly>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameOrderNewNodeHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameOrderNewNodeHourly>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameOrderNewNodeHourlyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameOrderNewNodeHourly>>, {serviceName: string;data: PostClusterHadoopServiceNameOrderNewNodeHourlyBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postClusterHadoopServiceNameOrderNewNodeHourly(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameOrderNewNodeHourlyMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameOrderNewNodeHourly>>>
    export type PostClusterHadoopServiceNameOrderNewNodeHourlyMutationBody = PostClusterHadoopServiceNameOrderNewNodeHourlyBody
    export type PostClusterHadoopServiceNameOrderNewNodeHourlyMutationError = unknown

    /**
 * @summary Order a new node in the cluster
 */
export const usePostClusterHadoopServiceNameOrderNewNodeHourly = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameOrderNewNodeHourly>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameOrderNewNodeHourlyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameOrderNewNodeHourly>>,
        TError,
        {serviceName: string;data: PostClusterHadoopServiceNameOrderNewNodeHourlyBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameOrderNewNodeHourlyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of orderable Node profiles
 */
export const getClusterHadoopServiceNameOrderableNodeProfiles = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cluster/hadoop/${serviceName}/orderableNodeProfiles`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameOrderableNodeProfilesQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/orderableNodeProfiles`] as const;
    }

    
export const getGetClusterHadoopServiceNameOrderableNodeProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameOrderableNodeProfilesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>> = ({ signal }) => getClusterHadoopServiceNameOrderableNodeProfiles(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameOrderableNodeProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>>
export type GetClusterHadoopServiceNameOrderableNodeProfilesQueryError = unknown


export function useGetClusterHadoopServiceNameOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of orderable Node profiles
 */

export function useGetClusterHadoopServiceNameOrderableNodeProfiles<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameOrderableNodeProfiles>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameOrderableNodeProfilesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Restart the Cloudera Manager Hadoop Cluster (THIS ACTION WILL RESTART EVERY SERVICE)
 */
export const postClusterHadoopServiceNameRestart = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/restart`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameRestartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameRestart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameRestart>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameRestart>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postClusterHadoopServiceNameRestart(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameRestart>>>
    
    export type PostClusterHadoopServiceNameRestartMutationError = unknown

    /**
 * @summary Restart the Cloudera Manager Hadoop Cluster (THIS ACTION WILL RESTART EVERY SERVICE)
 */
export const usePostClusterHadoopServiceNameRestart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameRestart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameRestart>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Restart a Cloudera Manager service (THIS ACTION WILL RESTART OTHER DEPENDANT SERVICES)
 */
export const postClusterHadoopServiceNameServiceRestart = (
    serviceName: string,
    postClusterHadoopServiceNameServiceRestartBody: PostClusterHadoopServiceNameServiceRestartBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/service/restart`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameServiceRestartBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameServiceRestartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceRestart>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceRestartBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceRestart>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceRestartBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceRestart>>, {serviceName: string;data: PostClusterHadoopServiceNameServiceRestartBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postClusterHadoopServiceNameServiceRestart(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameServiceRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceRestart>>>
    export type PostClusterHadoopServiceNameServiceRestartMutationBody = PostClusterHadoopServiceNameServiceRestartBody
    export type PostClusterHadoopServiceNameServiceRestartMutationError = unknown

    /**
 * @summary Restart a Cloudera Manager service (THIS ACTION WILL RESTART OTHER DEPENDANT SERVICES)
 */
export const usePostClusterHadoopServiceNameServiceRestart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceRestart>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceRestartBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceRestart>>,
        TError,
        {serviceName: string;data: PostClusterHadoopServiceNameServiceRestartBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameServiceRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Start a Cloudera Manager service
 */
export const postClusterHadoopServiceNameServiceStart = (
    serviceName: string,
    postClusterHadoopServiceNameServiceStartBody: PostClusterHadoopServiceNameServiceStartBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/service/start`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameServiceStartBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameServiceStartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStart>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceStartBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStart>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceStartBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStart>>, {serviceName: string;data: PostClusterHadoopServiceNameServiceStartBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postClusterHadoopServiceNameServiceStart(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameServiceStartMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStart>>>
    export type PostClusterHadoopServiceNameServiceStartMutationBody = PostClusterHadoopServiceNameServiceStartBody
    export type PostClusterHadoopServiceNameServiceStartMutationError = unknown

    /**
 * @summary Start a Cloudera Manager service
 */
export const usePostClusterHadoopServiceNameServiceStart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStart>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceStartBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStart>>,
        TError,
        {serviceName: string;data: PostClusterHadoopServiceNameServiceStartBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameServiceStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Stop a Cloudera Manager service (THIS ACTION WILL STOP OTHER DEPENDANT SERVICES)
 */
export const postClusterHadoopServiceNameServiceStop = (
    serviceName: string,
    postClusterHadoopServiceNameServiceStopBody: PostClusterHadoopServiceNameServiceStopBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/service/stop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameServiceStopBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameServiceStopMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStop>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceStopBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStop>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceStopBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStop>>, {serviceName: string;data: PostClusterHadoopServiceNameServiceStopBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postClusterHadoopServiceNameServiceStop(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameServiceStopMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStop>>>
    export type PostClusterHadoopServiceNameServiceStopMutationBody = PostClusterHadoopServiceNameServiceStopBody
    export type PostClusterHadoopServiceNameServiceStopMutationError = unknown

    /**
 * @summary Stop a Cloudera Manager service (THIS ACTION WILL STOP OTHER DEPENDANT SERVICES)
 */
export const usePostClusterHadoopServiceNameServiceStop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStop>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameServiceStopBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameServiceStop>>,
        TError,
        {serviceName: string;data: PostClusterHadoopServiceNameServiceStopBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameServiceStopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getClusterHadoopServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/cluster/hadoop/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetClusterHadoopServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>> = ({ signal }) => getClusterHadoopServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>>
export type GetClusterHadoopServiceNameServiceInfosQueryError = unknown


export function useGetClusterHadoopServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetClusterHadoopServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putClusterHadoopServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/cluster/hadoop/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutClusterHadoopServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putClusterHadoopServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putClusterHadoopServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutClusterHadoopServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putClusterHadoopServiceNameServiceInfos>>>
    export type PutClusterHadoopServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutClusterHadoopServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutClusterHadoopServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putClusterHadoopServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutClusterHadoopServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Start the Cloudera Manager Hadoop Cluster
 */
export const postClusterHadoopServiceNameStart = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/start`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameStartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameStart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameStart>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameStart>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postClusterHadoopServiceNameStart(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameStartMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameStart>>>
    
    export type PostClusterHadoopServiceNameStartMutationError = unknown

    /**
 * @summary Start the Cloudera Manager Hadoop Cluster
 */
export const usePostClusterHadoopServiceNameStart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameStart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameStart>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Stop a Cloudera Manager Hadoop Cluster (THIS ACTION WILL STOP EVERY SERVICE)
 */
export const postClusterHadoopServiceNameStop = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/stop`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameStopMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameStop>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameStop>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameStop>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postClusterHadoopServiceNameStop(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameStopMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameStop>>>
    
    export type PostClusterHadoopServiceNameStopMutationError = unknown

    /**
 * @summary Stop a Cloudera Manager Hadoop Cluster (THIS ACTION WILL STOP EVERY SERVICE)
 */
export const usePostClusterHadoopServiceNameStop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameStop>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameStop>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameStopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tasks associated with this Hadoop Cluster
 */
export const getClusterHadoopServiceNameTask = (
    serviceName: string,
    params?: GetClusterHadoopServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/cluster/hadoop/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameTaskQueryKey = (serviceName: string,
    params?: GetClusterHadoopServiceNameTaskParams,) => {
    return [`/cluster/hadoop/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClusterHadoopServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetClusterHadoopServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>> = ({ signal }) => getClusterHadoopServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>>
export type GetClusterHadoopServiceNameTaskQueryError = unknown


export function useGetClusterHadoopServiceNameTask<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetClusterHadoopServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameTask<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetClusterHadoopServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameTask<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetClusterHadoopServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks associated with this Hadoop Cluster
 */

export function useGetClusterHadoopServiceNameTask<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetClusterHadoopServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getClusterHadoopServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/cluster/hadoop/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetClusterHadoopServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>> = ({ signal }) => getClusterHadoopServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>>
export type GetClusterHadoopServiceNameTaskTaskIdQueryError = unknown


export function useGetClusterHadoopServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetClusterHadoopServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Terminate your service. THE CLUSTER WILL BE DELETED. ALL YOUR DATA WILL BE LOST
 */
export const postClusterHadoopServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postClusterHadoopServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameTerminate>>>
    
    export type PostClusterHadoopServiceNameTerminateMutationError = unknown

    /**
 * @summary Terminate your service. THE CLUSTER WILL BE DELETED. ALL YOUR DATA WILL BE LOST
 */
export const usePostClusterHadoopServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Users associated with this Hadoop Cluster
 */
export const getClusterHadoopServiceNameUser = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/cluster/hadoop/${serviceName}/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameUserQueryKey = (serviceName: string,) => {
    return [`/cluster/hadoop/${serviceName}/user`] as const;
    }

    
export const getGetClusterHadoopServiceNameUserQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameUserQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>> = ({ signal }) => getClusterHadoopServiceNameUser(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameUserQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>>
export type GetClusterHadoopServiceNameUserQueryError = unknown


export function useGetClusterHadoopServiceNameUser<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameUser<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameUser<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Users associated with this Hadoop Cluster
 */

export function useGetClusterHadoopServiceNameUser<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameUserQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an User to your cluster
 */
export const postClusterHadoopServiceNameUser = (
    serviceName: string,
    postClusterHadoopServiceNameUserBody: PostClusterHadoopServiceNameUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameUserBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameUser>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameUser>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameUser>>, {serviceName: string;data: PostClusterHadoopServiceNameUserBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postClusterHadoopServiceNameUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameUserMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameUser>>>
    export type PostClusterHadoopServiceNameUserMutationBody = PostClusterHadoopServiceNameUserBody
    export type PostClusterHadoopServiceNameUserMutationError = unknown

    /**
 * @summary Add an User to your cluster
 */
export const usePostClusterHadoopServiceNameUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameUser>>, TError,{serviceName: string;data: PostClusterHadoopServiceNameUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameUser>>,
        TError,
        {serviceName: string;data: PostClusterHadoopServiceNameUserBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this User
 */
export const deleteClusterHadoopServiceNameUserUsername = (
    serviceName: string,
    username: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/user/${username}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteClusterHadoopServiceNameUserUsernameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameUserUsername>>, TError,{serviceName: string;username: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameUserUsername>>, TError,{serviceName: string;username: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameUserUsername>>, {serviceName: string;username: string}> = (props) => {
          const {serviceName,username} = props ?? {};

          return  deleteClusterHadoopServiceNameUserUsername(serviceName,username,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteClusterHadoopServiceNameUserUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameUserUsername>>>
    
    export type DeleteClusterHadoopServiceNameUserUsernameMutationError = unknown

    /**
 * @summary Remove this User
 */
export const useDeleteClusterHadoopServiceNameUserUsername = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClusterHadoopServiceNameUserUsername>>, TError,{serviceName: string;username: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteClusterHadoopServiceNameUserUsername>>,
        TError,
        {serviceName: string;username: string},
        TContext
      > => {

      const mutationOptions = getDeleteClusterHadoopServiceNameUserUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getClusterHadoopServiceNameUserUsername = (
    serviceName: string,
    username: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopUserOVH>(
      {url: `/cluster/hadoop/${serviceName}/user/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClusterHadoopServiceNameUserUsernameQueryKey = (serviceName: string,
    username: string,) => {
    return [`/cluster/hadoop/${serviceName}/user/${username}`] as const;
    }

    
export const getGetClusterHadoopServiceNameUserUsernameQueryOptions = <TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError = unknown>(serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClusterHadoopServiceNameUserUsernameQueryKey(serviceName,username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>> = ({ signal }) => getClusterHadoopServiceNameUserUsername(serviceName,username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetClusterHadoopServiceNameUserUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>>
export type GetClusterHadoopServiceNameUserUsernameQueryError = unknown


export function useGetClusterHadoopServiceNameUserUsername<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameUserUsername<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetClusterHadoopServiceNameUserUsername<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetClusterHadoopServiceNameUserUsername<TData = Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClusterHadoopServiceNameUserUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetClusterHadoopServiceNameUserUsernameQueryOptions(serviceName,username,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putClusterHadoopServiceNameUserUsername = (
    serviceName: string,
    username: string,
    clusterHadoopUserOVH: NonReadonly<ClusterHadoopUserOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/cluster/hadoop/${serviceName}/user/${username}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clusterHadoopUserOVH
    },
      options);
    }
  


export const getPutClusterHadoopServiceNameUserUsernameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameUserUsername>>, TError,{serviceName: string;username: string;data: NonReadonly<ClusterHadoopUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameUserUsername>>, TError,{serviceName: string;username: string;data: NonReadonly<ClusterHadoopUserOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putClusterHadoopServiceNameUserUsername>>, {serviceName: string;username: string;data: NonReadonly<ClusterHadoopUserOVH>}> = (props) => {
          const {serviceName,username,data} = props ?? {};

          return  putClusterHadoopServiceNameUserUsername(serviceName,username,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutClusterHadoopServiceNameUserUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof putClusterHadoopServiceNameUserUsername>>>
    export type PutClusterHadoopServiceNameUserUsernameMutationBody = NonReadonly<ClusterHadoopUserOVH>
    export type PutClusterHadoopServiceNameUserUsernameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutClusterHadoopServiceNameUserUsername = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putClusterHadoopServiceNameUserUsername>>, TError,{serviceName: string;username: string;data: NonReadonly<ClusterHadoopUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putClusterHadoopServiceNameUserUsername>>,
        TError,
        {serviceName: string;username: string;data: NonReadonly<ClusterHadoopUserOVH>},
        TContext
      > => {

      const mutationOptions = getPutClusterHadoopServiceNameUserUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reset the password for a given Hadoop Cluster User
 */
export const postClusterHadoopServiceNameUserUsernameResetPassword = (
    serviceName: string,
    username: string,
    postClusterHadoopServiceNameUserUsernameResetPasswordBody: PostClusterHadoopServiceNameUserUsernameResetPasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ClusterHadoopTaskOVH>(
      {url: `/cluster/hadoop/${serviceName}/user/${username}/resetPassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postClusterHadoopServiceNameUserUsernameResetPasswordBody, signal
    },
      options);
    }
  


export const getPostClusterHadoopServiceNameUserUsernameResetPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameUserUsernameResetPassword>>, TError,{serviceName: string;username: string;data: PostClusterHadoopServiceNameUserUsernameResetPasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameUserUsernameResetPassword>>, TError,{serviceName: string;username: string;data: PostClusterHadoopServiceNameUserUsernameResetPasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClusterHadoopServiceNameUserUsernameResetPassword>>, {serviceName: string;username: string;data: PostClusterHadoopServiceNameUserUsernameResetPasswordBody}> = (props) => {
          const {serviceName,username,data} = props ?? {};

          return  postClusterHadoopServiceNameUserUsernameResetPassword(serviceName,username,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClusterHadoopServiceNameUserUsernameResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postClusterHadoopServiceNameUserUsernameResetPassword>>>
    export type PostClusterHadoopServiceNameUserUsernameResetPasswordMutationBody = PostClusterHadoopServiceNameUserUsernameResetPasswordBody
    export type PostClusterHadoopServiceNameUserUsernameResetPasswordMutationError = unknown

    /**
 * @summary Reset the password for a given Hadoop Cluster User
 */
export const usePostClusterHadoopServiceNameUserUsernameResetPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClusterHadoopServiceNameUserUsernameResetPassword>>, TError,{serviceName: string;username: string;data: PostClusterHadoopServiceNameUserUsernameResetPasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postClusterHadoopServiceNameUserUsernameResetPassword>>,
        TError,
        {serviceName: string;username: string;data: PostClusterHadoopServiceNameUserUsernameResetPasswordBody},
        TContext
      > => {

      const mutationOptions = getPostClusterHadoopServiceNameUserUsernameResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

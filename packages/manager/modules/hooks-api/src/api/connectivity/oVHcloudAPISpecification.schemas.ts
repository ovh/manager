/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetGenericIncidentParams = {
/**
 * List only incidents created after this date
 */
creationDate?: string;
/**
 * List only incidents closed prior to this date
 */
endDate?: string;
/**
 * Filter by the status of the incident (validated or closed)
 */
status?: ConnectivityMonitoringGenericIncidentStatusEnumOVH;
};

export type GetPartnersGenericIncidentParams = {
/**
 * List only incidents created after this date
 */
creationDate?: string;
/**
 * List only incidents closed prior to this date
 */
endDate?: string;
/**
 * Filter by the status of the incident (detected, validated or closed)
 */
status?: ConnectivityMonitoringGenericIncidentStatusEnumOVH;
};

export type GetPlannedWorkParams = {
/**
 * List only work planned started after this date
 */
beginDate?: string;
/**
 * List only work planned ending prior to this date
 */
endDate?: string;
};

export type GetEligibilityParams = {
/**
 * Eligibility reference
 */
eligibilityReference: string;
};

/**
 * Eligibility test results
 * @nullable
 */
export type XdslAsyncTaskConnectivityEligibilityEligibilityTestOVHResult = ConnectivityEligibilityEligibilityTestOVH | null;

/**
 * Details of a Building
 * @nullable
 */
export type XdslAsyncTaskConnectivityEligibilityBuildingOVHResult = ConnectivityEligibilityBuildingOVH | null;

/**
 * AsyncTask status
 */
export type XdslAsyncTaskStatusEnumOVH = typeof XdslAsyncTaskStatusEnumOVH[keyof typeof XdslAsyncTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XdslAsyncTaskStatusEnumOVH = {
  error: 'error',
  ok: 'ok',
  pending: 'pending',
} as const;

/**
 * xdsl.AsyncTask_connectivity.eligibility.Meetings
 */
export interface XdslAsyncTaskConnectivityEligibilityMeetingsOVH {
  /** @nullable */
  readonly error?: string | null;
  /** List of available meeting time slots */
  readonly result?: ConnectivityEligibilityMeetingsOVH;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTask_connectivity.eligibility.EligibilityTest
 */
export interface XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH {
  /** @nullable */
  readonly error?: string | null;
  /**
   * Eligibility test results
   * @nullable
   */
  readonly result?: XdslAsyncTaskConnectivityEligibilityEligibilityTestOVHResult;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTask_connectivity.eligibility.Building
 */
export interface XdslAsyncTaskConnectivityEligibilityBuildingOVH {
  /** @nullable */
  readonly error?: string | null;
  /**
   * Details of a Building
   * @nullable
   */
  readonly result?: XdslAsyncTaskConnectivityEligibilityBuildingOVHResult;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTaskArray_string
 */
export interface XdslAsyncTaskArrayStringOVH {
  /** @nullable */
  readonly error?: string | null;
  /** @nullable */
  readonly result?: readonly string[] | null;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTaskArray_connectivity.eligibility.StreetNumberDetails
 */
export interface XdslAsyncTaskArrayConnectivityEligibilityStreetNumberDetailsOVH {
  /** @nullable */
  readonly error?: string | null;
  /** @nullable */
  readonly result?: readonly ConnectivityEligibilityStreetNumberDetailsOVH[] | null;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTaskArray_connectivity.eligibility.Street
 */
export interface XdslAsyncTaskArrayConnectivityEligibilityStreetOVH {
  /** @nullable */
  readonly error?: string | null;
  /** @nullable */
  readonly result?: readonly ConnectivityEligibilityStreetOVH[] | null;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTaskArray_connectivity.eligibility.Line
 */
export interface XdslAsyncTaskArrayConnectivityEligibilityLineOVH {
  /** @nullable */
  readonly error?: string | null;
  /** @nullable */
  readonly result?: readonly ConnectivityEligibilityLineOVH[] | null;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTaskArray_connectivity.eligibility.City
 */
export interface XdslAsyncTaskArrayConnectivityEligibilityCityOVH {
  /** @nullable */
  readonly error?: string | null;
  /** @nullable */
  readonly result?: readonly ConnectivityEligibilityCityOVH[] | null;
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * xdsl.AsyncTaskArray_connectivity.eligibility.Building
 */
export interface XdslAsyncTaskArrayConnectivityEligibilityBuildingOVH {
  /** @nullable */
  readonly error?: string | null;
  /** @nullable */
  readonly result?: readonly ConnectivityEligibilityBuildingOVH[] | null;
  /** AsyncTask status */
  readonly status?: XdslAsyncTaskStatusEnumOVH;
}

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * Generic incident status
 */
export type ConnectivityMonitoringGenericIncidentStatusEnumOVH = typeof ConnectivityMonitoringGenericIncidentStatusEnumOVH[keyof typeof ConnectivityMonitoringGenericIncidentStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityMonitoringGenericIncidentStatusEnumOVH = {
  closed: 'closed',
  detected: 'detected',
  validated: 'validated',
} as const;

/**
 * Generic incident structure
 */
export interface ConnectivityMonitoringGenericIncidentOVH {
  /**
   * Optional comment, that contains some information and updates about the generic incident
   * @nullable
   */
  readonly comment?: string | null;
  /** Creation date, the generic incident has been detected */
  readonly creationDate?: string;
  /**
   * Type of fault
   * @nullable
   */
  readonly default?: string | null;
  /** List of impacted department codes */
  readonly departments?: readonly string[];
  /**
   * End date, the generic incident is resolved and closed
   * @nullable
   */
  readonly endDate?: string | null;
  /**
   * Estimated resolution date for generic incident
   * @nullable
   */
  readonly estimatedResolutionDate?: string | null;
  /** Generic incident id */
  readonly id?: number;
  /**
   * Identify a national generic incident
   * @nullable
   */
  readonly isNational?: boolean | null;
  /**
   * Details about the consequence of the default
   * @nullable
   */
  readonly nature?: string | null;
  /** List of impacted NRA/NRO */
  readonly nra?: readonly string[];
  /** List of impacted operators */
  readonly operators?: readonly ConnectivityOperatorEnumOVH[];
  /** Generic incident status */
  readonly status?: ConnectivityMonitoringGenericIncidentStatusEnumOVH;
  /**
   * Task id
   * @nullable
   */
  readonly taskId?: number | null;
  /**
   * Task reference created on Ovhcloud status web page
   * @nullable
   */
  readonly taskReference?: string | null;
  /** Impacted technologies */
  readonly technologies?: readonly string[];
}

/**
 * Intervention type
 */
export type ConnectivityMaintenanceInterventionTypeEnumOVH = typeof ConnectivityMaintenanceInterventionTypeEnumOVH[keyof typeof ConnectivityMaintenanceInterventionTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityMaintenanceInterventionTypeEnumOVH = {
  BACKBONE_MAINTENANCE: 'BACKBONE_MAINTENANCE',
  CARD_SWAP_WITH_IMPACT: 'CARD_SWAP_WITH_IMPACT',
  CLUSTER_AN_ROUTER_MIGRATION: 'CLUSTER_AN_ROUTER_MIGRATION',
  CORRECTIVE_MAINTENANCE: 'CORRECTIVE_MAINTENANCE',
  DSLAM_LINK_UPGRADE_WITHOUT_CARD_SWAP: 'DSLAM_LINK_UPGRADE_WITHOUT_CARD_SWAP',
  DSLAM_UPGRADE_WITH_IMPACT: 'DSLAM_UPGRADE_WITH_IMPACT',
  FIBER_CABLE_LINK_SWAP: 'FIBER_CABLE_LINK_SWAP',
  FIBER_CONNECTION_WITH_IMPACT: 'FIBER_CONNECTION_WITH_IMPACT',
  FIBER_MAINTENANCE: 'FIBER_MAINTENANCE',
  FIBER_THIRD_PARTY_WORK_WITH_IMPACT: 'FIBER_THIRD_PARTY_WORK_WITH_IMPACT',
  IP_BACKBONE_LINK_MIGRATION_WITH_IMPACT: 'IP_BACKBONE_LINK_MIGRATION_WITH_IMPACT',
  IP_BACKBONE_SWITCH_UPGRADE_WITH_IMPACT: 'IP_BACKBONE_SWITCH_UPGRADE_WITH_IMPACT',
  IP_MAINTENANCE: 'IP_MAINTENANCE',
  LEVEL2_DSLAM_MIGRATION: 'LEVEL2_DSLAM_MIGRATION',
  LINK_MIGRATION_WITH_DSL_IMPACT: 'LINK_MIGRATION_WITH_DSL_IMPACT',
  LL_THIRD_PARTY_MAINTENANCE_WITH_IMPACT: 'LL_THIRD_PARTY_MAINTENANCE_WITH_IMPACT',
  LOOP_AN_ROUTER_MIGRATION: 'LOOP_AN_ROUTER_MIGRATION',
  LOOP_AN_ROUTER_UPGRADE: 'LOOP_AN_ROUTER_UPGRADE',
  MAINTENANCE: 'MAINTENANCE',
  OPTIC_FIBER_WORK_WITH_OUTAGE_DURING_NON_WORKING_HOURS: 'OPTIC_FIBER_WORK_WITH_OUTAGE_DURING_NON_WORKING_HOURS',
  PLANNED_CORRECTIVE_MAINTENANCE: 'PLANNED_CORRECTIVE_MAINTENANCE',
  SENSITIVE_LOOP_LINK_UPGRADE: 'SENSITIVE_LOOP_LINK_UPGRADE',
  TRANSMISSION_CORRECTIVE_MAINTENANCE: 'TRANSMISSION_CORRECTIVE_MAINTENANCE',
  TRANSMISSION_CUSTOMER_TRANSFERT_MIGRATION_WITH_IMPACT: 'TRANSMISSION_CUSTOMER_TRANSFERT_MIGRATION_WITH_IMPACT',
  TRANSMISSION_FIBRE_MAINTENANCE: 'TRANSMISSION_FIBRE_MAINTENANCE',
  TRANSMISSION_LINK_COMMISSIONING_PRODUCTION_DECOMMISSIONING_WORK_WITH_IMPACT: 'TRANSMISSION_LINK_COMMISSIONING_PRODUCTION_DECOMMISSIONING_WORK_WITH_IMPACT',
  TRANSMISSION_LINK_TRANSFERT_MIGRATION_WITH_IMPACT: 'TRANSMISSION_LINK_TRANSFERT_MIGRATION_WITH_IMPACT',
  TRANSMISSION_MAINTENANCE: 'TRANSMISSION_MAINTENANCE',
  TRANSMISSION_MOVING_WITH_IMPACT: 'TRANSMISSION_MOVING_WITH_IMPACT',
  TRANSMISSION_SWITCH_UPGRADE_WITH_IMPACT: 'TRANSMISSION_SWITCH_UPGRADE_WITH_IMPACT',
  WITH_IMPACT: 'WITH_IMPACT',
} as const;

/**
 * Work Planned operation structure
 */
export interface ConnectivityMaintenanceWorkPlannedOVH {
  /** Begin date, the work planned operation starts at this time */
  readonly dateBegin?: string;
  /** End date, the work planned operation finishes at the time */
  readonly dateEnd?: string;
  /**
   * List of impacted department codes
   * @nullable
   */
  readonly departments?: readonly string[] | null;
  /**
   * Description of the work planned operation
   * @nullable
   */
  readonly description?: string | null;
  /**
   * Duration of the work planned operation
   * @nullable
   */
  readonly duration?: string | null;
  /**
   * Fallback planned for the operation
   * @nullable
   */
  readonly fallback?: boolean | null;
  /**
   * Fallback operation starts at this time
   * @nullable
   */
  readonly fallbackDateBegin?: string | null;
  /**
   * Fallback operation ends at this time
   * @nullable
   */
  readonly fallbackDateEnd?: string | null;
  /** Work Planned operation id */
  readonly id?: number;
  /**
   * Impact of the work planned operation
   * @nullable
   */
  readonly impact?: string | null;
  /** Intervention type */
  readonly interventionType?: ConnectivityMaintenanceInterventionTypeEnumOVH;
  /**
   * List of impacted NRA/NRO
   * @nullable
   */
  readonly nras?: readonly string[] | null;
  /** Operator */
  readonly operator?: ConnectivityOperatorEnumOVH;
  /** Technology impacted by the work planned operation */
  readonly technology?: string;
  /**
   * Zone of the work planned operation
   * @nullable
   */
  readonly zone?: string | null;
}

/**
 * connectivity.eligibility.test.otp.post
 */
export interface ConnectivityEligibilityTestOtpPostOVH {
  /** OTP (Optical Termination Panel) identifier */
  otp: string;
}

/**
 * connectivity.eligibility.test.line.post
 */
export interface ConnectivityEligibilityTestLinePostOVH {
  /** Line number */
  lineNumber: string;
  /** Line status */
  status: ConnectivityEligibilityLineStatusEnumOVH;
  /** Unique identifier of the street (you can get it with POST /connectivity/eligibility/search/streets) */
  streetCode?: string;
  /** Street number */
  streetNumber?: string;
}

/**
 * connectivity.eligibility.test.line.partners.post
 */
export interface ConnectivityEligibilityTestLinePartnersPostOVH {
  /** Line number */
  lineNumber: string;
  /** Line status */
  status: ConnectivityEligibilityLineStatusEnumOVH;
  /** Unique identifier of the street (you can get it with POST /connectivity/eligibility/search/streets) */
  streetCode?: string;
  /** Street number */
  streetNumber?: string;
}

/**
 * connectivity.eligibility.test.building.post
 */
export interface ConnectivityEligibilityTestBuildingPostOVH {
  /** Building identifier, that can be found using /connectivity/eligibility/search/building* methods */
  building: string;
}

/**
 * connectivity.eligibility.test.address.post
 */
export interface ConnectivityEligibilityTestAddressPostOVH {
  /** Unique identifier of the street (you can get it with POST /connectivity/eligibility/search/streets) */
  streetCode: string;
  /** Street number */
  streetNumber: string;
}

/**
 * connectivity.eligibility.test.address.partners.post
 */
export interface ConnectivityEligibilityTestAddressPartnersPostOVH {
  /** Unique identifier of the street (you can get it with POST /connectivity/eligibility/search/streets) */
  streetCode: string;
  /** Street number */
  streetNumber: string;
}

/**
 * connectivity.eligibility.search.streets.post
 */
export interface ConnectivityEligibilitySearchStreetsPostOVH {
  /** French INSEE identifier (you can get it with POST /connectivity/eligibility/search/cities) */
  inseeCode: string;
}

/**
 * connectivity.eligibility.search.streetNumbers.post
 */
export interface ConnectivityEligibilitySearchStreetNumbersPostOVH {
  /** Street code */
  streetCode: string;
}

/**
 * connectivity.eligibility.search.streetNumbers.details.post
 */
export interface ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH {
  /** Street code */
  streetCode: string;
}

/**
 * connectivity.eligibility.search.meetings.post
 */
export interface ConnectivityEligibilitySearchMeetingsPostOVH {
  /** Eligibility test reference */
  eligibilityReference: string;
  /** Installation type, for fiber only */
  installationType?: ConnectivityEligibilityInstallationTypeEnumOVH;
  /** Offer plan code */
  planCode?: string;
  /** Choosen offer product code */
  productCode?: string;
  /** Site company name, please use the name and firstname for an individual */
  siteCompanyName?: string;
  /** Offer product type */
  type?: ConnectivityEligibilityOfferProductTypeEnumOVH;
  /** Offer product unbundling type */
  unbundlingType?: ConnectivityEligibilityOfferProductUnbundlingTypeEnumOVH;
}

/**
 * connectivity.eligibility.search.lines.post
 */
export interface ConnectivityEligibilitySearchLinesPostOVH {
  /** Owner name, at least the first three chars */
  ownerName?: string;
  /** Street code, that can be found using /connectivity/eligibility/search/streets method */
  streetCode: string;
  /** Street number, that can be found using /connectivity/eligibility/search/streetNumbers method */
  streetNumber: string;
}

/**
 * connectivity.eligibility.search.buildingsByLine.post
 */
export interface ConnectivityEligibilitySearchBuildingsByLinePostOVH {
  /** Line number */
  lineNumber: string;
  /** Line status */
  status: ConnectivityEligibilityLineStatusEnumOVH;
}

/**
 * connectivity.eligibility.search.buildings.post
 */
export interface ConnectivityEligibilitySearchBuildingsPostOVH {
  /** Hexacle is a French unique identifier of the address (you can get it with POST /connectivity/eligibility/search/streetNumbers/details) */
  hexacle?: string;
  /** Unique identifier of the street (you can get it with POST /connectivity/eligibility/search/streets) */
  streetCode?: string;
  /** Street number */
  streetNumber?: string;
}

/**
 * Building details
 */
export interface ConnectivityEligibilitySearchBuildingDetailsPostOVH {
  /** Building identifier, that can be found using /connectivity/eligibility/search/building* methods */
  building: string;
  /** If possible, force to use a particular provider repository */
  forceProvider?: string;
}

/**
 * Search cities
 */
export interface ConnectivityEligibilitySearchCitiesOVH {
  /** Zip code */
  zipCode: string;
}

/**
 * Details of a street number struct
 */
export interface ConnectivityEligibilityStreetNumberDetailsOVH {
  /**
   * Hexacle is a French unique identifier of the address
   * @nullable
   */
  readonly hexacle?: string | null;
  /** Street number */
  readonly number?: string;
}

/**
 * Details of a street
 */
export interface ConnectivityEligibilityStreetOVH {
  /** Identifier which refer to a street uniquely */
  readonly streetCode?: string;
  /** Street name */
  readonly streetName?: string;
}

/**
 * Section length of a copper line
 */
export interface ConnectivityEligibilitySectionLengthOVH {
  /** Diameter in millimeters of the copper line section */
  readonly diameter?: number;
  /** Lenght in meters of the copper line section */
  readonly length?: number;
}

/**
 * Portability type
 */
export type ConnectivityEligibilityPortabilityTypeEnumOVH = typeof ConnectivityEligibilityPortabilityTypeEnumOVH[keyof typeof ConnectivityEligibilityPortabilityTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityPortabilityTypeEnumOVH = {
  portin: 'portin',
  portinback: 'portinback',
  portout: 'portout',
  subsequent: 'subsequent',
  subsquentportin: 'subsquentportin',
} as const;

/**
 * Portability eligibility
 */
export interface ConnectivityEligibilityPortabilityEligibilityOVH {
  /** Is the portability eligible for this line ? */
  readonly eligible?: boolean;
  /** Reasons when not eligible, if any */
  readonly reasons?: readonly ConnectivityEligibilityMessageOVH[];
  /** Warnings to consider when eligible, if any */
  readonly underConditions?: readonly ConnectivityEligibilityMessageOVH[];
}

/**
 * Portability type
 * @nullable
 */
export type ConnectivityEligibilityPortabilityOVHType = ConnectivityEligibilityPortabilityTypeEnumOVH | null;

/**
 * Portability details of the line number
 */
export interface ConnectivityEligibilityPortabilityOVH {
  /** Portability eligibility */
  readonly eligibility?: ConnectivityEligibilityPortabilityEligibilityOVH;
  /**
   * Date of the end of quarantine, if any
   * @nullable
   */
  readonly quarantineEndDate?: string | null;
  /**
   * Portability type
   * @nullable
   */
  readonly type?: ConnectivityEligibilityPortabilityOVHType;
}

/**
 * Offer product unbundling type
 */
export type ConnectivityEligibilityOfferProductUnbundlingTypeEnumOVH = typeof ConnectivityEligibilityOfferProductUnbundlingTypeEnumOVH[keyof typeof ConnectivityEligibilityOfferProductUnbundlingTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityOfferProductUnbundlingTypeEnumOVH = {
  full: 'full',
  partial: 'partial',
} as const;

/**
 * Offer product type
 */
export type ConnectivityEligibilityOfferProductTypeEnumOVH = typeof ConnectivityEligibilityOfferProductTypeEnumOVH[keyof typeof ConnectivityEligibilityOfferProductTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityOfferProductTypeEnumOVH = {
  ADSL: 'ADSL',
  FTTE: 'FTTE',
  FTTH: 'FTTH',
  SDSL: 'SDSL',
  VDSL: 'VDSL',
} as const;

/**
 * Offer product provider
 */
export type ConnectivityEligibilityOfferProductProviderEnumOVH = typeof ConnectivityEligibilityOfferProductProviderEnumOVH[keyof typeof ConnectivityEligibilityOfferProductProviderEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityOfferProductProviderEnumOVH = {
  AI: 'AI',
  ALTERNATIVE: 'ALTERNATIVE',
  AX: 'AX',
  AXIONE: 'AXIONE',
  BOUYGTEL: 'BOUYGTEL',
  BOUYGUES: 'BOUYGUES',
  COVAGE: 'COVAGE',
  FI: 'FI',
  KOSC: 'KOSC',
  OR: 'OR',
  ORANGE: 'ORANGE',
  OS: 'OS',
  REFERENCE: 'REFERENCE',
  SFR: 'SFR',
  TF: 'TF',
} as const;

/**
 * Offer product unbundling type
 * @nullable
 */
export type ConnectivityEligibilityOfferProductOVHUnbundlingType = ConnectivityEligibilityOfferProductUnbundlingTypeEnumOVH | null;

/**
 * Offer product
 */
export interface ConnectivityEligibilityOfferProductOVH {
  /** Product code, an unique identifier for the product */
  readonly code?: string;
  /** Download rate in Mb */
  readonly downloadRate?: number;
  /** GRT (Guaranteed Restoration Time) available list */
  readonly grt?: readonly string[];
  /** Is the rates guaranteed ? */
  readonly guaranteed?: boolean;
  /** Name */
  readonly name?: string;
  /** Offer product provider */
  readonly operator?: ConnectivityEligibilityOfferProductProviderEnumOVH;
  /**
   * Number of copper pairs required, for copper only
   * @nullable
   */
  readonly pairs?: number | null;
  /** Offer product provider */
  readonly provider?: ConnectivityEligibilityOfferProductProviderEnumOVH;
  /** Offer product type */
  readonly type?: ConnectivityEligibilityOfferProductTypeEnumOVH;
  /**
   * Offer product unbundling type
   * @nullable
   */
  readonly unbundlingType?: ConnectivityEligibilityOfferProductOVHUnbundlingType;
  /** Upload rate in Mb */
  readonly uploadRate?: number;
}

/**
 * Offer eligibility
 */
export interface ConnectivityEligibilityOfferEligibilityOVH {
  /** Activation type list, for copper only */
  readonly activationTypes?: readonly ConnectivityEligibilityActivationTypeEnumOVH[];
  /** Is the endpoint eligible to this offer ? */
  readonly eligible?: boolean;
  /**
   * Estimated download rate, for copper and non guaranteed offers only
   * @nullable
   */
  readonly estimatedDownloadRate?: number | null;
  /**
   * Estimated upload rate, for copper and non guaranteed offers only
   * @nullable
   */
  readonly estimatedUploadRate?: number | null;
  /**
   * Is eligible to multiple Optical Termination Points (OTP) ? For fiber only
   * @nullable
   */
  readonly multiOtp?: boolean | null;
  /** Reasons when not eligible, if any */
  readonly reasons?: readonly ConnectivityEligibilityMessageOVH[];
  /** Warnings to consider when eligible, if any */
  readonly underConditions?: readonly ConnectivityEligibilityMessageOVH[];
}

/**
 * Offer
 */
export interface ConnectivityEligibilityOfferOVH {
  /** Offer eligibility */
  readonly eligibility?: ConnectivityEligibilityOfferEligibilityOVH;
  /** Offer product */
  readonly product?: ConnectivityEligibilityOfferProductOVH;
}

/**
 * Message codes
 */
export type ConnectivityEligibilityMessageCodeEnumOVH = typeof ConnectivityEligibilityMessageCodeEnumOVH[keyof typeof ConnectivityEligibilityMessageCodeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityMessageCodeEnumOVH = {
  NUMBER_2006: '2006',
  NUMBER_2011: '2011',
  NUMBER_2102: '2102',
  NUMBER_2103: '2103',
  NUMBER_2104: '2104',
  NUMBER_2105: '2105',
  NUMBER_3009: '3009',
  NUMBER_3011: '3011',
  NUMBER_3012: '3012',
  NUMBER_3013: '3013',
  NUMBER_3014: '3014',
  NUMBER_3031: '3031',
  NUMBER_3040: '3040',
  NUMBER_3041: '3041',
  NUMBER_3043: '3043',
  NUMBER_3044: '3044',
  NUMBER_3045: '3045',
  NUMBER_3046: '3046',
  NUMBER_3047: '3047',
  NUMBER_3048: '3048',
  NUMBER_3049: '3049',
  ATTENUATION_LIMIT: 'ATTENUATION_LIMIT',
  COMPATIBILITY_CHECK: 'COMPATIBILITY_CHECK',
  COPPER_NOT_AVAILABLE: 'COPPER_NOT_AVAILABLE',
  COPPER_NOT_YET_AVAILABLE: 'COPPER_NOT_YET_AVAILABLE',
  DELAY_30: 'DELAY_30',
  DELAY_7: 'DELAY_7',
  EXTERNAL_WS_UNREACHABLE: 'EXTERNAL_WS_UNREACHABLE',
  FIBER_NOT_AVAILABLE: 'FIBER_NOT_AVAILABLE',
  FIBER_NOT_DEPLOYED_IN_BUILDING: 'FIBER_NOT_DEPLOYED_IN_BUILDING',
  FIBER_NOT_YET_AVAILABLE: 'FIBER_NOT_YET_AVAILABLE',
  FIBER_NOT_YET_DEPLOYED: 'FIBER_NOT_YET_DEPLOYED',
  INCOMPATIBLE_LOCAL_LOOP: 'INCOMPATIBLE_LOCAL_LOOP',
  NETWORK_SATURATED: 'NETWORK_SATURATED',
  OTP_NOT_CONNECTABLE: 'OTP_NOT_CONNECTABLE',
  OTP_NOT_MARKETABLE: 'OTP_NOT_MARKETABLE',
  PAIRS_SATURATION: 'PAIRS_SATURATION',
  PRODUCT_NOT_AVAILABLE: 'PRODUCT_NOT_AVAILABLE',
  PRODUCT_NOT_YET_AVAILABLE: 'PRODUCT_NOT_YET_AVAILABLE',
  TOO_MUCH_ATTENUATION: 'TOO_MUCH_ATTENUATION',
  UNCERTAIN_DATA: 'UNCERTAIN_DATA',
} as const;

/**
 * Message
 */
export interface ConnectivityEligibilityMessageOVH {
  /**
   * Availability date of the offer (if code of non eligibility is COPPER_NOT_YET_AVAILABLE, FIBER_NOT_YET_AVAILABLE or PRODUCT_NOT_YET_AVAILABLE)
   * @nullable
   */
  readonly availabilityDate?: string | null;
  /** Message codes */
  readonly code?: ConnectivityEligibilityMessageCodeEnumOVH;
  /** Message */
  readonly message?: string;
}

/**
 * Represents a time slot for a meeting
 */
export interface ConnectivityEligibilityMeetingSlotOVH {
  /** End date */
  readonly endDate?: string;
  /**
   * Represent a meeting id for a fiber collect operator
   * @nullable
   */
  readonly slotId?: string | null;
  /** Start date */
  readonly startDate?: string;
  /**
   * An opaque string that represents an intervention unit
   * @nullable
   */
  readonly uiCode?: string | null;
}

/**
 * Represents meeting booking options
 */
export interface ConnectivityEligibilityMeetingCapacitiesOVH {
  /** Whether or not it is possible to book a meeting online */
  readonly eRdv?: boolean;
  /** Whether or not it is possible to be be called by phone to book a meeting */
  readonly phoneCall?: boolean;
}

/**
 * List of available meeting time slots
 */
export interface ConnectivityEligibilityMeetingsOVH {
  /** Whether or not it is possible to book a fake meeting */
  readonly canBookFakeMeeting?: boolean;
  /** Represents meeting booking options */
  readonly capacities?: ConnectivityEligibilityMeetingCapacitiesOVH;
  /** A time slot */
  readonly meetingSlots?: readonly ConnectivityEligibilityMeetingSlotOVH[];
}

/**
 * Line status
 */
export type ConnectivityEligibilityLineStatusEnumOVH = typeof ConnectivityEligibilityLineStatusEnumOVH[keyof typeof ConnectivityEligibilityLineStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityLineStatusEnumOVH = {
  active: 'active',
  inactive: 'inactive',
} as const;

/**
 * Copper line details
 */
export interface ConnectivityEligibilityLineOVH {
  /** Address */
  readonly address?: ConnectivityEligibilityAddressOVH;
  /** Copper information */
  readonly copperInfo?: ConnectivityEligibilityCopperInfoOVH;
  /** Line number */
  readonly lineNumber?: string;
}

/**
 * Installation type, for fiber only
 */
export type ConnectivityEligibilityInstallationTypeEnumOVH = typeof ConnectivityEligibilityInstallationTypeEnumOVH[keyof typeof ConnectivityEligibilityInstallationTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityInstallationTypeEnumOVH = {
  activate: 'activate',
  activate_undefined: 'activate_undefined',
  create: 'create',
  multiOtp: 'multiOtp',
} as const;

/**
 * Fiber information
 */
export interface ConnectivityEligibilityFiberInfoOVH {
  /**
   * Building name
   * @nullable
   */
  readonly buildingName?: string | null;
  /** Building unique identifier */
  readonly buildingReference?: string;
  /** Building type */
  readonly buildingType?: ConnectivityEligibilityBuildingTypeEnumOVH;
  /**
   * NRO ("N≈ìud de raccordement optique" in french) is an identifier of the building where is the Optical Distribution Frame (ODF) of the fiber
   * @nullable
   */
  readonly nro?: string | null;
  /** Operator code */
  readonly operatorCode?: string;
  /** Operator name */
  readonly operatorName?: string;
}

/**
 * Endpoint reference type
 */
export type ConnectivityEligibilityEndpointReferenceTypeEnumOVH = typeof ConnectivityEligibilityEndpointReferenceTypeEnumOVH[keyof typeof ConnectivityEligibilityEndpointReferenceTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityEndpointReferenceTypeEnumOVH = {
  building: 'building',
  lineNumber: 'lineNumber',
  otp: 'otp',
} as const;

/**
 * Portability details of the line number
 * @nullable
 */
export type ConnectivityEligibilityEndpointOVHPortability = ConnectivityEligibilityPortabilityOVH | null;

/**
 * Fiber information
 * @nullable
 */
export type ConnectivityEligibilityEndpointOVHFiberInfo = ConnectivityEligibilityFiberInfoOVH | null;

/**
 * Copper information
 * @nullable
 */
export type ConnectivityEligibilityEndpointOVHCopperInfo = ConnectivityEligibilityCopperInfoOVH | null;

/**
 * Address
 * @nullable
 */
export type ConnectivityEligibilityEndpointOVHAddress = ConnectivityEligibilityAddressOVH | null;

/**
 * Endpoint information
 */
export interface ConnectivityEligibilityEndpointOVH {
  /**
   * Address
   * @nullable
   */
  readonly address?: ConnectivityEligibilityEndpointOVHAddress;
  /**
   * Copper information
   * @nullable
   */
  readonly copperInfo?: ConnectivityEligibilityEndpointOVHCopperInfo;
  /**
   * Fiber information
   * @nullable
   */
  readonly fiberInfo?: ConnectivityEligibilityEndpointOVHFiberInfo;
  /**
   * Portability details of the line number
   * @nullable
   */
  readonly portability?: ConnectivityEligibilityEndpointOVHPortability;
  /** Reference of the endpoint */
  readonly reference?: string;
  /** Endpoint reference type */
  readonly referenceType?: ConnectivityEligibilityEndpointReferenceTypeEnumOVH;
}

/**
 * Eligibility test results
 */
export interface ConnectivityEligibilityEligibilityTestOVH {
  /** Eligibility unique reference */
  readonly eligibilityReference?: string;
  /** Endpoint information */
  readonly endpoint?: ConnectivityEligibilityEndpointOVH;
  /** Offers information */
  readonly offers?: readonly ConnectivityEligibilityOfferOVH[];
}

/**
 * Copper information
 */
export interface ConnectivityEligibilityCopperInfoOVH {
  /**
   * Number of available pairs. This is given only for an eligibility test.
   * @nullable
   */
  readonly availablePairs?: number | null;
  /**
   * Number of maximun available pairs using desaturation. This is given only for an eligibility test.
   * @nullable
   */
  readonly maxAvailablePairs?: number | null;
  /**
   * NRA ("N≈ìud de raccordement abonn√©" in french) is an identifier of the building where is the Main Distribution Frames for the copper line. This is given only for an eligibility test.
   * @nullable
   */
  readonly nra?: string | null;
  /** Sections lengths of the copper line. This is given only for an eligibility test. */
  readonly sectionsLengths?: readonly ConnectivityEligibilitySectionLengthOVH[];
  /** Line status */
  readonly status?: ConnectivityEligibilityLineStatusEnumOVH;
  /**
   * Is the line under construction ? This is given only for an eligibility test.
   * @nullable
   */
  readonly underConstruction?: boolean | null;
  /** Is the number unlisted ? ("sur liste rouge" in french) */
  readonly unlistedNumber?: boolean;
}

/**
 * Represent a city
 */
export interface ConnectivityEligibilityCityOVH {
  /** Name of the city */
  readonly city?: string;
  /** INSEE code of the city */
  readonly inseeCode?: string;
  /**
   * Locality (subset of a city)
   * @nullable
   */
  readonly locality?: string | null;
  /** Zip code of the city */
  readonly zipCode?: string;
}

/**
 * Building type
 */
export type ConnectivityEligibilityBuildingTypeEnumOVH = typeof ConnectivityEligibilityBuildingTypeEnumOVH[keyof typeof ConnectivityEligibilityBuildingTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityBuildingTypeEnumOVH = {
  BUILDING: 'BUILDING',
  HOUSE: 'HOUSE',
} as const;

/**
 * Stair details of a Building
 */
export interface ConnectivityEligibilityBuildingStairOVH {
  /** List of floor indentifier, "_NA_" if no identifier is available */
  readonly floors?: readonly string[];
  /** Stair identifier, "_NA_" if no identifier is available */
  readonly stair?: string;
}

/**
 * Details of a Building
 */
export interface ConnectivityEligibilityBuildingOVH {
  /** Building name */
  readonly name?: string;
  /**
   * Building NRO (Optical main distribution frame)
   * @nullable
   */
  readonly nro?: string | null;
  /** Identifier which refer to a building uniquely */
  readonly reference?: string;
  /**
   * Stairs for this building
   * @nullable
   */
  readonly stairs?: readonly ConnectivityEligibilityBuildingStairOVH[] | null;
  /** Building type */
  readonly type?: ConnectivityEligibilityBuildingTypeEnumOVH;
}

/**
 * Address
 */
export interface ConnectivityEligibilityAddressOVH {
  /**
   * Name of the building, if any
   * @nullable
   */
  readonly building?: string | null;
  /** City name */
  readonly city?: string;
  /**
   * Identifier of the door, if any
   * @nullable
   */
  readonly door?: string | null;
  /**
   * Identifier of the floor, if any
   * @nullable
   */
  readonly floor?: string | null;
  /**
   * Name of the housing complex, if any
   * @nullable
   */
  readonly housingComplex?: string | null;
  /** INSEE code */
  readonly inseeCode?: string;
  /**
   * Owner name, this information can be restricted
   * @nullable
   */
  readonly ownerName?: string | null;
  /**
   * Identifier of the stair, if any
   * @nullable
   */
  readonly stairs?: string | null;
  /**
   * Street code, an unique identifier of the street, hidden for unlisted number
   * @nullable
   */
  readonly streetCode?: string | null;
  /**
   * Street name, hidden for unlisted number
   * @nullable
   */
  readonly streetName?: string | null;
  /**
   * Street number, usually a number and an indication if applicable (B for bis, T for ter, etc...) and hidden for unlisted number
   * @nullable
   */
  readonly streetNumber?: string | null;
  /** ZIP code */
  readonly zipCode?: string;
}

/**
 * Activation type, for copper only
 */
export type ConnectivityEligibilityActivationTypeEnumOVH = typeof ConnectivityEligibilityActivationTypeEnumOVH[keyof typeof ConnectivityEligibilityActivationTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityEligibilityActivationTypeEnumOVH = {
  activate: 'activate',
  create: 'create',
  createNeighbour: 'createNeighbour',
} as const;

/**
 * Operator
 */
export type ConnectivityOperatorEnumOVH = typeof ConnectivityOperatorEnumOVH[keyof typeof ConnectivityOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectivityOperatorEnumOVH = {
  AXIONE: 'AXIONE',
  BOUYGUES: 'BOUYGUES',
  KOSC: 'KOSC',
  ORANGE: 'ORANGE',
  OVH: 'OVH',
  SFR: 'SFR',
} as const;


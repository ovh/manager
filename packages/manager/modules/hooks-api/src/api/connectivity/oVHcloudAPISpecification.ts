/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ConnectivityEligibilityEligibilityTestOVH,
  ConnectivityEligibilitySearchBuildingDetailsPostOVH,
  ConnectivityEligibilitySearchBuildingsByLinePostOVH,
  ConnectivityEligibilitySearchBuildingsPostOVH,
  ConnectivityEligibilitySearchCitiesOVH,
  ConnectivityEligibilitySearchLinesPostOVH,
  ConnectivityEligibilitySearchMeetingsPostOVH,
  ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH,
  ConnectivityEligibilitySearchStreetNumbersPostOVH,
  ConnectivityEligibilitySearchStreetsPostOVH,
  ConnectivityEligibilityTestAddressPartnersPostOVH,
  ConnectivityEligibilityTestAddressPostOVH,
  ConnectivityEligibilityTestBuildingPostOVH,
  ConnectivityEligibilityTestLinePartnersPostOVH,
  ConnectivityEligibilityTestLinePostOVH,
  ConnectivityEligibilityTestOtpPostOVH,
  ConnectivityMaintenanceWorkPlannedOVH,
  ConnectivityMonitoringGenericIncidentOVH,
  GetEligibilityParams,
  GetGenericIncidentParams,
  GetPartnersGenericIncidentParams,
  GetPlannedWorkParams,
  XdslAsyncTaskArrayConnectivityEligibilityBuildingOVH,
  XdslAsyncTaskArrayConnectivityEligibilityCityOVH,
  XdslAsyncTaskArrayConnectivityEligibilityLineOVH,
  XdslAsyncTaskArrayConnectivityEligibilityStreetNumberDetailsOVH,
  XdslAsyncTaskArrayConnectivityEligibilityStreetOVH,
  XdslAsyncTaskArrayStringOVH,
  XdslAsyncTaskConnectivityEligibilityBuildingOVH,
  XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH,
  XdslAsyncTaskConnectivityEligibilityMeetingsOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get the details for a building
 */
export const getBuildingDetails = (
    connectivityEligibilitySearchBuildingDetailsPostOVH: ConnectivityEligibilitySearchBuildingDetailsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityBuildingOVH>(
      {url: `/connectivity/eligibility/search/buildingDetails`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchBuildingDetailsPostOVH, signal
    },
      options);
    }
  


export const getGetBuildingDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getBuildingDetails>>, TError,{data: ConnectivityEligibilitySearchBuildingDetailsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getBuildingDetails>>, TError,{data: ConnectivityEligibilitySearchBuildingDetailsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getBuildingDetails>>, {data: ConnectivityEligibilitySearchBuildingDetailsPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getBuildingDetails(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetBuildingDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof getBuildingDetails>>>
    export type GetBuildingDetailsMutationBody = ConnectivityEligibilitySearchBuildingDetailsPostOVH
    export type GetBuildingDetailsMutationError = unknown

    /**
 * @summary Get the details for a building
 */
export const useGetBuildingDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getBuildingDetails>>, TError,{data: ConnectivityEligibilitySearchBuildingDetailsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getBuildingDetails>>,
        TError,
        {data: ConnectivityEligibilitySearchBuildingDetailsPostOVH},
        TContext
      > => {

      const mutationOptions = getGetBuildingDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all buildings for a specific address (require at least a couple streetCode/streetNumber or an hexacle)
 */
export const getBuildings = (
    connectivityEligibilitySearchBuildingsPostOVH: ConnectivityEligibilitySearchBuildingsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayConnectivityEligibilityBuildingOVH>(
      {url: `/connectivity/eligibility/search/buildings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchBuildingsPostOVH, signal
    },
      options);
    }
  


export const getGetBuildingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getBuildings>>, TError,{data: ConnectivityEligibilitySearchBuildingsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getBuildings>>, TError,{data: ConnectivityEligibilitySearchBuildingsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getBuildings>>, {data: ConnectivityEligibilitySearchBuildingsPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getBuildings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetBuildingsMutationResult = NonNullable<Awaited<ReturnType<typeof getBuildings>>>
    export type GetBuildingsMutationBody = ConnectivityEligibilitySearchBuildingsPostOVH
    export type GetBuildingsMutationError = unknown

    /**
 * @summary Get all buildings for a specific address (require at least a couple streetCode/streetNumber or an hexacle)
 */
export const useGetBuildings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getBuildings>>, TError,{data: ConnectivityEligibilitySearchBuildingsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getBuildings>>,
        TError,
        {data: ConnectivityEligibilitySearchBuildingsPostOVH},
        TContext
      > => {

      const mutationOptions = getGetBuildingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get building references from a given line number
 */
export const getBuildingsByLine = (
    connectivityEligibilitySearchBuildingsByLinePostOVH: ConnectivityEligibilitySearchBuildingsByLinePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayConnectivityEligibilityBuildingOVH>(
      {url: `/connectivity/eligibility/search/buildingsByLine`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchBuildingsByLinePostOVH, signal
    },
      options);
    }
  


export const getGetBuildingsByLineMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getBuildingsByLine>>, TError,{data: ConnectivityEligibilitySearchBuildingsByLinePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getBuildingsByLine>>, TError,{data: ConnectivityEligibilitySearchBuildingsByLinePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getBuildingsByLine>>, {data: ConnectivityEligibilitySearchBuildingsByLinePostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getBuildingsByLine(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetBuildingsByLineMutationResult = NonNullable<Awaited<ReturnType<typeof getBuildingsByLine>>>
    export type GetBuildingsByLineMutationBody = ConnectivityEligibilitySearchBuildingsByLinePostOVH
    export type GetBuildingsByLineMutationError = unknown

    /**
 * @summary Get building references from a given line number
 */
export const useGetBuildingsByLine = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getBuildingsByLine>>, TError,{data: ConnectivityEligibilitySearchBuildingsByLinePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getBuildingsByLine>>,
        TError,
        {data: ConnectivityEligibilitySearchBuildingsByLinePostOVH},
        TContext
      > => {

      const mutationOptions = getGetBuildingsByLineMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all localities linked to a zip code
 */
export const getCities = (
    connectivityEligibilitySearchCitiesOVH: ConnectivityEligibilitySearchCitiesOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayConnectivityEligibilityCityOVH>(
      {url: `/connectivity/eligibility/search/cities`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchCitiesOVH, signal
    },
      options);
    }
  


export const getGetCitiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCities>>, TError,{data: ConnectivityEligibilitySearchCitiesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getCities>>, TError,{data: ConnectivityEligibilitySearchCitiesOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getCities>>, {data: ConnectivityEligibilitySearchCitiesOVH}> = (props) => {
          const {data} = props ?? {};

          return  getCities(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetCitiesMutationResult = NonNullable<Awaited<ReturnType<typeof getCities>>>
    export type GetCitiesMutationBody = ConnectivityEligibilitySearchCitiesOVH
    export type GetCitiesMutationError = unknown

    /**
 * @summary Get all localities linked to a zip code
 */
export const useGetCities = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCities>>, TError,{data: ConnectivityEligibilitySearchCitiesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getCities>>,
        TError,
        {data: ConnectivityEligibilitySearchCitiesOVH},
        TContext
      > => {

      const mutationOptions = getGetCitiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Search for active and inactive lines at an address
 */
export const getLines = (
    connectivityEligibilitySearchLinesPostOVH: ConnectivityEligibilitySearchLinesPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayConnectivityEligibilityLineOVH>(
      {url: `/connectivity/eligibility/search/lines`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchLinesPostOVH, signal
    },
      options);
    }
  


export const getGetLinesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getLines>>, TError,{data: ConnectivityEligibilitySearchLinesPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getLines>>, TError,{data: ConnectivityEligibilitySearchLinesPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getLines>>, {data: ConnectivityEligibilitySearchLinesPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getLines(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetLinesMutationResult = NonNullable<Awaited<ReturnType<typeof getLines>>>
    export type GetLinesMutationBody = ConnectivityEligibilitySearchLinesPostOVH
    export type GetLinesMutationError = unknown

    /**
 * @summary Search for active and inactive lines at an address
 */
export const useGetLines = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getLines>>, TError,{data: ConnectivityEligibilitySearchLinesPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getLines>>,
        TError,
        {data: ConnectivityEligibilitySearchLinesPostOVH},
        TContext
      > => {

      const mutationOptions = getGetLinesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Search for available copper line creation or fiber installation meeting time slots
 */
export const getMeetings = (
    connectivityEligibilitySearchMeetingsPostOVH: ConnectivityEligibilitySearchMeetingsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityMeetingsOVH>(
      {url: `/connectivity/eligibility/search/meetings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchMeetingsPostOVH, signal
    },
      options);
    }
  


export const getGetMeetingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getMeetings>>, TError,{data: ConnectivityEligibilitySearchMeetingsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getMeetings>>, TError,{data: ConnectivityEligibilitySearchMeetingsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getMeetings>>, {data: ConnectivityEligibilitySearchMeetingsPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getMeetings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetMeetingsMutationResult = NonNullable<Awaited<ReturnType<typeof getMeetings>>>
    export type GetMeetingsMutationBody = ConnectivityEligibilitySearchMeetingsPostOVH
    export type GetMeetingsMutationError = unknown

    /**
 * @summary Search for available copper line creation or fiber installation meeting time slots
 */
export const useGetMeetings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getMeetings>>, TError,{data: ConnectivityEligibilitySearchMeetingsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getMeetings>>,
        TError,
        {data: ConnectivityEligibilitySearchMeetingsPostOVH},
        TContext
      > => {

      const mutationOptions = getGetMeetingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the available street numbers for a given street code (you can get the unique identifier of a street using the method POST /connectivity/eligibility/search/streets)
 */
export const getStreetNumbers = (
    connectivityEligibilitySearchStreetNumbersPostOVH: ConnectivityEligibilitySearchStreetNumbersPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayStringOVH>(
      {url: `/connectivity/eligibility/search/streetNumbers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchStreetNumbersPostOVH, signal
    },
      options);
    }
  


export const getGetStreetNumbersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStreetNumbers>>, TError,{data: ConnectivityEligibilitySearchStreetNumbersPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getStreetNumbers>>, TError,{data: ConnectivityEligibilitySearchStreetNumbersPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getStreetNumbers>>, {data: ConnectivityEligibilitySearchStreetNumbersPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getStreetNumbers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetStreetNumbersMutationResult = NonNullable<Awaited<ReturnType<typeof getStreetNumbers>>>
    export type GetStreetNumbersMutationBody = ConnectivityEligibilitySearchStreetNumbersPostOVH
    export type GetStreetNumbersMutationError = unknown

    /**
 * @summary Get the available street numbers for a given street code (you can get the unique identifier of a street using the method POST /connectivity/eligibility/search/streets)
 */
export const useGetStreetNumbers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStreetNumbers>>, TError,{data: ConnectivityEligibilitySearchStreetNumbersPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getStreetNumbers>>,
        TError,
        {data: ConnectivityEligibilitySearchStreetNumbersPostOVH},
        TContext
      > => {

      const mutationOptions = getGetStreetNumbersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the available street numbers and their details for a given street code (you can get the unique identifier of a street you can get using the method POST /connectivity/eligibility/search/streets)
 */
export const getStreetNumbersDetails = (
    connectivityEligibilitySearchStreetNumbersDetailsPostOVH: ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayConnectivityEligibilityStreetNumberDetailsOVH>(
      {url: `/connectivity/eligibility/search/streetNumbers/details`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchStreetNumbersDetailsPostOVH, signal
    },
      options);
    }
  


export const getGetStreetNumbersDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStreetNumbersDetails>>, TError,{data: ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getStreetNumbersDetails>>, TError,{data: ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getStreetNumbersDetails>>, {data: ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getStreetNumbersDetails(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetStreetNumbersDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof getStreetNumbersDetails>>>
    export type GetStreetNumbersDetailsMutationBody = ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH
    export type GetStreetNumbersDetailsMutationError = unknown

    /**
 * @summary Get the available street numbers and their details for a given street code (you can get the unique identifier of a street you can get using the method POST /connectivity/eligibility/search/streets)
 */
export const useGetStreetNumbersDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStreetNumbersDetails>>, TError,{data: ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getStreetNumbersDetails>>,
        TError,
        {data: ConnectivityEligibilitySearchStreetNumbersDetailsPostOVH},
        TContext
      > => {

      const mutationOptions = getGetStreetNumbersDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all street linked to a locality
 */
export const getStreets = (
    connectivityEligibilitySearchStreetsPostOVH: ConnectivityEligibilitySearchStreetsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskArrayConnectivityEligibilityStreetOVH>(
      {url: `/connectivity/eligibility/search/streets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilitySearchStreetsPostOVH, signal
    },
      options);
    }
  


export const getGetStreetsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStreets>>, TError,{data: ConnectivityEligibilitySearchStreetsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof getStreets>>, TError,{data: ConnectivityEligibilitySearchStreetsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getStreets>>, {data: ConnectivityEligibilitySearchStreetsPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  getStreets(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetStreetsMutationResult = NonNullable<Awaited<ReturnType<typeof getStreets>>>
    export type GetStreetsMutationBody = ConnectivityEligibilitySearchStreetsPostOVH
    export type GetStreetsMutationError = unknown

    /**
 * @summary Get all street linked to a locality
 */
export const useGetStreets = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getStreets>>, TError,{data: ConnectivityEligibilitySearchStreetsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof getStreets>>,
        TError,
        {data: ConnectivityEligibilitySearchStreetsPostOVH},
        TContext
      > => {

      const mutationOptions = getGetStreetsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an eligibility by its reference
 */
export const getEligibility = (
    params: GetEligibilityParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEligibilityQueryKey = (params: GetEligibilityParams,) => {
    return [`/connectivity/eligibility/test`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEligibilityQueryOptions = <TData = Awaited<ReturnType<typeof getEligibility>>, TError = unknown>(params: GetEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEligibilityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEligibility>>> = ({ signal }) => getEligibility(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEligibility>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEligibilityQueryResult = NonNullable<Awaited<ReturnType<typeof getEligibility>>>
export type GetEligibilityQueryError = unknown


export function useGetEligibility<TData = Awaited<ReturnType<typeof getEligibility>>, TError = unknown>(
 params: GetEligibilityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEligibility>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEligibility>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEligibility<TData = Awaited<ReturnType<typeof getEligibility>>, TError = unknown>(
 params: GetEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEligibility>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEligibility>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEligibility<TData = Awaited<ReturnType<typeof getEligibility>>, TError = unknown>(
 params: GetEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an eligibility by its reference
 */

export function useGetEligibility<TData = Awaited<ReturnType<typeof getEligibility>>, TError = unknown>(
 params: GetEligibilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEligibility>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEligibilityQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Do an eligibility for an address, if no line exist
 */
export const testAddressEligibility = (
    connectivityEligibilityTestAddressPostOVH: ConnectivityEligibilityTestAddressPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test/address`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilityTestAddressPostOVH, signal
    },
      options);
    }
  


export const getTestAddressEligibilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testAddressEligibility>>, TError,{data: ConnectivityEligibilityTestAddressPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof testAddressEligibility>>, TError,{data: ConnectivityEligibilityTestAddressPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testAddressEligibility>>, {data: ConnectivityEligibilityTestAddressPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  testAddressEligibility(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestAddressEligibilityMutationResult = NonNullable<Awaited<ReturnType<typeof testAddressEligibility>>>
    export type TestAddressEligibilityMutationBody = ConnectivityEligibilityTestAddressPostOVH
    export type TestAddressEligibilityMutationError = unknown

    /**
 * @summary Do an eligibility for an address, if no line exist
 */
export const useTestAddressEligibility = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testAddressEligibility>>, TError,{data: ConnectivityEligibilityTestAddressPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof testAddressEligibility>>,
        TError,
        {data: ConnectivityEligibilityTestAddressPostOVH},
        TContext
      > => {

      const mutationOptions = getTestAddressEligibilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Do an eligibility for an address, if no line exist. Partners only.
 */
export const testPartnersAddressEligibility = (
    connectivityEligibilityTestAddressPartnersPostOVH: ConnectivityEligibilityTestAddressPartnersPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test/address/partners`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilityTestAddressPartnersPostOVH, signal
    },
      options);
    }
  


export const getTestPartnersAddressEligibilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testPartnersAddressEligibility>>, TError,{data: ConnectivityEligibilityTestAddressPartnersPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof testPartnersAddressEligibility>>, TError,{data: ConnectivityEligibilityTestAddressPartnersPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testPartnersAddressEligibility>>, {data: ConnectivityEligibilityTestAddressPartnersPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  testPartnersAddressEligibility(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestPartnersAddressEligibilityMutationResult = NonNullable<Awaited<ReturnType<typeof testPartnersAddressEligibility>>>
    export type TestPartnersAddressEligibilityMutationBody = ConnectivityEligibilityTestAddressPartnersPostOVH
    export type TestPartnersAddressEligibilityMutationError = unknown

    /**
 * @summary Do an eligibility for an address, if no line exist. Partners only.
 */
export const useTestPartnersAddressEligibility = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testPartnersAddressEligibility>>, TError,{data: ConnectivityEligibilityTestAddressPartnersPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof testPartnersAddressEligibility>>,
        TError,
        {data: ConnectivityEligibilityTestAddressPartnersPostOVH},
        TContext
      > => {

      const mutationOptions = getTestPartnersAddressEligibilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Do an eligibility test on a building, for fiber only
 */
export const testBuildingEligibility = (
    connectivityEligibilityTestBuildingPostOVH: ConnectivityEligibilityTestBuildingPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test/building`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilityTestBuildingPostOVH, signal
    },
      options);
    }
  


export const getTestBuildingEligibilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testBuildingEligibility>>, TError,{data: ConnectivityEligibilityTestBuildingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof testBuildingEligibility>>, TError,{data: ConnectivityEligibilityTestBuildingPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testBuildingEligibility>>, {data: ConnectivityEligibilityTestBuildingPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  testBuildingEligibility(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestBuildingEligibilityMutationResult = NonNullable<Awaited<ReturnType<typeof testBuildingEligibility>>>
    export type TestBuildingEligibilityMutationBody = ConnectivityEligibilityTestBuildingPostOVH
    export type TestBuildingEligibilityMutationError = unknown

    /**
 * @summary Do an eligibility test on a building, for fiber only
 */
export const useTestBuildingEligibility = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testBuildingEligibility>>, TError,{data: ConnectivityEligibilityTestBuildingPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof testBuildingEligibility>>,
        TError,
        {data: ConnectivityEligibilityTestBuildingPostOVH},
        TContext
      > => {

      const mutationOptions = getTestBuildingEligibilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Do an eligibility test on a line number, for copper only
 */
export const testLineEligibility = (
    connectivityEligibilityTestLinePostOVH: ConnectivityEligibilityTestLinePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test/line`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilityTestLinePostOVH, signal
    },
      options);
    }
  


export const getTestLineEligibilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testLineEligibility>>, TError,{data: ConnectivityEligibilityTestLinePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof testLineEligibility>>, TError,{data: ConnectivityEligibilityTestLinePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testLineEligibility>>, {data: ConnectivityEligibilityTestLinePostOVH}> = (props) => {
          const {data} = props ?? {};

          return  testLineEligibility(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestLineEligibilityMutationResult = NonNullable<Awaited<ReturnType<typeof testLineEligibility>>>
    export type TestLineEligibilityMutationBody = ConnectivityEligibilityTestLinePostOVH
    export type TestLineEligibilityMutationError = unknown

    /**
 * @summary Do an eligibility test on a line number, for copper only
 */
export const useTestLineEligibility = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testLineEligibility>>, TError,{data: ConnectivityEligibilityTestLinePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof testLineEligibility>>,
        TError,
        {data: ConnectivityEligibilityTestLinePostOVH},
        TContext
      > => {

      const mutationOptions = getTestLineEligibilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Do an eligibility test on a line number, for copper only. Partners only.
 */
export const testPartnersLineEligibility = (
    connectivityEligibilityTestLinePartnersPostOVH: ConnectivityEligibilityTestLinePartnersPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test/line/partners`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilityTestLinePartnersPostOVH, signal
    },
      options);
    }
  


export const getTestPartnersLineEligibilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testPartnersLineEligibility>>, TError,{data: ConnectivityEligibilityTestLinePartnersPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof testPartnersLineEligibility>>, TError,{data: ConnectivityEligibilityTestLinePartnersPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testPartnersLineEligibility>>, {data: ConnectivityEligibilityTestLinePartnersPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  testPartnersLineEligibility(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestPartnersLineEligibilityMutationResult = NonNullable<Awaited<ReturnType<typeof testPartnersLineEligibility>>>
    export type TestPartnersLineEligibilityMutationBody = ConnectivityEligibilityTestLinePartnersPostOVH
    export type TestPartnersLineEligibilityMutationError = unknown

    /**
 * @summary Do an eligibility test on a line number, for copper only. Partners only.
 */
export const useTestPartnersLineEligibility = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testPartnersLineEligibility>>, TError,{data: ConnectivityEligibilityTestLinePartnersPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof testPartnersLineEligibility>>,
        TError,
        {data: ConnectivityEligibilityTestLinePartnersPostOVH},
        TContext
      > => {

      const mutationOptions = getTestPartnersLineEligibilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Do an eligibility test on an OTP (Optical Termination Panel), for fiber only
 */
export const testOTPEligibility = (
    connectivityEligibilityTestOtpPostOVH: ConnectivityEligibilityTestOtpPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslAsyncTaskConnectivityEligibilityEligibilityTestOVH>(
      {url: `/connectivity/eligibility/test/otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: connectivityEligibilityTestOtpPostOVH, signal
    },
      options);
    }
  


export const getTestOTPEligibilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testOTPEligibility>>, TError,{data: ConnectivityEligibilityTestOtpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof testOTPEligibility>>, TError,{data: ConnectivityEligibilityTestOtpPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testOTPEligibility>>, {data: ConnectivityEligibilityTestOtpPostOVH}> = (props) => {
          const {data} = props ?? {};

          return  testOTPEligibility(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestOTPEligibilityMutationResult = NonNullable<Awaited<ReturnType<typeof testOTPEligibility>>>
    export type TestOTPEligibilityMutationBody = ConnectivityEligibilityTestOtpPostOVH
    export type TestOTPEligibilityMutationError = unknown

    /**
 * @summary Do an eligibility test on an OTP (Optical Termination Panel), for fiber only
 */
export const useTestOTPEligibility = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testOTPEligibility>>, TError,{data: ConnectivityEligibilityTestOtpPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof testOTPEligibility>>,
        TError,
        {data: ConnectivityEligibilityTestOtpPostOVH},
        TContext
      > => {

      const mutationOptions = getTestOTPEligibilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List work planned by operators. For partners only
 */
export const getPartnersPlannedWork = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ConnectivityMaintenanceWorkPlannedOVH[]>(
      {url: `/connectivity/maintenance/workPlanned/partners`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPartnersPlannedWorkQueryKey = () => {
    return [`/connectivity/maintenance/workPlanned/partners`] as const;
    }

    
export const getGetPartnersPlannedWorkQueryOptions = <TData = Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnersPlannedWorkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartnersPlannedWork>>> = ({ signal }) => getPartnersPlannedWork(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPartnersPlannedWorkQueryResult = NonNullable<Awaited<ReturnType<typeof getPartnersPlannedWork>>>
export type GetPartnersPlannedWorkQueryError = unknown


export function useGetPartnersPlannedWork<TData = Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartnersPlannedWork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartnersPlannedWork<TData = Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartnersPlannedWork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartnersPlannedWork<TData = Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List work planned by operators. For partners only
 */

export function useGetPartnersPlannedWork<TData = Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersPlannedWork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPartnersPlannedWorkQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List work planned by operators
 */
export const getPlannedWork = (
    params?: GetPlannedWorkParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ConnectivityMaintenanceWorkPlannedOVH[]>(
      {url: `/connectivity/maintenance/workPlanned/public`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetPlannedWorkQueryKey = (params?: GetPlannedWorkParams,) => {
    return [`/connectivity/maintenance/workPlanned/public`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPlannedWorkQueryOptions = <TData = Awaited<ReturnType<typeof getPlannedWork>>, TError = unknown>(params?: GetPlannedWorkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlannedWork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPlannedWorkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlannedWork>>> = ({ signal }) => getPlannedWork(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPlannedWork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPlannedWorkQueryResult = NonNullable<Awaited<ReturnType<typeof getPlannedWork>>>
export type GetPlannedWorkQueryError = unknown


export function useGetPlannedWork<TData = Awaited<ReturnType<typeof getPlannedWork>>, TError = unknown>(
 params: undefined |  GetPlannedWorkParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlannedWork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlannedWork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPlannedWork<TData = Awaited<ReturnType<typeof getPlannedWork>>, TError = unknown>(
 params?: GetPlannedWorkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlannedWork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlannedWork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPlannedWork<TData = Awaited<ReturnType<typeof getPlannedWork>>, TError = unknown>(
 params?: GetPlannedWorkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlannedWork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List work planned by operators
 */

export function useGetPlannedWork<TData = Awaited<ReturnType<typeof getPlannedWork>>, TError = unknown>(
 params?: GetPlannedWorkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlannedWork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPlannedWorkQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List detected, validated and recently closed generic incidents. For partners only
 */
export const getPartnersGenericIncident = (
    params?: GetPartnersGenericIncidentParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ConnectivityMonitoringGenericIncidentOVH[]>(
      {url: `/connectivity/monitoring/genericIncident/partners`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetPartnersGenericIncidentQueryKey = (params?: GetPartnersGenericIncidentParams,) => {
    return [`/connectivity/monitoring/genericIncident/partners`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPartnersGenericIncidentQueryOptions = <TData = Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError = unknown>(params?: GetPartnersGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnersGenericIncidentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartnersGenericIncident>>> = ({ signal }) => getPartnersGenericIncident(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPartnersGenericIncidentQueryResult = NonNullable<Awaited<ReturnType<typeof getPartnersGenericIncident>>>
export type GetPartnersGenericIncidentQueryError = unknown


export function useGetPartnersGenericIncident<TData = Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError = unknown>(
 params: undefined |  GetPartnersGenericIncidentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartnersGenericIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartnersGenericIncident<TData = Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError = unknown>(
 params?: GetPartnersGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartnersGenericIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPartnersGenericIncident<TData = Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError = unknown>(
 params?: GetPartnersGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List detected, validated and recently closed generic incidents. For partners only
 */

export function useGetPartnersGenericIncident<TData = Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError = unknown>(
 params?: GetPartnersGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartnersGenericIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPartnersGenericIncidentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List validated and recently closed generic incidents
 */
export const getGenericIncident = (
    params?: GetGenericIncidentParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ConnectivityMonitoringGenericIncidentOVH[]>(
      {url: `/connectivity/monitoring/genericIncident/public`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetGenericIncidentQueryKey = (params?: GetGenericIncidentParams,) => {
    return [`/connectivity/monitoring/genericIncident/public`, ...(params ? [params]: [])] as const;
    }

    
export const getGetGenericIncidentQueryOptions = <TData = Awaited<ReturnType<typeof getGenericIncident>>, TError = unknown>(params?: GetGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGenericIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGenericIncidentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGenericIncident>>> = ({ signal }) => getGenericIncident(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGenericIncident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetGenericIncidentQueryResult = NonNullable<Awaited<ReturnType<typeof getGenericIncident>>>
export type GetGenericIncidentQueryError = unknown


export function useGetGenericIncident<TData = Awaited<ReturnType<typeof getGenericIncident>>, TError = unknown>(
 params: undefined |  GetGenericIncidentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGenericIncident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGenericIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetGenericIncident<TData = Awaited<ReturnType<typeof getGenericIncident>>, TError = unknown>(
 params?: GetGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGenericIncident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGenericIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetGenericIncident<TData = Awaited<ReturnType<typeof getGenericIncident>>, TError = unknown>(
 params?: GetGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGenericIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List validated and recently closed generic incidents
 */

export function useGetGenericIncident<TData = Awaited<ReturnType<typeof getGenericIncident>>, TError = unknown>(
 params?: GetGenericIncidentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGenericIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetGenericIncidentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostEmailProServiceExternalContactBody = {
  /** Contact display name */
  displayName?: string;
  /** Contact email address */
  externalEmailAddress: string;
  /** Contact first name */
  firstName?: string;
  /** Hide the contact in Global Address List */
  hiddenFromGAL?: boolean;
  /** Contact initials */
  initials?: string;
  /** Contact last name */
  lastName?: string;
};

export type GetEmailProServiceExternalContactParams = {
/**
 * Filter the value of displayName property (like)
 */
displayName?: string;
/**
 * Filter the value of externalEmailAddress property (like)
 */
externalEmailAddress?: string;
/**
 * Filter the value of firstName property (like)
 */
firstName?: string;
/**
 * Filter the value of id property (like)
 */
id?: number;
/**
 * Filter the value of lastName property (like)
 */
lastName?: string;
};

export type PostEmailProServiceDomainDomainNameDkimBody = {
  /** Enable DKIM automatically after DKIM configuration */
  autoEnableDKIM?: boolean;
  /** If you host domain in OVH we can configure dkim dns record automatically */
  configureDkim?: boolean;
  /** selector name for DKIM */
  selectorName: string;
};

export type PostEmailProServiceDomainDomainNameDisclaimerBody = {
  /** Signature, added at the bottom of your organization emails */
  content: string;
  /** Activate the disclaimer only for external emails */
  outsideOnly?: boolean;
};

export type PostEmailProServiceDomainBody = {
  /** Enable DKIM automatically after DKIM configuration */
  autoEnableDKIM?: boolean;
  /** If you host domain in OVH we can configure autodiscover record automatically */
  configureAutodiscover?: boolean;
  /** Launch configuration of DKIM automatically for the domain */
  configureDKIM?: boolean;
  /** If you host domain in OVH we can configure mx record automatically */
  configureMx?: boolean;
  /** Enable automatic SPF record (only for domains hosted by OVHcloud) */
  configureSPF?: boolean;
  /** If specified, emails to not existing address will be redirected to that domain */
  mxRelay?: string;
  /** Domain to install on server */
  name: string;
  /** Type of domain that You want to install */
  type: EmailProDomainTypeEnumOVH;
};

export type GetEmailProServiceDomainParams = {
/**
 * Filter the value of state property (=)
 */
state?: EmailProObjectStateEnumOVH;
};

export type PostEmailProServiceChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type PostEmailProServiceAccountEmailSendOnBehalfToBody = {
  /** Account id to allow to send On Behalf To mails from this mailbox */
  allowAccountId: number;
};

export type PostEmailProServiceAccountEmailSendAsBody = {
  /** Account id to allow to send mails from this mailbox */
  allowAccountId: number;
};

export type PostEmailProServiceAccountEmailFullAccessBody = {
  /** User to give full access */
  allowedAccountId: number;
};

export type PostEmailProServiceAccountEmailDiagnosticsBody = {
  /** Account password */
  password: string;
};

export type PostEmailProServiceAccountEmailChangePasswordBody = {
  /** new password */
  password: string;
};

export type PostEmailProServiceAccountEmailAliasBody = {
  /** Alias */
  alias: string;
};

export type GetEmailProServiceAccountParams = {
/**
 * Filter the value of id property (like)
 */
id?: number;
/**
 * Filter the value of primaryEmailAddress property (like)
 */
primaryEmailAddress?: string;
};

export type GetEmailProParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Spam and Antyvirus configuration
 */
export interface EmailProSpamAndVirusConfigurationOVH {
  /** Check DKIM of message */
  readonly checkDKIM?: boolean;
  /** Check SPF of message */
  readonly checkSPF?: boolean;
  /** If message is a spam delete it */
  readonly deleteSpam?: boolean;
  /** If message is a virus delete it */
  readonly deleteVirus?: boolean;
  /** If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus */
  readonly putInJunk?: boolean;
  /** If message is a spam change its subject */
  readonly tagSpam?: boolean;
  /** If message is a virus change its subject */
  readonly tagVirus?: boolean;
}

/**
 * Renew period
 */
export type EmailProRenewPeriodEnumOVH = typeof EmailProRenewPeriodEnumOVH[keyof typeof EmailProRenewPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProRenewPeriodEnumOVH = {
  monthly: 'monthly',
  yearly: 'yearly',
} as const;

/**
 * dkim status
 */
export type EmailProDkimStatusEnumOVH = typeof EmailProDkimStatusEnumOVH[keyof typeof EmailProDkimStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDkimStatusEnumOVH = {
  deleting: 'deleting',
  disabling: 'disabling',
  enabling: 'enabling',
  inProduction: 'inProduction',
  ready: 'ready',
  todo: 'todo',
  waitingRecord: 'waitingRecord',
} as const;

/**
 * Record type of the customer record
 */
export type EmailProDkimRecordTypeEnumOVH = typeof EmailProDkimRecordTypeEnumOVH[keyof typeof EmailProDkimRecordTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDkimRecordTypeEnumOVH = {
  CNAME: 'CNAME',
} as const;

/**
 * DKIM for a domain
 */
export interface EmailProDkimOVH {
  /** customer DNS record */
  readonly customerRecord?: string;
  /** header used for DKIM signature */
  readonly header?: string;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** Record type of the customer record */
  readonly recordType?: EmailProDkimRecordTypeEnumOVH;
  /** selectorName */
  readonly selectorName?: string;
  /** dkim status */
  readonly status?: EmailProDkimStatusEnumOVH;
  /**
   * Target of the customer record
   * @nullable
   */
  readonly targetRecord?: string | null;
  /**
   * Pending task for this DKIM
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * disclaimer
 */
export interface EmailProDisclaimerNativeOVH {
  /** Signature, added at the bottom of your organization emails */
  readonly content?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Disclaimer name */
  readonly name?: string;
  /** Activate the disclaimer only for external emails */
  readonly outsideOnly?: boolean;
  /** task pending id */
  readonly taskPendingId?: number;
}

/**
 * disclaimer
 */
export interface EmailProDisclaimerOVH {
  /** Signature, added at the bottom of your organization emails */
  content?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Disclaimer name */
  readonly name?: string;
  /** Activate the disclaimer only for external emails */
  outsideOnly?: boolean;
  /** task pending id */
  readonly taskPendingId?: number;
}

/**
 * Task status
 */
export type EmailProTaskStatusEnumOVH = typeof EmailProTaskStatusEnumOVH[keyof typeof EmailProTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  todo: 'todo',
} as const;

/**
 * function enumeration for task
 */
export type EmailProTaskFunctionEnumOVH = typeof EmailProTaskFunctionEnumOVH[keyof typeof EmailProTaskFunctionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProTaskFunctionEnumOVH = {
  addAccount: 'addAccount',
  addAlias: 'addAlias',
  addDomain: 'addDomain',
  addDomainDKIM: 'addDomainDKIM',
  addDomainDisclaimer: 'addDomainDisclaimer',
  addExternalContact: 'addExternalContact',
  addFullAccess: 'addFullAccess',
  addSendAs: 'addSendAs',
  addSendOnBehalfTo: 'addSendOnBehalfTo',
  addServiceAuthorizedIp: 'addServiceAuthorizedIp',
  changeHostname: 'changeHostname',
  changePassword: 'changePassword',
  configureCustomer: 'configureCustomer',
  deleteAccount: 'deleteAccount',
  deleteAlias: 'deleteAlias',
  deleteDomain: 'deleteDomain',
  deleteDomainDKIM: 'deleteDomainDKIM',
  deleteDomainDisclaimer: 'deleteDomainDisclaimer',
  deleteExternalContact: 'deleteExternalContact',
  deleteFullAccess: 'deleteFullAccess',
  deleteSendAs: 'deleteSendAs',
  deleteSendOnBehalfTo: 'deleteSendOnBehalfTo',
  deleteService: 'deleteService',
  deleteServiceAuthorizedIp: 'deleteServiceAuthorizedIp',
  diagnoseAccount: 'diagnoseAccount',
  disableDKIM: 'disableDKIM',
  enableDKIM: 'enableDKIM',
  expandDrive: 'expandDrive',
  installServer: 'installServer',
  maintenance: 'maintenance',
  migrateAccountViaOMM: 'migrateAccountViaOMM',
  migrationAccount: 'migrationAccount',
  migrationDisclaimer: 'migrationDisclaimer',
  migrationExternalContact: 'migrationExternalContact',
  migrationHistory: 'migrationHistory',
  migrationService: 'migrationService',
  reOpenAccount: 'reOpenAccount',
  setAccount: 'setAccount',
  setAlias: 'setAlias',
  setDns: 'setDns',
  setDomain: 'setDomain',
  setDomainDisclaimer: 'setDomainDisclaimer',
  setExternalContact: 'setExternalContact',
  setService: 'setService',
  suspendAccount: 'suspendAccount',
  suspendService: 'suspendService',
  unknown: 'unknown',
  unsuspendAccount: 'unsuspendAccount',
  unsuspendService: 'unsuspendService',
} as const;

/**
 * Organization task details
 */
export interface EmailProTaskOVH {
  /**
   * Completion date
   * @nullable
   */
  readonly finishDate?: string | null;
  /** Function name */
  readonly function?: EmailProTaskFunctionEnumOVH;
  /** Task id */
  readonly id?: number;
  /** Task status */
  readonly status?: EmailProTaskStatusEnumOVH;
  /** Creation date */
  readonly todoDate?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type EmailProServiceWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Service State
 */
export type EmailProServiceStateEnumOVH = typeof EmailProServiceStateEnumOVH[keyof typeof EmailProServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProServiceStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  inMaintenance: 'inMaintenance',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
} as const;

/**
 * Service Offer name
 */
export type EmailProServiceOfferEnumOVH = typeof EmailProServiceOfferEnumOVH[keyof typeof EmailProServiceOfferEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProServiceOfferEnumOVH = {
  emailpro: 'emailpro',
} as const;

/**
 * Email pro service
 */
export interface EmailProServiceWithIAMOVH {
  /** enable policy for strong and secure passwords */
  complexityEnabled?: boolean;
  /**
   * service displayName
   * @nullable
   */
  displayName?: string | null;
  /** Domain name of your service */
  readonly domain?: string;
  /**
   * Hostname of your service
   * @nullable
   */
  readonly hostname?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: EmailProServiceWithIAMOVHIam;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** number of minutes account will remain locked if it occurs */
  lockoutDuration?: number;
  /** number of minutes that must elapse after a failed logon to reset lockout trigger */
  lockoutObservationWindow?: number;
  /**
   * number of attempts before account to be locked
   * @nullable
   */
  lockoutThreshold?: number | null;
  /**
   * maximum number of days that account's password is valid before expiration
   * @nullable
   */
  maxPasswordAge?: number | null;
  /** Maximum message size that You can receive in MB */
  maxReceiveSize?: number;
  /** Maximum message size that You can send in MB */
  maxSendSize?: number;
  /**
   * minimum number of days before able to change account's password
   * @nullable
   */
  minPasswordAge?: number | null;
  /**
   * minimum number of characters password must contain
   * @nullable
   */
  minPasswordLength?: number | null;
  /** Type of your offer */
  readonly offer?: EmailProServiceOfferEnumOVH;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailProSpamAndVirusConfigurationOVH;
  /** State of your service */
  readonly state?: EmailProServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * URL for web interface
   * @nullable
   */
  readonly webUrl?: string | null;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type EmailProServiceNativeWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Email pro service
 */
export interface EmailProServiceNativeWithIAMOVH {
  /** enable policy for strong and secure passwords */
  readonly complexityEnabled?: boolean;
  /**
   * service displayName
   * @nullable
   */
  readonly displayName?: string | null;
  /** Domain name of your service */
  readonly domain?: string;
  /**
   * Hostname of your service
   * @nullable
   */
  readonly hostname?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: EmailProServiceNativeWithIAMOVHIam;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** number of minutes account will remain locked if it occurs */
  readonly lockoutDuration?: number;
  /** number of minutes that must elapse after a failed logon to reset lockout trigger */
  readonly lockoutObservationWindow?: number;
  /**
   * number of attempts before account to be locked
   * @nullable
   */
  readonly lockoutThreshold?: number | null;
  /**
   * maximum number of days that account's password is valid before expiration
   * @nullable
   */
  readonly maxPasswordAge?: number | null;
  /** Maximum message size that You can receive in MB */
  readonly maxReceiveSize?: number;
  /** Maximum message size that You can send in MB */
  readonly maxSendSize?: number;
  /**
   * minimum number of days before able to change account's password
   * @nullable
   */
  readonly minPasswordAge?: number | null;
  /**
   * minimum number of characters password must contain
   * @nullable
   */
  readonly minPasswordLength?: number | null;
  /** Type of your offer */
  readonly offer?: EmailProServiceOfferEnumOVH;
  /** Spam and Antivirus configuration */
  readonly spamAndVirusConfiguration?: EmailProSpamAndVirusConfigurationOVH;
  /** State of your service */
  readonly state?: EmailProServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * URL for web interface
   * @nullable
   */
  readonly webUrl?: string | null;
}

/**
 * Email pro service
 */
export interface EmailProServiceNativeOVH {
  /** enable policy for strong and secure passwords */
  readonly complexityEnabled?: boolean;
  /**
   * service displayName
   * @nullable
   */
  readonly displayName?: string | null;
  /** Domain name of your service */
  readonly domain?: string;
  /**
   * Hostname of your service
   * @nullable
   */
  readonly hostname?: string | null;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** number of minutes account will remain locked if it occurs */
  readonly lockoutDuration?: number;
  /** number of minutes that must elapse after a failed logon to reset lockout trigger */
  readonly lockoutObservationWindow?: number;
  /**
   * number of attempts before account to be locked
   * @nullable
   */
  readonly lockoutThreshold?: number | null;
  /**
   * maximum number of days that account's password is valid before expiration
   * @nullable
   */
  readonly maxPasswordAge?: number | null;
  /** Maximum message size that You can receive in MB */
  readonly maxReceiveSize?: number;
  /** Maximum message size that You can send in MB */
  readonly maxSendSize?: number;
  /**
   * minimum number of days before able to change account's password
   * @nullable
   */
  readonly minPasswordAge?: number | null;
  /**
   * minimum number of characters password must contain
   * @nullable
   */
  readonly minPasswordLength?: number | null;
  /** Type of your offer */
  readonly offer?: EmailProServiceOfferEnumOVH;
  /** Spam and Antivirus configuration */
  readonly spamAndVirusConfiguration?: EmailProSpamAndVirusConfigurationOVH;
  /** State of your service */
  readonly state?: EmailProServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * URL for web interface
   * @nullable
   */
  readonly webUrl?: string | null;
}

/**
 * Email pro service
 */
export interface EmailProServiceOVH {
  /** enable policy for strong and secure passwords */
  complexityEnabled?: boolean;
  /**
   * service displayName
   * @nullable
   */
  displayName?: string | null;
  /** Domain name of your service */
  readonly domain?: string;
  /**
   * Hostname of your service
   * @nullable
   */
  readonly hostname?: string | null;
  /**
   * Update date
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** number of minutes account will remain locked if it occurs */
  lockoutDuration?: number;
  /** number of minutes that must elapse after a failed logon to reset lockout trigger */
  lockoutObservationWindow?: number;
  /**
   * number of attempts before account to be locked
   * @nullable
   */
  lockoutThreshold?: number | null;
  /**
   * maximum number of days that account's password is valid before expiration
   * @nullable
   */
  maxPasswordAge?: number | null;
  /** Maximum message size that You can receive in MB */
  maxReceiveSize?: number;
  /** Maximum message size that You can send in MB */
  maxSendSize?: number;
  /**
   * minimum number of days before able to change account's password
   * @nullable
   */
  minPasswordAge?: number | null;
  /**
   * minimum number of characters password must contain
   * @nullable
   */
  minPasswordLength?: number | null;
  /** Type of your offer */
  readonly offer?: EmailProServiceOfferEnumOVH;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailProSpamAndVirusConfigurationOVH;
  /** State of your service */
  readonly state?: EmailProServiceStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * URL for web interface
   * @nullable
   */
  readonly webUrl?: string | null;
}

/**
 * Server State
 */
export type EmailProServerStateEnumOVH = typeof EmailProServerStateEnumOVH[keyof typeof EmailProServerStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProServerStateEnumOVH = {
  configurationPending: 'configurationPending',
  notConfigured: 'notConfigured',
  ok: 'ok',
} as const;

/**
 * ipV6
 * @nullable
 */
export type EmailProServerOVHIpV6 = Ipv6OVH | null;

/**
 * Server
 */
export interface EmailProServerOVH {
  /**
   * Current disk usage in MB
   * @nullable
   */
  readonly currentDiskUsage?: number | null;
  /**
   * Total disk size in MB
   * @nullable
   */
  readonly diskSize?: number | null;
  /** ipV4 */
  readonly ip?: Ipv4OVH;
  /**
   * ipV6
   * @nullable
   */
  readonly ipV6?: EmailProServerOVHIpV6;
  /** If true your dns AAAA record is valid */
  readonly isAaaaValid?: boolean;
  /** If true your dns A record is valid */
  readonly isAValid?: boolean;
  /** If true your dns ptrV6 record is valid */
  readonly isPtrV6Valid?: boolean;
  /** If true your dns ptr record is valid */
  readonly isPtrValid?: boolean;
  /** Server state */
  readonly state?: EmailProServerStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
  /**
   * Server version
   * @nullable
   */
  readonly version?: number | null;
}

/**
 * Current object state
 */
export type EmailProObjectStateEnumOVH = typeof EmailProObjectStateEnumOVH[keyof typeof EmailProObjectStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProObjectStateEnumOVH = {
  creating: 'creating',
  deleting: 'deleting',
  ok: 'ok',
  reopening: 'reopening',
  suspended: 'suspended',
  suspending: 'suspending',
  unknown: 'unknown',
} as const;

/**
 * Mailing filter options availlable
 */
export type EmailProMailingFilterEnumOVH = typeof EmailProMailingFilterEnumOVH[keyof typeof EmailProMailingFilterEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProMailingFilterEnumOVH = {
  vaderetro: 'vaderetro',
} as const;

/**
 * External contact for this pro service
 */
export interface EmailProExternalContactNativeOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Contact display name */
  readonly displayName?: string;
  /** Contact email */
  readonly externalEmailAddress?: string;
  /**
   * Contact first name
   * @nullable
   */
  readonly firstName?: string | null;
  /** Hide the contact in Global Address List */
  readonly hiddenFromGAL?: boolean;
  /** Contact id */
  readonly id?: number;
  /**
   * Contact initals
   * @nullable
   */
  readonly initials?: string | null;
  /**
   * Contact last name
   * @nullable
   */
  readonly lastName?: string | null;
  /** Contact state */
  readonly state?: EmailProObjectStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * External contact for this pro service
 */
export interface EmailProExternalContactOVH {
  /** Creation date */
  readonly creationDate?: string;
  /** Contact display name */
  displayName?: string;
  /** Contact email */
  externalEmailAddress?: string;
  /**
   * Contact first name
   * @nullable
   */
  firstName?: string | null;
  /** Hide the contact in Global Address List */
  hiddenFromGAL?: boolean;
  /** Contact id */
  readonly id?: number;
  /**
   * Contact initals
   * @nullable
   */
  initials?: string | null;
  /**
   * Contact last name
   * @nullable
   */
  lastName?: string | null;
  /** Contact state */
  readonly state?: EmailProObjectStateEnumOVH;
  /** Task pending id */
  readonly taskPendingId?: number;
}

/**
 * Domain type
 */
export type EmailProDomainTypeEnumOVH = typeof EmailProDomainTypeEnumOVH[keyof typeof EmailProDomainTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDomainTypeEnumOVH = {
  authoritative: 'authoritative',
  nonAuthoritative: 'nonAuthoritative',
} as const;

/**
 * Domain
 */
export interface EmailProDomainNativeOVH {
  /**
   * Cname that will be checked to prove the domain ownership
   * @nullable
   */
  readonly cnameToCheck?: string | null;
  /**
   * Dkim selectors and DNS configuration state
   * @nullable
   */
  readonly dkimDiagnostics?: EmailProDomainNativeOVHDkimDiagnostics;
  /** List of aliases for this domain */
  readonly domainAliases?: readonly string[];
  /** Domain validation status */
  readonly domainValidated?: boolean;
  /** Expected SRV record on this domain */
  readonly expectedAutodiscoverSRV?: string;
  /** Expected MX record(s) on this domain */
  readonly expectedMX?: readonly string[];
  /** Expected SPF record on this domain */
  readonly expectedSPF?: string;
  /** Indicate if this domain is an alias for another domain */
  readonly isAliasDomain?: boolean;
  /** If true your DNS MX configuration is valid */
  readonly mxIsValid?: boolean;
  /**
   * Domain MX record configured in DNS
   * @nullable
   */
  readonly mxRecord?: readonly string[] | null;
  /**
   * If specified, emails to not existing address will be redirected to that domain
   * @nullable
   */
  readonly mxRelay?: string | null;
  /** Domain name */
  readonly name?: string;
  /** SPF record validation passed */
  readonly spfIsValid?: boolean;
  /**
   * Domain's SPF record configured in the DNS
   * @nullable
   */
  readonly spfRecord?: readonly string[] | null;
  /** If true your DNS SRV record is valid */
  readonly srvIsValid?: boolean;
  /**
   * Domain SRV record configured in DNS
   * @nullable
   */
  readonly srvRecord?: readonly string[] | null;
  /** Domain state */
  readonly state?: EmailProObjectStateEnumOVH;
  /** Pending tasks id */
  readonly taskPendingId?: number;
  /** Domain type */
  readonly type?: EmailProDomainTypeEnumOVH;
}

/**
 * DKIM status
 */
export type EmailProDomainDkimDiagnosticsStateEnumOVH = typeof EmailProDomainDkimDiagnosticsStateEnumOVH[keyof typeof EmailProDomainDkimDiagnosticsStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDomainDkimDiagnosticsStateEnumOVH = {
  active: 'active',
  disabled: 'disabled',
  error: 'error',
  inProgress: 'inProgress',
  toConfigure: 'toConfigure',
} as const;

/**
 * State of DKIM selectors
 * @nullable
 */
export type EmailProDomainDkimDiagnosticsOVHState = EmailProDomainDkimDiagnosticsStateEnumOVH | null;

/**
 * Dkim selectors and DNS configuration state
 */
export interface EmailProDomainDkimDiagnosticsOVH {
  /**
   * Error code related to misconfiguration of DKIM, if exists
   * @nullable
   */
  readonly errorCode?: number | null;
  /**
   * DKIM misconfiguration description, if exists
   * @nullable
   */
  readonly message?: string | null;
  /**
   * State of DKIM selectors
   * @nullable
   */
  readonly state?: EmailProDomainDkimDiagnosticsOVHState;
}

/**
 * Dkim selectors and DNS configuration state
 * @nullable
 */
export type EmailProDomainNativeOVHDkimDiagnostics = EmailProDomainDkimDiagnosticsOVH | null;

/**
 * Domain
 */
export interface EmailProDomainOVH {
  /**
   * Cname that will be checked to prove the domain ownership
   * @nullable
   */
  readonly cnameToCheck?: string | null;
  /** List of aliases for this domain */
  readonly domainAliases?: readonly string[];
  /** Domain validation status */
  readonly domainValidated?: boolean;
  /** Indicate if this domain is an alias for another domain */
  readonly isAliasDomain?: boolean;
  /** If true your dns mx configuration is valid */
  readonly mxIsValid?: boolean;
  /**
   * Domain MX record configured in DNS
   * @nullable
   */
  readonly mxRecord?: readonly string[] | null;
  /**
   * If specified, emails to not existing address will be redirected to that domain
   * @nullable
   */
  mxRelay?: string | null;
  /** Domain name */
  readonly name?: string;
  /** If true your dns srv record is valid */
  readonly srvIsValid?: boolean;
  /**
   * Domain SRV record configured in DNS
   * @nullable
   */
  readonly srvRecord?: readonly string[] | null;
  /** Domain state */
  readonly state?: EmailProObjectStateEnumOVH;
  /** Pending taks id */
  readonly taskPendingId?: number;
  /** Domain type */
  type?: EmailProDomainTypeEnumOVH;
}

/**
 * DKIM status
 */
export type EmailProDkimStatusEnumOVH = typeof EmailProDkimStatusEnumOVH[keyof typeof EmailProDkimStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDkimStatusEnumOVH = {
  deleting: 'deleting',
  disabling: 'disabling',
  enabling: 'enabling',
  inProduction: 'inProduction',
  ready: 'ready',
  todo: 'todo',
  waitingRecord: 'waitingRecord',
} as const;

/**
 * Record type of the customer record
 */
export type EmailProDkimRecordTypeEnumOVH = typeof EmailProDkimRecordTypeEnumOVH[keyof typeof EmailProDkimRecordTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDkimRecordTypeEnumOVH = {
  CNAME: 'CNAME',
} as const;

/**
 * DKIM for a domain
 */
export interface EmailProDkimOVH {
  /** DNS CNAME validation passed */
  readonly cnameIsValid?: boolean;
  /** Customer DNS record */
  readonly customerRecord?: string;
  /** Header used for DKIM signature */
  readonly header?: string;
  /**
   * Last update date
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** Record type of the customer record */
  readonly recordType?: EmailProDkimRecordTypeEnumOVH;
  /** Selector name */
  readonly selectorName?: string;
  /** DKIM status */
  readonly status?: EmailProDkimStatusEnumOVH;
  /**
   * Target of the customer record
   * @nullable
   */
  readonly targetRecord?: string | null;
  /**
   * Pending task for this DKIM
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Disclaimer attributes list
 */
export type EmailProDisclaimerAttributeEnumOVH = typeof EmailProDisclaimerAttributeEnumOVH[keyof typeof EmailProDisclaimerAttributeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmailProDisclaimerAttributeEnumOVH = {
  City: 'City',
  Company: 'Company',
  Country: 'Country',
  Department: 'Department',
  DisplayName: 'DisplayName',
  Email: 'Email',
  FaxNumber: 'FaxNumber',
  FirstName: 'FirstName',
  HomePhoneNumber: 'HomePhoneNumber',
  Initials: 'Initials',
  LastName: 'LastName',
  Manager: 'Manager',
  MobileNumber: 'MobileNumber',
  Notes: 'Notes',
  Office: 'Office',
  OtherFaxNumber: 'OtherFaxNumber',
  OtherHomePhoneNumber: 'OtherHomePhoneNumber',
  OtherPhoneNumber: 'OtherPhoneNumber',
  PagerNumber: 'PagerNumber',
  PhoneNumber: 'PhoneNumber',
  State: 'State',
  Street: 'Street',
  Title: 'Title',
  UserLogonName: 'UserLogonName',
  ZipCode: 'ZipCode',
} as const;

/**
 * Get users authorized to Send On Behalf To mails from this mailbox
 */
export interface EmailProAccountSendOnBehalfToOVH {
  /** Account id to give send on behalf to */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Users authorized to send mails from this mailbox
 */
export interface EmailProAccountSendAsOVH {
  /** Account id to give send as */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * change the renew period
 * @nullable
 */
export type EmailProAccountNativeOVHRenewPeriod = EmailProRenewPeriodEnumOVH | null;

/**
 * Mailbox
 */
export interface EmailProAccountNativeOVH {
  /** Indicates if the account is configured */
  readonly configured?: boolean;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /**
   * Mailbox usage
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * delete at expiration
   * @nullable
   */
  readonly deleteAtExpiration?: boolean | null;
  /**
   * Account display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Email domain */
  readonly domain?: string;
  /**
   * expiration date
   * @nullable
   */
  readonly expirationDate?: string | null;
  /**
   * expiration date
   * @nullable
   */
  readonly expirationOutlookDate?: string | null;
  /**
   * Account first name
   * @nullable
   */
  readonly firstName?: string | null;
  /** Hide account in Global Address List */
  readonly hiddenFromGAL?: boolean;
  /** Account id */
  readonly id?: number;
  /**
   * Account initials
   * @nullable
   */
  readonly initial?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Account last name
   * @nullable
   */
  readonly lastName?: string | null;
  /**
   * Last update
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** Account login */
  readonly login?: string;
  /**
   * Enable or disable anti-virus and anti-spam
   * @nullable
   */
  readonly mailingFilter?: readonly EmailProMailingFilterEnumOVH[] | null;
  /**
   * Time of account's password last update
   * @nullable
   */
  readonly passwordLastUpdate?: string | null;
  /** Default email for this mailbox */
  readonly primaryEmailAddress?: string;
  /** Account maximum size */
  readonly quota?: number;
  /**
   * change the renew period
   * @nullable
   */
  readonly renewPeriod?: EmailProAccountNativeOVHRenewPeriod;
  /**
   * SAM account name
   * @nullable
   */
  readonly SAMAccountName?: string | null;
  /** Spam and Antivirus configuration */
  readonly spamAndVirusConfiguration?: EmailProSpamAndVirusConfigurationOVH;
  /** Account was sending spam */
  readonly spamDetected?: boolean;
  /**
   * Ticket number of spam detection
   * @nullable
   */
  readonly spamTicketNumber?: number | null;
  /** Account state */
  readonly state?: EmailProObjectStateEnumOVH;
  /**
   * Pending tasks for this account
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Users having full access on this mailbox
 */
export interface EmailProAccountFullAccessOVH {
  /** Account id to give full access */
  readonly allowedAccountId?: number;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * Account Diagnosis
 */
export interface EmailProAccountDiagnosisOVH {
  /** Determines if ingoing message has been received */
  readonly canReceiveEmail?: boolean;
  /** Determines if outgoing message has been delivered */
  readonly canSendEmail?: boolean;
  /** Determines if possible to authenticate with credentials */
  readonly connectiveWebmail?: boolean;
  /** Determines if account is locked */
  readonly isLocked?: boolean;
  /** Determines if MX record for account's domain is properly set */
  readonly isMxValid?: boolean;
  /** Determines if account is flagged as spammer */
  readonly isSpammer?: boolean;
  /** Determines if SRV (autodiscovery) record for account's domain is properly set */
  readonly isSrvValid?: boolean;
  /** Determines if account is suspended */
  readonly isSuspended?: boolean;
  /** Last performed diagnostics date */
  readonly lastCheck?: string;
}

/**
 * Aliases on this mailbox
 */
export interface EmailProAccountAliasOVH {
  /** Alias */
  readonly alias?: string;
  /** Creation date */
  readonly creationDate?: string;
  /** Pending task id */
  readonly taskPendingId?: number;
}

/**
 * change the renew period
 * @nullable
 */
export type EmailProAccountOVHRenewPeriod = EmailProRenewPeriodEnumOVH | null;

/**
 * Mailbox
 */
export interface EmailProAccountOVH {
  /** Indicates if the account is configured */
  readonly configured?: boolean;
  /**
   * Creation date
   * @nullable
   */
  readonly creationDate?: string | null;
  /**
   * Mailbox usage
   * @nullable
   */
  readonly currentUsage?: number | null;
  /**
   * delete at expiration
   * @nullable
   */
  deleteAtExpiration?: boolean | null;
  /**
   * Account display name
   * @nullable
   */
  displayName?: string | null;
  /** Email domain */
  domain?: string;
  /**
   * expiration date
   * @nullable
   */
  readonly expirationDate?: string | null;
  /**
   * expiration date
   * @nullable
   */
  readonly expirationOutlookDate?: string | null;
  /**
   * Account first name
   * @nullable
   */
  firstName?: string | null;
  /** Hide account in Global Address List */
  hiddenFromGAL?: boolean;
  /** Account id */
  readonly id?: number;
  /**
   * Account initials
   * @nullable
   */
  initial?: string | null;
  /**
   * Last logoff
   * @nullable
   */
  readonly lastLogoffDate?: string | null;
  /**
   * Last logon
   * @nullable
   */
  readonly lastLogonDate?: string | null;
  /**
   * Account last name
   * @nullable
   */
  lastName?: string | null;
  /**
   * Last update
   * @nullable
   */
  readonly lastUpdateDate?: string | null;
  /** Account login */
  login?: string;
  /**
   * Enable or disable anti-virus and anti-spam
   * @nullable
   */
  mailingFilter?: EmailProMailingFilterEnumOVH[] | null;
  /**
   * Time of account's password last update
   * @nullable
   */
  readonly passwordLastUpdate?: string | null;
  /** Default email for this mailbox */
  readonly primaryEmailAddress?: string;
  /** Account maximum size */
  quota?: number;
  /**
   * change the renew period
   * @nullable
   */
  renewPeriod?: EmailProAccountOVHRenewPeriod;
  /**
   * SAM account name
   * @nullable
   */
  readonly SAMAccountName?: string | null;
  /** Spam and Antivirus configuration */
  spamAndVirusConfiguration?: EmailProSpamAndVirusConfigurationOVH;
  /** Account was sending spam */
  readonly spamDetected?: boolean;
  /**
   * Ticket number of spam detection
   * @nullable
   */
  readonly spamTicketNumber?: number | null;
  /** Account state */
  readonly state?: EmailProObjectStateEnumOVH;
  /**
   * Pending tasks for this account
   * @nullable
   */
  readonly taskPendingId?: number | null;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  EmailProAccountAliasOVH,
  EmailProAccountDiagnosisOVH,
  EmailProAccountFullAccessOVH,
  EmailProAccountNativeOVH,
  EmailProAccountOVH,
  EmailProAccountSendAsOVH,
  EmailProAccountSendOnBehalfToOVH,
  EmailProDisclaimerAttributeEnumOVH,
  EmailProDisclaimerNativeOVH,
  EmailProDisclaimerOVH,
  EmailProDkimOVH,
  EmailProDomainNativeOVH,
  EmailProDomainOVH,
  EmailProExternalContactNativeOVH,
  EmailProExternalContactOVH,
  EmailProServerOVH,
  EmailProServiceNativeWithIAMOVH,
  EmailProServiceOVH,
  EmailProTaskOVH,
  GetEmailProParams,
  GetEmailProServiceAccountParams,
  GetEmailProServiceDomainParams,
  GetEmailProServiceExternalContactParams,
  PostEmailProServiceAccountEmailAliasBody,
  PostEmailProServiceAccountEmailChangePasswordBody,
  PostEmailProServiceAccountEmailDiagnosticsBody,
  PostEmailProServiceAccountEmailFullAccessBody,
  PostEmailProServiceAccountEmailSendAsBody,
  PostEmailProServiceAccountEmailSendOnBehalfToBody,
  PostEmailProServiceChangeContactBody,
  PostEmailProServiceDomainBody,
  PostEmailProServiceDomainDomainNameDisclaimerBody,
  PostEmailProServiceDomainDomainNameDkimBody,
  PostEmailProServiceExternalContactBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getEmailPro = (
    params?: GetEmailProParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailProQueryKey = (params?: GetEmailProParams,) => {
    return [`/email/pro`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailProQueryOptions = <TData = Awaited<ReturnType<typeof getEmailPro>>, TError = unknown>(params?: GetEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailPro>>> = ({ signal }) => getEmailPro(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailPro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailPro>>>
export type GetEmailProQueryError = unknown


export function useGetEmailPro<TData = Awaited<ReturnType<typeof getEmailPro>>, TError = unknown>(
 params: undefined |  GetEmailProParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailPro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailPro<TData = Awaited<ReturnType<typeof getEmailPro>>, TError = unknown>(
 params?: GetEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailPro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailPro<TData = Awaited<ReturnType<typeof getEmailPro>>, TError = unknown>(
 params?: GetEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetEmailPro<TData = Awaited<ReturnType<typeof getEmailPro>>, TError = unknown>(
 params?: GetEmailProParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailProService = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProServiceNativeWithIAMOVH>(
      {url: `/email/pro/${service}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceQueryKey = (service: string,) => {
    return [`/email/pro/${service}`] as const;
    }

    
export const getGetEmailProServiceQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProService>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProService>>> = ({ signal }) => getEmailProService(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProService>>>
export type GetEmailProServiceQueryError = unknown


export function useGetEmailProService<TData = Awaited<ReturnType<typeof getEmailProService>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProService<TData = Awaited<ReturnType<typeof getEmailProService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProService<TData = Awaited<ReturnType<typeof getEmailProService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProService<TData = Awaited<ReturnType<typeof getEmailProService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailProService = (
    service: string,
    emailProServiceOVH: NonReadonly<EmailProServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailProServiceOVH
    },
      options);
    }
  


export const getPutEmailProServiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProService>>, TError,{service: string;data: NonReadonly<EmailProServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailProService>>, TError,{service: string;data: NonReadonly<EmailProServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailProService>>, {service: string;data: NonReadonly<EmailProServiceOVH>}> = (props) => {
          const {service,data} = props ?? {};

          return  putEmailProService(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailProServiceMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailProService>>>
    export type PutEmailProServiceMutationBody = NonReadonly<EmailProServiceOVH>
    export type PutEmailProServiceMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailProService = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProService>>, TError,{service: string;data: NonReadonly<EmailProServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailProService>>,
        TError,
        {service: string;data: NonReadonly<EmailProServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailProServiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Accounts associated to this pro service
 */
export const getEmailProServiceAccount = (
    service: string,
    params?: GetEmailProServiceAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro/${service}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountQueryKey = (service: string,
    params?: GetEmailProServiceAccountParams,) => {
    return [`/email/pro/${service}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailProServiceAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError = unknown>(service: string,
    params?: GetEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccount>>> = ({ signal }) => getEmailProServiceAccount(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccount>>>
export type GetEmailProServiceAccountQueryError = unknown


export function useGetEmailProServiceAccount<TData = Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params: undefined |  GetEmailProServiceAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccount<TData = Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccount<TData = Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Accounts associated to this pro service
 */

export function useGetEmailProServiceAccount<TData = Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete existing mailbox in pro server
 */
export const deleteEmailProServiceAccountEmail = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceAccountEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmail>>, TError,{service: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmail>>, TError,{service: string;email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmail>>, {service: string;email: string}> = (props) => {
          const {service,email} = props ?? {};

          return  deleteEmailProServiceAccountEmail(service,email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceAccountEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmail>>>
    
    export type DeleteEmailProServiceAccountEmailMutationError = unknown

    /**
 * @summary Delete existing mailbox in pro server
 */
export const useDeleteEmailProServiceAccountEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmail>>, TError,{service: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceAccountEmail>>,
        TError,
        {service: string;email: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceAccountEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmail = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProAccountNativeOVH>(
      {url: `/email/pro/${service}/account/${email}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}`] as const;
    }

    
export const getGetEmailProServiceAccountEmailQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>> = ({ signal }) => getEmailProServiceAccountEmail(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>>
export type GetEmailProServiceAccountEmailQueryError = unknown


export function useGetEmailProServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmail<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailProServiceAccountEmail = (
    service: string,
    email: string,
    emailProAccountOVH: NonReadonly<EmailProAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}/account/${email}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailProAccountOVH
    },
      options);
    }
  


export const getPutEmailProServiceAccountEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceAccountEmail>>, TError,{service: string;email: string;data: NonReadonly<EmailProAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceAccountEmail>>, TError,{service: string;email: string;data: NonReadonly<EmailProAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailProServiceAccountEmail>>, {service: string;email: string;data: NonReadonly<EmailProAccountOVH>}> = (props) => {
          const {service,email,data} = props ?? {};

          return  putEmailProServiceAccountEmail(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailProServiceAccountEmailMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailProServiceAccountEmail>>>
    export type PutEmailProServiceAccountEmailMutationBody = NonReadonly<EmailProAccountOVH>
    export type PutEmailProServiceAccountEmailMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailProServiceAccountEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceAccountEmail>>, TError,{service: string;email: string;data: NonReadonly<EmailProAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailProServiceAccountEmail>>,
        TError,
        {service: string;email: string;data: NonReadonly<EmailProAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailProServiceAccountEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Aliases associated to this mailbox
 */
export const getEmailProServiceAccountEmailAlias = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro/${service}/account/${email}/alias`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailAliasQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}/alias`] as const;
    }

    
export const getGetEmailProServiceAccountEmailAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailAliasQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>> = ({ signal }) => getEmailProServiceAccountEmailAlias(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>>
export type GetEmailProServiceAccountEmailAliasQueryError = unknown


export function useGetEmailProServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Aliases associated to this mailbox
 */

export function useGetEmailProServiceAccountEmailAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailAliasQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new alias
 */
export const postEmailProServiceAccountEmailAlias = (
    service: string,
    email: string,
    postEmailProServiceAccountEmailAliasBody: PostEmailProServiceAccountEmailAliasBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceAccountEmailAliasBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailAlias>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailAlias>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailAliasBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailAlias>>, {service: string;email: string;data: PostEmailProServiceAccountEmailAliasBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailProServiceAccountEmailAlias(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailAlias>>>
    export type PostEmailProServiceAccountEmailAliasMutationBody = PostEmailProServiceAccountEmailAliasBody
    export type PostEmailProServiceAccountEmailAliasMutationError = unknown

    /**
 * @summary Create new alias
 */
export const usePostEmailProServiceAccountEmailAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailAlias>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailAliasBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailAlias>>,
        TError,
        {service: string;email: string;data: PostEmailProServiceAccountEmailAliasBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing alias
 */
export const deleteEmailProServiceAccountEmailAliasAlias = (
    service: string,
    email: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/alias/${alias}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceAccountEmailAliasAliasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailAliasAlias>>, TError,{service: string;email: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailAliasAlias>>, TError,{service: string;email: string;alias: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailAliasAlias>>, {service: string;email: string;alias: string}> = (props) => {
          const {service,email,alias} = props ?? {};

          return  deleteEmailProServiceAccountEmailAliasAlias(service,email,alias,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceAccountEmailAliasAliasMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailAliasAlias>>>
    
    export type DeleteEmailProServiceAccountEmailAliasAliasMutationError = unknown

    /**
 * @summary Delete existing alias
 */
export const useDeleteEmailProServiceAccountEmailAliasAlias = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailAliasAlias>>, TError,{service: string;email: string;alias: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailAliasAlias>>,
        TError,
        {service: string;email: string;alias: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceAccountEmailAliasAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmailAliasAlias = (
    service: string,
    email: string,
    alias: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProAccountAliasOVH>(
      {url: `/email/pro/${service}/account/${email}/alias/${alias}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailAliasAliasQueryKey = (service: string,
    email: string,
    alias: string,) => {
    return [`/email/pro/${service}/account/${email}/alias/${alias}`] as const;
    }

    
export const getGetEmailProServiceAccountEmailAliasAliasQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError = unknown>(service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailAliasAliasQueryKey(service,email,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>> = ({ signal }) => getEmailProServiceAccountEmailAliasAlias(service,email,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && alias), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailAliasAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>>
export type GetEmailProServiceAccountEmailAliasAliasQueryError = unknown


export function useGetEmailProServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmailAliasAlias<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError = unknown>(
 service: string,
    email: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailAliasAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailAliasAliasQueryOptions(service,email,alias,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change mailbox password
 */
export const postEmailProServiceAccountEmailChangePassword = (
    service: string,
    email: string,
    postEmailProServiceAccountEmailChangePasswordBody: PostEmailProServiceAccountEmailChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceAccountEmailChangePasswordBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailChangePassword>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailChangePassword>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailChangePassword>>, {service: string;email: string;data: PostEmailProServiceAccountEmailChangePasswordBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailProServiceAccountEmailChangePassword(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailChangePassword>>>
    export type PostEmailProServiceAccountEmailChangePasswordMutationBody = PostEmailProServiceAccountEmailChangePasswordBody
    export type PostEmailProServiceAccountEmailChangePasswordMutationError = unknown

    /**
 * @summary Change mailbox password
 */
export const usePostEmailProServiceAccountEmailChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailChangePassword>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailChangePassword>>,
        TError,
        {service: string;email: string;data: PostEmailProServiceAccountEmailChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmailDiagnostics = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProAccountDiagnosisOVH>(
      {url: `/email/pro/${service}/account/${email}/diagnostics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailDiagnosticsQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}/diagnostics`] as const;
    }

    
export const getGetEmailProServiceAccountEmailDiagnosticsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailDiagnosticsQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>> = ({ signal }) => getEmailProServiceAccountEmailDiagnostics(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailDiagnosticsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>>
export type GetEmailProServiceAccountEmailDiagnosticsQueryError = unknown


export function useGetEmailProServiceAccountEmailDiagnostics<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailDiagnostics<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailDiagnostics<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmailDiagnostics<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailDiagnostics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailDiagnosticsQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new diagnosis request
 */
export const postEmailProServiceAccountEmailDiagnostics = (
    service: string,
    email: string,
    postEmailProServiceAccountEmailDiagnosticsBody: PostEmailProServiceAccountEmailDiagnosticsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/diagnostics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceAccountEmailDiagnosticsBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailDiagnosticsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailDiagnostics>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailDiagnosticsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailDiagnostics>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailDiagnosticsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailDiagnostics>>, {service: string;email: string;data: PostEmailProServiceAccountEmailDiagnosticsBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailProServiceAccountEmailDiagnostics(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailDiagnosticsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailDiagnostics>>>
    export type PostEmailProServiceAccountEmailDiagnosticsMutationBody = PostEmailProServiceAccountEmailDiagnosticsBody
    export type PostEmailProServiceAccountEmailDiagnosticsMutationError = unknown

    /**
 * @summary Create new diagnosis request
 */
export const usePostEmailProServiceAccountEmailDiagnostics = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailDiagnostics>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailDiagnosticsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailDiagnostics>>,
        TError,
        {service: string;email: string;data: PostEmailProServiceAccountEmailDiagnosticsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailDiagnosticsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Full access granted users for this mailbox
 */
export const getEmailProServiceAccountEmailFullAccess = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/pro/${service}/account/${email}/fullAccess`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailFullAccessQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}/fullAccess`] as const;
    }

    
export const getGetEmailProServiceAccountEmailFullAccessQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailFullAccessQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>> = ({ signal }) => getEmailProServiceAccountEmailFullAccess(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailFullAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>>
export type GetEmailProServiceAccountEmailFullAccessQueryError = unknown


export function useGetEmailProServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Full access granted users for this mailbox
 */

export function useGetEmailProServiceAccountEmailFullAccess<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailFullAccessQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow full access to a user
 */
export const postEmailProServiceAccountEmailFullAccess = (
    service: string,
    email: string,
    postEmailProServiceAccountEmailFullAccessBody: PostEmailProServiceAccountEmailFullAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/fullAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceAccountEmailFullAccessBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailFullAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailFullAccess>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailFullAccess>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailFullAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailFullAccess>>, {service: string;email: string;data: PostEmailProServiceAccountEmailFullAccessBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailProServiceAccountEmailFullAccess(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailFullAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailFullAccess>>>
    export type PostEmailProServiceAccountEmailFullAccessMutationBody = PostEmailProServiceAccountEmailFullAccessBody
    export type PostEmailProServiceAccountEmailFullAccessMutationError = unknown

    /**
 * @summary Allow full access to a user
 */
export const usePostEmailProServiceAccountEmailFullAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailFullAccess>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailFullAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailFullAccess>>,
        TError,
        {service: string;email: string;data: PostEmailProServiceAccountEmailFullAccessBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailFullAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke full access
 */
export const deleteEmailProServiceAccountEmailFullAccessAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/fullAccess/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceAccountEmailFullAccessAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailFullAccessAllowedAccountId>>, {service: string;email: string;allowedAccountId: number}> = (props) => {
          const {service,email,allowedAccountId} = props ?? {};

          return  deleteEmailProServiceAccountEmailFullAccessAllowedAccountId(service,email,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceAccountEmailFullAccessAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailFullAccessAllowedAccountId>>>
    
    export type DeleteEmailProServiceAccountEmailFullAccessAllowedAccountIdMutationError = unknown

    /**
 * @summary Revoke full access
 */
export const useDeleteEmailProServiceAccountEmailFullAccessAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailFullAccessAllowedAccountId>>,
        TError,
        {service: string;email: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceAccountEmailFullAccessAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmailFullAccessAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProAccountFullAccessOVH>(
      {url: `/email/pro/${service}/account/${email}/fullAccess/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailFullAccessAllowedAccountIdQueryKey = (service: string,
    email: string,
    allowedAccountId: number,) => {
    return [`/email/pro/${service}/account/${email}/fullAccess/${allowedAccountId}`] as const;
    }

    
export const getGetEmailProServiceAccountEmailFullAccessAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailFullAccessAllowedAccountIdQueryKey(service,email,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>> = ({ signal }) => getEmailProServiceAccountEmailFullAccessAllowedAccountId(service,email,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailFullAccessAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>>
export type GetEmailProServiceAccountEmailFullAccessAllowedAccountIdQueryError = unknown


export function useGetEmailProServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmailFullAccessAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailFullAccessAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailFullAccessAllowedAccountIdQueryOptions(service,email,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send as granted users for this mailbox
 */
export const getEmailProServiceAccountEmailSendAs = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/pro/${service}/account/${email}/sendAs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailSendAsQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}/sendAs`] as const;
    }

    
export const getGetEmailProServiceAccountEmailSendAsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailSendAsQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>> = ({ signal }) => getEmailProServiceAccountEmailSendAs(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailSendAsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>>
export type GetEmailProServiceAccountEmailSendAsQueryError = unknown


export function useGetEmailProServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Send as granted users for this mailbox
 */

export function useGetEmailProServiceAccountEmailSendAs<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailSendAsQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to send mails from this mailbox
 */
export const postEmailProServiceAccountEmailSendAs = (
    service: string,
    email: string,
    postEmailProServiceAccountEmailSendAsBody: PostEmailProServiceAccountEmailSendAsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/sendAs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceAccountEmailSendAsBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailSendAsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendAs>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendAs>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailSendAsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendAs>>, {service: string;email: string;data: PostEmailProServiceAccountEmailSendAsBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailProServiceAccountEmailSendAs(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailSendAsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendAs>>>
    export type PostEmailProServiceAccountEmailSendAsMutationBody = PostEmailProServiceAccountEmailSendAsBody
    export type PostEmailProServiceAccountEmailSendAsMutationError = unknown

    /**
 * @summary Allow another user to send mails from this mailbox
 */
export const usePostEmailProServiceAccountEmailSendAs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendAs>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailSendAsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendAs>>,
        TError,
        {service: string;email: string;data: PostEmailProServiceAccountEmailSendAsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailSendAsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for sendAs
 */
export const deleteEmailProServiceAccountEmailSendAsAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/sendAs/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceAccountEmailSendAsAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendAsAllowedAccountId>>, {service: string;email: string;allowedAccountId: number}> = (props) => {
          const {service,email,allowedAccountId} = props ?? {};

          return  deleteEmailProServiceAccountEmailSendAsAllowedAccountId(service,email,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceAccountEmailSendAsAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendAsAllowedAccountId>>>
    
    export type DeleteEmailProServiceAccountEmailSendAsAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for sendAs
 */
export const useDeleteEmailProServiceAccountEmailSendAsAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendAsAllowedAccountId>>,
        TError,
        {service: string;email: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceAccountEmailSendAsAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmailSendAsAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProAccountSendAsOVH>(
      {url: `/email/pro/${service}/account/${email}/sendAs/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailSendAsAllowedAccountIdQueryKey = (service: string,
    email: string,
    allowedAccountId: number,) => {
    return [`/email/pro/${service}/account/${email}/sendAs/${allowedAccountId}`] as const;
    }

    
export const getGetEmailProServiceAccountEmailSendAsAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailSendAsAllowedAccountIdQueryKey(service,email,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>> = ({ signal }) => getEmailProServiceAccountEmailSendAsAllowedAccountId(service,email,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailSendAsAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>>
export type GetEmailProServiceAccountEmailSendAsAllowedAccountIdQueryError = unknown


export function useGetEmailProServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmailSendAsAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendAsAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailSendAsAllowedAccountIdQueryOptions(service,email,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary SendOnBehalfTo granted users for this mailbox
 */
export const getEmailProServiceAccountEmailSendOnBehalfTo = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/pro/${service}/account/${email}/sendOnBehalfTo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailSendOnBehalfToQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}/sendOnBehalfTo`] as const;
    }

    
export const getGetEmailProServiceAccountEmailSendOnBehalfToQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailSendOnBehalfToQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>> = ({ signal }) => getEmailProServiceAccountEmailSendOnBehalfTo(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailSendOnBehalfToQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>>
export type GetEmailProServiceAccountEmailSendOnBehalfToQueryError = unknown


export function useGetEmailProServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary SendOnBehalfTo granted users for this mailbox
 */

export function useGetEmailProServiceAccountEmailSendOnBehalfTo<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailSendOnBehalfToQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Allow another user to Send On Behalf To mails from this mailbox
 */
export const postEmailProServiceAccountEmailSendOnBehalfTo = (
    service: string,
    email: string,
    postEmailProServiceAccountEmailSendOnBehalfToBody: PostEmailProServiceAccountEmailSendOnBehalfToBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/sendOnBehalfTo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceAccountEmailSendOnBehalfToBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailSendOnBehalfToMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendOnBehalfTo>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendOnBehalfTo>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailSendOnBehalfToBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendOnBehalfTo>>, {service: string;email: string;data: PostEmailProServiceAccountEmailSendOnBehalfToBody}> = (props) => {
          const {service,email,data} = props ?? {};

          return  postEmailProServiceAccountEmailSendOnBehalfTo(service,email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailSendOnBehalfToMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendOnBehalfTo>>>
    export type PostEmailProServiceAccountEmailSendOnBehalfToMutationBody = PostEmailProServiceAccountEmailSendOnBehalfToBody
    export type PostEmailProServiceAccountEmailSendOnBehalfToMutationError = unknown

    /**
 * @summary Allow another user to Send On Behalf To mails from this mailbox
 */
export const usePostEmailProServiceAccountEmailSendOnBehalfTo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendOnBehalfTo>>, TError,{service: string;email: string;data: PostEmailProServiceAccountEmailSendOnBehalfToBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailSendOnBehalfTo>>,
        TError,
        {service: string;email: string;data: PostEmailProServiceAccountEmailSendOnBehalfToBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailSendOnBehalfToMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/sendOnBehalfTo/${allowedAccountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, {service: string;email: string;allowedAccountId: number}> = (props) => {
          const {service,email,allowedAccountId} = props ?? {};

          return  deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId(service,email,allowedAccountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>>
    
    export type DeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationError = unknown

    /**
 * @summary Delete allowed user for SendOnBehalfTo
 */
export const useDeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError,{service: string;email: string;allowedAccountId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>,
        TError,
        {service: string;email: string;allowedAccountId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId = (
    service: string,
    email: string,
    allowedAccountId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProAccountSendOnBehalfToOVH>(
      {url: `/email/pro/${service}/account/${email}/sendOnBehalfTo/${allowedAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryKey = (service: string,
    email: string,
    allowedAccountId: number,) => {
    return [`/email/pro/${service}/account/${email}/sendOnBehalfTo/${allowedAccountId}`] as const;
    }

    
export const getGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryKey(service,email,allowedAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>> = ({ signal }) => getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId(service,email,allowedAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && allowedAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>>
export type GetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryError = unknown


export function useGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError = unknown>(
 service: string,
    email: string,
    allowedAccountId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailSendOnBehalfToAllowedAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdQueryOptions(service,email,allowedAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pending task for this mailbox
 */
export const getEmailProServiceAccountEmailTasks = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/pro/${service}/account/${email}/tasks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailTasksQueryKey = (service: string,
    email: string,) => {
    return [`/email/pro/${service}/account/${email}/tasks`] as const;
    }

    
export const getGetEmailProServiceAccountEmailTasksQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError = unknown>(service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailTasksQueryKey(service,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>> = ({ signal }) => getEmailProServiceAccountEmailTasks(service,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>>
export type GetEmailProServiceAccountEmailTasksQueryError = unknown


export function useGetEmailProServiceAccountEmailTasks<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError = unknown>(
 service: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailTasks<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailTasks<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending task for this mailbox
 */

export function useGetEmailProServiceAccountEmailTasks<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError = unknown>(
 service: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailTasksQueryOptions(service,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailProServiceAccountEmailTasksId = (
    service: string,
    email: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/account/${email}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceAccountEmailTasksIdQueryKey = (service: string,
    email: string,
    id: number,) => {
    return [`/email/pro/${service}/account/${email}/tasks/${id}`] as const;
    }

    
export const getGetEmailProServiceAccountEmailTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError = unknown>(service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceAccountEmailTasksIdQueryKey(service,email,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>> = ({ signal }) => getEmailProServiceAccountEmailTasksId(service,email,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && email && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceAccountEmailTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>>
export type GetEmailProServiceAccountEmailTasksIdQueryError = unknown


export function useGetEmailProServiceAccountEmailTasksId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailTasksId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceAccountEmailTasksId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceAccountEmailTasksId<TData = Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError = unknown>(
 service: string,
    email: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceAccountEmailTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceAccountEmailTasksIdQueryOptions(service,email,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Terminate account at expiration date
 */
export const postEmailProServiceAccountEmailTerminate = (
    service: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/pro/${service}/account/${email}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailProServiceAccountEmailTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailTerminate>>, TError,{service: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailTerminate>>, TError,{service: string;email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceAccountEmailTerminate>>, {service: string;email: string}> = (props) => {
          const {service,email} = props ?? {};

          return  postEmailProServiceAccountEmailTerminate(service,email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceAccountEmailTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceAccountEmailTerminate>>>
    
    export type PostEmailProServiceAccountEmailTerminateMutationError = unknown

    /**
 * @summary Terminate account at expiration date
 */
export const usePostEmailProServiceAccountEmailTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceAccountEmailTerminate>>, TError,{service: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceAccountEmailTerminate>>,
        TError,
        {service: string;email: string},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceAccountEmailTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Detects billing transition status for the service
 */
export const getEmailProServiceBillingMigrated = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/email/pro/${service}/billingMigrated`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceBillingMigratedQueryKey = (service: string,) => {
    return [`/email/pro/${service}/billingMigrated`] as const;
    }

    
export const getGetEmailProServiceBillingMigratedQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceBillingMigratedQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>> = ({ signal }) => getEmailProServiceBillingMigrated(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceBillingMigratedQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>>
export type GetEmailProServiceBillingMigratedQueryError = unknown


export function useGetEmailProServiceBillingMigrated<TData = Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceBillingMigrated<TData = Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceBillingMigrated<TData = Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detects billing transition status for the service
 */

export function useGetEmailProServiceBillingMigrated<TData = Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingMigrated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceBillingMigratedQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Emailpro billing plan
 */
export const getEmailProServiceBillingPlan = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/pro/${service}/billingPlan`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceBillingPlanQueryKey = (service: string,) => {
    return [`/email/pro/${service}/billingPlan`] as const;
    }

    
export const getGetEmailProServiceBillingPlanQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceBillingPlanQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>> = ({ signal }) => getEmailProServiceBillingPlan(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceBillingPlanQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>>
export type GetEmailProServiceBillingPlanQueryError = unknown


export function useGetEmailProServiceBillingPlan<TData = Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceBillingPlan<TData = Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceBillingPlan<TData = Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Emailpro billing plan
 */

export function useGetEmailProServiceBillingPlan<TData = Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceBillingPlan>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceBillingPlanQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postEmailProServiceChangeContact = (
    service: string,
    postEmailProServiceChangeContactBody: PostEmailProServiceChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/pro/${service}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceChangeContactBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceChangeContact>>, TError,{service: string;data: PostEmailProServiceChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceChangeContact>>, TError,{service: string;data: PostEmailProServiceChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceChangeContact>>, {service: string;data: PostEmailProServiceChangeContactBody}> = (props) => {
          const {service,data} = props ?? {};

          return  postEmailProServiceChangeContact(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceChangeContact>>>
    export type PostEmailProServiceChangeContactMutationBody = PostEmailProServiceChangeContactBody
    export type PostEmailProServiceChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostEmailProServiceChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceChangeContact>>, TError,{service: string;data: PostEmailProServiceChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceChangeContact>>,
        TError,
        {service: string;data: PostEmailProServiceChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Domains associated to this service
 */
export const getEmailProServiceDomain = (
    service: string,
    params?: GetEmailProServiceDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro/${service}/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainQueryKey = (service: string,
    params?: GetEmailProServiceDomainParams,) => {
    return [`/email/pro/${service}/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailProServiceDomainQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError = unknown>(service: string,
    params?: GetEmailProServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomain>>> = ({ signal }) => getEmailProServiceDomain(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomain>>>
export type GetEmailProServiceDomainQueryError = unknown


export function useGetEmailProServiceDomain<TData = Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError = unknown>(
 service: string,
    params: undefined |  GetEmailProServiceDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomain<TData = Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomain<TData = Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domains associated to this service
 */

export function useGetEmailProServiceDomain<TData = Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new domain in pro services
 */
export const postEmailProServiceDomain = (
    service: string,
    postEmailProServiceDomainBody: PostEmailProServiceDomainBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceDomainBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomain>>, TError,{service: string;data: PostEmailProServiceDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomain>>, TError,{service: string;data: PostEmailProServiceDomainBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceDomain>>, {service: string;data: PostEmailProServiceDomainBody}> = (props) => {
          const {service,data} = props ?? {};

          return  postEmailProServiceDomain(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceDomain>>>
    export type PostEmailProServiceDomainMutationBody = PostEmailProServiceDomainBody
    export type PostEmailProServiceDomainMutationError = unknown

    /**
 * @summary Create new domain in pro services
 */
export const usePostEmailProServiceDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomain>>, TError,{service: string;data: PostEmailProServiceDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceDomain>>,
        TError,
        {service: string;data: PostEmailProServiceDomainBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing domain in pro services
 */
export const deleteEmailProServiceDomainDomainName = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceDomainDomainNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainName>>, TError,{service: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainName>>, TError,{service: string;domainName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainName>>, {service: string;domainName: string}> = (props) => {
          const {service,domainName} = props ?? {};

          return  deleteEmailProServiceDomainDomainName(service,domainName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceDomainDomainNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainName>>>
    
    export type DeleteEmailProServiceDomainDomainNameMutationError = unknown

    /**
 * @summary Delete existing domain in pro services
 */
export const useDeleteEmailProServiceDomainDomainName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainName>>, TError,{service: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainName>>,
        TError,
        {service: string;domainName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceDomainDomainNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceDomainDomainName = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProDomainNativeOVH>(
      {url: `/email/pro/${service}/domain/${domainName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainDomainNameQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/pro/${service}/domain/${domainName}`] as const;
    }

    
export const getGetEmailProServiceDomainDomainNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainDomainNameQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>> = ({ signal }) => getEmailProServiceDomainDomainName(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainDomainNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>>
export type GetEmailProServiceDomainDomainNameQueryError = unknown


export function useGetEmailProServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceDomainDomainName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainDomainNameQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailProServiceDomainDomainName = (
    service: string,
    domainName: string,
    emailProDomainOVH: NonReadonly<EmailProDomainOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}/domain/${domainName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailProDomainOVH
    },
      options);
    }
  


export const getPutEmailProServiceDomainDomainNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceDomainDomainName>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceDomainDomainName>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDomainOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailProServiceDomainDomainName>>, {service: string;domainName: string;data: NonReadonly<EmailProDomainOVH>}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  putEmailProServiceDomainDomainName(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailProServiceDomainDomainNameMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailProServiceDomainDomainName>>>
    export type PutEmailProServiceDomainDomainNameMutationBody = NonReadonly<EmailProDomainOVH>
    export type PutEmailProServiceDomainDomainNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailProServiceDomainDomainName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceDomainDomainName>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDomainOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailProServiceDomainDomainName>>,
        TError,
        {service: string;domainName: string;data: NonReadonly<EmailProDomainOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailProServiceDomainDomainNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing organization disclaimer
 */
export const deleteEmailProServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/disclaimer`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDisclaimer>>, {service: string;domainName: string}> = (props) => {
          const {service,domainName} = props ?? {};

          return  deleteEmailProServiceDomainDomainNameDisclaimer(service,domainName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDisclaimer>>>
    
    export type DeleteEmailProServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Delete existing organization disclaimer
 */
export const useDeleteEmailProServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDisclaimer>>,
        TError,
        {service: string;domainName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProDisclaimerNativeOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/disclaimer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainDomainNameDisclaimerQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/pro/${service}/domain/${domainName}/disclaimer`] as const;
    }

    
export const getGetEmailProServiceDomainDomainNameDisclaimerQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainDomainNameDisclaimerQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>> = ({ signal }) => getEmailProServiceDomainDomainNameDisclaimer(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainDomainNameDisclaimerQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>>
export type GetEmailProServiceDomainDomainNameDisclaimerQueryError = unknown


export function useGetEmailProServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceDomainDomainNameDisclaimer<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainDomainNameDisclaimerQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create organization disclaimer of each email
 */
export const postEmailProServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
    postEmailProServiceDomainDomainNameDisclaimerBody: PostEmailProServiceDomainDomainNameDisclaimerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/disclaimer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceDomainDomainNameDisclaimerBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDisclaimerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDisclaimerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDisclaimer>>, {service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDisclaimerBody}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  postEmailProServiceDomainDomainNameDisclaimer(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDisclaimer>>>
    export type PostEmailProServiceDomainDomainNameDisclaimerMutationBody = PostEmailProServiceDomainDomainNameDisclaimerBody
    export type PostEmailProServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Create organization disclaimer of each email
 */
export const usePostEmailProServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDisclaimerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDisclaimer>>,
        TError,
        {service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDisclaimerBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putEmailProServiceDomainDomainNameDisclaimer = (
    service: string,
    domainName: string,
    emailProDisclaimerOVH: NonReadonly<EmailProDisclaimerOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}/domain/${domainName}/disclaimer`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailProDisclaimerOVH
    },
      options);
    }
  


export const getPutEmailProServiceDomainDomainNameDisclaimerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailProServiceDomainDomainNameDisclaimer>>, {service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  putEmailProServiceDomainDomainNameDisclaimer(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailProServiceDomainDomainNameDisclaimerMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailProServiceDomainDomainNameDisclaimer>>>
    export type PutEmailProServiceDomainDomainNameDisclaimerMutationBody = NonReadonly<EmailProDisclaimerOVH>
    export type PutEmailProServiceDomainDomainNameDisclaimerMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailProServiceDomainDomainNameDisclaimer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceDomainDomainNameDisclaimer>>, TError,{service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailProServiceDomainDomainNameDisclaimer>>,
        TError,
        {service: string;domainName: string;data: NonReadonly<EmailProDisclaimerOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailProServiceDomainDomainNameDisclaimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get diclaimer attributes to substitute with Active Directory properties
 */
export const getEmailProServiceDomainDomainNameDisclaimerAttribute = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProDisclaimerAttributeEnumOVH[]>(
      {url: `/email/pro/${service}/domain/${domainName}/disclaimerAttribute`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainDomainNameDisclaimerAttributeQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/pro/${service}/domain/${domainName}/disclaimerAttribute`] as const;
    }

    
export const getGetEmailProServiceDomainDomainNameDisclaimerAttributeQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainDomainNameDisclaimerAttributeQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>> = ({ signal }) => getEmailProServiceDomainDomainNameDisclaimerAttribute(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainDomainNameDisclaimerAttributeQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>>
export type GetEmailProServiceDomainDomainNameDisclaimerAttributeQueryError = unknown


export function useGetEmailProServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get diclaimer attributes to substitute with Active Directory properties
 */

export function useGetEmailProServiceDomainDomainNameDisclaimerAttribute<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDisclaimerAttribute>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainDomainNameDisclaimerAttributeQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary DKIM associated to this domain
 */
export const getEmailProServiceDomainDomainNameDkim = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro/${service}/domain/${domainName}/dkim`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainDomainNameDkimQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/pro/${service}/domain/${domainName}/dkim`] as const;
    }

    
export const getGetEmailProServiceDomainDomainNameDkimQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainDomainNameDkimQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>> = ({ signal }) => getEmailProServiceDomainDomainNameDkim(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainDomainNameDkimQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>>
export type GetEmailProServiceDomainDomainNameDkimQueryError = unknown


export function useGetEmailProServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary DKIM associated to this domain
 */

export function useGetEmailProServiceDomainDomainNameDkim<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainDomainNameDkimQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create DKIM selector on this domain
 */
export const postEmailProServiceDomainDomainNameDkim = (
    service: string,
    domainName: string,
    postEmailProServiceDomainDomainNameDkimBody: PostEmailProServiceDomainDomainNameDkimBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/dkim`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceDomainDomainNameDkimBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceDomainDomainNameDkimMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkim>>, TError,{service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDkimBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkim>>, TError,{service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDkimBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkim>>, {service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDkimBody}> = (props) => {
          const {service,domainName,data} = props ?? {};

          return  postEmailProServiceDomainDomainNameDkim(service,domainName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceDomainDomainNameDkimMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkim>>>
    export type PostEmailProServiceDomainDomainNameDkimMutationBody = PostEmailProServiceDomainDomainNameDkimBody
    export type PostEmailProServiceDomainDomainNameDkimMutationError = unknown

    /**
 * @summary Create DKIM selector on this domain
 */
export const usePostEmailProServiceDomainDomainNameDkim = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkim>>, TError,{service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDkimBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkim>>,
        TError,
        {service: string;domainName: string;data: PostEmailProServiceDomainDomainNameDkimBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceDomainDomainNameDkimMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete DKIM selector on this domain
 */
export const deleteEmailProServiceDomainDomainNameDkimSelectorName = (
    service: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/dkim/${selectorName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceDomainDomainNameDkimSelectorNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDkimSelectorName>>, TError,{service: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDkimSelectorName>>, TError,{service: string;domainName: string;selectorName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDkimSelectorName>>, {service: string;domainName: string;selectorName: string}> = (props) => {
          const {service,domainName,selectorName} = props ?? {};

          return  deleteEmailProServiceDomainDomainNameDkimSelectorName(service,domainName,selectorName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceDomainDomainNameDkimSelectorNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDkimSelectorName>>>
    
    export type DeleteEmailProServiceDomainDomainNameDkimSelectorNameMutationError = unknown

    /**
 * @summary Delete DKIM selector on this domain
 */
export const useDeleteEmailProServiceDomainDomainNameDkimSelectorName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDkimSelectorName>>, TError,{service: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceDomainDomainNameDkimSelectorName>>,
        TError,
        {service: string;domainName: string;selectorName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceDomainDomainNameDkimSelectorNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceDomainDomainNameDkimSelectorName = (
    service: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProDkimOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/dkim/${selectorName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainDomainNameDkimSelectorNameQueryKey = (service: string,
    domainName: string,
    selectorName: string,) => {
    return [`/email/pro/${service}/domain/${domainName}/dkim/${selectorName}`] as const;
    }

    
export const getGetEmailProServiceDomainDomainNameDkimSelectorNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(service: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainDomainNameDkimSelectorNameQueryKey(service,domainName,selectorName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>> = ({ signal }) => getEmailProServiceDomainDomainNameDkimSelectorName(service,domainName,selectorName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName && selectorName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainDomainNameDkimSelectorNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>>
export type GetEmailProServiceDomainDomainNameDkimSelectorNameQueryError = unknown


export function useGetEmailProServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 service: string,
    domainName: string,
    selectorName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 service: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 service: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceDomainDomainNameDkimSelectorName<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError = unknown>(
 service: string,
    domainName: string,
    selectorName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelectorName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainDomainNameDkimSelectorNameQueryOptions(service,domainName,selectorName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary disable dkim signing
 */
export const postEmailProServiceDomainDomainNameDkimSelectorNameDisable = (
    service: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/dkim/${selectorName}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailProServiceDomainDomainNameDkimSelectorNameDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameDisable>>, TError,{service: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameDisable>>, TError,{service: string;domainName: string;selectorName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameDisable>>, {service: string;domainName: string;selectorName: string}> = (props) => {
          const {service,domainName,selectorName} = props ?? {};

          return  postEmailProServiceDomainDomainNameDkimSelectorNameDisable(service,domainName,selectorName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceDomainDomainNameDkimSelectorNameDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameDisable>>>
    
    export type PostEmailProServiceDomainDomainNameDkimSelectorNameDisableMutationError = unknown

    /**
 * @summary disable dkim signing
 */
export const usePostEmailProServiceDomainDomainNameDkimSelectorNameDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameDisable>>, TError,{service: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameDisable>>,
        TError,
        {service: string;domainName: string;selectorName: string},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceDomainDomainNameDkimSelectorNameDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary enable dkim signing or switch selector used
 */
export const postEmailProServiceDomainDomainNameDkimSelectorNameEnable = (
    service: string,
    domainName: string,
    selectorName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/domain/${domainName}/dkim/${selectorName}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailProServiceDomainDomainNameDkimSelectorNameEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameEnable>>, TError,{service: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameEnable>>, TError,{service: string;domainName: string;selectorName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameEnable>>, {service: string;domainName: string;selectorName: string}> = (props) => {
          const {service,domainName,selectorName} = props ?? {};

          return  postEmailProServiceDomainDomainNameDkimSelectorNameEnable(service,domainName,selectorName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceDomainDomainNameDkimSelectorNameEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameEnable>>>
    
    export type PostEmailProServiceDomainDomainNameDkimSelectorNameEnableMutationError = unknown

    /**
 * @summary enable dkim signing or switch selector used
 */
export const usePostEmailProServiceDomainDomainNameDkimSelectorNameEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameEnable>>, TError,{service: string;domainName: string;selectorName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceDomainDomainNameDkimSelectorNameEnable>>,
        TError,
        {service: string;domainName: string;selectorName: string},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceDomainDomainNameDkimSelectorNameEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get dkim selector list
 */
export const getEmailProServiceDomainDomainNameDkimSelector = (
    service: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro/${service}/domain/${domainName}/dkimSelector`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceDomainDomainNameDkimSelectorQueryKey = (service: string,
    domainName: string,) => {
    return [`/email/pro/${service}/domain/${domainName}/dkimSelector`] as const;
    }

    
export const getGetEmailProServiceDomainDomainNameDkimSelectorQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError = unknown>(service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceDomainDomainNameDkimSelectorQueryKey(service,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>> = ({ signal }) => getEmailProServiceDomainDomainNameDkimSelector(service,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceDomainDomainNameDkimSelectorQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>>
export type GetEmailProServiceDomainDomainNameDkimSelectorQueryError = unknown


export function useGetEmailProServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 service: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get dkim selector list
 */

export function useGetEmailProServiceDomainDomainNameDkimSelector<TData = Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError = unknown>(
 service: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceDomainDomainNameDkimSelector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceDomainDomainNameDkimSelectorQueryOptions(service,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary External contacts for this service
 */
export const getEmailProServiceExternalContact = (
    service: string,
    params?: GetEmailProServiceExternalContactParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/pro/${service}/externalContact`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailProServiceExternalContactQueryKey = (service: string,
    params?: GetEmailProServiceExternalContactParams,) => {
    return [`/email/pro/${service}/externalContact`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailProServiceExternalContactQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError = unknown>(service: string,
    params?: GetEmailProServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceExternalContactQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>> = ({ signal }) => getEmailProServiceExternalContact(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceExternalContactQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>>
export type GetEmailProServiceExternalContactQueryError = unknown


export function useGetEmailProServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError = unknown>(
 service: string,
    params: undefined |  GetEmailProServiceExternalContactParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceExternalContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceExternalContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary External contacts for this service
 */

export function useGetEmailProServiceExternalContact<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError = unknown>(
 service: string,
    params?: GetEmailProServiceExternalContactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceExternalContactQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary create new external contact
 */
export const postEmailProServiceExternalContact = (
    service: string,
    postEmailProServiceExternalContactBody: PostEmailProServiceExternalContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/externalContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailProServiceExternalContactBody, signal
    },
      options);
    }
  


export const getPostEmailProServiceExternalContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceExternalContact>>, TError,{service: string;data: PostEmailProServiceExternalContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceExternalContact>>, TError,{service: string;data: PostEmailProServiceExternalContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceExternalContact>>, {service: string;data: PostEmailProServiceExternalContactBody}> = (props) => {
          const {service,data} = props ?? {};

          return  postEmailProServiceExternalContact(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceExternalContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceExternalContact>>>
    export type PostEmailProServiceExternalContactMutationBody = PostEmailProServiceExternalContactBody
    export type PostEmailProServiceExternalContactMutationError = unknown

    /**
 * @summary create new external contact
 */
export const usePostEmailProServiceExternalContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceExternalContact>>, TError,{service: string;data: PostEmailProServiceExternalContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceExternalContact>>,
        TError,
        {service: string;data: PostEmailProServiceExternalContactBody},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceExternalContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary delete external contact
 */
export const deleteEmailProServiceExternalContactExternalEmailAddress = (
    service: string,
    externalEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/externalContact/${externalEmailAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailProServiceExternalContactExternalEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailProServiceExternalContactExternalEmailAddress>>, {service: string;externalEmailAddress: string}> = (props) => {
          const {service,externalEmailAddress} = props ?? {};

          return  deleteEmailProServiceExternalContactExternalEmailAddress(service,externalEmailAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailProServiceExternalContactExternalEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailProServiceExternalContactExternalEmailAddress>>>
    
    export type DeleteEmailProServiceExternalContactExternalEmailAddressMutationError = unknown

    /**
 * @summary delete external contact
 */
export const useDeleteEmailProServiceExternalContactExternalEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailProServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailProServiceExternalContactExternalEmailAddress>>,
        TError,
        {service: string;externalEmailAddress: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailProServiceExternalContactExternalEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceExternalContactExternalEmailAddress = (
    service: string,
    externalEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProExternalContactNativeOVH>(
      {url: `/email/pro/${service}/externalContact/${externalEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceExternalContactExternalEmailAddressQueryKey = (service: string,
    externalEmailAddress: string,) => {
    return [`/email/pro/${service}/externalContact/${externalEmailAddress}`] as const;
    }

    
export const getGetEmailProServiceExternalContactExternalEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError = unknown>(service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceExternalContactExternalEmailAddressQueryKey(service,externalEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>> = ({ signal }) => getEmailProServiceExternalContactExternalEmailAddress(service,externalEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && externalEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceExternalContactExternalEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>>
export type GetEmailProServiceExternalContactExternalEmailAddressQueryError = unknown


export function useGetEmailProServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceExternalContactExternalEmailAddress<TData = Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError = unknown>(
 service: string,
    externalEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceExternalContactExternalEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceExternalContactExternalEmailAddressQueryOptions(service,externalEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailProServiceExternalContactExternalEmailAddress = (
    service: string,
    externalEmailAddress: string,
    emailProExternalContactOVH: NonReadonly<EmailProExternalContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}/externalContact/${externalEmailAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailProExternalContactOVH
    },
      options);
    }
  


export const getPutEmailProServiceExternalContactExternalEmailAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string;data: NonReadonly<EmailProExternalContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string;data: NonReadonly<EmailProExternalContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailProServiceExternalContactExternalEmailAddress>>, {service: string;externalEmailAddress: string;data: NonReadonly<EmailProExternalContactOVH>}> = (props) => {
          const {service,externalEmailAddress,data} = props ?? {};

          return  putEmailProServiceExternalContactExternalEmailAddress(service,externalEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailProServiceExternalContactExternalEmailAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailProServiceExternalContactExternalEmailAddress>>>
    export type PutEmailProServiceExternalContactExternalEmailAddressMutationBody = NonReadonly<EmailProExternalContactOVH>
    export type PutEmailProServiceExternalContactExternalEmailAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailProServiceExternalContactExternalEmailAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceExternalContactExternalEmailAddress>>, TError,{service: string;externalEmailAddress: string;data: NonReadonly<EmailProExternalContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailProServiceExternalContactExternalEmailAddress>>,
        TError,
        {service: string;externalEmailAddress: string;data: NonReadonly<EmailProExternalContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailProServiceExternalContactExternalEmailAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailProServiceServer = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProServerOVH>(
      {url: `/email/pro/${service}/server`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceServerQueryKey = (service: string,) => {
    return [`/email/pro/${service}/server`] as const;
    }

    
export const getGetEmailProServiceServerQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceServer>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceServerQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceServer>>> = ({ signal }) => getEmailProServiceServer(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceServerQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceServer>>>
export type GetEmailProServiceServerQueryError = unknown


export function useGetEmailProServiceServer<TData = Awaited<ReturnType<typeof getEmailProServiceServer>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceServer<TData = Awaited<ReturnType<typeof getEmailProServiceServer>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceServer<TData = Awaited<ReturnType<typeof getEmailProServiceServer>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceServer<TData = Awaited<ReturnType<typeof getEmailProServiceServer>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceServerQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getEmailProServiceServiceInfos = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/email/pro/${service}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceServiceInfosQueryKey = (service: string,) => {
    return [`/email/pro/${service}/serviceInfos`] as const;
    }

    
export const getGetEmailProServiceServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceServiceInfosQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>> = ({ signal }) => getEmailProServiceServiceInfos(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>>
export type GetEmailProServiceServiceInfosQueryError = unknown


export function useGetEmailProServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetEmailProServiceServiceInfos<TData = Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceServiceInfosQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putEmailProServiceServiceInfos = (
    service: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutEmailProServiceServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceServiceInfos>>, TError,{service: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceServiceInfos>>, TError,{service: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailProServiceServiceInfos>>, {service: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {service,data} = props ?? {};

          return  putEmailProServiceServiceInfos(service,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailProServiceServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailProServiceServiceInfos>>>
    export type PutEmailProServiceServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutEmailProServiceServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutEmailProServiceServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailProServiceServiceInfos>>, TError,{service: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailProServiceServiceInfos>>,
        TError,
        {service: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailProServiceServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Pending actions
 */
export const getEmailProServiceTask = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/pro/${service}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceTaskQueryKey = (service: string,) => {
    return [`/email/pro/${service}/task`] as const;
    }

    
export const getGetEmailProServiceTaskQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceTask>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceTaskQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceTask>>> = ({ signal }) => getEmailProServiceTask(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceTask>>>
export type GetEmailProServiceTaskQueryError = unknown


export function useGetEmailProServiceTask<TData = Awaited<ReturnType<typeof getEmailProServiceTask>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceTask<TData = Awaited<ReturnType<typeof getEmailProServiceTask>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceTask<TData = Awaited<ReturnType<typeof getEmailProServiceTask>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pending actions
 */

export function useGetEmailProServiceTask<TData = Awaited<ReturnType<typeof getEmailProServiceTask>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceTaskQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailProServiceTaskId = (
    service: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailProTaskOVH>(
      {url: `/email/pro/${service}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailProServiceTaskIdQueryKey = (service: string,
    id: number,) => {
    return [`/email/pro/${service}/task/${id}`] as const;
    }

    
export const getGetEmailProServiceTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError = unknown>(service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailProServiceTaskIdQueryKey(service,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailProServiceTaskId>>> = ({ signal }) => getEmailProServiceTaskId(service,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailProServiceTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailProServiceTaskId>>>
export type GetEmailProServiceTaskIdQueryError = unknown


export function useGetEmailProServiceTaskId<TData = Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceTaskId<TData = Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailProServiceTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailProServiceTaskId<TData = Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailProServiceTaskId<TData = Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError = unknown>(
 service: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailProServiceTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailProServiceTaskIdQueryOptions(service,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update spam and virus flags on all active accounts
 */
export const postEmailProServiceUpdateFlagsOnAllAccounts = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/pro/${service}/updateFlagsOnAllAccounts`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailProServiceUpdateFlagsOnAllAccountsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceUpdateFlagsOnAllAccounts>>, TError,{service: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceUpdateFlagsOnAllAccounts>>, TError,{service: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailProServiceUpdateFlagsOnAllAccounts>>, {service: string}> = (props) => {
          const {service} = props ?? {};

          return  postEmailProServiceUpdateFlagsOnAllAccounts(service,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailProServiceUpdateFlagsOnAllAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailProServiceUpdateFlagsOnAllAccounts>>>
    
    export type PostEmailProServiceUpdateFlagsOnAllAccountsMutationError = unknown

    /**
 * @summary Update spam and virus flags on all active accounts
 */
export const usePostEmailProServiceUpdateFlagsOnAllAccounts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailProServiceUpdateFlagsOnAllAccounts>>, TError,{service: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailProServiceUpdateFlagsOnAllAccounts>>,
        TError,
        {service: string},
        TContext
      > => {

      const mutationOptions = getPostEmailProServiceUpdateFlagsOnAllAccountsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

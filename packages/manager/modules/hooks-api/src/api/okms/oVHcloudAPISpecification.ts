/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DbaasLogsLogKindOVH,
  DbaasLogsLogSubscriptionCreationOVH,
  DbaasLogsLogSubscriptionOVH,
  DbaasLogsLogSubscriptionResponseOVH,
  DbaasLogsLogUrlCreationOVH,
  DbaasLogsTemporaryLogsLinkOVH,
  DeleteOkmsResourceOkmsIdCredentialCredentialId400,
  GetOkmsReferenceServiceKeyParams,
  GetOkmsResourceOkmsIdCredential400,
  GetOkmsResourceOkmsIdLogSubscriptionParams,
  GetOkmsResourceOkmsIdParams,
  GetOkmsResourceOkmsIdServiceKey400,
  GetOkmsResourceOkmsIdServiceKeyKeyIdParams,
  GetOkmsResourceOkmsIdServiceKeyParams,
  GetOkmsResourceParams,
  OkmsCredentialCreationOVH,
  OkmsCredentialCreationResponseOVH,
  OkmsCredentialGetResponseOVH,
  OkmsReferenceServiceKeyResponseOVH,
  OkmsResourceResponseWithIAMOVH,
  OkmsServiceKeyCreationOVH,
  OkmsServiceKeyResponseOVH,
  OkmsServiceKeyResponseWithIAMOVH,
  OkmsServiceKeyUpdateOVH,
  PostOkmsResourceOkmsIdCredential400,
  PostOkmsResourceOkmsIdServiceKey400,
  PutOkmsResourceOkmsIdServiceKeyKeyId400
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get service key type, size, curve and operations combination
 */
export const getOkmsReferenceServiceKey = (
    params: GetOkmsReferenceServiceKeyParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsReferenceServiceKeyResponseOVH[]>(
      {url: `/okms/reference/serviceKey`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOkmsReferenceServiceKeyQueryKey = (params: GetOkmsReferenceServiceKeyParams,) => {
    return [`/okms/reference/serviceKey`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOkmsReferenceServiceKeyQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError = unknown>(params: GetOkmsReferenceServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsReferenceServiceKeyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>> = ({ signal }) => getOkmsReferenceServiceKey(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsReferenceServiceKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>>
export type GetOkmsReferenceServiceKeyQueryError = unknown


export function useGetOkmsReferenceServiceKey<TData = Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError = unknown>(
 params: GetOkmsReferenceServiceKeyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsReferenceServiceKey<TData = Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError = unknown>(
 params: GetOkmsReferenceServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsReferenceServiceKey<TData = Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError = unknown>(
 params: GetOkmsReferenceServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service key type, size, curve and operations combination
 */

export function useGetOkmsReferenceServiceKey<TData = Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError = unknown>(
 params: GetOkmsReferenceServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsReferenceServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsReferenceServiceKeyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List OVHcloud KMS services
 */
export const getOkmsResource = (
    params?: GetOkmsResourceParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsResourceResponseWithIAMOVH[]>(
      {url: `/okms/resource`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOkmsResourceQueryKey = (params?: GetOkmsResourceParams,) => {
    return [`/okms/resource`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOkmsResourceQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResource>>, TError = unknown>(params?: GetOkmsResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResource>>> = ({ signal }) => getOkmsResource(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResource>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResource>>>
export type GetOkmsResourceQueryError = unknown


export function useGetOkmsResource<TData = Awaited<ReturnType<typeof getOkmsResource>>, TError = unknown>(
 params: undefined |  GetOkmsResourceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResource>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResource<TData = Awaited<ReturnType<typeof getOkmsResource>>, TError = unknown>(
 params?: GetOkmsResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResource>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResource<TData = Awaited<ReturnType<typeof getOkmsResource>>, TError = unknown>(
 params?: GetOkmsResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List OVHcloud KMS services
 */

export function useGetOkmsResource<TData = Awaited<ReturnType<typeof getOkmsResource>>, TError = unknown>(
 params?: GetOkmsResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get an OVHcloud KMS service
 */
export const getOkmsResourceOkmsId = (
    okmsId: string,
    params?: GetOkmsResourceOkmsIdParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsResourceResponseWithIAMOVH>(
      {url: `/okms/resource/${okmsId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdQueryKey = (okmsId: string,
    params?: GetOkmsResourceOkmsIdParams,) => {
    return [`/okms/resource/${okmsId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOkmsResourceOkmsIdQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError = unknown>(okmsId: string,
    params?: GetOkmsResourceOkmsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdQueryKey(okmsId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>> = ({ signal }) => getOkmsResourceOkmsId(okmsId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>>
export type GetOkmsResourceOkmsIdQueryError = unknown


export function useGetOkmsResourceOkmsId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError = unknown>(
 okmsId: string,
    params: undefined |  GetOkmsResourceOkmsIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError = unknown>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError = unknown>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an OVHcloud KMS service
 */

export function useGetOkmsResourceOkmsId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError = unknown>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdQueryOptions(okmsId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all access credentials
 */
export const getOkmsResourceOkmsIdCredential = (
    okmsId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsCredentialGetResponseOVH[]>(
      {url: `/okms/resource/${okmsId}/credential`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdCredentialQueryKey = (okmsId: string,) => {
    return [`/okms/resource/${okmsId}/credential`] as const;
    }

    
export const getGetOkmsResourceOkmsIdCredentialQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError = GetOkmsResourceOkmsIdCredential400>(okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdCredentialQueryKey(okmsId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>> = ({ signal }) => getOkmsResourceOkmsIdCredential(okmsId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdCredentialQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>>
export type GetOkmsResourceOkmsIdCredentialQueryError = GetOkmsResourceOkmsIdCredential400


export function useGetOkmsResourceOkmsIdCredential<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError = GetOkmsResourceOkmsIdCredential400>(
 okmsId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdCredential<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError = GetOkmsResourceOkmsIdCredential400>(
 okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdCredential<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError = GetOkmsResourceOkmsIdCredential400>(
 okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all access credentials
 */

export function useGetOkmsResourceOkmsIdCredential<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError = GetOkmsResourceOkmsIdCredential400>(
 okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdCredentialQueryOptions(okmsId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a new access credential
 */
export const postOkmsResourceOkmsIdCredential = (
    okmsId: string,
    okmsCredentialCreationOVH: OkmsCredentialCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsCredentialCreationResponseOVH>(
      {url: `/okms/resource/${okmsId}/credential`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: okmsCredentialCreationOVH, signal
    },
      options);
    }
  


export const getPostOkmsResourceOkmsIdCredentialMutationOptions = <TError = PostOkmsResourceOkmsIdCredential400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdCredential>>, TError,{okmsId: string;data: OkmsCredentialCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdCredential>>, TError,{okmsId: string;data: OkmsCredentialCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOkmsResourceOkmsIdCredential>>, {okmsId: string;data: OkmsCredentialCreationOVH}> = (props) => {
          const {okmsId,data} = props ?? {};

          return  postOkmsResourceOkmsIdCredential(okmsId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOkmsResourceOkmsIdCredentialMutationResult = NonNullable<Awaited<ReturnType<typeof postOkmsResourceOkmsIdCredential>>>
    export type PostOkmsResourceOkmsIdCredentialMutationBody = OkmsCredentialCreationOVH
    export type PostOkmsResourceOkmsIdCredentialMutationError = PostOkmsResourceOkmsIdCredential400

    /**
 * @summary Request a new access credential
 */
export const usePostOkmsResourceOkmsIdCredential = <TError = PostOkmsResourceOkmsIdCredential400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdCredential>>, TError,{okmsId: string;data: OkmsCredentialCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOkmsResourceOkmsIdCredential>>,
        TError,
        {okmsId: string;data: OkmsCredentialCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOkmsResourceOkmsIdCredentialMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke and delete an access credential
 */
export const deleteOkmsResourceOkmsIdCredentialCredentialId = (
    okmsId: string,
    credentialId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<OkmsCredentialGetResponseOVH>(
      {url: `/okms/resource/${okmsId}/credential/${credentialId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOkmsResourceOkmsIdCredentialCredentialIdMutationOptions = <TError = DeleteOkmsResourceOkmsIdCredentialCredentialId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdCredentialCredentialId>>, TError,{okmsId: string;credentialId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdCredentialCredentialId>>, TError,{okmsId: string;credentialId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdCredentialCredentialId>>, {okmsId: string;credentialId: string}> = (props) => {
          const {okmsId,credentialId} = props ?? {};

          return  deleteOkmsResourceOkmsIdCredentialCredentialId(okmsId,credentialId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOkmsResourceOkmsIdCredentialCredentialIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdCredentialCredentialId>>>
    
    export type DeleteOkmsResourceOkmsIdCredentialCredentialIdMutationError = DeleteOkmsResourceOkmsIdCredentialCredentialId400

    /**
 * @summary Revoke and delete an access credential
 */
export const useDeleteOkmsResourceOkmsIdCredentialCredentialId = <TError = DeleteOkmsResourceOkmsIdCredentialCredentialId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdCredentialCredentialId>>, TError,{okmsId: string;credentialId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdCredentialCredentialId>>,
        TError,
        {okmsId: string;credentialId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOkmsResourceOkmsIdCredentialCredentialIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an access credential
 */
export const getOkmsResourceOkmsIdCredentialCredentialId = (
    okmsId: string,
    credentialId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsCredentialGetResponseOVH>(
      {url: `/okms/resource/${okmsId}/credential/${credentialId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdCredentialCredentialIdQueryKey = (okmsId: string,
    credentialId: string,) => {
    return [`/okms/resource/${okmsId}/credential/${credentialId}`] as const;
    }

    
export const getGetOkmsResourceOkmsIdCredentialCredentialIdQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError = unknown>(okmsId: string,
    credentialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdCredentialCredentialIdQueryKey(okmsId,credentialId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>> = ({ signal }) => getOkmsResourceOkmsIdCredentialCredentialId(okmsId,credentialId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId && credentialId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdCredentialCredentialIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>>
export type GetOkmsResourceOkmsIdCredentialCredentialIdQueryError = unknown


export function useGetOkmsResourceOkmsIdCredentialCredentialId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError = unknown>(
 okmsId: string,
    credentialId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdCredentialCredentialId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError = unknown>(
 okmsId: string,
    credentialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdCredentialCredentialId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError = unknown>(
 okmsId: string,
    credentialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an access credential
 */

export function useGetOkmsResourceOkmsIdCredentialCredentialId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError = unknown>(
 okmsId: string,
    credentialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdCredentialCredentialId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdCredentialCredentialIdQueryOptions(okmsId,credentialId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available log kinds
 */
export const getOkmsResourceOkmsIdLogKind = (
    okmsId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogKindOVH[]>(
      {url: `/okms/resource/${okmsId}/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdLogKindQueryKey = (okmsId: string,) => {
    return [`/okms/resource/${okmsId}/log/kind`] as const;
    }

    
export const getGetOkmsResourceOkmsIdLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError = unknown>(okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdLogKindQueryKey(okmsId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>> = ({ signal }) => getOkmsResourceOkmsIdLogKind(okmsId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>>
export type GetOkmsResourceOkmsIdLogKindQueryError = unknown


export function useGetOkmsResourceOkmsIdLogKind<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError = unknown>(
 okmsId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogKind<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError = unknown>(
 okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogKind<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError = unknown>(
 okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available log kinds
 */

export function useGetOkmsResourceOkmsIdLogKind<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError = unknown>(
 okmsId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdLogKindQueryOptions(okmsId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a log kind
 */
export const getOkmsResourceOkmsIdLogKindName = (
    okmsId: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogKindOVH>(
      {url: `/okms/resource/${okmsId}/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdLogKindNameQueryKey = (okmsId: string,
    name: string,) => {
    return [`/okms/resource/${okmsId}/log/kind/${name}`] as const;
    }

    
export const getGetOkmsResourceOkmsIdLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError = unknown>(okmsId: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdLogKindNameQueryKey(okmsId,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>> = ({ signal }) => getOkmsResourceOkmsIdLogKindName(okmsId,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>>
export type GetOkmsResourceOkmsIdLogKindNameQueryError = unknown


export function useGetOkmsResourceOkmsIdLogKindName<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError = unknown>(
 okmsId: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogKindName<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError = unknown>(
 okmsId: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogKindName<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError = unknown>(
 okmsId: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a log kind
 */

export function useGetOkmsResourceOkmsIdLogKindName<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError = unknown>(
 okmsId: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdLogKindNameQueryOptions(okmsId,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscription IDs for a cluster
 */
export const getOkmsResourceOkmsIdLogSubscription = (
    okmsId: string,
    params?: GetOkmsResourceOkmsIdLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionOVH[]>(
      {url: `/okms/resource/${okmsId}/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdLogSubscriptionQueryKey = (okmsId: string,
    params?: GetOkmsResourceOkmsIdLogSubscriptionParams,) => {
    return [`/okms/resource/${okmsId}/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOkmsResourceOkmsIdLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError = unknown>(okmsId: string,
    params?: GetOkmsResourceOkmsIdLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdLogSubscriptionQueryKey(okmsId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>> = ({ signal }) => getOkmsResourceOkmsIdLogSubscription(okmsId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>>
export type GetOkmsResourceOkmsIdLogSubscriptionQueryError = unknown


export function useGetOkmsResourceOkmsIdLogSubscription<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError = unknown>(
 okmsId: string,
    params: undefined |  GetOkmsResourceOkmsIdLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogSubscription<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError = unknown>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogSubscription<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError = unknown>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscription IDs for a cluster
 */

export function useGetOkmsResourceOkmsIdLogSubscription<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError = unknown>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdLogSubscriptionQueryOptions(okmsId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const postOkmsResourceOkmsIdLogSubscription = (
    okmsId: string,
    dbaasLogsLogSubscriptionCreationOVH: DbaasLogsLogSubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/okms/resource/${okmsId}/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogSubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOkmsResourceOkmsIdLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogSubscription>>, TError,{okmsId: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogSubscription>>, TError,{okmsId: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogSubscription>>, {okmsId: string;data: DbaasLogsLogSubscriptionCreationOVH}> = (props) => {
          const {okmsId,data} = props ?? {};

          return  postOkmsResourceOkmsIdLogSubscription(okmsId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOkmsResourceOkmsIdLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogSubscription>>>
    export type PostOkmsResourceOkmsIdLogSubscriptionMutationBody = DbaasLogsLogSubscriptionCreationOVH
    export type PostOkmsResourceOkmsIdLogSubscriptionMutationError = unknown

    /**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const usePostOkmsResourceOkmsIdLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogSubscription>>, TError,{okmsId: string;data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogSubscription>>,
        TError,
        {okmsId: string;data: DbaasLogsLogSubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOkmsResourceOkmsIdLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription
 */
export const deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId = (
    okmsId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/okms/resource/${okmsId}/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOkmsResourceOkmsIdLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError,{okmsId: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError,{okmsId: string;subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, {okmsId: string;subscriptionId: string}> = (props) => {
          const {okmsId,subscriptionId} = props ?? {};

          return  deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId(okmsId,subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOkmsResourceOkmsIdLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>>
    
    export type DeleteOkmsResourceOkmsIdLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription
 */
export const useDeleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError,{okmsId: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>,
        TError,
        {okmsId: string;subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOkmsResourceOkmsIdLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get subscription details
 */
export const getOkmsResourceOkmsIdLogSubscriptionSubscriptionId = (
    okmsId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionOVH>(
      {url: `/okms/resource/${okmsId}/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdLogSubscriptionSubscriptionIdQueryKey = (okmsId: string,
    subscriptionId: string,) => {
    return [`/okms/resource/${okmsId}/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetOkmsResourceOkmsIdLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError = unknown>(okmsId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdLogSubscriptionSubscriptionIdQueryKey(okmsId,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>> = ({ signal }) => getOkmsResourceOkmsIdLogSubscriptionSubscriptionId(okmsId,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>>
export type GetOkmsResourceOkmsIdLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetOkmsResourceOkmsIdLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError = unknown>(
 okmsId: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError = unknown>(
 okmsId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError = unknown>(
 okmsId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get subscription details
 */

export function useGetOkmsResourceOkmsIdLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError = unknown>(
 okmsId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdLogSubscriptionSubscriptionIdQueryOptions(okmsId,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary URL to retrieve logs
 */
export const postOkmsResourceOkmsIdLogUrl = (
    okmsId: string,
    dbaasLogsLogUrlCreationOVH: DbaasLogsLogUrlCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/okms/resource/${okmsId}/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogUrlCreationOVH, signal
    },
      options);
    }
  


export const getPostOkmsResourceOkmsIdLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogUrl>>, TError,{okmsId: string;data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogUrl>>, TError,{okmsId: string;data: DbaasLogsLogUrlCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogUrl>>, {okmsId: string;data: DbaasLogsLogUrlCreationOVH}> = (props) => {
          const {okmsId,data} = props ?? {};

          return  postOkmsResourceOkmsIdLogUrl(okmsId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOkmsResourceOkmsIdLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogUrl>>>
    export type PostOkmsResourceOkmsIdLogUrlMutationBody = DbaasLogsLogUrlCreationOVH
    export type PostOkmsResourceOkmsIdLogUrlMutationError = unknown

    /**
 * @summary Generate a temporary URL to retrieve logs
 */
export const usePostOkmsResourceOkmsIdLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogUrl>>, TError,{okmsId: string;data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOkmsResourceOkmsIdLogUrl>>,
        TError,
        {okmsId: string;data: DbaasLogsLogUrlCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOkmsResourceOkmsIdLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all keys
 */
export const getOkmsResourceOkmsIdServiceKey = (
    okmsId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsServiceKeyResponseWithIAMOVH[]>(
      {url: `/okms/resource/${okmsId}/serviceKey`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdServiceKeyQueryKey = (okmsId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyParams,) => {
    return [`/okms/resource/${okmsId}/serviceKey`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOkmsResourceOkmsIdServiceKeyQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError = GetOkmsResourceOkmsIdServiceKey400>(okmsId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdServiceKeyQueryKey(okmsId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>> = ({ signal }) => getOkmsResourceOkmsIdServiceKey(okmsId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdServiceKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>>
export type GetOkmsResourceOkmsIdServiceKeyQueryError = GetOkmsResourceOkmsIdServiceKey400


export function useGetOkmsResourceOkmsIdServiceKey<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError = GetOkmsResourceOkmsIdServiceKey400>(
 okmsId: string,
    params: undefined |  GetOkmsResourceOkmsIdServiceKeyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdServiceKey<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError = GetOkmsResourceOkmsIdServiceKey400>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdServiceKey<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError = GetOkmsResourceOkmsIdServiceKey400>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all keys
 */

export function useGetOkmsResourceOkmsIdServiceKey<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError = GetOkmsResourceOkmsIdServiceKey400>(
 okmsId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdServiceKeyQueryOptions(okmsId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create or import a service key
 */
export const postOkmsResourceOkmsIdServiceKey = (
    okmsId: string,
    okmsServiceKeyCreationOVH: OkmsServiceKeyCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsServiceKeyResponseOVH>(
      {url: `/okms/resource/${okmsId}/serviceKey`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: okmsServiceKeyCreationOVH, signal
    },
      options);
    }
  


export const getPostOkmsResourceOkmsIdServiceKeyMutationOptions = <TError = PostOkmsResourceOkmsIdServiceKey400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdServiceKey>>, TError,{okmsId: string;data: OkmsServiceKeyCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdServiceKey>>, TError,{okmsId: string;data: OkmsServiceKeyCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOkmsResourceOkmsIdServiceKey>>, {okmsId: string;data: OkmsServiceKeyCreationOVH}> = (props) => {
          const {okmsId,data} = props ?? {};

          return  postOkmsResourceOkmsIdServiceKey(okmsId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOkmsResourceOkmsIdServiceKeyMutationResult = NonNullable<Awaited<ReturnType<typeof postOkmsResourceOkmsIdServiceKey>>>
    export type PostOkmsResourceOkmsIdServiceKeyMutationBody = OkmsServiceKeyCreationOVH
    export type PostOkmsResourceOkmsIdServiceKeyMutationError = PostOkmsResourceOkmsIdServiceKey400

    /**
 * @summary Create or import a service key
 */
export const usePostOkmsResourceOkmsIdServiceKey = <TError = PostOkmsResourceOkmsIdServiceKey400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOkmsResourceOkmsIdServiceKey>>, TError,{okmsId: string;data: OkmsServiceKeyCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOkmsResourceOkmsIdServiceKey>>,
        TError,
        {okmsId: string;data: OkmsServiceKeyCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOkmsResourceOkmsIdServiceKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given service key
 */
export const deleteOkmsResourceOkmsIdServiceKeyKeyId = (
    okmsId: string,
    keyId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/okms/resource/${okmsId}/serviceKey/${keyId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOkmsResourceOkmsIdServiceKeyKeyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdServiceKeyKeyId>>, TError,{okmsId: string;keyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdServiceKeyKeyId>>, TError,{okmsId: string;keyId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdServiceKeyKeyId>>, {okmsId: string;keyId: string}> = (props) => {
          const {okmsId,keyId} = props ?? {};

          return  deleteOkmsResourceOkmsIdServiceKeyKeyId(okmsId,keyId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOkmsResourceOkmsIdServiceKeyKeyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdServiceKeyKeyId>>>
    
    export type DeleteOkmsResourceOkmsIdServiceKeyKeyIdMutationError = unknown

    /**
 * @summary Delete the given service key
 */
export const useDeleteOkmsResourceOkmsIdServiceKeyKeyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdServiceKeyKeyId>>, TError,{okmsId: string;keyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOkmsResourceOkmsIdServiceKeyKeyId>>,
        TError,
        {okmsId: string;keyId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOkmsResourceOkmsIdServiceKeyKeyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve a key
 */
export const getOkmsResourceOkmsIdServiceKeyKeyId = (
    okmsId: string,
    keyId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyKeyIdParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<OkmsServiceKeyResponseWithIAMOVH>(
      {url: `/okms/resource/${okmsId}/serviceKey/${keyId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOkmsResourceOkmsIdServiceKeyKeyIdQueryKey = (okmsId: string,
    keyId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyKeyIdParams,) => {
    return [`/okms/resource/${okmsId}/serviceKey/${keyId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOkmsResourceOkmsIdServiceKeyKeyIdQueryOptions = <TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError = unknown>(okmsId: string,
    keyId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyKeyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOkmsResourceOkmsIdServiceKeyKeyIdQueryKey(okmsId,keyId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>> = ({ signal }) => getOkmsResourceOkmsIdServiceKeyKeyId(okmsId,keyId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(okmsId && keyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOkmsResourceOkmsIdServiceKeyKeyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>>
export type GetOkmsResourceOkmsIdServiceKeyKeyIdQueryError = unknown


export function useGetOkmsResourceOkmsIdServiceKeyKeyId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError = unknown>(
 okmsId: string,
    keyId: string,
    params: undefined |  GetOkmsResourceOkmsIdServiceKeyKeyIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdServiceKeyKeyId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError = unknown>(
 okmsId: string,
    keyId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyKeyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOkmsResourceOkmsIdServiceKeyKeyId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError = unknown>(
 okmsId: string,
    keyId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyKeyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a key
 */

export function useGetOkmsResourceOkmsIdServiceKeyKeyId<TData = Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError = unknown>(
 okmsId: string,
    keyId: string,
    params?: GetOkmsResourceOkmsIdServiceKeyKeyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOkmsResourceOkmsIdServiceKeyKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOkmsResourceOkmsIdServiceKeyKeyIdQueryOptions(okmsId,keyId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a service key
 */
export const putOkmsResourceOkmsIdServiceKeyKeyId = (
    okmsId: string,
    keyId: string,
    okmsServiceKeyUpdateOVH: OkmsServiceKeyUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<OkmsServiceKeyResponseOVH>(
      {url: `/okms/resource/${okmsId}/serviceKey/${keyId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: okmsServiceKeyUpdateOVH
    },
      options);
    }
  


export const getPutOkmsResourceOkmsIdServiceKeyKeyIdMutationOptions = <TError = PutOkmsResourceOkmsIdServiceKeyKeyId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOkmsResourceOkmsIdServiceKeyKeyId>>, TError,{okmsId: string;keyId: string;data: OkmsServiceKeyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putOkmsResourceOkmsIdServiceKeyKeyId>>, TError,{okmsId: string;keyId: string;data: OkmsServiceKeyUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOkmsResourceOkmsIdServiceKeyKeyId>>, {okmsId: string;keyId: string;data: OkmsServiceKeyUpdateOVH}> = (props) => {
          const {okmsId,keyId,data} = props ?? {};

          return  putOkmsResourceOkmsIdServiceKeyKeyId(okmsId,keyId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOkmsResourceOkmsIdServiceKeyKeyIdMutationResult = NonNullable<Awaited<ReturnType<typeof putOkmsResourceOkmsIdServiceKeyKeyId>>>
    export type PutOkmsResourceOkmsIdServiceKeyKeyIdMutationBody = OkmsServiceKeyUpdateOVH
    export type PutOkmsResourceOkmsIdServiceKeyKeyIdMutationError = PutOkmsResourceOkmsIdServiceKeyKeyId400

    /**
 * @summary Update a service key
 */
export const usePutOkmsResourceOkmsIdServiceKeyKeyId = <TError = PutOkmsResourceOkmsIdServiceKeyKeyId400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOkmsResourceOkmsIdServiceKeyKeyId>>, TError,{okmsId: string;keyId: string;data: OkmsServiceKeyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOkmsResourceOkmsIdServiceKeyKeyId>>,
        TError,
        {okmsId: string;keyId: string;data: OkmsServiceKeyUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutOkmsResourceOkmsIdServiceKeyKeyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

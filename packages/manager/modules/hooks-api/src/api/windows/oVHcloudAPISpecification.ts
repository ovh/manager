/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseWindowsOrderableVersionsParams,
  GetLicenseWindowsParams,
  GetLicenseWindowsServiceNameTasksParams,
  LicenseOptionLabelOVH,
  LicenseOptionOVH,
  LicenseTaskOVH,
  LicenseWindowsOrderConfigurationOVH,
  LicenseWindowsWindowsOVH,
  LicenseWindowsWindowsWithIAMOVH,
  PostLicenseWindowsServiceNameConfirmTerminationBody,
  PostLicenseWindowsServiceNameSqlServerBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseWindows = (
    params?: GetLicenseWindowsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/windows`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWindowsQueryKey = (params?: GetLicenseWindowsParams,) => {
    return [`/license/windows`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindows>>, TError = unknown>(params?: GetLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindows>>> = ({ signal }) => getLicenseWindows(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindows>>>
export type GetLicenseWindowsQueryError = unknown


export function useGetLicenseWindows<TData = Awaited<ReturnType<typeof getLicenseWindows>>, TError = unknown>(
 params: undefined |  GetLicenseWindowsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindows<TData = Awaited<ReturnType<typeof getLicenseWindows>>, TError = unknown>(
 params?: GetLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindows<TData = Awaited<ReturnType<typeof getLicenseWindows>>, TError = unknown>(
 params?: GetLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseWindows<TData = Awaited<ReturnType<typeof getLicenseWindows>>, TError = unknown>(
 params?: GetLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable Windows versions
 */
export const getLicenseWindowsOrderableVersions = (
    params: GetLicenseWindowsOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseWindowsOrderConfigurationOVH[]>(
      {url: `/license/windows/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWindowsOrderableVersionsQueryKey = (params: GetLicenseWindowsOrderableVersionsParams,) => {
    return [`/license/windows/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWindowsOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError = unknown>(params: GetLicenseWindowsOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>> = ({ signal }) => getLicenseWindowsOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>>
export type GetLicenseWindowsOrderableVersionsQueryError = unknown


export function useGetLicenseWindowsOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError = unknown>(
 params: GetLicenseWindowsOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError = unknown>(
 params: GetLicenseWindowsOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError = unknown>(
 params: GetLicenseWindowsOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable Windows versions
 */

export function useGetLicenseWindowsOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError = unknown>(
 params: GetLicenseWindowsOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseWindowsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseWindowsWindowsWithIAMOVH>(
      {url: `/license/windows/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWindowsServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/windows/${serviceName}`] as const;
    }

    
export const getGetLicenseWindowsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>> = ({ signal }) => getLicenseWindowsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>>
export type GetLicenseWindowsServiceNameQueryError = unknown


export function useGetLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseWindowsServiceName = (
    serviceName: string,
    licenseWindowsWindowsOVH: NonReadonly<LicenseWindowsWindowsOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/windows/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseWindowsWindowsOVH
    },
      options);
    }
  


export const getPutLicenseWindowsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWindowsServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseWindowsWindowsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseWindowsServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseWindowsWindowsOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseWindowsServiceName>>, {serviceName: string;data: NonReadonly<LicenseWindowsWindowsOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseWindowsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseWindowsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseWindowsServiceName>>>
    export type PutLicenseWindowsServiceNameMutationBody = NonReadonly<LicenseWindowsWindowsOVH>
    export type PutLicenseWindowsServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseWindowsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWindowsServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseWindowsWindowsOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseWindowsServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseWindowsWindowsOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseWindowsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseWindowsServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseWindowsServiceNameConfirmTerminationBody: PostLicenseWindowsServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/windows/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseWindowsServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseWindowsServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseWindowsServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseWindowsServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseWindowsServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseWindowsServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseWindowsServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseWindowsServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseWindowsServiceNameConfirmTermination>>>
    export type PostLicenseWindowsServiceNameConfirmTerminationMutationBody = PostLicenseWindowsServiceNameConfirmTerminationBody
    export type PostLicenseWindowsServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseWindowsServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseWindowsServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseWindowsServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseWindowsServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseWindowsServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary options attached to this license
 */
export const getLicenseWindowsServiceNameOption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOptionLabelOVH[]>(
      {url: `/license/windows/${serviceName}/option`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWindowsServiceNameOptionQueryKey = (serviceName: string,) => {
    return [`/license/windows/${serviceName}/option`] as const;
    }

    
export const getGetLicenseWindowsServiceNameOptionQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsServiceNameOptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>> = ({ signal }) => getLicenseWindowsServiceNameOption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsServiceNameOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>>
export type GetLicenseWindowsServiceNameOptionQueryError = unknown


export function useGetLicenseWindowsServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary options attached to this license
 */

export function useGetLicenseWindowsServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsServiceNameOptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary release this Option
 */
export const deleteLicenseWindowsServiceNameOptionLabel = (
    serviceName: string,
    label: LicenseOptionLabelOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/windows/${serviceName}/option/${label}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLicenseWindowsServiceNameOptionLabelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseWindowsServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseWindowsServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLicenseWindowsServiceNameOptionLabel>>, {serviceName: string;label: LicenseOptionLabelOVH}> = (props) => {
          const {serviceName,label} = props ?? {};

          return  deleteLicenseWindowsServiceNameOptionLabel(serviceName,label,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLicenseWindowsServiceNameOptionLabelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLicenseWindowsServiceNameOptionLabel>>>
    
    export type DeleteLicenseWindowsServiceNameOptionLabelMutationError = unknown

    /**
 * @summary release this Option
 */
export const useDeleteLicenseWindowsServiceNameOptionLabel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseWindowsServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLicenseWindowsServiceNameOptionLabel>>,
        TError,
        {serviceName: string;label: LicenseOptionLabelOVH},
        TContext
      > => {

      const mutationOptions = getDeleteLicenseWindowsServiceNameOptionLabelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getLicenseWindowsServiceNameOptionLabel = (
    serviceName: string,
    label: LicenseOptionLabelOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOptionOVH>(
      {url: `/license/windows/${serviceName}/option/${label}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWindowsServiceNameOptionLabelQueryKey = (serviceName: string,
    label: LicenseOptionLabelOVH,) => {
    return [`/license/windows/${serviceName}/option/${label}`] as const;
    }

    
export const getGetLicenseWindowsServiceNameOptionLabelQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError = unknown>(serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsServiceNameOptionLabelQueryKey(serviceName,label);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>> = ({ signal }) => getLicenseWindowsServiceNameOptionLabel(serviceName,label, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && label), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsServiceNameOptionLabelQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>>
export type GetLicenseWindowsServiceNameOptionLabelQueryError = unknown


export function useGetLicenseWindowsServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseWindowsServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsServiceNameOptionLabelQueryOptions(serviceName,label,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getLicenseWindowsServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/windows/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWindowsServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/windows/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseWindowsServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>> = ({ signal }) => getLicenseWindowsServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>>
export type GetLicenseWindowsServiceNameServiceInfosQueryError = unknown


export function useGetLicenseWindowsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseWindowsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseWindowsServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/windows/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseWindowsServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWindowsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseWindowsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseWindowsServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseWindowsServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseWindowsServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseWindowsServiceNameServiceInfos>>>
    export type PutLicenseWindowsServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseWindowsServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseWindowsServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseWindowsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseWindowsServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseWindowsServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Link your own sql server license to this Windows license
 */
export const postLicenseWindowsServiceNameSqlServer = (
    serviceName: string,
    postLicenseWindowsServiceNameSqlServerBody: PostLicenseWindowsServiceNameSqlServerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/windows/${serviceName}/sqlServer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseWindowsServiceNameSqlServerBody, signal
    },
      options);
    }
  


export const getPostLicenseWindowsServiceNameSqlServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameSqlServer>>, TError,{serviceName: string;data: PostLicenseWindowsServiceNameSqlServerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameSqlServer>>, TError,{serviceName: string;data: PostLicenseWindowsServiceNameSqlServerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseWindowsServiceNameSqlServer>>, {serviceName: string;data: PostLicenseWindowsServiceNameSqlServerBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseWindowsServiceNameSqlServer(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseWindowsServiceNameSqlServerMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseWindowsServiceNameSqlServer>>>
    export type PostLicenseWindowsServiceNameSqlServerMutationBody = PostLicenseWindowsServiceNameSqlServerBody
    export type PostLicenseWindowsServiceNameSqlServerMutationError = unknown

    /**
 * @summary Link your own sql server license to this Windows license
 */
export const usePostLicenseWindowsServiceNameSqlServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameSqlServer>>, TError,{serviceName: string;data: PostLicenseWindowsServiceNameSqlServerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseWindowsServiceNameSqlServer>>,
        TError,
        {serviceName: string;data: PostLicenseWindowsServiceNameSqlServerBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseWindowsServiceNameSqlServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary tasks linked to this license
 */
export const getLicenseWindowsServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseWindowsServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/windows/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseWindowsServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseWindowsServiceNameTasksParams,) => {
    return [`/license/windows/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseWindowsServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseWindowsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>> = ({ signal }) => getLicenseWindowsServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>>
export type GetLicenseWindowsServiceNameTasksQueryError = unknown


export function useGetLicenseWindowsServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseWindowsServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseWindowsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseWindowsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary tasks linked to this license
 */

export function useGetLicenseWindowsServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseWindowsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseWindowsServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/windows/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseWindowsServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/windows/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseWindowsServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseWindowsServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>> = ({ signal }) => getLicenseWindowsServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseWindowsServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>>
export type GetLicenseWindowsServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseWindowsServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseWindowsServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseWindowsServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseWindowsServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseWindowsServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseWindowsServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/windows/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseWindowsServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseWindowsServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseWindowsServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseWindowsServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseWindowsServiceNameTerminate>>>
    
    export type PostLicenseWindowsServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseWindowsServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseWindowsServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseWindowsServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseWindowsServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedCephAclCreateOVH,
  DedicatedCephAclGetResponseOVH,
  DedicatedCephCephfsGetResponseOVH,
  DedicatedCephClusterGetResponseWithIAMOVH,
  DedicatedCephClusterHealthResponseOVH,
  DedicatedCephPoolCreateOVH,
  DedicatedCephPoolErasureCreateOVH,
  DedicatedCephPoolGetResponseOVH,
  DedicatedCephTaskGetResponseOVH,
  DedicatedCephTaskListResponseOVH,
  DedicatedCephUpdateClusterDetailsOVH,
  DedicatedCephUserCreateOVH,
  DedicatedCephUserGetResponseOVH,
  DedicatedCephUserPoolCreatePermissionsOVH,
  DedicatedCephUserPoolPermListResponseOVH,
  DedicatedCephUserPoolUpdatePermissionOVH,
  GetDedicatedCephParams,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getDedicatedCeph = (
    params?: GetDedicatedCephParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/ceph`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedCephQueryKey = (params?: GetDedicatedCephParams,) => {
    return [`/dedicated/ceph`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedCephQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCeph>>, TError = unknown>(params?: GetDedicatedCephParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCeph>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCeph>>> = ({ signal }) => getDedicatedCeph(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCeph>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCeph>>>
export type GetDedicatedCephQueryError = unknown


export function useGetDedicatedCeph<TData = Awaited<ReturnType<typeof getDedicatedCeph>>, TError = unknown>(
 params: undefined |  GetDedicatedCephParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCeph>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCeph>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCeph<TData = Awaited<ReturnType<typeof getDedicatedCeph>>, TError = unknown>(
 params?: GetDedicatedCephParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCeph>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCeph>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCeph<TData = Awaited<ReturnType<typeof getDedicatedCeph>>, TError = unknown>(
 params?: GetDedicatedCephParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCeph>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetDedicatedCeph<TData = Awaited<ReturnType<typeof getDedicatedCeph>>, TError = unknown>(
 params?: GetDedicatedCephParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCeph>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get cluster details
 */
export const getDedicatedCephServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephClusterGetResponseWithIAMOVH>(
      {url: `/dedicated/ceph/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}`] as const;
    }

    
export const getGetDedicatedCephServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceName>>> = ({ signal }) => getDedicatedCephServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceName>>>
export type GetDedicatedCephServiceNameQueryError = unknown


export function useGetDedicatedCephServiceName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get cluster details
 */

export function useGetDedicatedCephServiceName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update cluster details
 */
export const putDedicatedCephServiceName = (
    serviceName: string,
    dedicatedCephUpdateClusterDetailsOVH: DedicatedCephUpdateClusterDetailsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephUpdateClusterDetailsOVH
    },
      options);
    }
  


export const getPutDedicatedCephServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceName>>, TError,{serviceName: string;data: DedicatedCephUpdateClusterDetailsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceName>>, TError,{serviceName: string;data: DedicatedCephUpdateClusterDetailsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCephServiceName>>, {serviceName: string;data: DedicatedCephUpdateClusterDetailsOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedCephServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCephServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCephServiceName>>>
    export type PutDedicatedCephServiceNameMutationBody = DedicatedCephUpdateClusterDetailsOVH
    export type PutDedicatedCephServiceNameMutationError = unknown

    /**
 * @summary Update cluster details
 */
export const usePutDedicatedCephServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceName>>, TError,{serviceName: string;data: DedicatedCephUpdateClusterDetailsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCephServiceName>>,
        TError,
        {serviceName: string;data: DedicatedCephUpdateClusterDetailsOVH},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCephServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of all IP ACLs in a cluster
 */
export const getDedicatedCephServiceNameAcl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephAclGetResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/acl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameAclQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/acl`] as const;
    }

    
export const getGetDedicatedCephServiceNameAclQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameAclQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>> = ({ signal }) => getDedicatedCephServiceNameAcl(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameAclQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>>
export type GetDedicatedCephServiceNameAclQueryError = unknown


export function useGetDedicatedCephServiceNameAcl<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameAcl<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameAcl<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of all IP ACLs in a cluster
 */

export function useGetDedicatedCephServiceNameAcl<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameAclQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create one or more new IP ACLs
 */
export const postDedicatedCephServiceNameAcl = (
    serviceName: string,
    dedicatedCephAclCreateOVH: DedicatedCephAclCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/acl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephAclCreateOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameAclMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameAcl>>, TError,{serviceName: string;data: DedicatedCephAclCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameAcl>>, TError,{serviceName: string;data: DedicatedCephAclCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameAcl>>, {serviceName: string;data: DedicatedCephAclCreateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCephServiceNameAcl(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameAclMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameAcl>>>
    export type PostDedicatedCephServiceNameAclMutationBody = DedicatedCephAclCreateOVH
    export type PostDedicatedCephServiceNameAclMutationError = unknown

    /**
 * @summary Create one or more new IP ACLs
 */
export const usePostDedicatedCephServiceNameAcl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameAcl>>, TError,{serviceName: string;data: DedicatedCephAclCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameAcl>>,
        TError,
        {serviceName: string;data: DedicatedCephAclCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameAclMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete single IP ACL
 */
export const deleteDedicatedCephServiceNameAclAclId = (
    serviceName: string,
    aclId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/acl/${aclId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCephServiceNameAclAclIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameAclAclId>>, TError,{serviceName: string;aclId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameAclAclId>>, TError,{serviceName: string;aclId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameAclAclId>>, {serviceName: string;aclId: number}> = (props) => {
          const {serviceName,aclId} = props ?? {};

          return  deleteDedicatedCephServiceNameAclAclId(serviceName,aclId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCephServiceNameAclAclIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameAclAclId>>>
    
    export type DeleteDedicatedCephServiceNameAclAclIdMutationError = unknown

    /**
 * @summary Delete single IP ACL
 */
export const useDeleteDedicatedCephServiceNameAclAclId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameAclAclId>>, TError,{serviceName: string;aclId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCephServiceNameAclAclId>>,
        TError,
        {serviceName: string;aclId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCephServiceNameAclAclIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get details about IP ACL
 */
export const getDedicatedCephServiceNameAclAclId = (
    serviceName: string,
    aclId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephAclGetResponseOVH>(
      {url: `/dedicated/ceph/${serviceName}/acl/${aclId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameAclAclIdQueryKey = (serviceName: string,
    aclId: number,) => {
    return [`/dedicated/ceph/${serviceName}/acl/${aclId}`] as const;
    }

    
export const getGetDedicatedCephServiceNameAclAclIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError = unknown>(serviceName: string,
    aclId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameAclAclIdQueryKey(serviceName,aclId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>> = ({ signal }) => getDedicatedCephServiceNameAclAclId(serviceName,aclId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && aclId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameAclAclIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>>
export type GetDedicatedCephServiceNameAclAclIdQueryError = unknown


export function useGetDedicatedCephServiceNameAclAclId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError = unknown>(
 serviceName: string,
    aclId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameAclAclId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError = unknown>(
 serviceName: string,
    aclId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameAclAclId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError = unknown>(
 serviceName: string,
    aclId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about IP ACL
 */

export function useGetDedicatedCephServiceNameAclAclId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError = unknown>(
 serviceName: string,
    aclId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameAclAclId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameAclAclIdQueryOptions(serviceName,aclId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List CephFS filesystems
 */
export const getDedicatedCephServiceNameCephfs = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephCephfsGetResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/cephfs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameCephfsQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/cephfs`] as const;
    }

    
export const getGetDedicatedCephServiceNameCephfsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameCephfsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>> = ({ signal }) => getDedicatedCephServiceNameCephfs(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameCephfsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>>
export type GetDedicatedCephServiceNameCephfsQueryError = unknown


export function useGetDedicatedCephServiceNameCephfs<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameCephfs<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameCephfs<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List CephFS filesystems
 */

export function useGetDedicatedCephServiceNameCephfs<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameCephfsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Purge CephFS filesystem
 */
export const deleteDedicatedCephServiceNameCephfsFsName = (
    serviceName: string,
    fsName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/cephfs/${fsName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCephServiceNameCephfsFsNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameCephfsFsName>>, TError,{serviceName: string;fsName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameCephfsFsName>>, TError,{serviceName: string;fsName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameCephfsFsName>>, {serviceName: string;fsName: string}> = (props) => {
          const {serviceName,fsName} = props ?? {};

          return  deleteDedicatedCephServiceNameCephfsFsName(serviceName,fsName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCephServiceNameCephfsFsNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameCephfsFsName>>>
    
    export type DeleteDedicatedCephServiceNameCephfsFsNameMutationError = unknown

    /**
 * @summary Purge CephFS filesystem
 */
export const useDeleteDedicatedCephServiceNameCephfsFsName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameCephfsFsName>>, TError,{serviceName: string;fsName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCephServiceNameCephfsFsName>>,
        TError,
        {serviceName: string;fsName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCephServiceNameCephfsFsNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get CephFS filesystem information
 */
export const getDedicatedCephServiceNameCephfsFsName = (
    serviceName: string,
    fsName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephCephfsGetResponseOVH>(
      {url: `/dedicated/ceph/${serviceName}/cephfs/${fsName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameCephfsFsNameQueryKey = (serviceName: string,
    fsName: string,) => {
    return [`/dedicated/ceph/${serviceName}/cephfs/${fsName}`] as const;
    }

    
export const getGetDedicatedCephServiceNameCephfsFsNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError = unknown>(serviceName: string,
    fsName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameCephfsFsNameQueryKey(serviceName,fsName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>> = ({ signal }) => getDedicatedCephServiceNameCephfsFsName(serviceName,fsName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && fsName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameCephfsFsNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>>
export type GetDedicatedCephServiceNameCephfsFsNameQueryError = unknown


export function useGetDedicatedCephServiceNameCephfsFsName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError = unknown>(
 serviceName: string,
    fsName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameCephfsFsName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError = unknown>(
 serviceName: string,
    fsName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameCephfsFsName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError = unknown>(
 serviceName: string,
    fsName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get CephFS filesystem information
 */

export function useGetDedicatedCephServiceNameCephfsFsName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError = unknown>(
 serviceName: string,
    fsName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameCephfsFsName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameCephfsFsNameQueryOptions(serviceName,fsName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable CephFS filesystem
 */
export const postDedicatedCephServiceNameCephfsFsNameDisable = (
    serviceName: string,
    fsName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/cephfs/${fsName}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameCephfsFsNameDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameDisable>>, TError,{serviceName: string;fsName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameDisable>>, TError,{serviceName: string;fsName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameDisable>>, {serviceName: string;fsName: string}> = (props) => {
          const {serviceName,fsName} = props ?? {};

          return  postDedicatedCephServiceNameCephfsFsNameDisable(serviceName,fsName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameCephfsFsNameDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameDisable>>>
    
    export type PostDedicatedCephServiceNameCephfsFsNameDisableMutationError = unknown

    /**
 * @summary Disable CephFS filesystem
 */
export const usePostDedicatedCephServiceNameCephfsFsNameDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameDisable>>, TError,{serviceName: string;fsName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameDisable>>,
        TError,
        {serviceName: string;fsName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameCephfsFsNameDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable CephFS filesystem
 */
export const postDedicatedCephServiceNameCephfsFsNameEnable = (
    serviceName: string,
    fsName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/cephfs/${fsName}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameCephfsFsNameEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameEnable>>, TError,{serviceName: string;fsName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameEnable>>, TError,{serviceName: string;fsName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameEnable>>, {serviceName: string;fsName: string}> = (props) => {
          const {serviceName,fsName} = props ?? {};

          return  postDedicatedCephServiceNameCephfsFsNameEnable(serviceName,fsName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameCephfsFsNameEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameEnable>>>
    
    export type PostDedicatedCephServiceNameCephfsFsNameEnableMutationError = unknown

    /**
 * @summary Enable CephFS filesystem
 */
export const usePostDedicatedCephServiceNameCephfsFsNameEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameEnable>>, TError,{serviceName: string;fsName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameCephfsFsNameEnable>>,
        TError,
        {serviceName: string;fsName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameCephfsFsNameEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postDedicatedCephServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/ceph/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCephServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameChangeContact>>>
    export type PostDedicatedCephServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostDedicatedCephServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDedicatedCephServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postDedicatedCephServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCephServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameConfirmTermination>>>
    export type PostDedicatedCephServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostDedicatedCephServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostDedicatedCephServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get cluster health
 */
export const getDedicatedCephServiceNameHealth = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephClusterHealthResponseOVH>(
      {url: `/dedicated/ceph/${serviceName}/health`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameHealthQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/health`] as const;
    }

    
export const getGetDedicatedCephServiceNameHealthQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameHealthQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>> = ({ signal }) => getDedicatedCephServiceNameHealth(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>>
export type GetDedicatedCephServiceNameHealthQueryError = unknown


export function useGetDedicatedCephServiceNameHealth<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameHealth<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameHealth<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get cluster health
 */

export function useGetDedicatedCephServiceNameHealth<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameHealthQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of all pools in a cluster
 */
export const getDedicatedCephServiceNamePool = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephPoolGetResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/pool`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNamePoolQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/pool`] as const;
    }

    
export const getGetDedicatedCephServiceNamePoolQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNamePoolQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>> = ({ signal }) => getDedicatedCephServiceNamePool(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNamePoolQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>>
export type GetDedicatedCephServiceNamePoolQueryError = unknown


export function useGetDedicatedCephServiceNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of all pools in a cluster
 */

export function useGetDedicatedCephServiceNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNamePoolQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new ceph pool
 */
export const postDedicatedCephServiceNamePool = (
    serviceName: string,
    dedicatedCephPoolCreateOVH: DedicatedCephPoolCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/pool`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephPoolCreateOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNamePoolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNamePool>>, TError,{serviceName: string;data: DedicatedCephPoolCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNamePool>>, TError,{serviceName: string;data: DedicatedCephPoolCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNamePool>>, {serviceName: string;data: DedicatedCephPoolCreateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCephServiceNamePool(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNamePoolMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNamePool>>>
    export type PostDedicatedCephServiceNamePoolMutationBody = DedicatedCephPoolCreateOVH
    export type PostDedicatedCephServiceNamePoolMutationError = unknown

    /**
 * @summary Create a new ceph pool
 */
export const usePostDedicatedCephServiceNamePool = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNamePool>>, TError,{serviceName: string;data: DedicatedCephPoolCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNamePool>>,
        TError,
        {serviceName: string;data: DedicatedCephPoolCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNamePoolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a single ceph pool
 */
export const deleteDedicatedCephServiceNamePoolPoolName = (
    serviceName: string,
    poolName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/pool/${poolName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCephServiceNamePoolPoolNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNamePoolPoolName>>, TError,{serviceName: string;poolName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNamePoolPoolName>>, TError,{serviceName: string;poolName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCephServiceNamePoolPoolName>>, {serviceName: string;poolName: string}> = (props) => {
          const {serviceName,poolName} = props ?? {};

          return  deleteDedicatedCephServiceNamePoolPoolName(serviceName,poolName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCephServiceNamePoolPoolNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCephServiceNamePoolPoolName>>>
    
    export type DeleteDedicatedCephServiceNamePoolPoolNameMutationError = unknown

    /**
 * @summary Delete a single ceph pool
 */
export const useDeleteDedicatedCephServiceNamePoolPoolName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNamePoolPoolName>>, TError,{serviceName: string;poolName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCephServiceNamePoolPoolName>>,
        TError,
        {serviceName: string;poolName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCephServiceNamePoolPoolNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get details about an existing ceph pool
 */
export const getDedicatedCephServiceNamePoolPoolName = (
    serviceName: string,
    poolName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephPoolGetResponseOVH>(
      {url: `/dedicated/ceph/${serviceName}/pool/${poolName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNamePoolPoolNameQueryKey = (serviceName: string,
    poolName: string,) => {
    return [`/dedicated/ceph/${serviceName}/pool/${poolName}`] as const;
    }

    
export const getGetDedicatedCephServiceNamePoolPoolNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError = unknown>(serviceName: string,
    poolName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNamePoolPoolNameQueryKey(serviceName,poolName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>> = ({ signal }) => getDedicatedCephServiceNamePoolPoolName(serviceName,poolName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && poolName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNamePoolPoolNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>>
export type GetDedicatedCephServiceNamePoolPoolNameQueryError = unknown


export function useGetDedicatedCephServiceNamePoolPoolName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError = unknown>(
 serviceName: string,
    poolName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNamePoolPoolName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError = unknown>(
 serviceName: string,
    poolName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNamePoolPoolName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError = unknown>(
 serviceName: string,
    poolName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about an existing ceph pool
 */

export function useGetDedicatedCephServiceNamePoolPoolName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError = unknown>(
 serviceName: string,
    poolName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNamePoolPoolName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNamePoolPoolNameQueryOptions(serviceName,poolName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Open 5 minutes window for deleting single ceph pool
 */
export const putDedicatedCephServiceNamePoolPoolNameAllowDeletion = (
    serviceName: string,
    poolName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/pool/${poolName}/allowDeletion`, method: 'PUT'
    },
      options);
    }
  


export const getPutDedicatedCephServiceNamePoolPoolNameAllowDeletionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNamePoolPoolNameAllowDeletion>>, TError,{serviceName: string;poolName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNamePoolPoolNameAllowDeletion>>, TError,{serviceName: string;poolName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCephServiceNamePoolPoolNameAllowDeletion>>, {serviceName: string;poolName: string}> = (props) => {
          const {serviceName,poolName} = props ?? {};

          return  putDedicatedCephServiceNamePoolPoolNameAllowDeletion(serviceName,poolName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCephServiceNamePoolPoolNameAllowDeletionMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCephServiceNamePoolPoolNameAllowDeletion>>>
    
    export type PutDedicatedCephServiceNamePoolPoolNameAllowDeletionMutationError = unknown

    /**
 * @summary Open 5 minutes window for deleting single ceph pool
 */
export const usePutDedicatedCephServiceNamePoolPoolNameAllowDeletion = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNamePoolPoolNameAllowDeletion>>, TError,{serviceName: string;poolName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCephServiceNamePoolPoolNameAllowDeletion>>,
        TError,
        {serviceName: string;poolName: string},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCephServiceNamePoolPoolNameAllowDeletionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a new ceph erasure pool
 */
export const postDedicatedCephServiceNamePoolErasure = (
    serviceName: string,
    dedicatedCephPoolErasureCreateOVH: DedicatedCephPoolErasureCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/poolErasure`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephPoolErasureCreateOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNamePoolErasureMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNamePoolErasure>>, TError,{serviceName: string;data: DedicatedCephPoolErasureCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNamePoolErasure>>, TError,{serviceName: string;data: DedicatedCephPoolErasureCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNamePoolErasure>>, {serviceName: string;data: DedicatedCephPoolErasureCreateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCephServiceNamePoolErasure(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNamePoolErasureMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNamePoolErasure>>>
    export type PostDedicatedCephServiceNamePoolErasureMutationBody = DedicatedCephPoolErasureCreateOVH
    export type PostDedicatedCephServiceNamePoolErasureMutationError = unknown

    /**
 * @summary Create a new ceph erasure pool
 */
export const usePostDedicatedCephServiceNamePoolErasure = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNamePoolErasure>>, TError,{serviceName: string;data: DedicatedCephPoolErasureCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNamePoolErasure>>,
        TError,
        {serviceName: string;data: DedicatedCephPoolErasureCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNamePoolErasureMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getDedicatedCephServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicated/ceph/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedCephServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>> = ({ signal }) => getDedicatedCephServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>>
export type GetDedicatedCephServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedCephServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedCephServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedCephServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/ceph/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedCephServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCephServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedCephServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCephServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCephServiceNameServiceInfos>>>
    export type PutDedicatedCephServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedCephServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedCephServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCephServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCephServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List tasks in progress
 */
export const getDedicatedCephServiceNameTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephTaskListResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameTaskQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/task`] as const;
    }

    
export const getGetDedicatedCephServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>> = ({ signal }) => getDedicatedCephServiceNameTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>>
export type GetDedicatedCephServiceNameTaskQueryError = unknown


export function useGetDedicatedCephServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List tasks in progress
 */

export function useGetDedicatedCephServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get task details
 */
export const getDedicatedCephServiceNameTaskTaskId = (
    serviceName: string,
    taskId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephTaskGetResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: string,) => {
    return [`/dedicated/ceph/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedCephServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>> = ({ signal }) => getDedicatedCephServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>>
export type GetDedicatedCephServiceNameTaskTaskIdQueryError = unknown


export function useGetDedicatedCephServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get task details
 */

export function useGetDedicatedCephServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for the termination of your service
 */
export const postDedicatedCephServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedCephServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameTerminate>>>
    
    export type PostDedicatedCephServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostDedicatedCephServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of all users in a cluster
 */
export const getDedicatedCephServiceNameUser = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephUserGetResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameUserQueryKey = (serviceName: string,) => {
    return [`/dedicated/ceph/${serviceName}/user`] as const;
    }

    
export const getGetDedicatedCephServiceNameUserQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameUserQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>> = ({ signal }) => getDedicatedCephServiceNameUser(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameUserQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>>
export type GetDedicatedCephServiceNameUserQueryError = unknown


export function useGetDedicatedCephServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of all users in a cluster
 */

export function useGetDedicatedCephServiceNameUser<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameUserQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new ceph user
 */
export const postDedicatedCephServiceNameUser = (
    serviceName: string,
    dedicatedCephUserCreateOVH: DedicatedCephUserCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephUserCreateOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameUser>>, TError,{serviceName: string;data: DedicatedCephUserCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameUser>>, TError,{serviceName: string;data: DedicatedCephUserCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameUser>>, {serviceName: string;data: DedicatedCephUserCreateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedCephServiceNameUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameUserMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameUser>>>
    export type PostDedicatedCephServiceNameUserMutationBody = DedicatedCephUserCreateOVH
    export type PostDedicatedCephServiceNameUserMutationError = unknown

    /**
 * @summary Create a new ceph user
 */
export const usePostDedicatedCephServiceNameUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameUser>>, TError,{serviceName: string;data: DedicatedCephUserCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameUser>>,
        TError,
        {serviceName: string;data: DedicatedCephUserCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing single ceph user
 */
export const deleteDedicatedCephServiceNameUserUserName = (
    serviceName: string,
    userName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/user/${userName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCephServiceNameUserUserNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserName>>, TError,{serviceName: string;userName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserName>>, TError,{serviceName: string;userName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserName>>, {serviceName: string;userName: string}> = (props) => {
          const {serviceName,userName} = props ?? {};

          return  deleteDedicatedCephServiceNameUserUserName(serviceName,userName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCephServiceNameUserUserNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserName>>>
    
    export type DeleteDedicatedCephServiceNameUserUserNameMutationError = unknown

    /**
 * @summary Delete an existing single ceph user
 */
export const useDeleteDedicatedCephServiceNameUserUserName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserName>>, TError,{serviceName: string;userName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserName>>,
        TError,
        {serviceName: string;userName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCephServiceNameUserUserNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get details about a ceph user
 */
export const getDedicatedCephServiceNameUserUserName = (
    serviceName: string,
    userName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephUserGetResponseOVH>(
      {url: `/dedicated/ceph/${serviceName}/user/${userName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameUserUserNameQueryKey = (serviceName: string,
    userName: string,) => {
    return [`/dedicated/ceph/${serviceName}/user/${userName}`] as const;
    }

    
export const getGetDedicatedCephServiceNameUserUserNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError = unknown>(serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameUserUserNameQueryKey(serviceName,userName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>> = ({ signal }) => getDedicatedCephServiceNameUserUserName(serviceName,userName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameUserUserNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>>
export type GetDedicatedCephServiceNameUserUserNameQueryError = unknown


export function useGetDedicatedCephServiceNameUserUserName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameUserUserName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameUserUserName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about a ceph user
 */

export function useGetDedicatedCephServiceNameUserUserName<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameUserUserNameQueryOptions(serviceName,userName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List user-pool permissions
 */
export const getDedicatedCephServiceNameUserUserNamePool = (
    serviceName: string,
    userName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedCephUserPoolPermListResponseOVH[]>(
      {url: `/dedicated/ceph/${serviceName}/user/${userName}/pool`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedCephServiceNameUserUserNamePoolQueryKey = (serviceName: string,
    userName: string,) => {
    return [`/dedicated/ceph/${serviceName}/user/${userName}/pool`] as const;
    }

    
export const getGetDedicatedCephServiceNameUserUserNamePoolQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError = unknown>(serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedCephServiceNameUserUserNamePoolQueryKey(serviceName,userName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>> = ({ signal }) => getDedicatedCephServiceNameUserUserNamePool(serviceName,userName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && userName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedCephServiceNameUserUserNamePoolQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>>
export type GetDedicatedCephServiceNameUserUserNamePoolQueryError = unknown


export function useGetDedicatedCephServiceNameUserUserNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError = unknown>(
 serviceName: string,
    userName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameUserUserNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedCephServiceNameUserUserNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List user-pool permissions
 */

export function useGetDedicatedCephServiceNameUserUserNamePool<TData = Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError = unknown>(
 serviceName: string,
    userName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedCephServiceNameUserUserNamePool>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedCephServiceNameUserUserNamePoolQueryOptions(serviceName,userName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new user-pool permissions. All old permissions will be cleared
 */
export const postDedicatedCephServiceNameUserUserNamePool = (
    serviceName: string,
    userName: string,
    dedicatedCephUserPoolCreatePermissionsOVH: DedicatedCephUserPoolCreatePermissionsOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/user/${userName}/pool`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephUserPoolCreatePermissionsOVH, signal
    },
      options);
    }
  


export const getPostDedicatedCephServiceNameUserUserNamePoolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameUserUserNamePool>>, TError,{serviceName: string;userName: string;data: DedicatedCephUserPoolCreatePermissionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameUserUserNamePool>>, TError,{serviceName: string;userName: string;data: DedicatedCephUserPoolCreatePermissionsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedCephServiceNameUserUserNamePool>>, {serviceName: string;userName: string;data: DedicatedCephUserPoolCreatePermissionsOVH}> = (props) => {
          const {serviceName,userName,data} = props ?? {};

          return  postDedicatedCephServiceNameUserUserNamePool(serviceName,userName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedCephServiceNameUserUserNamePoolMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedCephServiceNameUserUserNamePool>>>
    export type PostDedicatedCephServiceNameUserUserNamePoolMutationBody = DedicatedCephUserPoolCreatePermissionsOVH
    export type PostDedicatedCephServiceNameUserUserNamePoolMutationError = unknown

    /**
 * @summary Create new user-pool permissions. All old permissions will be cleared
 */
export const usePostDedicatedCephServiceNameUserUserNamePool = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedCephServiceNameUserUserNamePool>>, TError,{serviceName: string;userName: string;data: DedicatedCephUserPoolCreatePermissionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedCephServiceNameUserUserNamePool>>,
        TError,
        {serviceName: string;userName: string;data: DedicatedCephUserPoolCreatePermissionsOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedCephServiceNameUserUserNamePoolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update user-pool permission for single pool
 */
export const putDedicatedCephServiceNameUserUserNamePool = (
    serviceName: string,
    userName: string,
    dedicatedCephUserPoolUpdatePermissionOVH: DedicatedCephUserPoolUpdatePermissionOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/user/${userName}/pool`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedCephUserPoolUpdatePermissionOVH
    },
      options);
    }
  


export const getPutDedicatedCephServiceNameUserUserNamePoolMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNameUserUserNamePool>>, TError,{serviceName: string;userName: string;data: DedicatedCephUserPoolUpdatePermissionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNameUserUserNamePool>>, TError,{serviceName: string;userName: string;data: DedicatedCephUserPoolUpdatePermissionOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedCephServiceNameUserUserNamePool>>, {serviceName: string;userName: string;data: DedicatedCephUserPoolUpdatePermissionOVH}> = (props) => {
          const {serviceName,userName,data} = props ?? {};

          return  putDedicatedCephServiceNameUserUserNamePool(serviceName,userName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedCephServiceNameUserUserNamePoolMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedCephServiceNameUserUserNamePool>>>
    export type PutDedicatedCephServiceNameUserUserNamePoolMutationBody = DedicatedCephUserPoolUpdatePermissionOVH
    export type PutDedicatedCephServiceNameUserUserNamePoolMutationError = unknown

    /**
 * @summary Update user-pool permission for single pool
 */
export const usePutDedicatedCephServiceNameUserUserNamePool = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedCephServiceNameUserUserNamePool>>, TError,{serviceName: string;userName: string;data: DedicatedCephUserPoolUpdatePermissionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedCephServiceNameUserUserNamePool>>,
        TError,
        {serviceName: string;userName: string;data: DedicatedCephUserPoolUpdatePermissionOVH},
        TContext
      > => {

      const mutationOptions = getPutDedicatedCephServiceNameUserUserNamePoolMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Clear user-pool permission for single pool
 */
export const deleteDedicatedCephServiceNameUserUserNamePoolPoolName = (
    serviceName: string,
    userName: string,
    poolName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/ceph/${serviceName}/user/${userName}/pool/${poolName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedCephServiceNameUserUserNamePoolPoolNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserNamePoolPoolName>>, TError,{serviceName: string;userName: string;poolName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserNamePoolPoolName>>, TError,{serviceName: string;userName: string;poolName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserNamePoolPoolName>>, {serviceName: string;userName: string;poolName: string}> = (props) => {
          const {serviceName,userName,poolName} = props ?? {};

          return  deleteDedicatedCephServiceNameUserUserNamePoolPoolName(serviceName,userName,poolName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedCephServiceNameUserUserNamePoolPoolNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserNamePoolPoolName>>>
    
    export type DeleteDedicatedCephServiceNameUserUserNamePoolPoolNameMutationError = unknown

    /**
 * @summary Clear user-pool permission for single pool
 */
export const useDeleteDedicatedCephServiceNameUserUserNamePoolPoolName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserNamePoolPoolName>>, TError,{serviceName: string;userName: string;poolName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedCephServiceNameUserUserNamePoolPoolName>>,
        TError,
        {serviceName: string;userName: string;poolName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedCephServiceNameUserUserNamePoolPoolNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DomainDomainMXFilterEnumOVH,
  DomainDomainMlLimitsOVH,
  DomainDomainQuotaOVH,
  DomainDomainSummaryOVH,
  DomainDomainUsageAccountStructOVH,
  DomainZoneRecordOVH,
  EmailDomainAccountDelegatedOVH,
  EmailDomainAccountOVH,
  EmailDomainAclOVH,
  EmailDomainDelegationOVH,
  EmailDomainDiagnoseOVH,
  EmailDomainDkimSimplifiedOVH,
  EmailDomainDomainServiceWithIAMOVH,
  EmailDomainFilterOVH,
  EmailDomainMailingListOVH,
  EmailDomainMigrationAccountOVH,
  EmailDomainMigrationCheckStructOVH,
  EmailDomainMigrationServiceOVH,
  EmailDomainModeratorOVH,
  EmailDomainRedirectionChangeRedirectionCreationOVH,
  EmailDomainRedirectionCreationOVH,
  EmailDomainRedirectionGlobalOVH,
  EmailDomainResponderAccountOVH,
  EmailDomainResponderOVH,
  EmailDomainRuleOVH,
  EmailDomainSubscriberOVH,
  EmailDomainTaskFilterOVH,
  EmailDomainTaskMlOVH,
  EmailDomainTaskOVH,
  EmailDomainTaskPopOVH,
  EmailDomainTaskSpecialAccountOVH,
  GetEmailDomainDelegatedAccountParams,
  GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams,
  GetEmailDomainDomainAccountAccountNameMigrateParams,
  GetEmailDomainDomainAccountParams,
  GetEmailDomainDomainDiagnoseParams,
  GetEmailDomainDomainDnsMXFilterParams,
  GetEmailDomainDomainDnsMXRecordsParams,
  GetEmailDomainDomainMailingListNameModeratorParams,
  GetEmailDomainDomainMailingListNameSubscriberParams,
  GetEmailDomainDomainMailingListParams,
  GetEmailDomainDomainRedirectionParams,
  GetEmailDomainDomainResponderParams,
  GetEmailDomainDomainTaskAccountParams,
  GetEmailDomainDomainTaskFilterParams,
  GetEmailDomainDomainTaskMailinglistParams,
  GetEmailDomainDomainTaskRedirectionParams,
  GetEmailDomainDomainTaskResponderParams,
  GetEmailDomainMailingListLimitsParams,
  GetEmailDomainParams,
  PostEmailDomainDelegatedAccountEmailChangePasswordBody,
  PostEmailDomainDelegatedAccountEmailFilterBody,
  PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody,
  PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody,
  PostEmailDomainDelegatedAccountEmailFilterNameRuleBody,
  PostEmailDomainDelegatedAccountEmailResponderBody,
  PostEmailDomainDomainAccountAccountNameChangePasswordBody,
  PostEmailDomainDomainAccountAccountNameDelegationBody,
  PostEmailDomainDomainAccountAccountNameFilterBody,
  PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody,
  PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody,
  PostEmailDomainDomainAccountAccountNameFilterNameRuleBody,
  PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody,
  PostEmailDomainDomainAccountBody,
  PostEmailDomainDomainAclBody,
  PostEmailDomainDomainChangeContactBody,
  PostEmailDomainDomainChangeDnsMXFilterBody,
  PostEmailDomainDomainConfirmTerminationBody,
  PostEmailDomainDomainDiagnoseBody,
  PostEmailDomainDomainMailingListBody,
  PostEmailDomainDomainMailingListNameChangeOptionsBody,
  PostEmailDomainDomainMailingListNameModeratorBody,
  PostEmailDomainDomainMailingListNameSendListByEmailBody,
  PostEmailDomainDomainMailingListNameSubscriberBody,
  PostEmailDomainDomainResponderBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getEmailDomain = (
    params?: GetEmailDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainQueryKey = (params?: GetEmailDomainParams,) => {
    return [`/email/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomain>>, TError = unknown>(params?: GetEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomain>>> = ({ signal }) => getEmailDomain(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomain>>>
export type GetEmailDomainQueryError = unknown


export function useGetEmailDomain<TData = Awaited<ReturnType<typeof getEmailDomain>>, TError = unknown>(
 params: undefined |  GetEmailDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomain<TData = Awaited<ReturnType<typeof getEmailDomain>>, TError = unknown>(
 params?: GetEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomain<TData = Awaited<ReturnType<typeof getEmailDomain>>, TError = unknown>(
 params?: GetEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetEmailDomain<TData = Awaited<ReturnType<typeof getEmailDomain>>, TError = unknown>(
 params?: GetEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delegated emails
 */
export const getEmailDomainDelegatedAccount = (
    params?: GetEmailDomainDelegatedAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/delegatedAccount`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountQueryKey = (params?: GetEmailDomainDelegatedAccountParams,) => {
    return [`/email/domain/delegatedAccount`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDelegatedAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError = unknown>(params?: GetEmailDomainDelegatedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>> = ({ signal }) => getEmailDomainDelegatedAccount(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>>
export type GetEmailDomainDelegatedAccountQueryError = unknown


export function useGetEmailDomainDelegatedAccount<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError = unknown>(
 params: undefined |  GetEmailDomainDelegatedAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccount<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError = unknown>(
 params?: GetEmailDomainDelegatedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccount<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError = unknown>(
 params?: GetEmailDomainDelegatedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Delegated emails
 */

export function useGetEmailDomainDelegatedAccount<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError = unknown>(
 params?: GetEmailDomainDelegatedAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDelegatedAccountEmail = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainAccountDelegatedOVH>(
      {url: `/email/domain/delegatedAccount/${email}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountEmailQueryKey = (email: string,) => {
    return [`/email/domain/delegatedAccount/${email}`] as const;
    }

    
export const getGetEmailDomainDelegatedAccountEmailQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError = unknown>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>> = ({ signal }) => getEmailDomainDelegatedAccountEmail(email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>>
export type GetEmailDomainDelegatedAccountEmailQueryError = unknown


export function useGetEmailDomainDelegatedAccountEmail<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError = unknown>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmail<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmail<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDelegatedAccountEmail<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountEmailQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailDomainDelegatedAccountEmail = (
    email: string,
    emailDomainAccountDelegatedOVH: NonReadonly<EmailDomainAccountDelegatedOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/delegatedAccount/${email}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainAccountDelegatedOVH
    },
      options);
    }
  


export const getPutEmailDomainDelegatedAccountEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmail>>, TError,{email: string;data: NonReadonly<EmailDomainAccountDelegatedOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmail>>, TError,{email: string;data: NonReadonly<EmailDomainAccountDelegatedOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmail>>, {email: string;data: NonReadonly<EmailDomainAccountDelegatedOVH>}> = (props) => {
          const {email,data} = props ?? {};

          return  putEmailDomainDelegatedAccountEmail(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDelegatedAccountEmailMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmail>>>
    export type PutEmailDomainDelegatedAccountEmailMutationBody = NonReadonly<EmailDomainAccountDelegatedOVH>
    export type PutEmailDomainDelegatedAccountEmailMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailDomainDelegatedAccountEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmail>>, TError,{email: string;data: NonReadonly<EmailDomainAccountDelegatedOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmail>>,
        TError,
        {email: string;data: NonReadonly<EmailDomainAccountDelegatedOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDelegatedAccountEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change mailbox password (length : [9;30], no space at begin and end, no accent)
 */
export const postEmailDomainDelegatedAccountEmailChangePassword = (
    email: string,
    postEmailDomainDelegatedAccountEmailChangePasswordBody: PostEmailDomainDelegatedAccountEmailChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskPopOVH>(
      {url: `/email/domain/delegatedAccount/${email}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDelegatedAccountEmailChangePasswordBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailChangePassword>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailChangePassword>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailChangePassword>>, {email: string;data: PostEmailDomainDelegatedAccountEmailChangePasswordBody}> = (props) => {
          const {email,data} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailChangePassword(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailChangePassword>>>
    export type PostEmailDomainDelegatedAccountEmailChangePasswordMutationBody = PostEmailDomainDelegatedAccountEmailChangePasswordBody
    export type PostEmailDomainDelegatedAccountEmailChangePasswordMutationError = unknown

    /**
 * @summary Change mailbox password (length : [9;30], no space at begin and end, no accent)
 */
export const usePostEmailDomainDelegatedAccountEmailChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailChangePassword>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailChangePassword>>,
        TError,
        {email: string;data: PostEmailDomainDelegatedAccountEmailChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get filters
 */
export const getEmailDomainDelegatedAccountEmailFilter = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/delegatedAccount/${email}/filter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountEmailFilterQueryKey = (email: string,) => {
    return [`/email/domain/delegatedAccount/${email}/filter`] as const;
    }

    
export const getGetEmailDomainDelegatedAccountEmailFilterQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError = unknown>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountEmailFilterQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>> = ({ signal }) => getEmailDomainDelegatedAccountEmailFilter(email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountEmailFilterQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>>
export type GetEmailDomainDelegatedAccountEmailFilterQueryError = unknown


export function useGetEmailDomainDelegatedAccountEmailFilter<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError = unknown>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilter<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilter<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get filters
 */

export function useGetEmailDomainDelegatedAccountEmailFilter<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountEmailFilterQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new filter for account
 */
export const postEmailDomainDelegatedAccountEmailFilter = (
    email: string,
    postEmailDomainDelegatedAccountEmailFilterBody: PostEmailDomainDelegatedAccountEmailFilterBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/delegatedAccount/${email}/filter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDelegatedAccountEmailFilterBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailFilterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilter>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailFilterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilter>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailFilterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilter>>, {email: string;data: PostEmailDomainDelegatedAccountEmailFilterBody}> = (props) => {
          const {email,data} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailFilter(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailFilterMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilter>>>
    export type PostEmailDomainDelegatedAccountEmailFilterMutationBody = PostEmailDomainDelegatedAccountEmailFilterBody
    export type PostEmailDomainDelegatedAccountEmailFilterMutationError = unknown

    /**
 * @summary Create new filter for account
 */
export const usePostEmailDomainDelegatedAccountEmailFilter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilter>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailFilterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilter>>,
        TError,
        {email: string;data: PostEmailDomainDelegatedAccountEmailFilterBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailFilterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing filter
 */
export const deleteEmailDomainDelegatedAccountEmailFilterName = (
    email: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH[]>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDelegatedAccountEmailFilterNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterName>>, TError,{email: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterName>>, TError,{email: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterName>>, {email: string;name: string}> = (props) => {
          const {email,name} = props ?? {};

          return  deleteEmailDomainDelegatedAccountEmailFilterName(email,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDelegatedAccountEmailFilterNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterName>>>
    
    export type DeleteEmailDomainDelegatedAccountEmailFilterNameMutationError = unknown

    /**
 * @summary Delete an existing filter
 */
export const useDeleteEmailDomainDelegatedAccountEmailFilterName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterName>>, TError,{email: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterName>>,
        TError,
        {email: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDelegatedAccountEmailFilterNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDelegatedAccountEmailFilterName = (
    email: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainFilterOVH>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountEmailFilterNameQueryKey = (email: string,
    name: string,) => {
    return [`/email/domain/delegatedAccount/${email}/filter/${name}`] as const;
    }

    
export const getGetEmailDomainDelegatedAccountEmailFilterNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError = unknown>(email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountEmailFilterNameQueryKey(email,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>> = ({ signal }) => getEmailDomainDelegatedAccountEmailFilterName(email,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountEmailFilterNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>>
export type GetEmailDomainDelegatedAccountEmailFilterNameQueryError = unknown


export function useGetEmailDomainDelegatedAccountEmailFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError = unknown>(
 email: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError = unknown>(
 email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError = unknown>(
 email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDelegatedAccountEmailFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError = unknown>(
 email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountEmailFilterNameQueryOptions(email,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change filter activity
 */
export const postEmailDomainDelegatedAccountEmailFilterNameChangeActivity = (
    email: string,
    name: string,
    postEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody: PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}/changeActivity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailFilterNameChangeActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangeActivity>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangeActivity>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangeActivity>>, {email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody}> = (props) => {
          const {email,name,data} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailFilterNameChangeActivity(email,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangeActivity>>>
    export type PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityMutationBody = PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody
    export type PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityMutationError = unknown

    /**
 * @summary Change filter activity
 */
export const usePostEmailDomainDelegatedAccountEmailFilterNameChangeActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangeActivity>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangeActivity>>,
        TError,
        {email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailFilterNameChangeActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change filter priority
 */
export const postEmailDomainDelegatedAccountEmailFilterNameChangePriority = (
    email: string,
    name: string,
    postEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody: PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}/changePriority`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailFilterNameChangePriorityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangePriority>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangePriority>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangePriority>>, {email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody}> = (props) => {
          const {email,name,data} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailFilterNameChangePriority(email,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangePriority>>>
    export type PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityMutationBody = PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody
    export type PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityMutationError = unknown

    /**
 * @summary Change filter priority
 */
export const usePostEmailDomainDelegatedAccountEmailFilterNameChangePriority = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangePriority>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameChangePriority>>,
        TError,
        {email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailFilterNameChangePriorityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get rules
 */
export const getEmailDomainDelegatedAccountEmailFilterNameRule = (
    email: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}/rule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountEmailFilterNameRuleQueryKey = (email: string,
    name: string,) => {
    return [`/email/domain/delegatedAccount/${email}/filter/${name}/rule`] as const;
    }

    
export const getGetEmailDomainDelegatedAccountEmailFilterNameRuleQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError = unknown>(email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountEmailFilterNameRuleQueryKey(email,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>> = ({ signal }) => getEmailDomainDelegatedAccountEmailFilterNameRule(email,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountEmailFilterNameRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>>
export type GetEmailDomainDelegatedAccountEmailFilterNameRuleQueryError = unknown


export function useGetEmailDomainDelegatedAccountEmailFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError = unknown>(
 email: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError = unknown>(
 email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError = unknown>(
 email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get rules
 */

export function useGetEmailDomainDelegatedAccountEmailFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError = unknown>(
 email: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountEmailFilterNameRuleQueryOptions(email,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new rule for filter
 */
export const postEmailDomainDelegatedAccountEmailFilterNameRule = (
    email: string,
    name: string,
    postEmailDomainDelegatedAccountEmailFilterNameRuleBody: PostEmailDomainDelegatedAccountEmailFilterNameRuleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}/rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDelegatedAccountEmailFilterNameRuleBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailFilterNameRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameRule>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameRule>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameRuleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameRule>>, {email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameRuleBody}> = (props) => {
          const {email,name,data} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailFilterNameRule(email,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailFilterNameRuleMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameRule>>>
    export type PostEmailDomainDelegatedAccountEmailFilterNameRuleMutationBody = PostEmailDomainDelegatedAccountEmailFilterNameRuleBody
    export type PostEmailDomainDelegatedAccountEmailFilterNameRuleMutationError = unknown

    /**
 * @summary Create new rule for filter
 */
export const usePostEmailDomainDelegatedAccountEmailFilterNameRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameRule>>, TError,{email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailFilterNameRule>>,
        TError,
        {email: string;name: string;data: PostEmailDomainDelegatedAccountEmailFilterNameRuleBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailFilterNameRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing filter
 */
export const deleteEmailDomainDelegatedAccountEmailFilterNameRuleId = (
    email: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH[]>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}/rule/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDelegatedAccountEmailFilterNameRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError,{email: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError,{email: string;name: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterNameRuleId>>, {email: string;name: string;id: number}> = (props) => {
          const {email,name,id} = props ?? {};

          return  deleteEmailDomainDelegatedAccountEmailFilterNameRuleId(email,name,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDelegatedAccountEmailFilterNameRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterNameRuleId>>>
    
    export type DeleteEmailDomainDelegatedAccountEmailFilterNameRuleIdMutationError = unknown

    /**
 * @summary Delete an existing filter
 */
export const useDeleteEmailDomainDelegatedAccountEmailFilterNameRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError,{email: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailFilterNameRuleId>>,
        TError,
        {email: string;name: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDelegatedAccountEmailFilterNameRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDelegatedAccountEmailFilterNameRuleId = (
    email: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainRuleOVH>(
      {url: `/email/domain/delegatedAccount/${email}/filter/${name}/rule/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountEmailFilterNameRuleIdQueryKey = (email: string,
    name: string,
    id: number,) => {
    return [`/email/domain/delegatedAccount/${email}/filter/${name}/rule/${id}`] as const;
    }

    
export const getGetEmailDomainDelegatedAccountEmailFilterNameRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError = unknown>(email: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountEmailFilterNameRuleIdQueryKey(email,name,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>> = ({ signal }) => getEmailDomainDelegatedAccountEmailFilterNameRuleId(email,name,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email && name && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountEmailFilterNameRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>>
export type GetEmailDomainDelegatedAccountEmailFilterNameRuleIdQueryError = unknown


export function useGetEmailDomainDelegatedAccountEmailFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError = unknown>(
 email: string,
    name: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError = unknown>(
 email: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError = unknown>(
 email: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDelegatedAccountEmailFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError = unknown>(
 email: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailFilterNameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountEmailFilterNameRuleIdQueryOptions(email,name,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete an existing responder in server
 */
export const deleteEmailDomainDelegatedAccountEmailResponder = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/delegatedAccount/${email}/responder`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDelegatedAccountEmailResponderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailResponder>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  deleteEmailDomainDelegatedAccountEmailResponder(email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDelegatedAccountEmailResponderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailResponder>>>
    
    export type DeleteEmailDomainDelegatedAccountEmailResponderMutationError = unknown

    /**
 * @summary Delete an existing responder in server
 */
export const useDeleteEmailDomainDelegatedAccountEmailResponder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDelegatedAccountEmailResponder>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDelegatedAccountEmailResponderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDelegatedAccountEmailResponder = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainResponderAccountOVH>(
      {url: `/email/domain/delegatedAccount/${email}/responder`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDelegatedAccountEmailResponderQueryKey = (email: string,) => {
    return [`/email/domain/delegatedAccount/${email}/responder`] as const;
    }

    
export const getGetEmailDomainDelegatedAccountEmailResponderQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError = unknown>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDelegatedAccountEmailResponderQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>> = ({ signal }) => getEmailDomainDelegatedAccountEmailResponder(email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDelegatedAccountEmailResponderQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>>
export type GetEmailDomainDelegatedAccountEmailResponderQueryError = unknown


export function useGetEmailDomainDelegatedAccountEmailResponder<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError = unknown>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailResponder<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDelegatedAccountEmailResponder<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDelegatedAccountEmailResponder<TData = Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError = unknown>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDelegatedAccountEmailResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDelegatedAccountEmailResponderQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new responder in server
 */
export const postEmailDomainDelegatedAccountEmailResponder = (
    email: string,
    postEmailDomainDelegatedAccountEmailResponderBody: PostEmailDomainDelegatedAccountEmailResponderBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/delegatedAccount/${email}/responder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDelegatedAccountEmailResponderBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailResponderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailResponderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailResponderBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailResponder>>, {email: string;data: PostEmailDomainDelegatedAccountEmailResponderBody}> = (props) => {
          const {email,data} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailResponder(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailResponderMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailResponder>>>
    export type PostEmailDomainDelegatedAccountEmailResponderMutationBody = PostEmailDomainDelegatedAccountEmailResponderBody
    export type PostEmailDomainDelegatedAccountEmailResponderMutationError = unknown

    /**
 * @summary Create new responder in server
 */
export const usePostEmailDomainDelegatedAccountEmailResponder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string;data: PostEmailDomainDelegatedAccountEmailResponderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailResponder>>,
        TError,
        {email: string;data: PostEmailDomainDelegatedAccountEmailResponderBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailResponderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putEmailDomainDelegatedAccountEmailResponder = (
    email: string,
    emailDomainResponderAccountOVH: NonReadonly<EmailDomainResponderAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/delegatedAccount/${email}/responder`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainResponderAccountOVH
    },
      options);
    }
  


export const getPutEmailDomainDelegatedAccountEmailResponderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string;data: NonReadonly<EmailDomainResponderAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string;data: NonReadonly<EmailDomainResponderAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmailResponder>>, {email: string;data: NonReadonly<EmailDomainResponderAccountOVH>}> = (props) => {
          const {email,data} = props ?? {};

          return  putEmailDomainDelegatedAccountEmailResponder(email,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDelegatedAccountEmailResponderMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmailResponder>>>
    export type PutEmailDomainDelegatedAccountEmailResponderMutationBody = NonReadonly<EmailDomainResponderAccountOVH>
    export type PutEmailDomainDelegatedAccountEmailResponderMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailDomainDelegatedAccountEmailResponder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmailResponder>>, TError,{email: string;data: NonReadonly<EmailDomainResponderAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDelegatedAccountEmailResponder>>,
        TError,
        {email: string;data: NonReadonly<EmailDomainResponderAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDelegatedAccountEmailResponderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update usage of account
 */
export const postEmailDomainDelegatedAccountEmailUpdateUsage = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/delegatedAccount/${email}/updateUsage`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailUpdateUsageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUpdateUsage>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUpdateUsage>>, TError,{email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUpdateUsage>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailUpdateUsage(email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailUpdateUsageMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUpdateUsage>>>
    
    export type PostEmailDomainDelegatedAccountEmailUpdateUsageMutationError = unknown

    /**
 * @summary Update usage of account
 */
export const usePostEmailDomainDelegatedAccountEmailUpdateUsage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUpdateUsage>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUpdateUsage>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailUpdateUsageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary usage of account
 */
export const postEmailDomainDelegatedAccountEmailUsage = (
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainDomainUsageAccountStructOVH>(
      {url: `/email/domain/delegatedAccount/${email}/usage`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailDomainDelegatedAccountEmailUsageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUsage>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUsage>>, TError,{email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUsage>>, {email: string}> = (props) => {
          const {email} = props ?? {};

          return  postEmailDomainDelegatedAccountEmailUsage(email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDelegatedAccountEmailUsageMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUsage>>>
    
    export type PostEmailDomainDelegatedAccountEmailUsageMutationError = unknown

    /**
 * @summary usage of account
 */
export const usePostEmailDomainDelegatedAccountEmailUsage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUsage>>, TError,{email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDelegatedAccountEmailUsage>>,
        TError,
        {email: string},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDelegatedAccountEmailUsageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get limits of mailing list
 */
export const getEmailDomainMailingListLimits = (
    params: GetEmailDomainMailingListLimitsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainDomainMlLimitsOVH>(
      {url: `/email/domain/mailingListLimits`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainMailingListLimitsQueryKey = (params: GetEmailDomainMailingListLimitsParams,) => {
    return [`/email/domain/mailingListLimits`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainMailingListLimitsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError = unknown>(params: GetEmailDomainMailingListLimitsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainMailingListLimitsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>> = ({ signal }) => getEmailDomainMailingListLimits(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainMailingListLimitsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>>
export type GetEmailDomainMailingListLimitsQueryError = unknown


export function useGetEmailDomainMailingListLimits<TData = Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError = unknown>(
 params: GetEmailDomainMailingListLimitsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainMailingListLimits<TData = Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError = unknown>(
 params: GetEmailDomainMailingListLimitsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainMailingListLimits<TData = Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError = unknown>(
 params: GetEmailDomainMailingListLimitsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get limits of mailing list
 */

export function useGetEmailDomainMailingListLimits<TData = Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError = unknown>(
 params: GetEmailDomainMailingListLimitsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainMailingListLimits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainMailingListLimitsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomain = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainDomainServiceWithIAMOVH>(
      {url: `/email/domain/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}`] as const;
    }

    
export const getGetEmailDomainDomainQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomain>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomain>>> = ({ signal }) => getEmailDomainDomain(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomain>>>
export type GetEmailDomainDomainQueryError = unknown


export function useGetEmailDomainDomain<TData = Awaited<ReturnType<typeof getEmailDomainDomain>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomain<TData = Awaited<ReturnType<typeof getEmailDomainDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomain<TData = Awaited<ReturnType<typeof getEmailDomainDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomain<TData = Awaited<ReturnType<typeof getEmailDomainDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get accounts
 */
export const getEmailDomainDomainAccount = (
    domain: string,
    params?: GetEmailDomainDomainAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountQueryKey = (domain: string,
    params?: GetEmailDomainDomainAccountParams,) => {
    return [`/email/domain/${domain}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>> = ({ signal }) => getEmailDomainDomainAccount(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>>
export type GetEmailDomainDomainAccountQueryError = unknown


export function useGetEmailDomainDomainAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get accounts
 */

export function useGetEmailDomainDomainAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new mailbox in server
 */
export const postEmailDomainDomainAccount = (
    domain: string,
    postEmailDomainDomainAccountBody: PostEmailDomainDomainAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskPopOVH>(
      {url: `/email/domain/${domain}/account`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccount>>, TError,{domain: string;data: PostEmailDomainDomainAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccount>>, TError,{domain: string;data: PostEmailDomainDomainAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccount>>, {domain: string;data: PostEmailDomainDomainAccountBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainAccount(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccount>>>
    export type PostEmailDomainDomainAccountMutationBody = PostEmailDomainDomainAccountBody
    export type PostEmailDomainDomainAccountMutationError = unknown

    /**
 * @summary Create new mailbox in server
 */
export const usePostEmailDomainDomainAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccount>>, TError,{domain: string;data: PostEmailDomainDomainAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccount>>,
        TError,
        {domain: string;data: PostEmailDomainDomainAccountBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing mailbox in server
 */
export const deleteEmailDomainDomainAccountAccountName = (
    domain: string,
    accountName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskPopOVH>(
      {url: `/email/domain/${domain}/account/${accountName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainAccountAccountNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountName>>, TError,{domain: string;accountName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountName>>, TError,{domain: string;accountName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountName>>, {domain: string;accountName: string}> = (props) => {
          const {domain,accountName} = props ?? {};

          return  deleteEmailDomainDomainAccountAccountName(domain,accountName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainAccountAccountNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountName>>>
    
    export type DeleteEmailDomainDomainAccountAccountNameMutationError = unknown

    /**
 * @summary Delete an existing mailbox in server
 */
export const useDeleteEmailDomainDomainAccountAccountName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountName>>, TError,{domain: string;accountName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountName>>,
        TError,
        {domain: string;accountName: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainAccountAccountNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAccountAccountName = (
    domain: string,
    accountName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainAccountOVH>(
      {url: `/email/domain/${domain}/account/${accountName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameQueryKey = (domain: string,
    accountName: string,) => {
    return [`/email/domain/${domain}/account/${accountName}`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError = unknown>(domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameQueryKey(domain,accountName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>> = ({ signal }) => getEmailDomainDomainAccountAccountName(domain,accountName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>>
export type GetEmailDomainDomainAccountAccountNameQueryError = unknown


export function useGetEmailDomainDomainAccountAccountName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError = unknown>(
 domain: string,
    accountName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAccountAccountName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameQueryOptions(domain,accountName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailDomainDomainAccountAccountName = (
    domain: string,
    accountName: string,
    emailDomainAccountOVH: NonReadonly<EmailDomainAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/account/${accountName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainAccountOVH
    },
      options);
    }
  


export const getPutEmailDomainDomainAccountAccountNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainAccountAccountName>>, TError,{domain: string;accountName: string;data: NonReadonly<EmailDomainAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainAccountAccountName>>, TError,{domain: string;accountName: string;data: NonReadonly<EmailDomainAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDomainAccountAccountName>>, {domain: string;accountName: string;data: NonReadonly<EmailDomainAccountOVH>}> = (props) => {
          const {domain,accountName,data} = props ?? {};

          return  putEmailDomainDomainAccountAccountName(domain,accountName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDomainAccountAccountNameMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDomainAccountAccountName>>>
    export type PutEmailDomainDomainAccountAccountNameMutationBody = NonReadonly<EmailDomainAccountOVH>
    export type PutEmailDomainDomainAccountAccountNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailDomainDomainAccountAccountName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainAccountAccountName>>, TError,{domain: string;accountName: string;data: NonReadonly<EmailDomainAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDomainAccountAccountName>>,
        TError,
        {domain: string;accountName: string;data: NonReadonly<EmailDomainAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDomainAccountAccountNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change mailbox password (length : [9;30], no space at begin and end, no accent)
 */
export const postEmailDomainDomainAccountAccountNameChangePassword = (
    domain: string,
    accountName: string,
    postEmailDomainDomainAccountAccountNameChangePasswordBody: PostEmailDomainDomainAccountAccountNameChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskPopOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameChangePasswordBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameChangePassword>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameChangePassword>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameChangePassword>>, {domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameChangePasswordBody}> = (props) => {
          const {domain,accountName,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameChangePassword(domain,accountName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameChangePassword>>>
    export type PostEmailDomainDomainAccountAccountNameChangePasswordMutationBody = PostEmailDomainDomainAccountAccountNameChangePasswordBody
    export type PostEmailDomainDomainAccountAccountNameChangePasswordMutationError = unknown

    /**
 * @summary Change mailbox password (length : [9;30], no space at begin and end, no accent)
 */
export const usePostEmailDomainDomainAccountAccountNameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameChangePassword>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameChangePassword>>,
        TError,
        {domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get delegations
 */
export const getEmailDomainDomainAccountAccountNameDelegation = (
    domain: string,
    accountName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/account/${accountName}/delegation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameDelegationQueryKey = (domain: string,
    accountName: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/delegation`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameDelegationQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError = unknown>(domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameDelegationQueryKey(domain,accountName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameDelegation(domain,accountName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameDelegationQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>>
export type GetEmailDomainDomainAccountAccountNameDelegationQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameDelegation<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError = unknown>(
 domain: string,
    accountName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameDelegation<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameDelegation<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get delegations
 */

export function useGetEmailDomainDomainAccountAccountNameDelegation<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameDelegationQueryOptions(domain,accountName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create delegation for this account
 */
export const postEmailDomainDomainAccountAccountNameDelegation = (
    domain: string,
    accountName: string,
    postEmailDomainDomainAccountAccountNameDelegationBody: PostEmailDomainDomainAccountAccountNameDelegationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/domain/${domain}/account/${accountName}/delegation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameDelegationBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameDelegationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameDelegation>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameDelegationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameDelegation>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameDelegationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameDelegation>>, {domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameDelegationBody}> = (props) => {
          const {domain,accountName,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameDelegation(domain,accountName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameDelegationMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameDelegation>>>
    export type PostEmailDomainDomainAccountAccountNameDelegationMutationBody = PostEmailDomainDomainAccountAccountNameDelegationBody
    export type PostEmailDomainDomainAccountAccountNameDelegationMutationError = unknown

    /**
 * @summary Create delegation for this account
 */
export const usePostEmailDomainDomainAccountAccountNameDelegation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameDelegation>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameDelegationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameDelegation>>,
        TError,
        {domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameDelegationBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameDelegationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing delegation
 */
export const deleteEmailDomainDomainAccountAccountNameDelegationAccountId = (
    domain: string,
    accountName: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/domain/${domain}/account/${accountName}/delegation/${accountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainAccountAccountNameDelegationAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError,{domain: string;accountName: string;accountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError,{domain: string;accountName: string;accountId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameDelegationAccountId>>, {domain: string;accountName: string;accountId: string}> = (props) => {
          const {domain,accountName,accountId} = props ?? {};

          return  deleteEmailDomainDomainAccountAccountNameDelegationAccountId(domain,accountName,accountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainAccountAccountNameDelegationAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameDelegationAccountId>>>
    
    export type DeleteEmailDomainDomainAccountAccountNameDelegationAccountIdMutationError = unknown

    /**
 * @summary Delete an existing delegation
 */
export const useDeleteEmailDomainDomainAccountAccountNameDelegationAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError,{domain: string;accountName: string;accountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameDelegationAccountId>>,
        TError,
        {domain: string;accountName: string;accountId: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainAccountAccountNameDelegationAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAccountAccountNameDelegationAccountId = (
    domain: string,
    accountName: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainDelegationOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/delegation/${accountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameDelegationAccountIdQueryKey = (domain: string,
    accountName: string,
    accountId: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/delegation/${accountId}`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameDelegationAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError = unknown>(domain: string,
    accountName: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameDelegationAccountIdQueryKey(domain,accountName,accountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameDelegationAccountId(domain,accountName,accountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && accountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameDelegationAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>>
export type GetEmailDomainDomainAccountAccountNameDelegationAccountIdQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameDelegationAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError = unknown>(
 domain: string,
    accountName: string,
    accountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameDelegationAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError = unknown>(
 domain: string,
    accountName: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameDelegationAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError = unknown>(
 domain: string,
    accountName: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAccountAccountNameDelegationAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError = unknown>(
 domain: string,
    accountName: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameDelegationAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameDelegationAccountIdQueryOptions(domain,accountName,accountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get filters
 */
export const getEmailDomainDomainAccountAccountNameFilter = (
    domain: string,
    accountName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/account/${accountName}/filter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameFilterQueryKey = (domain: string,
    accountName: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/filter`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameFilterQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError = unknown>(domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameFilterQueryKey(domain,accountName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameFilter(domain,accountName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameFilterQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>>
export type GetEmailDomainDomainAccountAccountNameFilterQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError = unknown>(
 domain: string,
    accountName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get filters
 */

export function useGetEmailDomainDomainAccountAccountNameFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameFilterQueryOptions(domain,accountName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new filter for account
 */
export const postEmailDomainDomainAccountAccountNameFilter = (
    domain: string,
    accountName: string,
    postEmailDomainDomainAccountAccountNameFilterBody: PostEmailDomainDomainAccountAccountNameFilterBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/filter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameFilterBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameFilterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilter>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameFilterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilter>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameFilterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilter>>, {domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameFilterBody}> = (props) => {
          const {domain,accountName,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameFilter(domain,accountName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameFilterMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilter>>>
    export type PostEmailDomainDomainAccountAccountNameFilterMutationBody = PostEmailDomainDomainAccountAccountNameFilterBody
    export type PostEmailDomainDomainAccountAccountNameFilterMutationError = unknown

    /**
 * @summary Create new filter for account
 */
export const usePostEmailDomainDomainAccountAccountNameFilter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilter>>, TError,{domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameFilterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilter>>,
        TError,
        {domain: string;accountName: string;data: PostEmailDomainDomainAccountAccountNameFilterBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameFilterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing filter
 */
export const deleteEmailDomainDomainAccountAccountNameFilterName = (
    domain: string,
    accountName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH[]>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainAccountAccountNameFilterNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterName>>, TError,{domain: string;accountName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterName>>, TError,{domain: string;accountName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterName>>, {domain: string;accountName: string;name: string}> = (props) => {
          const {domain,accountName,name} = props ?? {};

          return  deleteEmailDomainDomainAccountAccountNameFilterName(domain,accountName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainAccountAccountNameFilterNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterName>>>
    
    export type DeleteEmailDomainDomainAccountAccountNameFilterNameMutationError = unknown

    /**
 * @summary Delete an existing filter
 */
export const useDeleteEmailDomainDomainAccountAccountNameFilterName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterName>>, TError,{domain: string;accountName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterName>>,
        TError,
        {domain: string;accountName: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainAccountAccountNameFilterNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAccountAccountNameFilterName = (
    domain: string,
    accountName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainFilterOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameFilterNameQueryKey = (domain: string,
    accountName: string,
    name: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/filter/${name}`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameFilterNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError = unknown>(domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameFilterNameQueryKey(domain,accountName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameFilterName(domain,accountName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameFilterNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>>
export type GetEmailDomainDomainAccountAccountNameFilterNameQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAccountAccountNameFilterName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameFilterNameQueryOptions(domain,accountName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change filter activity
 */
export const postEmailDomainDomainAccountAccountNameFilterNameChangeActivity = (
    domain: string,
    accountName: string,
    name: string,
    postEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody: PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}/changeActivity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameFilterNameChangeActivityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangeActivity>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangeActivity>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangeActivity>>, {domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody}> = (props) => {
          const {domain,accountName,name,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameFilterNameChangeActivity(domain,accountName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangeActivity>>>
    export type PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityMutationBody = PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody
    export type PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityMutationError = unknown

    /**
 * @summary Change filter activity
 */
export const usePostEmailDomainDomainAccountAccountNameFilterNameChangeActivity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangeActivity>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangeActivity>>,
        TError,
        {domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameFilterNameChangeActivityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change filter priority
 */
export const postEmailDomainDomainAccountAccountNameFilterNameChangePriority = (
    domain: string,
    accountName: string,
    name: string,
    postEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody: PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}/changePriority`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameFilterNameChangePriorityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangePriority>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangePriority>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangePriority>>, {domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody}> = (props) => {
          const {domain,accountName,name,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameFilterNameChangePriority(domain,accountName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangePriority>>>
    export type PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityMutationBody = PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody
    export type PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityMutationError = unknown

    /**
 * @summary Change filter priority
 */
export const usePostEmailDomainDomainAccountAccountNameFilterNameChangePriority = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangePriority>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameChangePriority>>,
        TError,
        {domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameFilterNameChangePriorityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get rules
 */
export const getEmailDomainDomainAccountAccountNameFilterNameRule = (
    domain: string,
    accountName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}/rule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameFilterNameRuleQueryKey = (domain: string,
    accountName: string,
    name: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/filter/${name}/rule`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameFilterNameRuleQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError = unknown>(domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameFilterNameRuleQueryKey(domain,accountName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameFilterNameRule(domain,accountName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameFilterNameRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>>
export type GetEmailDomainDomainAccountAccountNameFilterNameRuleQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get rules
 */

export function useGetEmailDomainDomainAccountAccountNameFilterNameRule<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameFilterNameRuleQueryOptions(domain,accountName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new rule for filter
 */
export const postEmailDomainDomainAccountAccountNameFilterNameRule = (
    domain: string,
    accountName: string,
    name: string,
    postEmailDomainDomainAccountAccountNameFilterNameRuleBody: PostEmailDomainDomainAccountAccountNameFilterNameRuleBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}/rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameFilterNameRuleBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameFilterNameRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameRule>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameRule>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameRuleBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameRule>>, {domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameRuleBody}> = (props) => {
          const {domain,accountName,name,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameFilterNameRule(domain,accountName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameFilterNameRuleMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameRule>>>
    export type PostEmailDomainDomainAccountAccountNameFilterNameRuleMutationBody = PostEmailDomainDomainAccountAccountNameFilterNameRuleBody
    export type PostEmailDomainDomainAccountAccountNameFilterNameRuleMutationError = unknown

    /**
 * @summary Create new rule for filter
 */
export const usePostEmailDomainDomainAccountAccountNameFilterNameRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameRule>>, TError,{domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameRuleBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameFilterNameRule>>,
        TError,
        {domain: string;accountName: string;name: string;data: PostEmailDomainDomainAccountAccountNameFilterNameRuleBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameFilterNameRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing filter
 */
export const deleteEmailDomainDomainAccountAccountNameFilterNameRuleId = (
    domain: string,
    accountName: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH[]>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}/rule/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainAccountAccountNameFilterNameRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError,{domain: string;accountName: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError,{domain: string;accountName: string;name: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterNameRuleId>>, {domain: string;accountName: string;name: string;id: number}> = (props) => {
          const {domain,accountName,name,id} = props ?? {};

          return  deleteEmailDomainDomainAccountAccountNameFilterNameRuleId(domain,accountName,name,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainAccountAccountNameFilterNameRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterNameRuleId>>>
    
    export type DeleteEmailDomainDomainAccountAccountNameFilterNameRuleIdMutationError = unknown

    /**
 * @summary Delete an existing filter
 */
export const useDeleteEmailDomainDomainAccountAccountNameFilterNameRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError,{domain: string;accountName: string;name: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainAccountAccountNameFilterNameRuleId>>,
        TError,
        {domain: string;accountName: string;name: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainAccountAccountNameFilterNameRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAccountAccountNameFilterNameRuleId = (
    domain: string,
    accountName: string,
    name: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainRuleOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/filter/${name}/rule/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameFilterNameRuleIdQueryKey = (domain: string,
    accountName: string,
    name: string,
    id: number,) => {
    return [`/email/domain/${domain}/account/${accountName}/filter/${name}/rule/${id}`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameFilterNameRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError = unknown>(domain: string,
    accountName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameFilterNameRuleIdQueryKey(domain,accountName,name,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameFilterNameRuleId(domain,accountName,name,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && name && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameFilterNameRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>>
export type GetEmailDomainDomainAccountAccountNameFilterNameRuleIdQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAccountAccountNameFilterNameRuleId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError = unknown>(
 domain: string,
    accountName: string,
    name: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameFilterNameRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameFilterNameRuleIdQueryOptions(domain,accountName,name,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get migration service
 */
export const getEmailDomainDomainAccountAccountNameMigrate = (
    domain: string,
    accountName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/account/${accountName}/migrate`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameMigrateQueryKey = (domain: string,
    accountName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateParams,) => {
    return [`/email/domain/${domain}/account/${accountName}/migrate`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameMigrateQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError = unknown>(domain: string,
    accountName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameMigrateQueryKey(domain,accountName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameMigrate(domain,accountName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameMigrateQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>>
export type GetEmailDomainDomainAccountAccountNameMigrateQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    params: undefined |  GetEmailDomainDomainAccountAccountNameMigrateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get migration service
 */

export function useGetEmailDomainDomainAccountAccountNameMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameMigrateQueryOptions(domain,accountName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName = (
    domain: string,
    accountName: string,
    destinationServiceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainMigrationServiceOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameQueryKey = (domain: string,
    accountName: string,
    destinationServiceName: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError = unknown>(domain: string,
    accountName: string,
    destinationServiceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameQueryKey(domain,accountName,destinationServiceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName(domain,accountName,destinationServiceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && destinationServiceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>>
export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceName<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameQueryOptions(domain,accountName,destinationServiceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of email address available for migration
 */
export const getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress = (
    domain: string,
    accountName: string,
    destinationServiceName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressQueryKey = (domain: string,
    accountName: string,
    destinationServiceName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams,) => {
    return [`/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError = unknown>(domain: string,
    accountName: string,
    destinationServiceName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressQueryKey(domain,accountName,destinationServiceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress(domain,accountName,destinationServiceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && destinationServiceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>>
export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    params: undefined |  GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of email address available for migration
 */

export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    params?: GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressQueryOptions(domain,accountName,destinationServiceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress = (
    domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainMigrationAccountOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress/${destinationEmailAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressQueryKey = (domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress/${destinationEmailAddress}`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError = unknown>(domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressQueryKey(domain,accountName,destinationServiceName,destinationEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress(domain,accountName,destinationServiceName,destinationEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && destinationServiceName && destinationEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>>
export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressQueryOptions(domain,accountName,destinationServiceName,destinationEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check if it's possible to migrate
 */
export const getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate = (
    domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainMigrationCheckStructOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress/${destinationEmailAddress}/checkMigrate`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateQueryKey = (domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress/${destinationEmailAddress}/checkMigrate`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError = unknown>(domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateQueryKey(domain,accountName,destinationServiceName,destinationEmailAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate(domain,accountName,destinationServiceName,destinationEmailAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName && destinationServiceName && destinationEmailAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>>
export type GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check if it's possible to migrate
 */

export function useGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError = unknown>(
 domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateQueryOptions(domain,accountName,destinationServiceName,destinationEmailAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Migrate account to destination account
 */
export const postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate = (
    domain: string,
    accountName: string,
    destinationServiceName: string,
    destinationEmailAddress: string,
    postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody: PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskPopOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/migrate/${destinationServiceName}/destinationEmailAddress/${destinationEmailAddress}/migrate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate>>, TError,{domain: string;accountName: string;destinationServiceName: string;destinationEmailAddress: string;data: PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate>>, TError,{domain: string;accountName: string;destinationServiceName: string;destinationEmailAddress: string;data: PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate>>, {domain: string;accountName: string;destinationServiceName: string;destinationEmailAddress: string;data: PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody}> = (props) => {
          const {domain,accountName,destinationServiceName,destinationEmailAddress,data} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate(domain,accountName,destinationServiceName,destinationEmailAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate>>>
    export type PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateMutationBody = PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody
    export type PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateMutationError = unknown

    /**
 * @summary Migrate account to destination account
 */
export const usePostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate>>, TError,{domain: string;accountName: string;destinationServiceName: string;destinationEmailAddress: string;data: PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrate>>,
        TError,
        {domain: string;accountName: string;destinationServiceName: string;destinationEmailAddress: string;data: PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update usage of account
 */
export const postEmailDomainDomainAccountAccountNameUpdateUsage = (
    domain: string,
    accountName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/account/${accountName}/updateUsage`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAccountAccountNameUpdateUsageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameUpdateUsage>>, TError,{domain: string;accountName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameUpdateUsage>>, TError,{domain: string;accountName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameUpdateUsage>>, {domain: string;accountName: string}> = (props) => {
          const {domain,accountName} = props ?? {};

          return  postEmailDomainDomainAccountAccountNameUpdateUsage(domain,accountName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAccountAccountNameUpdateUsageMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameUpdateUsage>>>
    
    export type PostEmailDomainDomainAccountAccountNameUpdateUsageMutationError = unknown

    /**
 * @summary Update usage of account
 */
export const usePostEmailDomainDomainAccountAccountNameUpdateUsage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameUpdateUsage>>, TError,{domain: string;accountName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAccountAccountNameUpdateUsage>>,
        TError,
        {domain: string;accountName: string},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAccountAccountNameUpdateUsageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary usage of account
 */
export const getEmailDomainDomainAccountAccountNameUsage = (
    domain: string,
    accountName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainDomainUsageAccountStructOVH>(
      {url: `/email/domain/${domain}/account/${accountName}/usage`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAccountAccountNameUsageQueryKey = (domain: string,
    accountName: string,) => {
    return [`/email/domain/${domain}/account/${accountName}/usage`] as const;
    }

    
export const getGetEmailDomainDomainAccountAccountNameUsageQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError = unknown>(domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAccountAccountNameUsageQueryKey(domain,accountName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>> = ({ signal }) => getEmailDomainDomainAccountAccountNameUsage(domain,accountName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAccountAccountNameUsageQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>>
export type GetEmailDomainDomainAccountAccountNameUsageQueryError = unknown


export function useGetEmailDomainDomainAccountAccountNameUsage<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError = unknown>(
 domain: string,
    accountName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameUsage<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAccountAccountNameUsage<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary usage of account
 */

export function useGetEmailDomainDomainAccountAccountNameUsage<TData = Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError = unknown>(
 domain: string,
    accountName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAccountAccountNameUsage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAccountAccountNameUsageQueryOptions(domain,accountName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get ACL on your domain
 */
export const getEmailDomainDomainAcl = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/acl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAclQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/acl`] as const;
    }

    
export const getGetEmailDomainDomainAclQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAclQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>> = ({ signal }) => getEmailDomainDomainAcl(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAclQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>>
export type GetEmailDomainDomainAclQueryError = unknown


export function useGetEmailDomainDomainAcl<TData = Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAcl<TData = Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAcl<TData = Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get ACL on your domain
 */

export function useGetEmailDomainDomainAcl<TData = Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAclQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new ACL
 */
export const postEmailDomainDomainAcl = (
    domain: string,
    postEmailDomainDomainAclBody: PostEmailDomainDomainAclBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainAclOVH>(
      {url: `/email/domain/${domain}/acl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainAclBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainAclMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAcl>>, TError,{domain: string;data: PostEmailDomainDomainAclBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAcl>>, TError,{domain: string;data: PostEmailDomainDomainAclBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainAcl>>, {domain: string;data: PostEmailDomainDomainAclBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainAcl(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainAclMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainAcl>>>
    export type PostEmailDomainDomainAclMutationBody = PostEmailDomainDomainAclBody
    export type PostEmailDomainDomainAclMutationError = unknown

    /**
 * @summary Create new ACL
 */
export const usePostEmailDomainDomainAcl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainAcl>>, TError,{domain: string;data: PostEmailDomainDomainAclBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainAcl>>,
        TError,
        {domain: string;data: PostEmailDomainDomainAclBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainAclMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete ACL
 */
export const deleteEmailDomainDomainAclAccountId = (
    domain: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/acl/${accountId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainAclAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAclAccountId>>, TError,{domain: string;accountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAclAccountId>>, TError,{domain: string;accountId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainAclAccountId>>, {domain: string;accountId: string}> = (props) => {
          const {domain,accountId} = props ?? {};

          return  deleteEmailDomainDomainAclAccountId(domain,accountId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainAclAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainAclAccountId>>>
    
    export type DeleteEmailDomainDomainAclAccountIdMutationError = unknown

    /**
 * @summary Delete ACL
 */
export const useDeleteEmailDomainDomainAclAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainAclAccountId>>, TError,{domain: string;accountId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainAclAccountId>>,
        TError,
        {domain: string;accountId: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainAclAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainAclAccountId = (
    domain: string,
    accountId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainAclOVH>(
      {url: `/email/domain/${domain}/acl/${accountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainAclAccountIdQueryKey = (domain: string,
    accountId: string,) => {
    return [`/email/domain/${domain}/acl/${accountId}`] as const;
    }

    
export const getGetEmailDomainDomainAclAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError = unknown>(domain: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainAclAccountIdQueryKey(domain,accountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>> = ({ signal }) => getEmailDomainDomainAclAccountId(domain,accountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && accountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainAclAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>>
export type GetEmailDomainDomainAclAccountIdQueryError = unknown


export function useGetEmailDomainDomainAclAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError = unknown>(
 domain: string,
    accountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAclAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError = unknown>(
 domain: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainAclAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError = unknown>(
 domain: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainAclAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError = unknown>(
 domain: string,
    accountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainAclAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainAclAccountIdQueryOptions(domain,accountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postEmailDomainDomainChangeContact = (
    domain: string,
    postEmailDomainDomainChangeContactBody: PostEmailDomainDomainChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainChangeContactBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainChangeContact>>, TError,{domain: string;data: PostEmailDomainDomainChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainChangeContact>>, TError,{domain: string;data: PostEmailDomainDomainChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainChangeContact>>, {domain: string;data: PostEmailDomainDomainChangeContactBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainChangeContact(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainChangeContact>>>
    export type PostEmailDomainDomainChangeContactMutationBody = PostEmailDomainDomainChangeContactBody
    export type PostEmailDomainDomainChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostEmailDomainDomainChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainChangeContact>>, TError,{domain: string;data: PostEmailDomainDomainChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainChangeContact>>,
        TError,
        {domain: string;data: PostEmailDomainDomainChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change MX filter, so change MX DNS records
 */
export const postEmailDomainDomainChangeDnsMXFilter = (
    domain: string,
    postEmailDomainDomainChangeDnsMXFilterBody: PostEmailDomainDomainChangeDnsMXFilterBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/changeDnsMXFilter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainChangeDnsMXFilterBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainChangeDnsMXFilterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainChangeDnsMXFilter>>, TError,{domain: string;data: PostEmailDomainDomainChangeDnsMXFilterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainChangeDnsMXFilter>>, TError,{domain: string;data: PostEmailDomainDomainChangeDnsMXFilterBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainChangeDnsMXFilter>>, {domain: string;data: PostEmailDomainDomainChangeDnsMXFilterBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainChangeDnsMXFilter(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainChangeDnsMXFilterMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainChangeDnsMXFilter>>>
    export type PostEmailDomainDomainChangeDnsMXFilterMutationBody = PostEmailDomainDomainChangeDnsMXFilterBody
    export type PostEmailDomainDomainChangeDnsMXFilterMutationError = unknown

    /**
 * @summary Change MX filter, so change MX DNS records
 */
export const usePostEmailDomainDomainChangeDnsMXFilter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainChangeDnsMXFilter>>, TError,{domain: string;data: PostEmailDomainDomainChangeDnsMXFilterBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainChangeDnsMXFilter>>,
        TError,
        {domain: string;data: PostEmailDomainDomainChangeDnsMXFilterBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainChangeDnsMXFilterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm termination of your email service
 */
export const postEmailDomainDomainConfirmTermination = (
    domain: string,
    postEmailDomainDomainConfirmTerminationBody: PostEmailDomainDomainConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/domain/${domain}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainConfirmTermination>>, TError,{domain: string;data: PostEmailDomainDomainConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainConfirmTermination>>, TError,{domain: string;data: PostEmailDomainDomainConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainConfirmTermination>>, {domain: string;data: PostEmailDomainDomainConfirmTerminationBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainConfirmTermination(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainConfirmTermination>>>
    export type PostEmailDomainDomainConfirmTerminationMutationBody = PostEmailDomainDomainConfirmTerminationBody
    export type PostEmailDomainDomainConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm termination of your email service
 */
export const usePostEmailDomainDomainConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainConfirmTermination>>, TError,{domain: string;data: PostEmailDomainDomainConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainConfirmTermination>>,
        TError,
        {domain: string;data: PostEmailDomainDomainConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get diagnose of domain
 */
export const getEmailDomainDomainDiagnose = (
    domain: string,
    params?: GetEmailDomainDomainDiagnoseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/diagnose`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainDiagnoseQueryKey = (domain: string,
    params?: GetEmailDomainDomainDiagnoseParams,) => {
    return [`/email/domain/${domain}/diagnose`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainDiagnoseQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainDiagnoseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainDiagnoseQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>> = ({ signal }) => getEmailDomainDomainDiagnose(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainDiagnoseQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>>
export type GetEmailDomainDomainDiagnoseQueryError = unknown


export function useGetEmailDomainDomainDiagnose<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainDiagnoseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDiagnose<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDiagnoseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDiagnose<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDiagnoseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get diagnose of domain
 */

export function useGetEmailDomainDomainDiagnose<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDiagnoseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnose>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainDiagnoseQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask diagnose
 */
export const postEmailDomainDomainDiagnose = (
    domain: string,
    postEmailDomainDomainDiagnoseBody: PostEmailDomainDomainDiagnoseBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/diagnose`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainDiagnoseBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainDiagnoseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainDiagnose>>, TError,{domain: string;data: PostEmailDomainDomainDiagnoseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainDiagnose>>, TError,{domain: string;data: PostEmailDomainDomainDiagnoseBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainDiagnose>>, {domain: string;data: PostEmailDomainDomainDiagnoseBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainDiagnose(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainDiagnoseMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainDiagnose>>>
    export type PostEmailDomainDomainDiagnoseMutationBody = PostEmailDomainDomainDiagnoseBody
    export type PostEmailDomainDomainDiagnoseMutationError = unknown

    /**
 * @summary Ask diagnose
 */
export const usePostEmailDomainDomainDiagnose = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainDiagnose>>, TError,{domain: string;data: PostEmailDomainDomainDiagnoseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainDiagnose>>,
        TError,
        {domain: string;data: PostEmailDomainDomainDiagnoseBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainDiagnoseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete Diagnose
 */
export const deleteEmailDomainDomainDiagnoseId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/diagnose/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainDiagnoseIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainDiagnoseId>>, TError,{domain: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainDiagnoseId>>, TError,{domain: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainDiagnoseId>>, {domain: string;id: number}> = (props) => {
          const {domain,id} = props ?? {};

          return  deleteEmailDomainDomainDiagnoseId(domain,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainDiagnoseIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainDiagnoseId>>>
    
    export type DeleteEmailDomainDomainDiagnoseIdMutationError = unknown

    /**
 * @summary Delete Diagnose
 */
export const useDeleteEmailDomainDomainDiagnoseId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainDiagnoseId>>, TError,{domain: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainDiagnoseId>>,
        TError,
        {domain: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainDiagnoseIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainDiagnoseId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainDiagnoseOVH>(
      {url: `/email/domain/${domain}/diagnose/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainDiagnoseIdQueryKey = (domain: string,
    id: number,) => {
    return [`/email/domain/${domain}/diagnose/${id}`] as const;
    }

    
export const getGetEmailDomainDomainDiagnoseIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError = unknown>(domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainDiagnoseIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>> = ({ signal }) => getEmailDomainDomainDiagnoseId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainDiagnoseIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>>
export type GetEmailDomainDomainDiagnoseIdQueryError = unknown


export function useGetEmailDomainDomainDiagnoseId<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError = unknown>(
 domain: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDiagnoseId<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDiagnoseId<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainDiagnoseId<TData = Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDiagnoseId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainDiagnoseIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainDkim = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainDkimSimplifiedOVH>(
      {url: `/email/domain/${domain}/dkim`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainDkimQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/dkim`] as const;
    }

    
export const getGetEmailDomainDomainDkimQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainDkimQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>> = ({ signal }) => getEmailDomainDomainDkim(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainDkimQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>>
export type GetEmailDomainDomainDkimQueryError = unknown


export function useGetEmailDomainDomainDkim<TData = Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDkim>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDkim<TData = Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDkim>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDkim<TData = Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainDkim<TData = Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDkim>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainDkimQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable DKIM
 */
export const putEmailDomainDomainDkimDisable = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskOVH>(
      {url: `/email/domain/${domain}/dkim/disable`, method: 'PUT'
    },
      options);
    }
  


export const getPutEmailDomainDomainDkimDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainDkimDisable>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainDkimDisable>>, TError,{domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDomainDkimDisable>>, {domain: string}> = (props) => {
          const {domain} = props ?? {};

          return  putEmailDomainDomainDkimDisable(domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDomainDkimDisableMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDomainDkimDisable>>>
    
    export type PutEmailDomainDomainDkimDisableMutationError = unknown

    /**
 * @summary Disable DKIM
 */
export const usePutEmailDomainDomainDkimDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainDkimDisable>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDomainDkimDisable>>,
        TError,
        {domain: string},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDomainDkimDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable DKIM
 */
export const putEmailDomainDomainDkimEnable = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskOVH>(
      {url: `/email/domain/${domain}/dkim/enable`, method: 'PUT'
    },
      options);
    }
  


export const getPutEmailDomainDomainDkimEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainDkimEnable>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainDkimEnable>>, TError,{domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDomainDkimEnable>>, {domain: string}> = (props) => {
          const {domain} = props ?? {};

          return  putEmailDomainDomainDkimEnable(domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDomainDkimEnableMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDomainDkimEnable>>>
    
    export type PutEmailDomainDomainDkimEnableMutationError = unknown

    /**
 * @summary Enable DKIM
 */
export const usePutEmailDomainDomainDkimEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainDkimEnable>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDomainDkimEnable>>,
        TError,
        {domain: string},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDomainDkimEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Domain MX filter
 */
export const getEmailDomainDomainDnsMXFilter = (
    domain: string,
    params?: GetEmailDomainDomainDnsMXFilterParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainDomainMXFilterEnumOVH>(
      {url: `/email/domain/${domain}/dnsMXFilter`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainDnsMXFilterQueryKey = (domain: string,
    params?: GetEmailDomainDomainDnsMXFilterParams,) => {
    return [`/email/domain/${domain}/dnsMXFilter`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainDnsMXFilterQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainDnsMXFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainDnsMXFilterQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>> = ({ signal }) => getEmailDomainDomainDnsMXFilter(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainDnsMXFilterQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>>
export type GetEmailDomainDomainDnsMXFilterQueryError = unknown


export function useGetEmailDomainDomainDnsMXFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainDnsMXFilterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDnsMXFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDnsMXFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDnsMXFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDnsMXFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domain MX filter
 */

export function useGetEmailDomainDomainDnsMXFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDnsMXFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainDnsMXFilterQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Domain MX records
 */
export const getEmailDomainDomainDnsMXRecords = (
    domain: string,
    params?: GetEmailDomainDomainDnsMXRecordsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/dnsMXRecords`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainDnsMXRecordsQueryKey = (domain: string,
    params?: GetEmailDomainDomainDnsMXRecordsParams,) => {
    return [`/email/domain/${domain}/dnsMXRecords`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainDnsMXRecordsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainDnsMXRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainDnsMXRecordsQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>> = ({ signal }) => getEmailDomainDomainDnsMXRecords(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainDnsMXRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>>
export type GetEmailDomainDomainDnsMXRecordsQueryError = unknown


export function useGetEmailDomainDomainDnsMXRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainDnsMXRecordsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDnsMXRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDnsMXRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainDnsMXRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDnsMXRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Domain MX records
 */

export function useGetEmailDomainDomainDnsMXRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainDnsMXRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainDnsMXRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainDnsMXRecordsQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get mailing lists
 */
export const getEmailDomainDomainMailingList = (
    domain: string,
    params?: GetEmailDomainDomainMailingListParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/mailingList`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainMailingListQueryKey = (domain: string,
    params?: GetEmailDomainDomainMailingListParams,) => {
    return [`/email/domain/${domain}/mailingList`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainMailingListQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainMailingListQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>> = ({ signal }) => getEmailDomainDomainMailingList(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainMailingListQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>>
export type GetEmailDomainDomainMailingListQueryError = unknown


export function useGetEmailDomainDomainMailingList<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainMailingListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingList<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingList<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get mailing lists
 */

export function useGetEmailDomainDomainMailingList<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainMailingListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainMailingListQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new mailingList
 */
export const postEmailDomainDomainMailingList = (
    domain: string,
    postEmailDomainDomainMailingListBody: PostEmailDomainDomainMailingListBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainMailingListBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainMailingListMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingList>>, TError,{domain: string;data: PostEmailDomainDomainMailingListBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingList>>, TError,{domain: string;data: PostEmailDomainDomainMailingListBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainMailingList>>, {domain: string;data: PostEmailDomainDomainMailingListBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainMailingList(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainMailingListMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainMailingList>>>
    export type PostEmailDomainDomainMailingListMutationBody = PostEmailDomainDomainMailingListBody
    export type PostEmailDomainDomainMailingListMutationError = unknown

    /**
 * @summary Create new mailingList
 */
export const usePostEmailDomainDomainMailingList = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingList>>, TError,{domain: string;data: PostEmailDomainDomainMailingListBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainMailingList>>,
        TError,
        {domain: string;data: PostEmailDomainDomainMailingListBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainMailingListMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing Mailing list
 */
export const deleteEmailDomainDomainMailingListName = (
    domain: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainMailingListNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListName>>, TError,{domain: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListName>>, TError,{domain: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListName>>, {domain: string;name: string}> = (props) => {
          const {domain,name} = props ?? {};

          return  deleteEmailDomainDomainMailingListName(domain,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainMailingListNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListName>>>
    
    export type DeleteEmailDomainDomainMailingListNameMutationError = unknown

    /**
 * @summary Delete existing Mailing list
 */
export const useDeleteEmailDomainDomainMailingListName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListName>>, TError,{domain: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListName>>,
        TError,
        {domain: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainMailingListNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainMailingListName = (
    domain: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainMailingListOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainMailingListNameQueryKey = (domain: string,
    name: string,) => {
    return [`/email/domain/${domain}/mailingList/${name}`] as const;
    }

    
export const getGetEmailDomainDomainMailingListNameQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError = unknown>(domain: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainMailingListNameQueryKey(domain,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>> = ({ signal }) => getEmailDomainDomainMailingListName(domain,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainMailingListNameQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>>
export type GetEmailDomainDomainMailingListNameQueryError = unknown


export function useGetEmailDomainDomainMailingListName<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError = unknown>(
 domain: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListName<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError = unknown>(
 domain: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListName<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError = unknown>(
 domain: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainMailingListName<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError = unknown>(
 domain: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainMailingListNameQueryOptions(domain,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailDomainDomainMailingListName = (
    domain: string,
    name: string,
    emailDomainMailingListOVH: NonReadonly<EmailDomainMailingListOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/mailingList/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainMailingListOVH
    },
      options);
    }
  


export const getPutEmailDomainDomainMailingListNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainMailingListName>>, TError,{domain: string;name: string;data: NonReadonly<EmailDomainMailingListOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainMailingListName>>, TError,{domain: string;name: string;data: NonReadonly<EmailDomainMailingListOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDomainMailingListName>>, {domain: string;name: string;data: NonReadonly<EmailDomainMailingListOVH>}> = (props) => {
          const {domain,name,data} = props ?? {};

          return  putEmailDomainDomainMailingListName(domain,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDomainMailingListNameMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDomainMailingListName>>>
    export type PutEmailDomainDomainMailingListNameMutationBody = NonReadonly<EmailDomainMailingListOVH>
    export type PutEmailDomainDomainMailingListNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailDomainDomainMailingListName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainMailingListName>>, TError,{domain: string;name: string;data: NonReadonly<EmailDomainMailingListOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDomainMailingListName>>,
        TError,
        {domain: string;name: string;data: NonReadonly<EmailDomainMailingListOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDomainMailingListNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change mailing list options
 */
export const postEmailDomainDomainMailingListNameChangeOptions = (
    domain: string,
    name: string,
    postEmailDomainDomainMailingListNameChangeOptionsBody: PostEmailDomainDomainMailingListNameChangeOptionsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/changeOptions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainMailingListNameChangeOptionsBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainMailingListNameChangeOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameChangeOptions>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameChangeOptionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameChangeOptions>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameChangeOptionsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameChangeOptions>>, {domain: string;name: string;data: PostEmailDomainDomainMailingListNameChangeOptionsBody}> = (props) => {
          const {domain,name,data} = props ?? {};

          return  postEmailDomainDomainMailingListNameChangeOptions(domain,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainMailingListNameChangeOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameChangeOptions>>>
    export type PostEmailDomainDomainMailingListNameChangeOptionsMutationBody = PostEmailDomainDomainMailingListNameChangeOptionsBody
    export type PostEmailDomainDomainMailingListNameChangeOptionsMutationError = unknown

    /**
 * @summary Change mailing list options
 */
export const usePostEmailDomainDomainMailingListNameChangeOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameChangeOptions>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameChangeOptionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameChangeOptions>>,
        TError,
        {domain: string;name: string;data: PostEmailDomainDomainMailingListNameChangeOptionsBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainMailingListNameChangeOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of moderators
 */
export const getEmailDomainDomainMailingListNameModerator = (
    domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameModeratorParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/mailingList/${name}/moderator`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainMailingListNameModeratorQueryKey = (domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameModeratorParams,) => {
    return [`/email/domain/${domain}/mailingList/${name}/moderator`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainMailingListNameModeratorQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError = unknown>(domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameModeratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainMailingListNameModeratorQueryKey(domain,name,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>> = ({ signal }) => getEmailDomainDomainMailingListNameModerator(domain,name,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainMailingListNameModeratorQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>>
export type GetEmailDomainDomainMailingListNameModeratorQueryError = unknown


export function useGetEmailDomainDomainMailingListNameModerator<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError = unknown>(
 domain: string,
    name: string,
    params: undefined |  GetEmailDomainDomainMailingListNameModeratorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameModerator<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError = unknown>(
 domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameModeratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameModerator<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError = unknown>(
 domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameModeratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of moderators
 */

export function useGetEmailDomainDomainMailingListNameModerator<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError = unknown>(
 domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameModeratorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModerator>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainMailingListNameModeratorQueryOptions(domain,name,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add moderator to mailing list
 */
export const postEmailDomainDomainMailingListNameModerator = (
    domain: string,
    name: string,
    postEmailDomainDomainMailingListNameModeratorBody: PostEmailDomainDomainMailingListNameModeratorBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/moderator`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainMailingListNameModeratorBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainMailingListNameModeratorMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameModerator>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameModeratorBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameModerator>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameModeratorBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameModerator>>, {domain: string;name: string;data: PostEmailDomainDomainMailingListNameModeratorBody}> = (props) => {
          const {domain,name,data} = props ?? {};

          return  postEmailDomainDomainMailingListNameModerator(domain,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainMailingListNameModeratorMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameModerator>>>
    export type PostEmailDomainDomainMailingListNameModeratorMutationBody = PostEmailDomainDomainMailingListNameModeratorBody
    export type PostEmailDomainDomainMailingListNameModeratorMutationError = unknown

    /**
 * @summary Add moderator to mailing list
 */
export const usePostEmailDomainDomainMailingListNameModerator = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameModerator>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameModeratorBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameModerator>>,
        TError,
        {domain: string;name: string;data: PostEmailDomainDomainMailingListNameModeratorBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainMailingListNameModeratorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing moderator
 */
export const deleteEmailDomainDomainMailingListNameModeratorEmail = (
    domain: string,
    name: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/moderator/${email}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainMailingListNameModeratorEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameModeratorEmail>>, TError,{domain: string;name: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameModeratorEmail>>, TError,{domain: string;name: string;email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameModeratorEmail>>, {domain: string;name: string;email: string}> = (props) => {
          const {domain,name,email} = props ?? {};

          return  deleteEmailDomainDomainMailingListNameModeratorEmail(domain,name,email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainMailingListNameModeratorEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameModeratorEmail>>>
    
    export type DeleteEmailDomainDomainMailingListNameModeratorEmailMutationError = unknown

    /**
 * @summary Delete existing moderator
 */
export const useDeleteEmailDomainDomainMailingListNameModeratorEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameModeratorEmail>>, TError,{domain: string;name: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameModeratorEmail>>,
        TError,
        {domain: string;name: string;email: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainMailingListNameModeratorEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainMailingListNameModeratorEmail = (
    domain: string,
    name: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainModeratorOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/moderator/${email}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainMailingListNameModeratorEmailQueryKey = (domain: string,
    name: string,
    email: string,) => {
    return [`/email/domain/${domain}/mailingList/${name}/moderator/${email}`] as const;
    }

    
export const getGetEmailDomainDomainMailingListNameModeratorEmailQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError = unknown>(domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainMailingListNameModeratorEmailQueryKey(domain,name,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>> = ({ signal }) => getEmailDomainDomainMailingListNameModeratorEmail(domain,name,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && name && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainMailingListNameModeratorEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>>
export type GetEmailDomainDomainMailingListNameModeratorEmailQueryError = unknown


export function useGetEmailDomainDomainMailingListNameModeratorEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameModeratorEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameModeratorEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainMailingListNameModeratorEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameModeratorEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainMailingListNameModeratorEmailQueryOptions(domain,name,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send moderators list and subscribers list of this mailing list by email
 */
export const postEmailDomainDomainMailingListNameSendListByEmail = (
    domain: string,
    name: string,
    postEmailDomainDomainMailingListNameSendListByEmailBody: PostEmailDomainDomainMailingListNameSendListByEmailBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/sendListByEmail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainMailingListNameSendListByEmailBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainMailingListNameSendListByEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSendListByEmail>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameSendListByEmailBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSendListByEmail>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameSendListByEmailBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSendListByEmail>>, {domain: string;name: string;data: PostEmailDomainDomainMailingListNameSendListByEmailBody}> = (props) => {
          const {domain,name,data} = props ?? {};

          return  postEmailDomainDomainMailingListNameSendListByEmail(domain,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainMailingListNameSendListByEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSendListByEmail>>>
    export type PostEmailDomainDomainMailingListNameSendListByEmailMutationBody = PostEmailDomainDomainMailingListNameSendListByEmailBody
    export type PostEmailDomainDomainMailingListNameSendListByEmailMutationError = unknown

    /**
 * @summary Send moderators list and subscribers list of this mailing list by email
 */
export const usePostEmailDomainDomainMailingListNameSendListByEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSendListByEmail>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameSendListByEmailBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSendListByEmail>>,
        TError,
        {domain: string;name: string;data: PostEmailDomainDomainMailingListNameSendListByEmailBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainMailingListNameSendListByEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of subscribers
 */
export const getEmailDomainDomainMailingListNameSubscriber = (
    domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameSubscriberParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/mailingList/${name}/subscriber`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainMailingListNameSubscriberQueryKey = (domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameSubscriberParams,) => {
    return [`/email/domain/${domain}/mailingList/${name}/subscriber`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainMailingListNameSubscriberQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError = unknown>(domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameSubscriberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainMailingListNameSubscriberQueryKey(domain,name,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>> = ({ signal }) => getEmailDomainDomainMailingListNameSubscriber(domain,name,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainMailingListNameSubscriberQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>>
export type GetEmailDomainDomainMailingListNameSubscriberQueryError = unknown


export function useGetEmailDomainDomainMailingListNameSubscriber<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError = unknown>(
 domain: string,
    name: string,
    params: undefined |  GetEmailDomainDomainMailingListNameSubscriberParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameSubscriber<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError = unknown>(
 domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameSubscriberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameSubscriber<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError = unknown>(
 domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameSubscriberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of subscribers
 */

export function useGetEmailDomainDomainMailingListNameSubscriber<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError = unknown>(
 domain: string,
    name: string,
    params?: GetEmailDomainDomainMailingListNameSubscriberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainMailingListNameSubscriberQueryOptions(domain,name,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add subscriber to mailing list
 */
export const postEmailDomainDomainMailingListNameSubscriber = (
    domain: string,
    name: string,
    postEmailDomainDomainMailingListNameSubscriberBody: PostEmailDomainDomainMailingListNameSubscriberBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/subscriber`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainMailingListNameSubscriberBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainMailingListNameSubscriberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSubscriber>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameSubscriberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSubscriber>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameSubscriberBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSubscriber>>, {domain: string;name: string;data: PostEmailDomainDomainMailingListNameSubscriberBody}> = (props) => {
          const {domain,name,data} = props ?? {};

          return  postEmailDomainDomainMailingListNameSubscriber(domain,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainMailingListNameSubscriberMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSubscriber>>>
    export type PostEmailDomainDomainMailingListNameSubscriberMutationBody = PostEmailDomainDomainMailingListNameSubscriberBody
    export type PostEmailDomainDomainMailingListNameSubscriberMutationError = unknown

    /**
 * @summary Add subscriber to mailing list
 */
export const usePostEmailDomainDomainMailingListNameSubscriber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSubscriber>>, TError,{domain: string;name: string;data: PostEmailDomainDomainMailingListNameSubscriberBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainMailingListNameSubscriber>>,
        TError,
        {domain: string;name: string;data: PostEmailDomainDomainMailingListNameSubscriberBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainMailingListNameSubscriberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing subscriber
 */
export const deleteEmailDomainDomainMailingListNameSubscriberEmail = (
    domain: string,
    name: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/subscriber/${email}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainMailingListNameSubscriberEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameSubscriberEmail>>, TError,{domain: string;name: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameSubscriberEmail>>, TError,{domain: string;name: string;email: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameSubscriberEmail>>, {domain: string;name: string;email: string}> = (props) => {
          const {domain,name,email} = props ?? {};

          return  deleteEmailDomainDomainMailingListNameSubscriberEmail(domain,name,email,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainMailingListNameSubscriberEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameSubscriberEmail>>>
    
    export type DeleteEmailDomainDomainMailingListNameSubscriberEmailMutationError = unknown

    /**
 * @summary Delete existing subscriber
 */
export const useDeleteEmailDomainDomainMailingListNameSubscriberEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameSubscriberEmail>>, TError,{domain: string;name: string;email: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainMailingListNameSubscriberEmail>>,
        TError,
        {domain: string;name: string;email: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainMailingListNameSubscriberEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainMailingListNameSubscriberEmail = (
    domain: string,
    name: string,
    email: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainSubscriberOVH>(
      {url: `/email/domain/${domain}/mailingList/${name}/subscriber/${email}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainMailingListNameSubscriberEmailQueryKey = (domain: string,
    name: string,
    email: string,) => {
    return [`/email/domain/${domain}/mailingList/${name}/subscriber/${email}`] as const;
    }

    
export const getGetEmailDomainDomainMailingListNameSubscriberEmailQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError = unknown>(domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainMailingListNameSubscriberEmailQueryKey(domain,name,email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>> = ({ signal }) => getEmailDomainDomainMailingListNameSubscriberEmail(domain,name,email, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && name && email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainMailingListNameSubscriberEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>>
export type GetEmailDomainDomainMailingListNameSubscriberEmailQueryError = unknown


export function useGetEmailDomainDomainMailingListNameSubscriberEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameSubscriberEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainMailingListNameSubscriberEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainMailingListNameSubscriberEmail<TData = Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError = unknown>(
 domain: string,
    name: string,
    email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainMailingListNameSubscriberEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainMailingListNameSubscriberEmailQueryOptions(domain,name,email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create delegation of domain with same nic than V3
 */
export const postEmailDomainDomainMigrateDelegationV3toV6 = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/migrateDelegationV3toV6`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailDomainDomainMigrateDelegationV3toV6MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMigrateDelegationV3toV6>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMigrateDelegationV3toV6>>, TError,{domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainMigrateDelegationV3toV6>>, {domain: string}> = (props) => {
          const {domain} = props ?? {};

          return  postEmailDomainDomainMigrateDelegationV3toV6(domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainMigrateDelegationV3toV6MutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainMigrateDelegationV3toV6>>>
    
    export type PostEmailDomainDomainMigrateDelegationV3toV6MutationError = unknown

    /**
 * @summary Create delegation of domain with same nic than V3
 */
export const usePostEmailDomainDomainMigrateDelegationV3toV6 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainMigrateDelegationV3toV6>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainMigrateDelegationV3toV6>>,
        TError,
        {domain: string},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainMigrateDelegationV3toV6MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all quotas for this domain
 */
export const getEmailDomainDomainQuota = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainDomainQuotaOVH>(
      {url: `/email/domain/${domain}/quota`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainQuotaQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/quota`] as const;
    }

    
export const getGetEmailDomainDomainQuotaQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainQuotaQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>> = ({ signal }) => getEmailDomainDomainQuota(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainQuotaQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>>
export type GetEmailDomainDomainQuotaQueryError = unknown


export function useGetEmailDomainDomainQuota<TData = Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainQuota<TData = Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainQuota<TData = Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all quotas for this domain
 */

export function useGetEmailDomainDomainQuota<TData = Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainQuotaQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Recommended domain DNS records
 */
export const getEmailDomainDomainRecommendedDNSRecords = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainZoneRecordOVH[]>(
      {url: `/email/domain/${domain}/recommendedDNSRecords`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainRecommendedDNSRecordsQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/recommendedDNSRecords`] as const;
    }

    
export const getGetEmailDomainDomainRecommendedDNSRecordsQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainRecommendedDNSRecordsQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>> = ({ signal }) => getEmailDomainDomainRecommendedDNSRecords(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainRecommendedDNSRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>>
export type GetEmailDomainDomainRecommendedDNSRecordsQueryError = unknown


export function useGetEmailDomainDomainRecommendedDNSRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainRecommendedDNSRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainRecommendedDNSRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Recommended domain DNS records
 */

export function useGetEmailDomainDomainRecommendedDNSRecords<TData = Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRecommendedDNSRecords>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainRecommendedDNSRecordsQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get redirections
 */
export const getEmailDomainDomainRedirection = (
    domain: string,
    params?: GetEmailDomainDomainRedirectionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/redirection`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainRedirectionQueryKey = (domain: string,
    params?: GetEmailDomainDomainRedirectionParams,) => {
    return [`/email/domain/${domain}/redirection`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainRedirectionQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainRedirectionQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>> = ({ signal }) => getEmailDomainDomainRedirection(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainRedirectionQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>>
export type GetEmailDomainDomainRedirectionQueryError = unknown


export function useGetEmailDomainDomainRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainRedirectionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get redirections
 */

export function useGetEmailDomainDomainRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainRedirectionQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new redirection in server
 */
export const postEmailDomainDomainRedirection = (
    domain: string,
    emailDomainRedirectionCreationOVH: EmailDomainRedirectionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/redirection`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainRedirectionCreationOVH, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainRedirectionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainRedirection>>, TError,{domain: string;data: EmailDomainRedirectionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainRedirection>>, TError,{domain: string;data: EmailDomainRedirectionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainRedirection>>, {domain: string;data: EmailDomainRedirectionCreationOVH}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainRedirection(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainRedirectionMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainRedirection>>>
    export type PostEmailDomainDomainRedirectionMutationBody = EmailDomainRedirectionCreationOVH
    export type PostEmailDomainDomainRedirectionMutationError = unknown

    /**
 * @summary Create new redirection in server
 */
export const usePostEmailDomainDomainRedirection = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainRedirection>>, TError,{domain: string;data: EmailDomainRedirectionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainRedirection>>,
        TError,
        {domain: string;data: EmailDomainRedirectionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainRedirectionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing redirection in server
 */
export const deleteEmailDomainDomainRedirectionId = (
    domain: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/redirection/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainRedirectionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainRedirectionId>>, TError,{domain: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainRedirectionId>>, TError,{domain: string;id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainRedirectionId>>, {domain: string;id: string}> = (props) => {
          const {domain,id} = props ?? {};

          return  deleteEmailDomainDomainRedirectionId(domain,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainRedirectionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainRedirectionId>>>
    
    export type DeleteEmailDomainDomainRedirectionIdMutationError = unknown

    /**
 * @summary Delete an existing redirection in server
 */
export const useDeleteEmailDomainDomainRedirectionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainRedirectionId>>, TError,{domain: string;id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainRedirectionId>>,
        TError,
        {domain: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainRedirectionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainRedirectionId = (
    domain: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainRedirectionGlobalOVH>(
      {url: `/email/domain/${domain}/redirection/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainRedirectionIdQueryKey = (domain: string,
    id: string,) => {
    return [`/email/domain/${domain}/redirection/${id}`] as const;
    }

    
export const getGetEmailDomainDomainRedirectionIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError = unknown>(domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainRedirectionIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>> = ({ signal }) => getEmailDomainDomainRedirectionId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainRedirectionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>>
export type GetEmailDomainDomainRedirectionIdQueryError = unknown


export function useGetEmailDomainDomainRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainRedirectionIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change redirection
 */
export const postEmailDomainDomainRedirectionIdChangeRedirection = (
    domain: string,
    id: string,
    emailDomainRedirectionChangeRedirectionCreationOVH: EmailDomainRedirectionChangeRedirectionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/redirection/${id}/changeRedirection`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainRedirectionChangeRedirectionCreationOVH, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainRedirectionIdChangeRedirectionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainRedirectionIdChangeRedirection>>, TError,{domain: string;id: string;data: EmailDomainRedirectionChangeRedirectionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainRedirectionIdChangeRedirection>>, TError,{domain: string;id: string;data: EmailDomainRedirectionChangeRedirectionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainRedirectionIdChangeRedirection>>, {domain: string;id: string;data: EmailDomainRedirectionChangeRedirectionCreationOVH}> = (props) => {
          const {domain,id,data} = props ?? {};

          return  postEmailDomainDomainRedirectionIdChangeRedirection(domain,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainRedirectionIdChangeRedirectionMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainRedirectionIdChangeRedirection>>>
    export type PostEmailDomainDomainRedirectionIdChangeRedirectionMutationBody = EmailDomainRedirectionChangeRedirectionCreationOVH
    export type PostEmailDomainDomainRedirectionIdChangeRedirectionMutationError = unknown

    /**
 * @summary Change redirection
 */
export const usePostEmailDomainDomainRedirectionIdChangeRedirection = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainRedirectionIdChangeRedirection>>, TError,{domain: string;id: string;data: EmailDomainRedirectionChangeRedirectionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainRedirectionIdChangeRedirection>>,
        TError,
        {domain: string;id: string;data: EmailDomainRedirectionChangeRedirectionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainRedirectionIdChangeRedirectionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get responders
 */
export const getEmailDomainDomainResponder = (
    domain: string,
    params?: GetEmailDomainDomainResponderParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/responder`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainResponderQueryKey = (domain: string,
    params?: GetEmailDomainDomainResponderParams,) => {
    return [`/email/domain/${domain}/responder`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainResponderQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainResponderQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>> = ({ signal }) => getEmailDomainDomainResponder(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainResponderQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>>
export type GetEmailDomainDomainResponderQueryError = unknown


export function useGetEmailDomainDomainResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainResponderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainResponder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainResponder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get responders
 */

export function useGetEmailDomainDomainResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainResponderQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new responder in server
 */
export const postEmailDomainDomainResponder = (
    domain: string,
    postEmailDomainDomainResponderBody: PostEmailDomainDomainResponderBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/responder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postEmailDomainDomainResponderBody, signal
    },
      options);
    }
  


export const getPostEmailDomainDomainResponderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainResponder>>, TError,{domain: string;data: PostEmailDomainDomainResponderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainResponder>>, TError,{domain: string;data: PostEmailDomainDomainResponderBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainResponder>>, {domain: string;data: PostEmailDomainDomainResponderBody}> = (props) => {
          const {domain,data} = props ?? {};

          return  postEmailDomainDomainResponder(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainResponderMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainResponder>>>
    export type PostEmailDomainDomainResponderMutationBody = PostEmailDomainDomainResponderBody
    export type PostEmailDomainDomainResponderMutationError = unknown

    /**
 * @summary Create new responder in server
 */
export const usePostEmailDomainDomainResponder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainResponder>>, TError,{domain: string;data: PostEmailDomainDomainResponderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainResponder>>,
        TError,
        {domain: string;data: PostEmailDomainDomainResponderBody},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainResponderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an existing responder in server
 */
export const deleteEmailDomainDomainResponderAccount = (
    domain: string,
    account: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/responder/${account}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteEmailDomainDomainResponderAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainResponderAccount>>, TError,{domain: string;account: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainResponderAccount>>, TError,{domain: string;account: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmailDomainDomainResponderAccount>>, {domain: string;account: string}> = (props) => {
          const {domain,account} = props ?? {};

          return  deleteEmailDomainDomainResponderAccount(domain,account,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmailDomainDomainResponderAccountMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmailDomainDomainResponderAccount>>>
    
    export type DeleteEmailDomainDomainResponderAccountMutationError = unknown

    /**
 * @summary Delete an existing responder in server
 */
export const useDeleteEmailDomainDomainResponderAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmailDomainDomainResponderAccount>>, TError,{domain: string;account: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmailDomainDomainResponderAccount>>,
        TError,
        {domain: string;account: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmailDomainDomainResponderAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainResponderAccount = (
    domain: string,
    account: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainResponderOVH>(
      {url: `/email/domain/${domain}/responder/${account}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainResponderAccountQueryKey = (domain: string,
    account: string,) => {
    return [`/email/domain/${domain}/responder/${account}`] as const;
    }

    
export const getGetEmailDomainDomainResponderAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError = unknown>(domain: string,
    account: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainResponderAccountQueryKey(domain,account);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>> = ({ signal }) => getEmailDomainDomainResponderAccount(domain,account, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && account), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainResponderAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>>
export type GetEmailDomainDomainResponderAccountQueryError = unknown


export function useGetEmailDomainDomainResponderAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError = unknown>(
 domain: string,
    account: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainResponderAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError = unknown>(
 domain: string,
    account: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainResponderAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError = unknown>(
 domain: string,
    account: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainResponderAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError = unknown>(
 domain: string,
    account: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainResponderAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainResponderAccountQueryOptions(domain,account,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putEmailDomainDomainResponderAccount = (
    domain: string,
    account: string,
    emailDomainResponderOVH: NonReadonly<EmailDomainResponderOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/responder/${account}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: emailDomainResponderOVH
    },
      options);
    }
  


export const getPutEmailDomainDomainResponderAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainResponderAccount>>, TError,{domain: string;account: string;data: NonReadonly<EmailDomainResponderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainResponderAccount>>, TError,{domain: string;account: string;data: NonReadonly<EmailDomainResponderOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDomainResponderAccount>>, {domain: string;account: string;data: NonReadonly<EmailDomainResponderOVH>}> = (props) => {
          const {domain,account,data} = props ?? {};

          return  putEmailDomainDomainResponderAccount(domain,account,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDomainResponderAccountMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDomainResponderAccount>>>
    export type PutEmailDomainDomainResponderAccountMutationBody = NonReadonly<EmailDomainResponderOVH>
    export type PutEmailDomainDomainResponderAccountMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutEmailDomainDomainResponderAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainResponderAccount>>, TError,{domain: string;account: string;data: NonReadonly<EmailDomainResponderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDomainResponderAccount>>,
        TError,
        {domain: string;account: string;data: NonReadonly<EmailDomainResponderOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDomainResponderAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getEmailDomainDomainServiceInfos = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/email/domain/${domain}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainServiceInfosQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/serviceInfos`] as const;
    }

    
export const getGetEmailDomainDomainServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainServiceInfosQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>> = ({ signal }) => getEmailDomainDomainServiceInfos(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>>
export type GetEmailDomainDomainServiceInfosQueryError = unknown


export function useGetEmailDomainDomainServiceInfos<TData = Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainServiceInfos<TData = Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainServiceInfos<TData = Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetEmailDomainDomainServiceInfos<TData = Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainServiceInfosQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putEmailDomainDomainServiceInfos = (
    domain: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/email/domain/${domain}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutEmailDomainDomainServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainServiceInfos>>, TError,{domain: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainServiceInfos>>, TError,{domain: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmailDomainDomainServiceInfos>>, {domain: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {domain,data} = props ?? {};

          return  putEmailDomainDomainServiceInfos(domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmailDomainDomainServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putEmailDomainDomainServiceInfos>>>
    export type PutEmailDomainDomainServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutEmailDomainDomainServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutEmailDomainDomainServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmailDomainDomainServiceInfos>>, TError,{domain: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putEmailDomainDomainServiceInfos>>,
        TError,
        {domain: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutEmailDomainDomainServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Summary for this domain
 */
export const getEmailDomainDomainSummary = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainDomainSummaryOVH>(
      {url: `/email/domain/${domain}/summary`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainSummaryQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/summary`] as const;
    }

    
export const getGetEmailDomainDomainSummaryQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainSummaryQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>> = ({ signal }) => getEmailDomainDomainSummary(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>>
export type GetEmailDomainDomainSummaryQueryError = unknown


export function useGetEmailDomainDomainSummary<TData = Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainSummary>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainSummary<TData = Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainSummary>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainSummary<TData = Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Summary for this domain
 */

export function useGetEmailDomainDomainSummary<TData = Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainSummary>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainSummaryQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get account tasks
 */
export const getEmailDomainDomainTaskAccount = (
    domain: string,
    params?: GetEmailDomainDomainTaskAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/task/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskAccountQueryKey = (domain: string,
    params?: GetEmailDomainDomainTaskAccountParams,) => {
    return [`/email/domain/${domain}/task/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainTaskAccountQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainTaskAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskAccountQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>> = ({ signal }) => getEmailDomainDomainTaskAccount(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>>
export type GetEmailDomainDomainTaskAccountQueryError = unknown


export function useGetEmailDomainDomainTaskAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainTaskAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get account tasks
 */

export function useGetEmailDomainDomainTaskAccount<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskAccountQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainTaskAccountId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskPopOVH>(
      {url: `/email/domain/${domain}/task/account/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskAccountIdQueryKey = (domain: string,
    id: number,) => {
    return [`/email/domain/${domain}/task/account/${id}`] as const;
    }

    
export const getGetEmailDomainDomainTaskAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError = unknown>(domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskAccountIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>> = ({ signal }) => getEmailDomainDomainTaskAccountId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>>
export type GetEmailDomainDomainTaskAccountIdQueryError = unknown


export function useGetEmailDomainDomainTaskAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError = unknown>(
 domain: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainTaskAccountId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskAccountIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get tasks
 */
export const getEmailDomainDomainTaskAll = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/task/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskAllQueryKey = (domain: string,) => {
    return [`/email/domain/${domain}/task/all`] as const;
    }

    
export const getGetEmailDomainDomainTaskAllQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskAllQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>> = ({ signal }) => getEmailDomainDomainTaskAll(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskAllQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>>
export type GetEmailDomainDomainTaskAllQueryError = unknown


export function useGetEmailDomainDomainTaskAll<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAll<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAll<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get tasks
 */

export function useGetEmailDomainDomainTaskAll<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAll>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskAllQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainTaskAllId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskOVH>(
      {url: `/email/domain/${domain}/task/all/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskAllIdQueryKey = (domain: string,
    id: number,) => {
    return [`/email/domain/${domain}/task/all/${id}`] as const;
    }

    
export const getGetEmailDomainDomainTaskAllIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError = unknown>(domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskAllIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>> = ({ signal }) => getEmailDomainDomainTaskAllId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskAllIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>>
export type GetEmailDomainDomainTaskAllIdQueryError = unknown


export function useGetEmailDomainDomainTaskAllId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError = unknown>(
 domain: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAllId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskAllId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainTaskAllId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskAllId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskAllIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get filter tasks
 */
export const getEmailDomainDomainTaskFilter = (
    domain: string,
    params?: GetEmailDomainDomainTaskFilterParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/task/filter`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskFilterQueryKey = (domain: string,
    params?: GetEmailDomainDomainTaskFilterParams,) => {
    return [`/email/domain/${domain}/task/filter`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainTaskFilterQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainTaskFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskFilterQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>> = ({ signal }) => getEmailDomainDomainTaskFilter(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskFilterQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>>
export type GetEmailDomainDomainTaskFilterQueryError = unknown


export function useGetEmailDomainDomainTaskFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainTaskFilterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get filter tasks
 */

export function useGetEmailDomainDomainTaskFilter<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskFilterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskFilterQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainTaskFilterId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskFilterOVH>(
      {url: `/email/domain/${domain}/task/filter/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskFilterIdQueryKey = (domain: string,
    id: number,) => {
    return [`/email/domain/${domain}/task/filter/${id}`] as const;
    }

    
export const getGetEmailDomainDomainTaskFilterIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError = unknown>(domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskFilterIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>> = ({ signal }) => getEmailDomainDomainTaskFilterId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskFilterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>>
export type GetEmailDomainDomainTaskFilterIdQueryError = unknown


export function useGetEmailDomainDomainTaskFilterId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError = unknown>(
 domain: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskFilterId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskFilterId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainTaskFilterId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskFilterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskFilterIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Mailing List tasks
 */
export const getEmailDomainDomainTaskMailinglist = (
    domain: string,
    params?: GetEmailDomainDomainTaskMailinglistParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/task/mailinglist`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskMailinglistQueryKey = (domain: string,
    params?: GetEmailDomainDomainTaskMailinglistParams,) => {
    return [`/email/domain/${domain}/task/mailinglist`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainTaskMailinglistQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainTaskMailinglistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskMailinglistQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>> = ({ signal }) => getEmailDomainDomainTaskMailinglist(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskMailinglistQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>>
export type GetEmailDomainDomainTaskMailinglistQueryError = unknown


export function useGetEmailDomainDomainTaskMailinglist<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainTaskMailinglistParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskMailinglist<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskMailinglistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskMailinglist<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskMailinglistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Mailing List tasks
 */

export function useGetEmailDomainDomainTaskMailinglist<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskMailinglistParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglist>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskMailinglistQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainTaskMailinglistId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskMlOVH>(
      {url: `/email/domain/${domain}/task/mailinglist/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskMailinglistIdQueryKey = (domain: string,
    id: number,) => {
    return [`/email/domain/${domain}/task/mailinglist/${id}`] as const;
    }

    
export const getGetEmailDomainDomainTaskMailinglistIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError = unknown>(domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskMailinglistIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>> = ({ signal }) => getEmailDomainDomainTaskMailinglistId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskMailinglistIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>>
export type GetEmailDomainDomainTaskMailinglistIdQueryError = unknown


export function useGetEmailDomainDomainTaskMailinglistId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError = unknown>(
 domain: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskMailinglistId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskMailinglistId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainTaskMailinglistId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskMailinglistId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskMailinglistIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get redirection tasks
 */
export const getEmailDomainDomainTaskRedirection = (
    domain: string,
    params?: GetEmailDomainDomainTaskRedirectionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/email/domain/${domain}/task/redirection`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskRedirectionQueryKey = (domain: string,
    params?: GetEmailDomainDomainTaskRedirectionParams,) => {
    return [`/email/domain/${domain}/task/redirection`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainTaskRedirectionQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainTaskRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskRedirectionQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>> = ({ signal }) => getEmailDomainDomainTaskRedirection(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskRedirectionQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>>
export type GetEmailDomainDomainTaskRedirectionQueryError = unknown


export function useGetEmailDomainDomainTaskRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainTaskRedirectionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get redirection tasks
 */

export function useGetEmailDomainDomainTaskRedirection<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskRedirectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirection>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskRedirectionQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainTaskRedirectionId = (
    domain: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/task/redirection/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskRedirectionIdQueryKey = (domain: string,
    id: string,) => {
    return [`/email/domain/${domain}/task/redirection/${id}`] as const;
    }

    
export const getGetEmailDomainDomainTaskRedirectionIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError = unknown>(domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskRedirectionIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>> = ({ signal }) => getEmailDomainDomainTaskRedirectionId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskRedirectionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>>
export type GetEmailDomainDomainTaskRedirectionIdQueryError = unknown


export function useGetEmailDomainDomainTaskRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainTaskRedirectionId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError = unknown>(
 domain: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskRedirectionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskRedirectionIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get responder tasks
 */
export const getEmailDomainDomainTaskResponder = (
    domain: string,
    params?: GetEmailDomainDomainTaskResponderParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/email/domain/${domain}/task/responder`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskResponderQueryKey = (domain: string,
    params?: GetEmailDomainDomainTaskResponderParams,) => {
    return [`/email/domain/${domain}/task/responder`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmailDomainDomainTaskResponderQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError = unknown>(domain: string,
    params?: GetEmailDomainDomainTaskResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskResponderQueryKey(domain,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>> = ({ signal }) => getEmailDomainDomainTaskResponder(domain,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskResponderQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>>
export type GetEmailDomainDomainTaskResponderQueryError = unknown


export function useGetEmailDomainDomainTaskResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError = unknown>(
 domain: string,
    params: undefined |  GetEmailDomainDomainTaskResponderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get responder tasks
 */

export function useGetEmailDomainDomainTaskResponder<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError = unknown>(
 domain: string,
    params?: GetEmailDomainDomainTaskResponderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskResponderQueryOptions(domain,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getEmailDomainDomainTaskResponderId = (
    domain: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<EmailDomainTaskSpecialAccountOVH>(
      {url: `/email/domain/${domain}/task/responder/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEmailDomainDomainTaskResponderIdQueryKey = (domain: string,
    id: number,) => {
    return [`/email/domain/${domain}/task/responder/${id}`] as const;
    }

    
export const getGetEmailDomainDomainTaskResponderIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError = unknown>(domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmailDomainDomainTaskResponderIdQueryKey(domain,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>> = ({ signal }) => getEmailDomainDomainTaskResponderId(domain,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEmailDomainDomainTaskResponderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>>
export type GetEmailDomainDomainTaskResponderIdQueryError = unknown


export function useGetEmailDomainDomainTaskResponderId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError = unknown>(
 domain: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskResponderId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEmailDomainDomainTaskResponderId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetEmailDomainDomainTaskResponderId<TData = Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError = unknown>(
 domain: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmailDomainDomainTaskResponderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEmailDomainDomainTaskResponderIdQueryOptions(domain,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Terminate your email service
 */
export const postEmailDomainDomainTerminate = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/email/domain/${domain}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostEmailDomainDomainTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainTerminate>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainTerminate>>, TError,{domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmailDomainDomainTerminate>>, {domain: string}> = (props) => {
          const {domain} = props ?? {};

          return  postEmailDomainDomainTerminate(domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmailDomainDomainTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postEmailDomainDomainTerminate>>>
    
    export type PostEmailDomainDomainTerminateMutationError = unknown

    /**
 * @summary Terminate your email service
 */
export const usePostEmailDomainDomainTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmailDomainDomainTerminate>>, TError,{domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postEmailDomainDomainTerminate>>,
        TError,
        {domain: string},
        TContext
      > => {

      const mutationOptions = getPostEmailDomainDomainTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetVrackParams,
  GetVrackServiceNameAllowedServicesParams,
  IpBlockOVH,
  Ipv6BlockOVH,
  PostVrackServiceNameChangeContactBody,
  PostVrackServiceNameCloudProjectBody,
  PostVrackServiceNameConfirmTerminationBody,
  PostVrackServiceNameDedicatedCloudBody,
  PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody,
  PostVrackServiceNameDedicatedConnectBody,
  PostVrackServiceNameDedicatedServerBody,
  PostVrackServiceNameDedicatedServerInterfaceBody,
  PostVrackServiceNameIpBody,
  PostVrackServiceNameIpIpAnnounceInZoneBody,
  PostVrackServiceNameIpLoadbalancingBody,
  PostVrackServiceNameIpv6Body,
  PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody,
  PostVrackServiceNameLegacyVrackBody,
  PostVrackServiceNameOvhCloudConnectBody,
  PostVrackServiceNameVrackServicesBody,
  ServicesNonExpiringServiceOVH,
  VrackAllowedDedicatedServerInterfacesOVH,
  VrackAllowedServicesOVH,
  VrackBridgedSubrangeOVH,
  VrackCloudProjectOVH,
  VrackDedicatedCloudOVH,
  VrackDedicatedConnectOVH,
  VrackDedicatedServerInterfaceOVH,
  VrackDedicatedServerOVH,
  VrackEligibleServicesResponseOVH,
  VrackIpOVH,
  VrackIplbOVH,
  VrackIpv6OVH,
  VrackLegacyVrackOVH,
  VrackOvhCloudConnectOVH,
  VrackPccDatacenterOVH,
  VrackPublicRoutingOptionOVH,
  VrackRoutedSubrangeOVH,
  VrackTaskOVH,
  VrackVrackOVH,
  VrackVrackServicesOVH,
  VrackVrackWithIAMOVH,
  VrackVrackZoneEnumOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getVrack = (
    params?: GetVrackParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVrackQueryKey = (params?: GetVrackParams,) => {
    return [`/vrack`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVrackQueryOptions = <TData = Awaited<ReturnType<typeof getVrack>>, TError = unknown>(params?: GetVrackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrack>>> = ({ signal }) => getVrack(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getVrack>>>
export type GetVrackQueryError = unknown


export function useGetVrack<TData = Awaited<ReturnType<typeof getVrack>>, TError = unknown>(
 params: undefined |  GetVrackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrack<TData = Awaited<ReturnType<typeof getVrack>>, TError = unknown>(
 params?: GetVrackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrack<TData = Awaited<ReturnType<typeof getVrack>>, TError = unknown>(
 params?: GetVrackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetVrack<TData = Awaited<ReturnType<typeof getVrack>>, TError = unknown>(
 params?: GetVrackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVrackServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackVrackWithIAMOVH>(
      {url: `/vrack/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}`] as const;
    }

    
export const getGetVrackServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceName>>> = ({ signal }) => getVrackServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceName>>>
export type GetVrackServiceNameQueryError = unknown


export function useGetVrackServiceName<TData = Awaited<ReturnType<typeof getVrackServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceName<TData = Awaited<ReturnType<typeof getVrackServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceName<TData = Awaited<ReturnType<typeof getVrackServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceName<TData = Awaited<ReturnType<typeof getVrackServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVrackServiceName = (
    serviceName: string,
    vrackVrackOVH: VrackVrackOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vrack/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vrackVrackOVH
    },
      options);
    }
  


export const getPutVrackServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceName>>, TError,{serviceName: string;data: VrackVrackOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceName>>, TError,{serviceName: string;data: VrackVrackOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVrackServiceName>>, {serviceName: string;data: VrackVrackOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putVrackServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVrackServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putVrackServiceName>>>
    export type PutVrackServiceNameMutationBody = VrackVrackOVH
    export type PutVrackServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVrackServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceName>>, TError,{serviceName: string;data: VrackVrackOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVrackServiceName>>,
        TError,
        {serviceName: string;data: VrackVrackOVH},
        TContext
      > => {

      const mutationOptions = getPutVrackServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all services allowed in this vrack
 */
export const getVrackServiceNameAllowedServices = (
    serviceName: string,
    params?: GetVrackServiceNameAllowedServicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackAllowedServicesOVH>(
      {url: `/vrack/${serviceName}/allowedServices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVrackServiceNameAllowedServicesQueryKey = (serviceName: string,
    params?: GetVrackServiceNameAllowedServicesParams,) => {
    return [`/vrack/${serviceName}/allowedServices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVrackServiceNameAllowedServicesQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError = unknown>(serviceName: string,
    params?: GetVrackServiceNameAllowedServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameAllowedServicesQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>> = ({ signal }) => getVrackServiceNameAllowedServices(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameAllowedServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>>
export type GetVrackServiceNameAllowedServicesQueryError = unknown


export function useGetVrackServiceNameAllowedServices<TData = Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetVrackServiceNameAllowedServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameAllowedServices<TData = Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError = unknown>(
 serviceName: string,
    params?: GetVrackServiceNameAllowedServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameAllowedServices<TData = Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError = unknown>(
 serviceName: string,
    params?: GetVrackServiceNameAllowedServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all services allowed in this vrack
 */

export function useGetVrackServiceNameAllowedServices<TData = Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError = unknown>(
 serviceName: string,
    params?: GetVrackServiceNameAllowedServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameAllowedServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameAllowedServicesQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Launch a contact change procedure
 */
export const postVrackServiceNameChangeContact = (
    serviceName: string,
    postVrackServiceNameChangeContactBody: PostVrackServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vrack/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameChangeContact>>, TError,{serviceName: string;data: PostVrackServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameChangeContact>>, TError,{serviceName: string;data: PostVrackServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameChangeContact>>, {serviceName: string;data: PostVrackServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameChangeContact>>>
    export type PostVrackServiceNameChangeContactMutationBody = PostVrackServiceNameChangeContactBody
    export type PostVrackServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostVrackServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameChangeContact>>, TError,{serviceName: string;data: PostVrackServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary vrack for publicCloud project
 */
export const getVrackServiceNameCloudProject = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/cloudProject`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameCloudProjectQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/cloudProject`] as const;
    }

    
export const getGetVrackServiceNameCloudProjectQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameCloudProjectQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>> = ({ signal }) => getVrackServiceNameCloudProject(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameCloudProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>>
export type GetVrackServiceNameCloudProjectQueryError = unknown


export function useGetVrackServiceNameCloudProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameCloudProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameCloudProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for publicCloud project
 */

export function useGetVrackServiceNameCloudProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameCloudProjectQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a publicCloud project to this vrack
 */
export const postVrackServiceNameCloudProject = (
    serviceName: string,
    postVrackServiceNameCloudProjectBody: PostVrackServiceNameCloudProjectBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/cloudProject`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameCloudProjectBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameCloudProjectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameCloudProject>>, TError,{serviceName: string;data: PostVrackServiceNameCloudProjectBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameCloudProject>>, TError,{serviceName: string;data: PostVrackServiceNameCloudProjectBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameCloudProject>>, {serviceName: string;data: PostVrackServiceNameCloudProjectBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameCloudProject(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameCloudProjectMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameCloudProject>>>
    export type PostVrackServiceNameCloudProjectMutationBody = PostVrackServiceNameCloudProjectBody
    export type PostVrackServiceNameCloudProjectMutationError = unknown

    /**
 * @summary add a publicCloud project to this vrack
 */
export const usePostVrackServiceNameCloudProject = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameCloudProject>>, TError,{serviceName: string;data: PostVrackServiceNameCloudProjectBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameCloudProject>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameCloudProjectBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameCloudProjectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this publicCloud project from this vrack
 */
export const deleteVrackServiceNameCloudProjectProject = (
    serviceName: string,
    project: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/cloudProject/${project}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameCloudProjectProjectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameCloudProjectProject>>, TError,{serviceName: string;project: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameCloudProjectProject>>, TError,{serviceName: string;project: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameCloudProjectProject>>, {serviceName: string;project: string}> = (props) => {
          const {serviceName,project} = props ?? {};

          return  deleteVrackServiceNameCloudProjectProject(serviceName,project,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameCloudProjectProjectMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameCloudProjectProject>>>
    
    export type DeleteVrackServiceNameCloudProjectProjectMutationError = unknown

    /**
 * @summary remove this publicCloud project from this vrack
 */
export const useDeleteVrackServiceNameCloudProjectProject = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameCloudProjectProject>>, TError,{serviceName: string;project: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameCloudProjectProject>>,
        TError,
        {serviceName: string;project: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameCloudProjectProjectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameCloudProjectProject = (
    serviceName: string,
    project: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackCloudProjectOVH>(
      {url: `/vrack/${serviceName}/cloudProject/${project}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameCloudProjectProjectQueryKey = (serviceName: string,
    project: string,) => {
    return [`/vrack/${serviceName}/cloudProject/${project}`] as const;
    }

    
export const getGetVrackServiceNameCloudProjectProjectQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError = unknown>(serviceName: string,
    project: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameCloudProjectProjectQueryKey(serviceName,project);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>> = ({ signal }) => getVrackServiceNameCloudProjectProject(serviceName,project, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && project), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameCloudProjectProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>>
export type GetVrackServiceNameCloudProjectProjectQueryError = unknown


export function useGetVrackServiceNameCloudProjectProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError = unknown>(
 serviceName: string,
    project: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameCloudProjectProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError = unknown>(
 serviceName: string,
    project: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameCloudProjectProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError = unknown>(
 serviceName: string,
    project: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameCloudProjectProject<TData = Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError = unknown>(
 serviceName: string,
    project: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameCloudProjectProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameCloudProjectProjectQueryOptions(serviceName,project,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postVrackServiceNameConfirmTermination = (
    serviceName: string,
    postVrackServiceNameConfirmTerminationBody: PostVrackServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/vrack/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostVrackServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostVrackServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameConfirmTermination>>, {serviceName: string;data: PostVrackServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameConfirmTermination>>>
    export type PostVrackServiceNameConfirmTerminationMutationBody = PostVrackServiceNameConfirmTerminationBody
    export type PostVrackServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostVrackServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostVrackServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary vrack dedicated cloud (VmNetwork)
 */
export const getVrackServiceNameDedicatedCloud = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/dedicatedCloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedCloudQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/dedicatedCloud`] as const;
    }

    
export const getGetVrackServiceNameDedicatedCloudQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedCloudQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>> = ({ signal }) => getVrackServiceNameDedicatedCloud(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>>
export type GetVrackServiceNameDedicatedCloudQueryError = unknown


export function useGetVrackServiceNameDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack dedicated cloud (VmNetwork)
 */

export function useGetVrackServiceNameDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedCloudQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add VMware on OVHcloud to vRack
 */
export const postVrackServiceNameDedicatedCloud = (
    serviceName: string,
    postVrackServiceNameDedicatedCloudBody: PostVrackServiceNameDedicatedCloudBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedCloud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameDedicatedCloudBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameDedicatedCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloud>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedCloudBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloud>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedCloudBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloud>>, {serviceName: string;data: PostVrackServiceNameDedicatedCloudBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameDedicatedCloud(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameDedicatedCloudMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloud>>>
    export type PostVrackServiceNameDedicatedCloudMutationBody = PostVrackServiceNameDedicatedCloudBody
    export type PostVrackServiceNameDedicatedCloudMutationError = unknown

    /**
 * @summary Add VMware on OVHcloud to vRack
 */
export const usePostVrackServiceNameDedicatedCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloud>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedCloudBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloud>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameDedicatedCloudBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameDedicatedCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove VMware on OVHcloud from vRack
 */
export const deleteVrackServiceNameDedicatedCloudDedicatedCloud = (
    serviceName: string,
    dedicatedCloud: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedCloud/${dedicatedCloud}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameDedicatedCloudDedicatedCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedCloudDedicatedCloud>>, TError,{serviceName: string;dedicatedCloud: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedCloudDedicatedCloud>>, TError,{serviceName: string;dedicatedCloud: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedCloudDedicatedCloud>>, {serviceName: string;dedicatedCloud: string}> = (props) => {
          const {serviceName,dedicatedCloud} = props ?? {};

          return  deleteVrackServiceNameDedicatedCloudDedicatedCloud(serviceName,dedicatedCloud,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameDedicatedCloudDedicatedCloudMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedCloudDedicatedCloud>>>
    
    export type DeleteVrackServiceNameDedicatedCloudDedicatedCloudMutationError = unknown

    /**
 * @summary Remove VMware on OVHcloud from vRack
 */
export const useDeleteVrackServiceNameDedicatedCloudDedicatedCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedCloudDedicatedCloud>>, TError,{serviceName: string;dedicatedCloud: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedCloudDedicatedCloud>>,
        TError,
        {serviceName: string;dedicatedCloud: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameDedicatedCloudDedicatedCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get vRack
 */
export const getVrackServiceNameDedicatedCloudDedicatedCloud = (
    serviceName: string,
    dedicatedCloud: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackDedicatedCloudOVH>(
      {url: `/vrack/${serviceName}/dedicatedCloud/${dedicatedCloud}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedCloudDedicatedCloudQueryKey = (serviceName: string,
    dedicatedCloud: string,) => {
    return [`/vrack/${serviceName}/dedicatedCloud/${dedicatedCloud}`] as const;
    }

    
export const getGetVrackServiceNameDedicatedCloudDedicatedCloudQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError = unknown>(serviceName: string,
    dedicatedCloud: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedCloudDedicatedCloudQueryKey(serviceName,dedicatedCloud);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>> = ({ signal }) => getVrackServiceNameDedicatedCloudDedicatedCloud(serviceName,dedicatedCloud, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && dedicatedCloud), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedCloudDedicatedCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>>
export type GetVrackServiceNameDedicatedCloudDedicatedCloudQueryError = unknown


export function useGetVrackServiceNameDedicatedCloudDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError = unknown>(
 serviceName: string,
    dedicatedCloud: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError = unknown>(
 serviceName: string,
    dedicatedCloud: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError = unknown>(
 serviceName: string,
    dedicatedCloud: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get vRack
 */

export function useGetVrackServiceNameDedicatedCloudDedicatedCloud<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError = unknown>(
 serviceName: string,
    dedicatedCloud: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedCloudDedicatedCloudQueryOptions(serviceName,dedicatedCloud,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack dedicated cloud datacenter
 */
export const getVrackServiceNameDedicatedCloudDatacenter = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/dedicatedCloudDatacenter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedCloudDatacenterQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/dedicatedCloudDatacenter`] as const;
    }

    
export const getGetVrackServiceNameDedicatedCloudDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedCloudDatacenterQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>> = ({ signal }) => getVrackServiceNameDedicatedCloudDatacenter(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedCloudDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>>
export type GetVrackServiceNameDedicatedCloudDatacenterQueryError = unknown


export function useGetVrackServiceNameDedicatedCloudDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack dedicated cloud datacenter
 */

export function useGetVrackServiceNameDedicatedCloudDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedCloudDatacenterQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVrackServiceNameDedicatedCloudDatacenterDatacenter = (
    serviceName: string,
    datacenter: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackPccDatacenterOVH>(
      {url: `/vrack/${serviceName}/dedicatedCloudDatacenter/${datacenter}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedCloudDatacenterDatacenterQueryKey = (serviceName: string,
    datacenter: string,) => {
    return [`/vrack/${serviceName}/dedicatedCloudDatacenter/${datacenter}`] as const;
    }

    
export const getGetVrackServiceNameDedicatedCloudDatacenterDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError = unknown>(serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedCloudDatacenterDatacenterQueryKey(serviceName,datacenter);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>> = ({ signal }) => getVrackServiceNameDedicatedCloudDatacenterDatacenter(serviceName,datacenter, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedCloudDatacenterDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>>
export type GetVrackServiceNameDedicatedCloudDatacenterDatacenterQueryError = unknown


export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenter<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedCloudDatacenterDatacenterQueryOptions(serviceName,datacenter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Vracks allowed for your dedicatedCloud datacenter
 */
export const getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack = (
    serviceName: string,
    datacenter: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/dedicatedCloudDatacenter/${datacenter}/allowedVrack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackQueryKey = (serviceName: string,
    datacenter: string,) => {
    return [`/vrack/${serviceName}/dedicatedCloudDatacenter/${datacenter}/allowedVrack`] as const;
    }

    
export const getGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError = unknown>(serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackQueryKey(serviceName,datacenter);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>> = ({ signal }) => getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack(serviceName,datacenter, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && datacenter), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>>
export type GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackQueryError = unknown


export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Vracks allowed for your dedicatedCloud datacenter
 */

export function useGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError = unknown>(
 serviceName: string,
    datacenter: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackQueryOptions(serviceName,datacenter,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move your dedicatedCloud datacenter from a Vrack to another
 */
export const postVrackServiceNameDedicatedCloudDatacenterDatacenterMove = (
    serviceName: string,
    datacenter: string,
    postVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody: PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedCloudDatacenter/${datacenter}/move`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloudDatacenterDatacenterMove>>, TError,{serviceName: string;datacenter: string;data: PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloudDatacenterDatacenterMove>>, TError,{serviceName: string;datacenter: string;data: PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloudDatacenterDatacenterMove>>, {serviceName: string;datacenter: string;data: PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody}> = (props) => {
          const {serviceName,datacenter,data} = props ?? {};

          return  postVrackServiceNameDedicatedCloudDatacenterDatacenterMove(serviceName,datacenter,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloudDatacenterDatacenterMove>>>
    export type PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveMutationBody = PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody
    export type PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveMutationError = unknown

    /**
 * @summary Move your dedicatedCloud datacenter from a Vrack to another
 */
export const usePostVrackServiceNameDedicatedCloudDatacenterDatacenterMove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloudDatacenterDatacenterMove>>, TError,{serviceName: string;datacenter: string;data: PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameDedicatedCloudDatacenterDatacenterMove>>,
        TError,
        {serviceName: string;datacenter: string;data: PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary vrack dedicated connect
 */
export const getVrackServiceNameDedicatedConnect = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/dedicatedConnect`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedConnectQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/dedicatedConnect`] as const;
    }

    
export const getGetVrackServiceNameDedicatedConnectQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedConnectQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>> = ({ signal }) => getVrackServiceNameDedicatedConnect(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>>
export type GetVrackServiceNameDedicatedConnectQueryError = unknown


export function useGetVrackServiceNameDedicatedConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack dedicated connect
 */

export function useGetVrackServiceNameDedicatedConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedConnectQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a dedicatedConnect link to this vrack
 */
export const postVrackServiceNameDedicatedConnect = (
    serviceName: string,
    postVrackServiceNameDedicatedConnectBody: PostVrackServiceNameDedicatedConnectBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedConnect`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameDedicatedConnectBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameDedicatedConnectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedConnect>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedConnectBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedConnect>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedConnectBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameDedicatedConnect>>, {serviceName: string;data: PostVrackServiceNameDedicatedConnectBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameDedicatedConnect(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameDedicatedConnectMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameDedicatedConnect>>>
    export type PostVrackServiceNameDedicatedConnectMutationBody = PostVrackServiceNameDedicatedConnectBody
    export type PostVrackServiceNameDedicatedConnectMutationError = unknown

    /**
 * @summary add a dedicatedConnect link to this vrack
 */
export const usePostVrackServiceNameDedicatedConnect = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedConnect>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedConnectBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameDedicatedConnect>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameDedicatedConnectBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameDedicatedConnectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this a dedicatedConnect link from this vrack
 */
export const deleteVrackServiceNameDedicatedConnectName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedConnect/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameDedicatedConnectNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedConnectName>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedConnectName>>, TError,{serviceName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedConnectName>>, {serviceName: string;name: string}> = (props) => {
          const {serviceName,name} = props ?? {};

          return  deleteVrackServiceNameDedicatedConnectName(serviceName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameDedicatedConnectNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedConnectName>>>
    
    export type DeleteVrackServiceNameDedicatedConnectNameMutationError = unknown

    /**
 * @summary remove this a dedicatedConnect link from this vrack
 */
export const useDeleteVrackServiceNameDedicatedConnectName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedConnectName>>, TError,{serviceName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedConnectName>>,
        TError,
        {serviceName: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameDedicatedConnectNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameDedicatedConnectName = (
    serviceName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackDedicatedConnectOVH>(
      {url: `/vrack/${serviceName}/dedicatedConnect/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedConnectNameQueryKey = (serviceName: string,
    name: string,) => {
    return [`/vrack/${serviceName}/dedicatedConnect/${name}`] as const;
    }

    
export const getGetVrackServiceNameDedicatedConnectNameQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError = unknown>(serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedConnectNameQueryKey(serviceName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>> = ({ signal }) => getVrackServiceNameDedicatedConnectName(serviceName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedConnectNameQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>>
export type GetVrackServiceNameDedicatedConnectNameQueryError = unknown


export function useGetVrackServiceNameDedicatedConnectName<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError = unknown>(
 serviceName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedConnectName<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedConnectName<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameDedicatedConnectName<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError = unknown>(
 serviceName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedConnectName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedConnectNameQueryOptions(serviceName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVrackServiceNameDedicatedConnectName = (
    serviceName: string,
    name: string,
    vrackDedicatedConnectOVH: VrackDedicatedConnectOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vrack/${serviceName}/dedicatedConnect/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vrackDedicatedConnectOVH
    },
      options);
    }
  


export const getPutVrackServiceNameDedicatedConnectNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceNameDedicatedConnectName>>, TError,{serviceName: string;name: string;data: VrackDedicatedConnectOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceNameDedicatedConnectName>>, TError,{serviceName: string;name: string;data: VrackDedicatedConnectOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVrackServiceNameDedicatedConnectName>>, {serviceName: string;name: string;data: VrackDedicatedConnectOVH}> = (props) => {
          const {serviceName,name,data} = props ?? {};

          return  putVrackServiceNameDedicatedConnectName(serviceName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVrackServiceNameDedicatedConnectNameMutationResult = NonNullable<Awaited<ReturnType<typeof putVrackServiceNameDedicatedConnectName>>>
    export type PutVrackServiceNameDedicatedConnectNameMutationBody = VrackDedicatedConnectOVH
    export type PutVrackServiceNameDedicatedConnectNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVrackServiceNameDedicatedConnectName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceNameDedicatedConnectName>>, TError,{serviceName: string;name: string;data: VrackDedicatedConnectOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVrackServiceNameDedicatedConnectName>>,
        TError,
        {serviceName: string;name: string;data: VrackDedicatedConnectOVH},
        TContext
      > => {

      const mutationOptions = getPutVrackServiceNameDedicatedConnectNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary vrack for dedicated server
 */
export const getVrackServiceNameDedicatedServer = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/dedicatedServer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedServerQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/dedicatedServer`] as const;
    }

    
export const getGetVrackServiceNameDedicatedServerQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedServerQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>> = ({ signal }) => getVrackServiceNameDedicatedServer(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedServerQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>>
export type GetVrackServiceNameDedicatedServerQueryError = unknown


export function useGetVrackServiceNameDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for dedicated server
 */

export function useGetVrackServiceNameDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedServerQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a dedicated server to this vrack (LEGACY)
 */
export const postVrackServiceNameDedicatedServer = (
    serviceName: string,
    postVrackServiceNameDedicatedServerBody: PostVrackServiceNameDedicatedServerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedServer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameDedicatedServerBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameDedicatedServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServer>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedServerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServer>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedServerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServer>>, {serviceName: string;data: PostVrackServiceNameDedicatedServerBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameDedicatedServer(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameDedicatedServerMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServer>>>
    export type PostVrackServiceNameDedicatedServerMutationBody = PostVrackServiceNameDedicatedServerBody
    export type PostVrackServiceNameDedicatedServerMutationError = unknown

    /**
 * @summary add a dedicated server to this vrack (LEGACY)
 */
export const usePostVrackServiceNameDedicatedServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServer>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedServerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameDedicatedServer>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameDedicatedServerBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameDedicatedServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this server from this vrack (LEGACY)
 */
export const deleteVrackServiceNameDedicatedServerDedicatedServer = (
    serviceName: string,
    dedicatedServer: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedServer/${dedicatedServer}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameDedicatedServerDedicatedServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerDedicatedServer>>, TError,{serviceName: string;dedicatedServer: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerDedicatedServer>>, TError,{serviceName: string;dedicatedServer: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerDedicatedServer>>, {serviceName: string;dedicatedServer: string}> = (props) => {
          const {serviceName,dedicatedServer} = props ?? {};

          return  deleteVrackServiceNameDedicatedServerDedicatedServer(serviceName,dedicatedServer,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameDedicatedServerDedicatedServerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerDedicatedServer>>>
    
    export type DeleteVrackServiceNameDedicatedServerDedicatedServerMutationError = unknown

    /**
 * @summary remove this server from this vrack (LEGACY)
 */
export const useDeleteVrackServiceNameDedicatedServerDedicatedServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerDedicatedServer>>, TError,{serviceName: string;dedicatedServer: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerDedicatedServer>>,
        TError,
        {serviceName: string;dedicatedServer: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameDedicatedServerDedicatedServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameDedicatedServerDedicatedServer = (
    serviceName: string,
    dedicatedServer: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackDedicatedServerOVH>(
      {url: `/vrack/${serviceName}/dedicatedServer/${dedicatedServer}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedServerDedicatedServerQueryKey = (serviceName: string,
    dedicatedServer: string,) => {
    return [`/vrack/${serviceName}/dedicatedServer/${dedicatedServer}`] as const;
    }

    
export const getGetVrackServiceNameDedicatedServerDedicatedServerQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError = unknown>(serviceName: string,
    dedicatedServer: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedServerDedicatedServerQueryKey(serviceName,dedicatedServer);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>> = ({ signal }) => getVrackServiceNameDedicatedServerDedicatedServer(serviceName,dedicatedServer, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && dedicatedServer), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedServerDedicatedServerQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>>
export type GetVrackServiceNameDedicatedServerDedicatedServerQueryError = unknown


export function useGetVrackServiceNameDedicatedServerDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError = unknown>(
 serviceName: string,
    dedicatedServer: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError = unknown>(
 serviceName: string,
    dedicatedServer: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError = unknown>(
 serviceName: string,
    dedicatedServer: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameDedicatedServerDedicatedServer<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError = unknown>(
 serviceName: string,
    dedicatedServer: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedServerDedicatedServerQueryOptions(serviceName,dedicatedServer,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack for dedicated server interface
 */
export const getVrackServiceNameDedicatedServerInterface = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/dedicatedServerInterface`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedServerInterfaceQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/dedicatedServerInterface`] as const;
    }

    
export const getGetVrackServiceNameDedicatedServerInterfaceQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedServerInterfaceQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>> = ({ signal }) => getVrackServiceNameDedicatedServerInterface(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedServerInterfaceQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>>
export type GetVrackServiceNameDedicatedServerInterfaceQueryError = unknown


export function useGetVrackServiceNameDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for dedicated server interface
 */

export function useGetVrackServiceNameDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedServerInterfaceQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a dedicated server interface to this vrack
 */
export const postVrackServiceNameDedicatedServerInterface = (
    serviceName: string,
    postVrackServiceNameDedicatedServerInterfaceBody: PostVrackServiceNameDedicatedServerInterfaceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedServerInterface`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameDedicatedServerInterfaceBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameDedicatedServerInterfaceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServerInterface>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedServerInterfaceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServerInterface>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedServerInterfaceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServerInterface>>, {serviceName: string;data: PostVrackServiceNameDedicatedServerInterfaceBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameDedicatedServerInterface(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameDedicatedServerInterfaceMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServerInterface>>>
    export type PostVrackServiceNameDedicatedServerInterfaceMutationBody = PostVrackServiceNameDedicatedServerInterfaceBody
    export type PostVrackServiceNameDedicatedServerInterfaceMutationError = unknown

    /**
 * @summary add a dedicated server interface to this vrack
 */
export const usePostVrackServiceNameDedicatedServerInterface = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameDedicatedServerInterface>>, TError,{serviceName: string;data: PostVrackServiceNameDedicatedServerInterfaceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameDedicatedServerInterface>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameDedicatedServerInterfaceBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameDedicatedServerInterfaceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this server interface from this vrack
 */
export const deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface = (
    serviceName: string,
    dedicatedServerInterface: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/dedicatedServerInterface/${dedicatedServerInterface}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError,{serviceName: string;dedicatedServerInterface: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError,{serviceName: string;dedicatedServerInterface: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, {serviceName: string;dedicatedServerInterface: string}> = (props) => {
          const {serviceName,dedicatedServerInterface} = props ?? {};

          return  deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface(serviceName,dedicatedServerInterface,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>>
    
    export type DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceMutationError = unknown

    /**
 * @summary remove this server interface from this vrack
 */
export const useDeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError,{serviceName: string;dedicatedServerInterface: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>,
        TError,
        {serviceName: string;dedicatedServerInterface: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface = (
    serviceName: string,
    dedicatedServerInterface: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackDedicatedServerInterfaceOVH>(
      {url: `/vrack/${serviceName}/dedicatedServerInterface/${dedicatedServerInterface}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceQueryKey = (serviceName: string,
    dedicatedServerInterface: string,) => {
    return [`/vrack/${serviceName}/dedicatedServerInterface/${dedicatedServerInterface}`] as const;
    }

    
export const getGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError = unknown>(serviceName: string,
    dedicatedServerInterface: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceQueryKey(serviceName,dedicatedServerInterface);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>> = ({ signal }) => getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface(serviceName,dedicatedServerInterface, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && dedicatedServerInterface), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>>
export type GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceQueryError = unknown


export function useGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError = unknown>(
 serviceName: string,
    dedicatedServerInterface: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError = unknown>(
 serviceName: string,
    dedicatedServerInterface: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError = unknown>(
 serviceName: string,
    dedicatedServerInterface: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError = unknown>(
 serviceName: string,
    dedicatedServerInterface: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceQueryOptions(serviceName,dedicatedServerInterface,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Details for all dedicated server interfaces in this vrack
 */
export const getVrackServiceNameDedicatedServerInterfaceDetails = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackAllowedDedicatedServerInterfacesOVH[]>(
      {url: `/vrack/${serviceName}/dedicatedServerInterfaceDetails`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameDedicatedServerInterfaceDetailsQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/dedicatedServerInterfaceDetails`] as const;
    }

    
export const getGetVrackServiceNameDedicatedServerInterfaceDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameDedicatedServerInterfaceDetailsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>> = ({ signal }) => getVrackServiceNameDedicatedServerInterfaceDetails(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameDedicatedServerInterfaceDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>>
export type GetVrackServiceNameDedicatedServerInterfaceDetailsQueryError = unknown


export function useGetVrackServiceNameDedicatedServerInterfaceDetails<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerInterfaceDetails<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameDedicatedServerInterfaceDetails<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Details for all dedicated server interfaces in this vrack
 */

export function useGetVrackServiceNameDedicatedServerInterfaceDetails<TData = Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameDedicatedServerInterfaceDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameDedicatedServerInterfaceDetailsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * This route allows asynchronous service eligibility requests. It means the route can be called several times until all the eligible services are returned.

While the `status` is set to `pending` the results are partial.

Once the `status` is set to `done`, all the eligible services have been found.

In the eventuality of errors getting specific service types, the errors will be listed in the `errors` field.
 * @summary List all eligible services for this vRack asynchronously
 */
export const getVrackServiceNameEligibleServices = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackEligibleServicesResponseOVH>(
      {url: `/vrack/${serviceName}/eligibleServices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameEligibleServicesQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/eligibleServices`] as const;
    }

    
export const getGetVrackServiceNameEligibleServicesQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameEligibleServicesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>> = ({ signal }) => getVrackServiceNameEligibleServices(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameEligibleServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>>
export type GetVrackServiceNameEligibleServicesQueryError = unknown


export function useGetVrackServiceNameEligibleServices<TData = Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameEligibleServices<TData = Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameEligibleServices<TData = Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all eligible services for this vRack asynchronously
 */

export function useGetVrackServiceNameEligibleServices<TData = Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameEligibleServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameEligibleServicesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack for IP blocks
 */
export const getVrackServiceNameIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/vrack/${serviceName}/ip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/ip`] as const;
    }

    
export const getGetVrackServiceNameIpQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIp>>> = ({ signal }) => getVrackServiceNameIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIp>>>
export type GetVrackServiceNameIpQueryError = unknown


export function useGetVrackServiceNameIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for IP blocks
 */

export function useGetVrackServiceNameIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add an IP block to this vrack
 */
export const postVrackServiceNameIp = (
    serviceName: string,
    postVrackServiceNameIpBody: PostVrackServiceNameIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ip`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameIpBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIp>>, TError,{serviceName: string;data: PostVrackServiceNameIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIp>>, TError,{serviceName: string;data: PostVrackServiceNameIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameIp>>, {serviceName: string;data: PostVrackServiceNameIpBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameIpMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameIp>>>
    export type PostVrackServiceNameIpMutationBody = PostVrackServiceNameIpBody
    export type PostVrackServiceNameIpMutationError = unknown

    /**
 * @summary add an IP block to this vrack
 */
export const usePostVrackServiceNameIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIp>>, TError,{serviceName: string;data: PostVrackServiceNameIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameIp>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameIpBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this IP block from this vrack
 */
export const deleteVrackServiceNameIpIp = (
    serviceName: string,
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ip/${ip}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameIpIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpIp>>, TError,{serviceName: string;ip: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpIp>>, TError,{serviceName: string;ip: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameIpIp>>, {serviceName: string;ip: IpBlockOVH}> = (props) => {
          const {serviceName,ip} = props ?? {};

          return  deleteVrackServiceNameIpIp(serviceName,ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameIpIpMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameIpIp>>>
    
    export type DeleteVrackServiceNameIpIpMutationError = unknown

    /**
 * @summary remove this IP block from this vrack
 */
export const useDeleteVrackServiceNameIpIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpIp>>, TError,{serviceName: string;ip: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameIpIp>>,
        TError,
        {serviceName: string;ip: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameIpIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameIpIp = (
    serviceName: string,
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackIpOVH>(
      {url: `/vrack/${serviceName}/ip/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpIpQueryKey = (serviceName: string,
    ip: IpBlockOVH,) => {
    return [`/vrack/${serviceName}/ip/${ip}`] as const;
    }

    
export const getGetVrackServiceNameIpIpQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError = unknown>(serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpIpQueryKey(serviceName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>> = ({ signal }) => getVrackServiceNameIpIp(serviceName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpIpQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>>
export type GetVrackServiceNameIpIpQueryError = unknown


export function useGetVrackServiceNameIpIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameIpIp<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpIpQueryOptions(serviceName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Announce IP to zone for vrack
 */
export const postVrackServiceNameIpIpAnnounceInZone = (
    serviceName: string,
    ip: IpBlockOVH,
    postVrackServiceNameIpIpAnnounceInZoneBody: PostVrackServiceNameIpIpAnnounceInZoneBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ip/${ip}/announceInZone`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameIpIpAnnounceInZoneBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameIpIpAnnounceInZoneMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpIpAnnounceInZone>>, TError,{serviceName: string;ip: IpBlockOVH;data: PostVrackServiceNameIpIpAnnounceInZoneBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpIpAnnounceInZone>>, TError,{serviceName: string;ip: IpBlockOVH;data: PostVrackServiceNameIpIpAnnounceInZoneBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameIpIpAnnounceInZone>>, {serviceName: string;ip: IpBlockOVH;data: PostVrackServiceNameIpIpAnnounceInZoneBody}> = (props) => {
          const {serviceName,ip,data} = props ?? {};

          return  postVrackServiceNameIpIpAnnounceInZone(serviceName,ip,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameIpIpAnnounceInZoneMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameIpIpAnnounceInZone>>>
    export type PostVrackServiceNameIpIpAnnounceInZoneMutationBody = PostVrackServiceNameIpIpAnnounceInZoneBody
    export type PostVrackServiceNameIpIpAnnounceInZoneMutationError = unknown

    /**
 * @summary Announce IP to zone for vrack
 */
export const usePostVrackServiceNameIpIpAnnounceInZone = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpIpAnnounceInZone>>, TError,{serviceName: string;ip: IpBlockOVH;data: PostVrackServiceNameIpIpAnnounceInZoneBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameIpIpAnnounceInZone>>,
        TError,
        {serviceName: string;ip: IpBlockOVH;data: PostVrackServiceNameIpIpAnnounceInZoneBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameIpIpAnnounceInZoneMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Zone available to announce your block
 */
export const getVrackServiceNameIpIpAvailableZone = (
    serviceName: string,
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackVrackZoneEnumOVH[]>(
      {url: `/vrack/${serviceName}/ip/${ip}/availableZone`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpIpAvailableZoneQueryKey = (serviceName: string,
    ip: IpBlockOVH,) => {
    return [`/vrack/${serviceName}/ip/${ip}/availableZone`] as const;
    }

    
export const getGetVrackServiceNameIpIpAvailableZoneQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError = unknown>(serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpIpAvailableZoneQueryKey(serviceName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>> = ({ signal }) => getVrackServiceNameIpIpAvailableZone(serviceName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpIpAvailableZoneQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>>
export type GetVrackServiceNameIpIpAvailableZoneQueryError = unknown


export function useGetVrackServiceNameIpIpAvailableZone<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpIpAvailableZone<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpIpAvailableZone<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Zone available to announce your block
 */

export function useGetVrackServiceNameIpIpAvailableZone<TData = Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError = unknown>(
 serviceName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpIpAvailableZone>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpIpAvailableZoneQueryOptions(serviceName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack for ipLoadbalancing
 */
export const getVrackServiceNameIpLoadbalancing = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/ipLoadbalancing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpLoadbalancingQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/ipLoadbalancing`] as const;
    }

    
export const getGetVrackServiceNameIpLoadbalancingQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpLoadbalancingQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>> = ({ signal }) => getVrackServiceNameIpLoadbalancing(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpLoadbalancingQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>>
export type GetVrackServiceNameIpLoadbalancingQueryError = unknown


export function useGetVrackServiceNameIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for ipLoadbalancing
 */

export function useGetVrackServiceNameIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpLoadbalancingQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add an ipLoadbalancing to this vrack
 */
export const postVrackServiceNameIpLoadbalancing = (
    serviceName: string,
    postVrackServiceNameIpLoadbalancingBody: PostVrackServiceNameIpLoadbalancingBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipLoadbalancing`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameIpLoadbalancingBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameIpLoadbalancingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpLoadbalancing>>, TError,{serviceName: string;data: PostVrackServiceNameIpLoadbalancingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpLoadbalancing>>, TError,{serviceName: string;data: PostVrackServiceNameIpLoadbalancingBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameIpLoadbalancing>>, {serviceName: string;data: PostVrackServiceNameIpLoadbalancingBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameIpLoadbalancing(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameIpLoadbalancingMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameIpLoadbalancing>>>
    export type PostVrackServiceNameIpLoadbalancingMutationBody = PostVrackServiceNameIpLoadbalancingBody
    export type PostVrackServiceNameIpLoadbalancingMutationError = unknown

    /**
 * @summary add an ipLoadbalancing to this vrack
 */
export const usePostVrackServiceNameIpLoadbalancing = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpLoadbalancing>>, TError,{serviceName: string;data: PostVrackServiceNameIpLoadbalancingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameIpLoadbalancing>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameIpLoadbalancingBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameIpLoadbalancingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this ipLoadbalancing from this vrack
 */
export const deleteVrackServiceNameIpLoadbalancingIpLoadbalancing = (
    serviceName: string,
    ipLoadbalancing: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipLoadbalancing/${ipLoadbalancing}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameIpLoadbalancingIpLoadbalancingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError,{serviceName: string;ipLoadbalancing: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError,{serviceName: string;ipLoadbalancing: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameIpLoadbalancingIpLoadbalancing>>, {serviceName: string;ipLoadbalancing: string}> = (props) => {
          const {serviceName,ipLoadbalancing} = props ?? {};

          return  deleteVrackServiceNameIpLoadbalancingIpLoadbalancing(serviceName,ipLoadbalancing,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameIpLoadbalancingIpLoadbalancingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameIpLoadbalancingIpLoadbalancing>>>
    
    export type DeleteVrackServiceNameIpLoadbalancingIpLoadbalancingMutationError = unknown

    /**
 * @summary remove this ipLoadbalancing from this vrack
 */
export const useDeleteVrackServiceNameIpLoadbalancingIpLoadbalancing = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError,{serviceName: string;ipLoadbalancing: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameIpLoadbalancingIpLoadbalancing>>,
        TError,
        {serviceName: string;ipLoadbalancing: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameIpLoadbalancingIpLoadbalancingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameIpLoadbalancingIpLoadbalancing = (
    serviceName: string,
    ipLoadbalancing: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackIplbOVH>(
      {url: `/vrack/${serviceName}/ipLoadbalancing/${ipLoadbalancing}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpLoadbalancingIpLoadbalancingQueryKey = (serviceName: string,
    ipLoadbalancing: string,) => {
    return [`/vrack/${serviceName}/ipLoadbalancing/${ipLoadbalancing}`] as const;
    }

    
export const getGetVrackServiceNameIpLoadbalancingIpLoadbalancingQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError = unknown>(serviceName: string,
    ipLoadbalancing: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpLoadbalancingIpLoadbalancingQueryKey(serviceName,ipLoadbalancing);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>> = ({ signal }) => getVrackServiceNameIpLoadbalancingIpLoadbalancing(serviceName,ipLoadbalancing, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipLoadbalancing), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpLoadbalancingIpLoadbalancingQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>>
export type GetVrackServiceNameIpLoadbalancingIpLoadbalancingQueryError = unknown


export function useGetVrackServiceNameIpLoadbalancingIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError = unknown>(
 serviceName: string,
    ipLoadbalancing: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpLoadbalancingIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError = unknown>(
 serviceName: string,
    ipLoadbalancing: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpLoadbalancingIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError = unknown>(
 serviceName: string,
    ipLoadbalancing: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameIpLoadbalancingIpLoadbalancing<TData = Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError = unknown>(
 serviceName: string,
    ipLoadbalancing: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpLoadbalancingIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpLoadbalancingIpLoadbalancingQueryOptions(serviceName,ipLoadbalancing,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack for IP v6 blocks
 */
export const getVrackServiceNameIpv6 = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv6BlockOVH[]>(
      {url: `/vrack/${serviceName}/ipv6`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpv6QueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/ipv6`] as const;
    }

    
export const getGetVrackServiceNameIpv6QueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpv6QueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>> = ({ signal }) => getVrackServiceNameIpv6(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpv6QueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>>
export type GetVrackServiceNameIpv6QueryError = unknown


export function useGetVrackServiceNameIpv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for IP v6 blocks
 */

export function useGetVrackServiceNameIpv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpv6QueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add an IP v6 block to this vrack
 */
export const postVrackServiceNameIpv6 = (
    serviceName: string,
    postVrackServiceNameIpv6Body: PostVrackServiceNameIpv6Body,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipv6`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameIpv6Body, signal
    },
      options);
    }
  


export const getPostVrackServiceNameIpv6MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpv6>>, TError,{serviceName: string;data: PostVrackServiceNameIpv6Body}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpv6>>, TError,{serviceName: string;data: PostVrackServiceNameIpv6Body}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameIpv6>>, {serviceName: string;data: PostVrackServiceNameIpv6Body}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameIpv6(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameIpv6MutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameIpv6>>>
    export type PostVrackServiceNameIpv6MutationBody = PostVrackServiceNameIpv6Body
    export type PostVrackServiceNameIpv6MutationError = unknown

    /**
 * @summary add an IP v6 block to this vrack
 */
export const usePostVrackServiceNameIpv6 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpv6>>, TError,{serviceName: string;data: PostVrackServiceNameIpv6Body}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameIpv6>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameIpv6Body},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameIpv6MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this IP v6 block from this vrack
 */
export const deleteVrackServiceNameIpv6Ipv6 = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameIpv6Ipv6MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6>>, {serviceName: string;ipv6: Ipv6BlockOVH}> = (props) => {
          const {serviceName,ipv6} = props ?? {};

          return  deleteVrackServiceNameIpv6Ipv6(serviceName,ipv6,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameIpv6Ipv6MutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6>>>
    
    export type DeleteVrackServiceNameIpv6Ipv6MutationError = unknown

    /**
 * @summary remove this IP v6 block from this vrack
 */
export const useDeleteVrackServiceNameIpv6Ipv6 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6>>,
        TError,
        {serviceName: string;ipv6: Ipv6BlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameIpv6Ipv6MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameIpv6Ipv6 = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackIpv6OVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpv6Ipv6QueryKey = (serviceName: string,
    ipv6: Ipv6BlockOVH,) => {
    return [`/vrack/${serviceName}/ipv6/${ipv6}`] as const;
    }

    
export const getGetVrackServiceNameIpv6Ipv6QueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError = unknown>(serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpv6Ipv6QueryKey(serviceName,ipv6);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>> = ({ signal }) => getVrackServiceNameIpv6Ipv6(serviceName,ipv6, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipv6), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpv6Ipv6QueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>>
export type GetVrackServiceNameIpv6Ipv6QueryError = unknown


export function useGetVrackServiceNameIpv6Ipv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameIpv6Ipv6<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpv6Ipv6QueryOptions(serviceName,ipv6,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary subrange bridged into your vrack
 */
export const getVrackServiceNameIpv6Ipv6BridgedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv6BlockOVH[]>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/bridgedSubrange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpv6Ipv6BridgedSubrangeQueryKey = (serviceName: string,
    ipv6: Ipv6BlockOVH,) => {
    return [`/vrack/${serviceName}/ipv6/${ipv6}/bridgedSubrange`] as const;
    }

    
export const getGetVrackServiceNameIpv6Ipv6BridgedSubrangeQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError = unknown>(serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpv6Ipv6BridgedSubrangeQueryKey(serviceName,ipv6);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>> = ({ signal }) => getVrackServiceNameIpv6Ipv6BridgedSubrange(serviceName,ipv6, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipv6), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpv6Ipv6BridgedSubrangeQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>>
export type GetVrackServiceNameIpv6Ipv6BridgedSubrangeQueryError = unknown


export function useGetVrackServiceNameIpv6Ipv6BridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6BridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6BridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary subrange bridged into your vrack
 */

export function useGetVrackServiceNameIpv6Ipv6BridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpv6Ipv6BridgedSubrangeQueryOptions(serviceName,ipv6,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackBridgedSubrangeOVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/bridgedSubrange/${bridgedSubrange}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeQueryKey = (serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH,) => {
    return [`/vrack/${serviceName}/ipv6/${ipv6}/bridgedSubrange/${bridgedSubrange}`] as const;
    }

    
export const getGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError = unknown>(serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeQueryKey(serviceName,ipv6,bridgedSubrange);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>> = ({ signal }) => getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange(serviceName,ipv6,bridgedSubrange, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipv6 && bridgedSubrange), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>>
export type GetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeQueryError = unknown


export function useGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeQueryOptions(serviceName,ipv6,bridgedSubrange,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Slaac status
 */
export const putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
    bridgedSubrange: Ipv6BlockOVH,
    vrackBridgedSubrangeOVH: NonReadonly<VrackBridgedSubrangeOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/bridgedSubrange/${bridgedSubrange}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vrackBridgedSubrangeOVH
    },
      options);
    }
  


export const getPutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;bridgedSubrange: Ipv6BlockOVH;data: NonReadonly<VrackBridgedSubrangeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;bridgedSubrange: Ipv6BlockOVH;data: NonReadonly<VrackBridgedSubrangeOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, {serviceName: string;ipv6: Ipv6BlockOVH;bridgedSubrange: Ipv6BlockOVH;data: NonReadonly<VrackBridgedSubrangeOVH>}> = (props) => {
          const {serviceName,ipv6,bridgedSubrange,data} = props ?? {};

          return  putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange(serviceName,ipv6,bridgedSubrange,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeMutationResult = NonNullable<Awaited<ReturnType<typeof putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>>
    export type PutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeMutationBody = NonReadonly<VrackBridgedSubrangeOVH>
    export type PutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeMutationError = unknown

    /**
 * @summary Update Slaac status
 */
export const usePutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;bridgedSubrange: Ipv6BlockOVH;data: NonReadonly<VrackBridgedSubrangeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrange>>,
        TError,
        {serviceName: string;ipv6: Ipv6BlockOVH;bridgedSubrange: Ipv6BlockOVH;data: NonReadonly<VrackBridgedSubrangeOVH>},
        TContext
      > => {

      const mutationOptions = getPutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary subrange routed into your vrack
 */
export const getVrackServiceNameIpv6Ipv6RoutedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Ipv6BlockOVH[]>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/routedSubrange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpv6Ipv6RoutedSubrangeQueryKey = (serviceName: string,
    ipv6: Ipv6BlockOVH,) => {
    return [`/vrack/${serviceName}/ipv6/${ipv6}/routedSubrange`] as const;
    }

    
export const getGetVrackServiceNameIpv6Ipv6RoutedSubrangeQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError = unknown>(serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpv6Ipv6RoutedSubrangeQueryKey(serviceName,ipv6);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>> = ({ signal }) => getVrackServiceNameIpv6Ipv6RoutedSubrange(serviceName,ipv6, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipv6), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpv6Ipv6RoutedSubrangeQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>>
export type GetVrackServiceNameIpv6Ipv6RoutedSubrangeQueryError = unknown


export function useGetVrackServiceNameIpv6Ipv6RoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6RoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6RoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary subrange routed into your vrack
 */

export function useGetVrackServiceNameIpv6Ipv6RoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpv6Ipv6RoutedSubrangeQueryOptions(serviceName,ipv6,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary route a subrange of your IP v6 block into your vrack
 */
export const postVrackServiceNameIpv6Ipv6RoutedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
    postVrackServiceNameIpv6Ipv6RoutedSubrangeBody: PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/routedSubrange`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameIpv6Ipv6RoutedSubrangeBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameIpv6Ipv6RoutedSubrangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;data: PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;data: PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameIpv6Ipv6RoutedSubrange>>, {serviceName: string;ipv6: Ipv6BlockOVH;data: PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody}> = (props) => {
          const {serviceName,ipv6,data} = props ?? {};

          return  postVrackServiceNameIpv6Ipv6RoutedSubrange(serviceName,ipv6,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameIpv6Ipv6RoutedSubrangeMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameIpv6Ipv6RoutedSubrange>>>
    export type PostVrackServiceNameIpv6Ipv6RoutedSubrangeMutationBody = PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody
    export type PostVrackServiceNameIpv6Ipv6RoutedSubrangeMutationError = unknown

    /**
 * @summary route a subrange of your IP v6 block into your vrack
 */
export const usePostVrackServiceNameIpv6Ipv6RoutedSubrange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameIpv6Ipv6RoutedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;data: PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameIpv6Ipv6RoutedSubrange>>,
        TError,
        {serviceName: string;ipv6: Ipv6BlockOVH;data: PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameIpv6Ipv6RoutedSubrangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary unroute subrange from your vrack
 */
export const deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/routedSubrange/${routedSubrange}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;routedSubrange: Ipv6BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;routedSubrange: Ipv6BlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, {serviceName: string;ipv6: Ipv6BlockOVH;routedSubrange: Ipv6BlockOVH}> = (props) => {
          const {serviceName,ipv6,routedSubrange} = props ?? {};

          return  deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange(serviceName,ipv6,routedSubrange,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>>
    
    export type DeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeMutationError = unknown

    /**
 * @summary unroute subrange from your vrack
 */
export const useDeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError,{serviceName: string;ipv6: Ipv6BlockOVH;routedSubrange: Ipv6BlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>,
        TError,
        {serviceName: string;ipv6: Ipv6BlockOVH;routedSubrange: Ipv6BlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange = (
    serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackRoutedSubrangeOVH>(
      {url: `/vrack/${serviceName}/ipv6/${ipv6}/routedSubrange/${routedSubrange}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeQueryKey = (serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH,) => {
    return [`/vrack/${serviceName}/ipv6/${ipv6}/routedSubrange/${routedSubrange}`] as const;
    }

    
export const getGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError = unknown>(serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeQueryKey(serviceName,ipv6,routedSubrange);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>> = ({ signal }) => getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange(serviceName,ipv6,routedSubrange, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipv6 && routedSubrange), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>>
export type GetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeQueryError = unknown


export function useGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange<TData = Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError = unknown>(
 serviceName: string,
    ipv6: Ipv6BlockOVH,
    routedSubrange: Ipv6BlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeQueryOptions(serviceName,ipv6,routedSubrange,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack for legacy vrack
 */
export const getVrackServiceNameLegacyVrack = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/legacyVrack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameLegacyVrackQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/legacyVrack`] as const;
    }

    
export const getGetVrackServiceNameLegacyVrackQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameLegacyVrackQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>> = ({ signal }) => getVrackServiceNameLegacyVrack(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameLegacyVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>>
export type GetVrackServiceNameLegacyVrackQueryError = unknown


export function useGetVrackServiceNameLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for legacy vrack
 */

export function useGetVrackServiceNameLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameLegacyVrackQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a legacy vrack (vrackXXXX) to this vrack (pn-XXXX)
 */
export const postVrackServiceNameLegacyVrack = (
    serviceName: string,
    postVrackServiceNameLegacyVrackBody: PostVrackServiceNameLegacyVrackBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/legacyVrack`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameLegacyVrackBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameLegacyVrackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameLegacyVrack>>, TError,{serviceName: string;data: PostVrackServiceNameLegacyVrackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameLegacyVrack>>, TError,{serviceName: string;data: PostVrackServiceNameLegacyVrackBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameLegacyVrack>>, {serviceName: string;data: PostVrackServiceNameLegacyVrackBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameLegacyVrack(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameLegacyVrackMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameLegacyVrack>>>
    export type PostVrackServiceNameLegacyVrackMutationBody = PostVrackServiceNameLegacyVrackBody
    export type PostVrackServiceNameLegacyVrackMutationError = unknown

    /**
 * @summary add a legacy vrack (vrackXXXX) to this vrack (pn-XXXX)
 */
export const usePostVrackServiceNameLegacyVrack = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameLegacyVrack>>, TError,{serviceName: string;data: PostVrackServiceNameLegacyVrackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameLegacyVrack>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameLegacyVrackBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameLegacyVrackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this legacy vrack (vrackXXXX) from this vrack (pn-XXXX)
 */
export const deleteVrackServiceNameLegacyVrackLegacyVrack = (
    serviceName: string,
    legacyVrack: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/legacyVrack/${legacyVrack}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameLegacyVrackLegacyVrackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameLegacyVrackLegacyVrack>>, TError,{serviceName: string;legacyVrack: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameLegacyVrackLegacyVrack>>, TError,{serviceName: string;legacyVrack: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameLegacyVrackLegacyVrack>>, {serviceName: string;legacyVrack: string}> = (props) => {
          const {serviceName,legacyVrack} = props ?? {};

          return  deleteVrackServiceNameLegacyVrackLegacyVrack(serviceName,legacyVrack,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameLegacyVrackLegacyVrackMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameLegacyVrackLegacyVrack>>>
    
    export type DeleteVrackServiceNameLegacyVrackLegacyVrackMutationError = unknown

    /**
 * @summary remove this legacy vrack (vrackXXXX) from this vrack (pn-XXXX)
 */
export const useDeleteVrackServiceNameLegacyVrackLegacyVrack = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameLegacyVrackLegacyVrack>>, TError,{serviceName: string;legacyVrack: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameLegacyVrackLegacyVrack>>,
        TError,
        {serviceName: string;legacyVrack: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameLegacyVrackLegacyVrackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameLegacyVrackLegacyVrack = (
    serviceName: string,
    legacyVrack: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackLegacyVrackOVH>(
      {url: `/vrack/${serviceName}/legacyVrack/${legacyVrack}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameLegacyVrackLegacyVrackQueryKey = (serviceName: string,
    legacyVrack: string,) => {
    return [`/vrack/${serviceName}/legacyVrack/${legacyVrack}`] as const;
    }

    
export const getGetVrackServiceNameLegacyVrackLegacyVrackQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError = unknown>(serviceName: string,
    legacyVrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameLegacyVrackLegacyVrackQueryKey(serviceName,legacyVrack);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>> = ({ signal }) => getVrackServiceNameLegacyVrackLegacyVrack(serviceName,legacyVrack, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && legacyVrack), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameLegacyVrackLegacyVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>>
export type GetVrackServiceNameLegacyVrackLegacyVrackQueryError = unknown


export function useGetVrackServiceNameLegacyVrackLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError = unknown>(
 serviceName: string,
    legacyVrack: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameLegacyVrackLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError = unknown>(
 serviceName: string,
    legacyVrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameLegacyVrackLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError = unknown>(
 serviceName: string,
    legacyVrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameLegacyVrackLegacyVrack<TData = Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError = unknown>(
 serviceName: string,
    legacyVrack: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameLegacyVrackLegacyVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameLegacyVrackLegacyVrackQueryOptions(serviceName,legacyVrack,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack for ovhCloudConnect
 */
export const getVrackServiceNameOvhCloudConnect = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/ovhCloudConnect`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameOvhCloudConnectQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/ovhCloudConnect`] as const;
    }

    
export const getGetVrackServiceNameOvhCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameOvhCloudConnectQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>> = ({ signal }) => getVrackServiceNameOvhCloudConnect(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameOvhCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>>
export type GetVrackServiceNameOvhCloudConnectQueryError = unknown


export function useGetVrackServiceNameOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for ovhCloudConnect
 */

export function useGetVrackServiceNameOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameOvhCloudConnectQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an ovhCloudConnect to the vrack
 */
export const postVrackServiceNameOvhCloudConnect = (
    serviceName: string,
    postVrackServiceNameOvhCloudConnectBody: PostVrackServiceNameOvhCloudConnectBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ovhCloudConnect`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameOvhCloudConnectBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameOvhCloudConnectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameOvhCloudConnect>>, TError,{serviceName: string;data: PostVrackServiceNameOvhCloudConnectBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameOvhCloudConnect>>, TError,{serviceName: string;data: PostVrackServiceNameOvhCloudConnectBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameOvhCloudConnect>>, {serviceName: string;data: PostVrackServiceNameOvhCloudConnectBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameOvhCloudConnect(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameOvhCloudConnectMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameOvhCloudConnect>>>
    export type PostVrackServiceNameOvhCloudConnectMutationBody = PostVrackServiceNameOvhCloudConnectBody
    export type PostVrackServiceNameOvhCloudConnectMutationError = unknown

    /**
 * @summary Add an ovhCloudConnect to the vrack
 */
export const usePostVrackServiceNameOvhCloudConnect = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameOvhCloudConnect>>, TError,{serviceName: string;data: PostVrackServiceNameOvhCloudConnectBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameOvhCloudConnect>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameOvhCloudConnectBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameOvhCloudConnectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove the ovhCloudConnect from the vrack
 */
export const deleteVrackServiceNameOvhCloudConnectOvhCloudConnect = (
    serviceName: string,
    ovhCloudConnect: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/ovhCloudConnect/${ovhCloudConnect}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameOvhCloudConnectOvhCloudConnectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError,{serviceName: string;ovhCloudConnect: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError,{serviceName: string;ovhCloudConnect: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameOvhCloudConnectOvhCloudConnect>>, {serviceName: string;ovhCloudConnect: string}> = (props) => {
          const {serviceName,ovhCloudConnect} = props ?? {};

          return  deleteVrackServiceNameOvhCloudConnectOvhCloudConnect(serviceName,ovhCloudConnect,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameOvhCloudConnectOvhCloudConnectMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameOvhCloudConnectOvhCloudConnect>>>
    
    export type DeleteVrackServiceNameOvhCloudConnectOvhCloudConnectMutationError = unknown

    /**
 * @summary Remove the ovhCloudConnect from the vrack
 */
export const useDeleteVrackServiceNameOvhCloudConnectOvhCloudConnect = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError,{serviceName: string;ovhCloudConnect: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameOvhCloudConnectOvhCloudConnect>>,
        TError,
        {serviceName: string;ovhCloudConnect: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameOvhCloudConnectOvhCloudConnectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameOvhCloudConnectOvhCloudConnect = (
    serviceName: string,
    ovhCloudConnect: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackOvhCloudConnectOVH>(
      {url: `/vrack/${serviceName}/ovhCloudConnect/${ovhCloudConnect}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameOvhCloudConnectOvhCloudConnectQueryKey = (serviceName: string,
    ovhCloudConnect: string,) => {
    return [`/vrack/${serviceName}/ovhCloudConnect/${ovhCloudConnect}`] as const;
    }

    
export const getGetVrackServiceNameOvhCloudConnectOvhCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError = unknown>(serviceName: string,
    ovhCloudConnect: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameOvhCloudConnectOvhCloudConnectQueryKey(serviceName,ovhCloudConnect);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>> = ({ signal }) => getVrackServiceNameOvhCloudConnectOvhCloudConnect(serviceName,ovhCloudConnect, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ovhCloudConnect), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameOvhCloudConnectOvhCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>>
export type GetVrackServiceNameOvhCloudConnectOvhCloudConnectQueryError = unknown


export function useGetVrackServiceNameOvhCloudConnectOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError = unknown>(
 serviceName: string,
    ovhCloudConnect: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameOvhCloudConnectOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError = unknown>(
 serviceName: string,
    ovhCloudConnect: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameOvhCloudConnectOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError = unknown>(
 serviceName: string,
    ovhCloudConnect: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameOvhCloudConnectOvhCloudConnect<TData = Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError = unknown>(
 serviceName: string,
    ovhCloudConnect: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameOvhCloudConnectOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameOvhCloudConnectOvhCloudConnectQueryOptions(serviceName,ovhCloudConnect,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Information on public routing option
 */
export const getVrackServiceNamePublicRoutingOption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackPublicRoutingOptionOVH>(
      {url: `/vrack/${serviceName}/publicRoutingOption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNamePublicRoutingOptionQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/publicRoutingOption`] as const;
    }

    
export const getGetVrackServiceNamePublicRoutingOptionQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNamePublicRoutingOptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>> = ({ signal }) => getVrackServiceNamePublicRoutingOption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNamePublicRoutingOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>>
export type GetVrackServiceNamePublicRoutingOptionQueryError = unknown


export function useGetVrackServiceNamePublicRoutingOption<TData = Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNamePublicRoutingOption<TData = Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNamePublicRoutingOption<TData = Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Information on public routing option
 */

export function useGetVrackServiceNamePublicRoutingOption<TData = Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNamePublicRoutingOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNamePublicRoutingOptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVrackServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesNonExpiringServiceOVH>(
      {url: `/vrack/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetVrackServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>> = ({ signal }) => getVrackServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>>
export type GetVrackServiceNameServiceInfosQueryError = unknown


export function useGetVrackServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary vrack tasks
 */
export const getVrackServiceNameTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vrack/${serviceName}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameTaskQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/task`] as const;
    }

    
export const getGetVrackServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameTask>>> = ({ signal }) => getVrackServiceNameTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameTask>>>
export type GetVrackServiceNameTaskQueryError = unknown


export function useGetVrackServiceNameTask<TData = Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameTask<TData = Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameTask<TData = Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack tasks
 */

export function useGetVrackServiceNameTask<TData = Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVrackServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/vrack/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetVrackServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>> = ({ signal }) => getVrackServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>>
export type GetVrackServiceNameTaskTaskIdQueryError = unknown


export function useGetVrackServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postVrackServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/vrack/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVrackServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVrackServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameTerminate>>>
    
    export type PostVrackServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostVrackServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary vrack for vrackServices
 */
export const getVrackServiceNameVrackServices = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vrack/${serviceName}/vrackServices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameVrackServicesQueryKey = (serviceName: string,) => {
    return [`/vrack/${serviceName}/vrackServices`] as const;
    }

    
export const getGetVrackServiceNameVrackServicesQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameVrackServicesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>> = ({ signal }) => getVrackServiceNameVrackServices(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameVrackServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>>
export type GetVrackServiceNameVrackServicesQueryError = unknown


export function useGetVrackServiceNameVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary vrack for vrackServices
 */

export function useGetVrackServiceNameVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameVrackServicesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a vrackServices to the vrack
 */
export const postVrackServiceNameVrackServices = (
    serviceName: string,
    postVrackServiceNameVrackServicesBody: PostVrackServiceNameVrackServicesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/vrackServices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVrackServiceNameVrackServicesBody, signal
    },
      options);
    }
  


export const getPostVrackServiceNameVrackServicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameVrackServices>>, TError,{serviceName: string;data: PostVrackServiceNameVrackServicesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameVrackServices>>, TError,{serviceName: string;data: PostVrackServiceNameVrackServicesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVrackServiceNameVrackServices>>, {serviceName: string;data: PostVrackServiceNameVrackServicesBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVrackServiceNameVrackServices(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVrackServiceNameVrackServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postVrackServiceNameVrackServices>>>
    export type PostVrackServiceNameVrackServicesMutationBody = PostVrackServiceNameVrackServicesBody
    export type PostVrackServiceNameVrackServicesMutationError = unknown

    /**
 * @summary Add a vrackServices to the vrack
 */
export const usePostVrackServiceNameVrackServices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVrackServiceNameVrackServices>>, TError,{serviceName: string;data: PostVrackServiceNameVrackServicesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVrackServiceNameVrackServices>>,
        TError,
        {serviceName: string;data: PostVrackServiceNameVrackServicesBody},
        TContext
      > => {

      const mutationOptions = getPostVrackServiceNameVrackServicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove the vrackServices from the vrack
 */
export const deleteVrackServiceNameVrackServicesVrackServices = (
    serviceName: string,
    vrackServices: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VrackTaskOVH>(
      {url: `/vrack/${serviceName}/vrackServices/${vrackServices}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVrackServiceNameVrackServicesVrackServicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameVrackServicesVrackServices>>, TError,{serviceName: string;vrackServices: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameVrackServicesVrackServices>>, TError,{serviceName: string;vrackServices: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVrackServiceNameVrackServicesVrackServices>>, {serviceName: string;vrackServices: string}> = (props) => {
          const {serviceName,vrackServices} = props ?? {};

          return  deleteVrackServiceNameVrackServicesVrackServices(serviceName,vrackServices,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVrackServiceNameVrackServicesVrackServicesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVrackServiceNameVrackServicesVrackServices>>>
    
    export type DeleteVrackServiceNameVrackServicesVrackServicesMutationError = unknown

    /**
 * @summary Remove the vrackServices from the vrack
 */
export const useDeleteVrackServiceNameVrackServicesVrackServices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVrackServiceNameVrackServicesVrackServices>>, TError,{serviceName: string;vrackServices: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVrackServiceNameVrackServicesVrackServices>>,
        TError,
        {serviceName: string;vrackServices: string},
        TContext
      > => {

      const mutationOptions = getDeleteVrackServiceNameVrackServicesVrackServicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVrackServiceNameVrackServicesVrackServices = (
    serviceName: string,
    vrackServices: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VrackVrackServicesOVH>(
      {url: `/vrack/${serviceName}/vrackServices/${vrackServices}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVrackServiceNameVrackServicesVrackServicesQueryKey = (serviceName: string,
    vrackServices: string,) => {
    return [`/vrack/${serviceName}/vrackServices/${vrackServices}`] as const;
    }

    
export const getGetVrackServiceNameVrackServicesVrackServicesQueryOptions = <TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError = unknown>(serviceName: string,
    vrackServices: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVrackServiceNameVrackServicesVrackServicesQueryKey(serviceName,vrackServices);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>> = ({ signal }) => getVrackServiceNameVrackServicesVrackServices(serviceName,vrackServices, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && vrackServices), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVrackServiceNameVrackServicesVrackServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>>
export type GetVrackServiceNameVrackServicesVrackServicesQueryError = unknown


export function useGetVrackServiceNameVrackServicesVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError = unknown>(
 serviceName: string,
    vrackServices: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameVrackServicesVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError = unknown>(
 serviceName: string,
    vrackServices: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVrackServiceNameVrackServicesVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError = unknown>(
 serviceName: string,
    vrackServices: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVrackServiceNameVrackServicesVrackServices<TData = Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError = unknown>(
 serviceName: string,
    vrackServices: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVrackServiceNameVrackServicesVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVrackServiceNameVrackServicesVrackServicesQueryOptions(serviceName,vrackServices,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





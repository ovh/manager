/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostVrackServiceNameVrackServicesBody = {
  /** vrackServices service name */
  vrackServices: string;
};

export type PostVrackServiceNameOvhCloudConnectBody = {
  /** ovhCloudConnect service name */
  ovhCloudConnect: string;
};

export type PostVrackServiceNameLegacyVrackBody = {
  legacyVrack: string;
};

export type PostVrackServiceNameIpv6Ipv6RoutedSubrangeBody = {
  /** nexthop to configure for your routed subrange (must be part of bridged subrange) */
  nexthop: Ipv6OVH;
  /** subrange to route into your vrack */
  routedSubrange: Ipv6BlockOVH;
};

export type PostVrackServiceNameIpv6Body = {
  /** Your IP v6 block */
  block: Ipv6BlockOVH;
};

export type PostVrackServiceNameIpLoadbalancingBody = {
  /** Your ipLoadbalancing */
  ipLoadbalancing: string;
};

export type PostVrackServiceNameIpIpAnnounceInZoneBody = {
  /** Zone to announce in */
  zone: VrackVrackZoneEnumOVH;
};

export type PostVrackServiceNameIpBody = {
  /** Your IP block */
  block: IpBlockOVH;
};

export type PostVrackServiceNameDedicatedServerInterfaceBody = {
  /** Dedicated server interface to add  */
  dedicatedServerInterface: string;
};

export type PostVrackServiceNameDedicatedServerBody = {
  /** Dedicated server to add  */
  dedicatedServer: string;
};

export type PostVrackServiceNameDedicatedConnectBody = {
  /** Hostname of the network device where the dedicatedConnect link is connected to */
  entryPointSwitch: string;
  /** A name for the dedicatedConnect link */
  name: string;
  /** Vlan id of the dedicated link on OVH's G5 router */
  vlanId: number;
};

export type PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveBody = {
  /** The internal name of your target vrack */
  targetServiceName: string;
};

export type PostVrackServiceNameDedicatedCloudBody = {
  dedicatedCloud: string;
};

export type PostVrackServiceNameConfirmTerminationBody = {
  /** Commentary about your termination request */
  commentary?: string;
  /** What next after your termination request */
  futureUse?: ServiceTerminationFutureUseEnumOVH;
  /** Reason of your termination request */
  reason?: ServiceTerminationReasonEnumOVH;
  /** The termination token sent by email to the admin contact */
  token: string;
};

export type PostVrackServiceNameCloudProjectBody = {
  /** publicCloud project to add */
  project: string;
};

export type PostVrackServiceNameChangeContactBody = {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
};

export type GetVrackServiceNameAllowedServicesParams = {
/**
 * Filter on a specific service family
 */
serviceFamily?: VrackAllowedServiceEnumOVH;
};

export type GetVrackParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * IAM resource metadata
 * @nullable
 */
export type VrackVrackWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * vrack
 */
export interface VrackVrackWithIAMOVH {
  /** yourvrackdescription */
  description?: string;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: VrackVrackWithIAMOVHIam;
  /** yourvrackname */
  name?: string;
}

/**
 * vrackServices in vrack
 */
export interface VrackVrackServicesOVH {
  /** vrack name */
  readonly vrack?: string;
  /** vrackServices service name */
  readonly vrackServices?: string;
}

/**
 * vrack
 */
export interface VrackVrackOVH {
  /** yourvrackdescription */
  description?: string;
  /** yourvrackname */
  name?: string;
}

/**
 * Routed subranges within your IP v6 block
 */
export interface VrackRoutedSubrangeOVH {
  /** nexthop used as a gateway for your routed subrange */
  readonly nexthop?: Ipv6OVH;
  /** subrange routed into your vrack */
  readonly routedSubrange?: Ipv6BlockOVH;
}

/**
 * A structure describing the public routing option
 */
export interface VrackPublicRoutingOptionOVH {
  /**
   * Global bandwidth for blocks in your vrack (in Mbps)
   * @nullable
   */
  bandwidth?: number | null;
}

/**
 * vrack datacenter interface
 */
export interface VrackPccDatacenterOVH {
  /** Your dedicatedCloud datacenter name */
  readonly datacenter?: string;
  /** Your dedicatedCloud name */
  readonly dedicatedCloud?: string;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * ovhCloudConnect in vrack
 */
export interface VrackOvhCloudConnectOVH {
  /** ovhCloudConnect service name */
  readonly ovhCloudConnect?: string;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * interface between legacy vrack (vrackXXXX) and vrack (pn-XXXX)
 */
export interface VrackLegacyVrackOVH {
  /** your legacy vrack service */
  readonly legacyVrack?: string;
  /** vlan to set on legacy vrack equipments */
  readonly vlanId?: number;
}

/**
 * IP v6 block in vrack
 */
export interface VrackIpv6OVH {
  /** Your IP v6 block */
  readonly ipv6?: Ipv6BlockOVH;
}

/**
 * ipLoadbalancing in vrack
 */
export interface VrackIplbOVH {
  /** Your ipLoadbalancing */
  readonly ipLoadbalancing?: string;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * Where you want your block announced on the network
 * @nullable
 */
export type VrackIpOVHZone = VrackVrackZoneEnumOVH | null;

/**
 * Your gateway
 * @nullable
 */
export type VrackIpOVHGateway = IpBlockOVH | null;

/**
 * IP block in vrack
 */
export interface VrackIpOVH {
  /**
   * Your gateway
   * @nullable
   */
  readonly gateway?: VrackIpOVHGateway;
  /** Your IP block */
  readonly ip?: IpBlockOVH;
  /**
   * Where you want your block announced on the network
   * @nullable
   */
  readonly zone?: VrackIpOVHZone;
}

/**
 * vrack dedicated server interfaces
 */
export interface VrackDedicatedServerInterfaceOVH {
  /** Dedicated Server Interface */
  readonly dedicatedServerInterface?: string;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * vrack dedicated server interfaces (LEGACY)
 */
export interface VrackDedicatedServerOVH {
  /** Dedicated Server */
  readonly dedicatedServer?: string;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * vrack dedicated connect interface
 */
export interface VrackDedicatedConnectOVH {
  /** A name for your dedicatedConnect link */
  name?: string;
}

/**
 * VMware on OVHcloud vRack link
 */
export interface VrackDedicatedCloudOVH {
  /** your dedicated cloud service */
  readonly dedicatedCloud?: string;
  /**
   * Dedicated cloud vlanId used
   * @nullable
   */
  readonly vlanId?: number | null;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * PublicCloud project in vrack
 */
export interface VrackCloudProjectOVH {
  /** publicCloud project */
  readonly project?: string;
  /** vrack name */
  readonly vrack?: string;
}

/**
 * Bridged subrange within your IP v6 block
 */
export interface VrackBridgedSubrangeOVH {
  /** subrange bridged into your vrack */
  readonly bridgedSubrange?: Ipv6BlockOVH;
  /** Your gateway */
  readonly gateway?: Ipv6OVH;
  /** Slaac status */
  slaac?: VrackSlaacEnumOVH;
}

/**
 * Possible values for vrack zone
 */
export type VrackVrackZoneEnumOVH = typeof VrackVrackZoneEnumOVH[keyof typeof VrackVrackZoneEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VrackVrackZoneEnumOVH = {
  bhs: 'bhs',
  fra1: 'fra1',
  gra: 'gra',
  lon1: 'lon1',
  pdx1: 'pdx1',
  rbx: 'rbx',
  sbg: 'sbg',
  sgp1: 'sgp1',
  syd1: 'syd1',
  syd2: 'syd2',
  was1: 'was1',
  waw: 'waw',
  yyz: 'yyz',
} as const;

/**
 * All states a vRack Task can be in
 */
export type VrackTaskStatusEnumOVH = typeof VrackTaskStatusEnumOVH[keyof typeof VrackTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VrackTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  init: 'init',
  todo: 'todo',
} as const;

/**
 * vrack tasks
 */
export interface VrackTaskOVH {
  readonly function?: string;
  readonly id?: number;
  /** @nullable */
  readonly lastUpdate?: string | null;
  /** @nullable */
  readonly orderId?: number | null;
  /** @nullable */
  readonly serviceName?: string | null;
  /** Task status */
  readonly status?: VrackTaskStatusEnumOVH;
  /** @nullable */
  readonly targetDomain?: string | null;
  /** @nullable */
  readonly todoDate?: string | null;
}

/**
 * Possible values for slaac
 */
export type VrackSlaacEnumOVH = typeof VrackSlaacEnumOVH[keyof typeof VrackSlaacEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VrackSlaacEnumOVH = {
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * Dedicated server interfaces allowed for this vRack
 */
export interface VrackEligibleDedicatedServerInterfacesOVH {
  /** The name of the dedicatedServer */
  readonly dedicatedServer?: string;
  /** The unique identifier of the dedicatedServerInterface */
  readonly dedicatedServerInterface?: string;
  /** The name of the dedicatedServerInterface */
  readonly name?: string;
}

/**
 * Possible values for vrack allowed service
 */
export type VrackAllowedServiceEnumOVH = typeof VrackAllowedServiceEnumOVH[keyof typeof VrackAllowedServiceEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VrackAllowedServiceEnumOVH = {
  cloudProject: 'cloudProject',
  dedicatedCloud: 'dedicatedCloud',
  dedicatedCloudDatacenter: 'dedicatedCloudDatacenter',
  dedicatedConnect: 'dedicatedConnect',
  dedicatedServer: 'dedicatedServer',
  dedicatedServerInterface: 'dedicatedServerInterface',
  ip: 'ip',
  ipLoadbalancing: 'ipLoadbalancing',
  ipv6: 'ipv6',
  legacyVrack: 'legacyVrack',
  ovhCloudConnect: 'ovhCloudConnect',
  vrackServices: 'vrackServices',
} as const;

/**
 * A structure giving all dedicated server interfaces allowed for this vrack
 */
export interface VrackAllowedDedicatedServerInterfacesOVH {
  /** the name of dedicatedServer */
  dedicatedServer?: string;
  /** the unique identifier of dedicatedServerInterface */
  dedicatedServerInterface?: string;
  /** the name of dedicatedServerInterface */
  name?: string;
}

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Details about a non-expiring Service
 */
export interface ServicesNonExpiringServiceOVH {
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * All reasons you can provide for a service termination
 */
export type ServiceTerminationReasonEnumOVH = typeof ServiceTerminationReasonEnumOVH[keyof typeof ServiceTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationReasonEnumOVH = {
  FEATURES_DONT_SUIT_ME: 'FEATURES_DONT_SUIT_ME',
  LACK_OF_PERFORMANCES: 'LACK_OF_PERFORMANCES',
  MIGRATED_TO_ANOTHER_OVH_PRODUCT: 'MIGRATED_TO_ANOTHER_OVH_PRODUCT',
  MIGRATED_TO_COMPETITOR: 'MIGRATED_TO_COMPETITOR',
  NOT_ENOUGH_RECOGNITION: 'NOT_ENOUGH_RECOGNITION',
  NOT_NEEDED_ANYMORE: 'NOT_NEEDED_ANYMORE',
  NOT_RELIABLE: 'NOT_RELIABLE',
  NO_ANSWER: 'NO_ANSWER',
  OTHER: 'OTHER',
  PRODUCT_DIMENSION_DONT_SUIT_ME: 'PRODUCT_DIMENSION_DONT_SUIT_ME',
  PRODUCT_TOOLS_DONT_SUIT_ME: 'PRODUCT_TOOLS_DONT_SUIT_ME',
  TOO_EXPENSIVE: 'TOO_EXPENSIVE',
  TOO_HARD_TO_USE: 'TOO_HARD_TO_USE',
  UNSATIFIED_BY_CUSTOMER_SUPPORT: 'UNSATIFIED_BY_CUSTOMER_SUPPORT',
} as const;

/**
 * All future uses you can provide for a service termination
 */
export type ServiceTerminationFutureUseEnumOVH = typeof ServiceTerminationFutureUseEnumOVH[keyof typeof ServiceTerminationFutureUseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationFutureUseEnumOVH = {
  NOT_REPLACING_SERVICE: 'NOT_REPLACING_SERVICE',
  OTHER: 'OTHER',
  SUBSCRIBE_AN_OTHER_SERVICE: 'SUBSCRIBE_AN_OTHER_SERVICE',
  SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR',
  SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR',
} as const;

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * Eligible services for this vRack
 */
export interface VrackEligibleServicesOVH {
  /**
   * List of publicCloud projects allowed to be connected to this vRack
   * @nullable
   */
  readonly cloudProject?: readonly string[] | null;
  /**
   * List of dedicated cloud allowed to be connected to this vRack
   * @nullable
   */
  readonly dedicatedCloud?: readonly string[] | null;
  /**
   * List of dedicated cloud datacenters allowed to be connected to this vRack
   * @nullable
   */
  readonly dedicatedCloudDatacenter?: readonly string[] | null;
  /**
   * List of dedicated connect links allowed to be connected to this vRack
   * @nullable
   */
  readonly dedicatedConnect?: readonly string[] | null;
  /**
   * List of dedicated servers allowed to be connected to this vRack
   * @nullable
   */
  readonly dedicatedServer?: readonly string[] | null;
  /**
   * List of dedicated server interfaces allowed to be connected to this vRack
   * @nullable
   */
  readonly dedicatedServerInterface?: readonly VrackEligibleDedicatedServerInterfacesOVH[] | null;
  /**
   * List of blocks allowed to be connected to this vRack
   * @nullable
   */
  readonly ip?: readonly IpBlockOVH[] | null;
  /**
   * List of ipLoadbalancing allowed to be connected to this vRack
   * @nullable
   */
  readonly ipLoadbalancing?: readonly string[] | null;
  /**
   * List of ipv6 blocks allowed to be connected to this vRack
   * @nullable
   */
  readonly ipv6?: readonly Ipv6BlockOVH[] | null;
  /**
   * List of legacy vRack (1.0) allowed to be connected to this vRack
   * @nullable
   */
  readonly legacyVrack?: readonly string[] | null;
  /**
   * List of the ovhCloudConnect services allowed to be connected to this vRack
   * @nullable
   */
  readonly ovhCloudConnect?: readonly string[] | null;
  /**
   * List of the vrackServices allowed to be connected to this vRack
   * @nullable
   */
  readonly vrackServices?: readonly string[] | null;
}

/**
 * Eligible services call response
 */
export interface VrackEligibleServicesResponseOVH {
  /** Creation date of the call */
  readonly createdAt?: string;
  /** List of services where an error has been encountered */
  readonly errors?: readonly string[];
  /** Eligible services for this vRack */
  readonly result?: VrackEligibleServicesOVH;
  /** Status of the call */
  readonly status?: string;
}

/**
 * A structure given all service allowed for this vrack
 */
export interface VrackAllowedServicesOVH {
  /**
   * list of publicCloud projects allowed to be connected to vrack
   * @nullable
   */
  cloudProject?: string[] | null;
  /**
   * list of dedicated cloud allowed to be connected to vrack
   * @nullable
   */
  dedicatedCloud?: string[] | null;
  /**
   * list of dedicated cloud datacenters allowed to be connected to vrack
   * @nullable
   */
  dedicatedCloudDatacenter?: string[] | null;
  /**
   * list of dedicated connect links allowed to be connected to vrack
   * @nullable
   */
  dedicatedConnect?: string[] | null;
  /**
   * list of dedicated servers allowed to be connected to vrack
   * @nullable
   */
  dedicatedServer?: string[] | null;
  /**
   * list of dedicated server interfaces allowed to be connected to vrack
   * @nullable
   */
  dedicatedServerInterface?: VrackAllowedDedicatedServerInterfacesOVH[] | null;
  /**
   * list of blocks allowed to be connected to vrack
   * @nullable
   */
  ip?: IpBlockOVH[] | null;
  /**
   * list of ipLoadbalancing allowed to be connected to vrack
   * @nullable
   */
  ipLoadbalancing?: string[] | null;
  /**
   * list of ipv6 blocks allowed to be connected to vrack
   * @nullable
   */
  ipv6?: Ipv6BlockOVH[] | null;
  /**
   * list of legacy vrack (1.0) allowed to be connected to vrack
   * @nullable
   */
  legacyVrack?: string[] | null;
  /**
   * List of the ovhCloudConnect services allowed to be connected to vrack
   * @nullable
   */
  ovhCloudConnect?: string[] | null;
  /**
   * List of the vrackServices allowed to be connected to vrack
   * @nullable
   */
  vrackServices?: string[] | null;
}

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * distincts MRTG type
 */
export type DedicatedServerMrtgTypeEnumOVH = typeof DedicatedServerMrtgTypeEnumOVH[keyof typeof DedicatedServerMrtgTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedicatedServerMrtgTypeEnumOVH = {
  'errors:download': 'errors:download',
  'errors:upload': 'errors:upload',
  'packets:download': 'packets:download',
  'packets:upload': 'packets:upload',
  'traffic:download': 'traffic:download',
  'traffic:upload': 'traffic:upload',
} as const;

/**
 * @nullable
 */
export type DedicatedServerMrtgTimestampValueOVHValue = ComplexTypeUnitAndValueDoubleOVH | null;

/**
 * A timestamp associated to a value
 */
export interface DedicatedServerMrtgTimestampValueOVH {
  timestamp?: number;
  /** @nullable */
  value?: DedicatedServerMrtgTimestampValueOVHValue;
}

/**
 * distincts MRTG period
 */
export type DedicatedServerMrtgPeriodEnumOVH = typeof DedicatedServerMrtgPeriodEnumOVH[keyof typeof DedicatedServerMrtgPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedicatedServerMrtgPeriodEnumOVH = {
  daily: 'daily',
  hourly: 'hourly',
  monthly: 'monthly',
  weekly: 'weekly',
  yearly: 'yearly',
} as const;

/**
 * A numeric value tagged with its unit
 */
export interface ComplexTypeUnitAndValueDoubleOVH {
  unit?: string;
  value?: number;
}


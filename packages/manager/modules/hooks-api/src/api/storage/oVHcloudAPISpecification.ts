/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetStorageNetappParams,
  GetStorageNetappServiceNameNetworkParams,
  GetStorageNetappServiceNameShareParams,
  GetStorageNetappServiceNameShareShareIdSnapshotParams,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH,
  StorageNetAppNetworkOVH,
  StorageNetAppServiceOVH,
  StorageNetAppServiceUpdateOVH,
  StorageNetAppServiceWithIAMOVH,
  StorageNetAppShareACLRuleOVH,
  StorageNetAppShareAccessPathOVH,
  StorageNetAppShareExtendOrShrinkOVH,
  StorageNetAppShareOVH,
  StorageNetAppShareRevertToSnapshotOVH,
  StorageNetAppShareSnapshotOVH,
  StorageNetAppShareSnapshotPolicyOVH,
  StorageNetAppShareSnapshotPolicyUpdateOVH,
  StorageNetAppShareSnapshotReserveOVH,
  StorageNetAppShareSnapshotReserveUpdateOVH,
  StorageNetAppShareSnapshotUpdateOVH,
  StorageNetAppShareUpdateOVH,
  StorageNetAppSnapshotPolicyOVH,
  StorageNetAppSnapshotPolicyUpdateOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getStorageNetapp = (
    params?: GetStorageNetappParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppServiceWithIAMOVH[]>(
      {url: `/storage/netapp`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStorageNetappQueryKey = (params?: GetStorageNetappParams,) => {
    return [`/storage/netapp`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStorageNetappQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetapp>>, TError = unknown>(params?: GetStorageNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetapp>>> = ({ signal }) => getStorageNetapp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetapp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetapp>>>
export type GetStorageNetappQueryError = unknown


export function useGetStorageNetapp<TData = Awaited<ReturnType<typeof getStorageNetapp>>, TError = unknown>(
 params: undefined |  GetStorageNetappParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetapp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetapp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetapp<TData = Awaited<ReturnType<typeof getStorageNetapp>>, TError = unknown>(
 params?: GetStorageNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetapp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetapp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetapp<TData = Awaited<ReturnType<typeof getStorageNetapp>>, TError = unknown>(
 params?: GetStorageNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetStorageNetapp<TData = Awaited<ReturnType<typeof getStorageNetapp>>, TError = unknown>(
 params?: GetStorageNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service details
 */
export const getStorageNetappServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppServiceWithIAMOVH>(
      {url: `/storage/netapp/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameQueryKey = (serviceName: string,) => {
    return [`/storage/netapp/${serviceName}`] as const;
    }

    
export const getGetStorageNetappServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceName>>> = ({ signal }) => getStorageNetappServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceName>>>
export type GetStorageNetappServiceNameQueryError = unknown


export function useGetStorageNetappServiceName<TData = Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceName<TData = Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceName<TData = Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service details
 */

export function useGetStorageNetappServiceName<TData = Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service
 */
export const putStorageNetappServiceName = (
    serviceName: string,
    storageNetAppServiceUpdateOVH: StorageNetAppServiceUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<StorageNetAppServiceOVH>(
      {url: `/storage/netapp/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppServiceUpdateOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceName>>, TError,{serviceName: string;data: StorageNetAppServiceUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceName>>, TError,{serviceName: string;data: StorageNetAppServiceUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceName>>, {serviceName: string;data: StorageNetAppServiceUpdateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putStorageNetappServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceName>>>
    export type PutStorageNetappServiceNameMutationBody = StorageNetAppServiceUpdateOVH
    export type PutStorageNetappServiceNameMutationError = unknown

    /**
 * @summary Update service
 */
export const usePutStorageNetappServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceName>>, TError,{serviceName: string;data: StorageNetAppServiceUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceName>>,
        TError,
        {serviceName: string;data: StorageNetAppServiceUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postStorageNetappServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/storage/netapp/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postStorageNetappServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameChangeContact>>>
    export type PostStorageNetappServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostStorageNetappServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostStorageNetappServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postStorageNetappServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/storage/netapp/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postStorageNetappServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameConfirmTermination>>>
    export type PostStorageNetappServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostStorageNetappServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostStorageNetappServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List networks
 */
export const getStorageNetappServiceNameNetwork = (
    serviceName: string,
    params?: GetStorageNetappServiceNameNetworkParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppNetworkOVH[]>(
      {url: `/storage/netapp/${serviceName}/network`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameNetworkQueryKey = (serviceName: string,
    params?: GetStorageNetappServiceNameNetworkParams,) => {
    return [`/storage/netapp/${serviceName}/network`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStorageNetappServiceNameNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError = unknown>(serviceName: string,
    params?: GetStorageNetappServiceNameNetworkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameNetworkQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>> = ({ signal }) => getStorageNetappServiceNameNetwork(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>>
export type GetStorageNetappServiceNameNetworkQueryError = unknown


export function useGetStorageNetappServiceNameNetwork<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetStorageNetappServiceNameNetworkParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameNetwork<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError = unknown>(
 serviceName: string,
    params?: GetStorageNetappServiceNameNetworkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameNetwork<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError = unknown>(
 serviceName: string,
    params?: GetStorageNetappServiceNameNetworkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List networks
 */

export function useGetStorageNetappServiceNameNetwork<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError = unknown>(
 serviceName: string,
    params?: GetStorageNetappServiceNameNetworkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameNetworkQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get network details
 */
export const getStorageNetappServiceNameNetworkNetworkId = (
    serviceName: string,
    networkId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppNetworkOVH>(
      {url: `/storage/netapp/${serviceName}/network/${networkId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameNetworkNetworkIdQueryKey = (serviceName: string,
    networkId: string,) => {
    return [`/storage/netapp/${serviceName}/network/${networkId}`] as const;
    }

    
export const getGetStorageNetappServiceNameNetworkNetworkIdQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError = unknown>(serviceName: string,
    networkId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameNetworkNetworkIdQueryKey(serviceName,networkId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>> = ({ signal }) => getStorageNetappServiceNameNetworkNetworkId(serviceName,networkId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && networkId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameNetworkNetworkIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>>
export type GetStorageNetappServiceNameNetworkNetworkIdQueryError = unknown


export function useGetStorageNetappServiceNameNetworkNetworkId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError = unknown>(
 serviceName: string,
    networkId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameNetworkNetworkId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError = unknown>(
 serviceName: string,
    networkId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameNetworkNetworkId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError = unknown>(
 serviceName: string,
    networkId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get network details
 */

export function useGetStorageNetappServiceNameNetworkNetworkId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError = unknown>(
 serviceName: string,
    networkId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameNetworkNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameNetworkNetworkIdQueryOptions(serviceName,networkId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getStorageNetappServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/storage/netapp/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/storage/netapp/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetStorageNetappServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>> = ({ signal }) => getStorageNetappServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>>
export type GetStorageNetappServiceNameServiceInfosQueryError = unknown


export function useGetStorageNetappServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetStorageNetappServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putStorageNetappServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putStorageNetappServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceNameServiceInfos>>>
    export type PutStorageNetappServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutStorageNetappServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutStorageNetappServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available shares
 */
export const getStorageNetappServiceNameShare = (
    serviceName: string,
    params?: GetStorageNetappServiceNameShareParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareOVH[]>(
      {url: `/storage/netapp/${serviceName}/share`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareQueryKey = (serviceName: string,
    params?: GetStorageNetappServiceNameShareParams,) => {
    return [`/storage/netapp/${serviceName}/share`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStorageNetappServiceNameShareQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError = unknown>(serviceName: string,
    params?: GetStorageNetappServiceNameShareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>> = ({ signal }) => getStorageNetappServiceNameShare(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>>
export type GetStorageNetappServiceNameShareQueryError = unknown


export function useGetStorageNetappServiceNameShare<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetStorageNetappServiceNameShareParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShare<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError = unknown>(
 serviceName: string,
    params?: GetStorageNetappServiceNameShareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShare<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError = unknown>(
 serviceName: string,
    params?: GetStorageNetappServiceNameShareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available shares
 */

export function useGetStorageNetappServiceNameShare<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError = unknown>(
 serviceName: string,
    params?: GetStorageNetappServiceNameShareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShare>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a share
 */
export const postStorageNetappServiceNameShare = (
    serviceName: string,
    storageNetAppShareOVH: NonReadonly<StorageNetAppShareOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareOVH>(
      {url: `/storage/netapp/${serviceName}/share`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShare>>, TError,{serviceName: string;data: NonReadonly<StorageNetAppShareOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShare>>, TError,{serviceName: string;data: NonReadonly<StorageNetAppShareOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShare>>, {serviceName: string;data: NonReadonly<StorageNetAppShareOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postStorageNetappServiceNameShare(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShare>>>
    export type PostStorageNetappServiceNameShareMutationBody = NonReadonly<StorageNetAppShareOVH>
    export type PostStorageNetappServiceNameShareMutationError = unknown

    /**
 * @summary Create a share
 */
export const usePostStorageNetappServiceNameShare = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShare>>, TError,{serviceName: string;data: NonReadonly<StorageNetAppShareOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShare>>,
        TError,
        {serviceName: string;data: NonReadonly<StorageNetAppShareOVH>},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a share
 */
export const deleteStorageNetappServiceNameShareShareId = (
    serviceName: string,
    shareId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStorageNetappServiceNameShareShareIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareId>>, TError,{serviceName: string;shareId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareId>>, TError,{serviceName: string;shareId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareId>>, {serviceName: string;shareId: string}> = (props) => {
          const {serviceName,shareId} = props ?? {};

          return  deleteStorageNetappServiceNameShareShareId(serviceName,shareId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStorageNetappServiceNameShareShareIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareId>>>
    
    export type DeleteStorageNetappServiceNameShareShareIdMutationError = unknown

    /**
 * @summary Delete a share
 */
export const useDeleteStorageNetappServiceNameShareShareId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareId>>, TError,{serviceName: string;shareId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareId>>,
        TError,
        {serviceName: string;shareId: string},
        TContext
      > => {

      const mutationOptions = getDeleteStorageNetappServiceNameShareShareIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get share details
 */
export const getStorageNetappServiceNameShareShareId = (
    serviceName: string,
    shareId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdQueryKey = (serviceName: string,
    shareId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError = unknown>(serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdQueryKey(serviceName,shareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>> = ({ signal }) => getStorageNetappServiceNameShareShareId(serviceName,shareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>>
export type GetStorageNetappServiceNameShareShareIdQueryError = unknown


export function useGetStorageNetappServiceNameShareShareId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError = unknown>(
 serviceName: string,
    shareId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get share details
 */

export function useGetStorageNetappServiceNameShareShareId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdQueryOptions(serviceName,shareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a share
 */
export const putStorageNetappServiceNameShareShareId = (
    serviceName: string,
    shareId: string,
    storageNetAppShareUpdateOVH: StorageNetAppShareUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<StorageNetAppShareOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareUpdateOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameShareShareIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareId>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareId>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareId>>, {serviceName: string;shareId: string;data: StorageNetAppShareUpdateOVH}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  putStorageNetappServiceNameShareShareId(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameShareShareIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareId>>>
    export type PutStorageNetappServiceNameShareShareIdMutationBody = StorageNetAppShareUpdateOVH
    export type PutStorageNetappServiceNameShareShareIdMutationError = unknown

    /**
 * @summary Update a share
 */
export const usePutStorageNetappServiceNameShareShareId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareId>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareId>>,
        TError,
        {serviceName: string;shareId: string;data: StorageNetAppShareUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameShareShareIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available access paths
 */
export const getStorageNetappServiceNameShareShareIdAccessPath = (
    serviceName: string,
    shareId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareAccessPathOVH[]>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/accessPath`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdAccessPathQueryKey = (serviceName: string,
    shareId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/accessPath`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdAccessPathQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError = unknown>(serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdAccessPathQueryKey(serviceName,shareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdAccessPath(serviceName,shareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdAccessPathQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>>
export type GetStorageNetappServiceNameShareShareIdAccessPathQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdAccessPath<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError = unknown>(
 serviceName: string,
    shareId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAccessPath<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAccessPath<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available access paths
 */

export function useGetStorageNetappServiceNameShareShareIdAccessPath<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPath>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdAccessPathQueryOptions(serviceName,shareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get access path details
 */
export const getStorageNetappServiceNameShareShareIdAccessPathAccessPathId = (
    serviceName: string,
    shareId: string,
    accessPathId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareAccessPathOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/accessPath/${accessPathId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdQueryKey = (serviceName: string,
    shareId: string,
    accessPathId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/accessPath/${accessPathId}`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError = unknown>(serviceName: string,
    shareId: string,
    accessPathId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdQueryKey(serviceName,shareId,accessPathId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdAccessPathAccessPathId(serviceName,shareId,accessPathId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId && accessPathId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>>
export type GetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdAccessPathAccessPathId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    accessPathId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAccessPathAccessPathId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    accessPathId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAccessPathAccessPathId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    accessPathId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get access path details
 */

export function useGetStorageNetappServiceNameShareShareIdAccessPathAccessPathId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    accessPathId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAccessPathAccessPathId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdQueryOptions(serviceName,shareId,accessPathId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available ACLs
 */
export const getStorageNetappServiceNameShareShareIdAcl = (
    serviceName: string,
    shareId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareACLRuleOVH[]>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/acl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdAclQueryKey = (serviceName: string,
    shareId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/acl`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdAclQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError = unknown>(serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdAclQueryKey(serviceName,shareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdAcl(serviceName,shareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdAclQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>>
export type GetStorageNetappServiceNameShareShareIdAclQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdAcl<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError = unknown>(
 serviceName: string,
    shareId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAcl<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAcl<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available ACLs
 */

export function useGetStorageNetappServiceNameShareShareIdAcl<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAcl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdAclQueryOptions(serviceName,shareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an ACL
 */
export const postStorageNetappServiceNameShareShareIdAcl = (
    serviceName: string,
    shareId: string,
    storageNetAppShareACLRuleOVH: NonReadonly<StorageNetAppShareACLRuleOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareACLRuleOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/acl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareACLRuleOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareShareIdAclMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdAcl>>, TError,{serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareACLRuleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdAcl>>, TError,{serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareACLRuleOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdAcl>>, {serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareACLRuleOVH>}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  postStorageNetappServiceNameShareShareIdAcl(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareShareIdAclMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdAcl>>>
    export type PostStorageNetappServiceNameShareShareIdAclMutationBody = NonReadonly<StorageNetAppShareACLRuleOVH>
    export type PostStorageNetappServiceNameShareShareIdAclMutationError = unknown

    /**
 * @summary Create an ACL
 */
export const usePostStorageNetappServiceNameShareShareIdAcl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdAcl>>, TError,{serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareACLRuleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdAcl>>,
        TError,
        {serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareACLRuleOVH>},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareShareIdAclMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an ACL
 */
export const deleteStorageNetappServiceNameShareShareIdAclAclRuleId = (
    serviceName: string,
    shareId: string,
    aclRuleId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/acl/${aclRuleId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStorageNetappServiceNameShareShareIdAclAclRuleIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError,{serviceName: string;shareId: string;aclRuleId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError,{serviceName: string;shareId: string;aclRuleId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdAclAclRuleId>>, {serviceName: string;shareId: string;aclRuleId: string}> = (props) => {
          const {serviceName,shareId,aclRuleId} = props ?? {};

          return  deleteStorageNetappServiceNameShareShareIdAclAclRuleId(serviceName,shareId,aclRuleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStorageNetappServiceNameShareShareIdAclAclRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdAclAclRuleId>>>
    
    export type DeleteStorageNetappServiceNameShareShareIdAclAclRuleIdMutationError = unknown

    /**
 * @summary Delete an ACL
 */
export const useDeleteStorageNetappServiceNameShareShareIdAclAclRuleId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError,{serviceName: string;shareId: string;aclRuleId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdAclAclRuleId>>,
        TError,
        {serviceName: string;shareId: string;aclRuleId: string},
        TContext
      > => {

      const mutationOptions = getDeleteStorageNetappServiceNameShareShareIdAclAclRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get ACL details
 */
export const getStorageNetappServiceNameShareShareIdAclAclRuleId = (
    serviceName: string,
    shareId: string,
    aclRuleId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareACLRuleOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/acl/${aclRuleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdAclAclRuleIdQueryKey = (serviceName: string,
    shareId: string,
    aclRuleId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/acl/${aclRuleId}`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdAclAclRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError = unknown>(serviceName: string,
    shareId: string,
    aclRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdAclAclRuleIdQueryKey(serviceName,shareId,aclRuleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdAclAclRuleId(serviceName,shareId,aclRuleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId && aclRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdAclAclRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>>
export type GetStorageNetappServiceNameShareShareIdAclAclRuleIdQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdAclAclRuleId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    aclRuleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAclAclRuleId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    aclRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdAclAclRuleId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    aclRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get ACL details
 */

export function useGetStorageNetappServiceNameShareShareIdAclAclRuleId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    aclRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdAclAclRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdAclAclRuleIdQueryOptions(serviceName,shareId,aclRuleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Extend share size
 */
export const postStorageNetappServiceNameShareShareIdExtend = (
    serviceName: string,
    shareId: string,
    storageNetAppShareExtendOrShrinkOVH: StorageNetAppShareExtendOrShrinkOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/extend`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareExtendOrShrinkOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareShareIdExtendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdExtend>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdExtend>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdExtend>>, {serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  postStorageNetappServiceNameShareShareIdExtend(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareShareIdExtendMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdExtend>>>
    export type PostStorageNetappServiceNameShareShareIdExtendMutationBody = StorageNetAppShareExtendOrShrinkOVH
    export type PostStorageNetappServiceNameShareShareIdExtendMutationError = unknown

    /**
 * @summary Extend share size
 */
export const usePostStorageNetappServiceNameShareShareIdExtend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdExtend>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdExtend>>,
        TError,
        {serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareShareIdExtendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revert a share to it's latest snapshot
 */
export const postStorageNetappServiceNameShareShareIdRevert = (
    serviceName: string,
    shareId: string,
    storageNetAppShareRevertToSnapshotOVH: StorageNetAppShareRevertToSnapshotOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/revert`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareRevertToSnapshotOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareShareIdRevertMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdRevert>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareRevertToSnapshotOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdRevert>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareRevertToSnapshotOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdRevert>>, {serviceName: string;shareId: string;data: StorageNetAppShareRevertToSnapshotOVH}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  postStorageNetappServiceNameShareShareIdRevert(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareShareIdRevertMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdRevert>>>
    export type PostStorageNetappServiceNameShareShareIdRevertMutationBody = StorageNetAppShareRevertToSnapshotOVH
    export type PostStorageNetappServiceNameShareShareIdRevertMutationError = unknown

    /**
 * @summary Revert a share to it's latest snapshot
 */
export const usePostStorageNetappServiceNameShareShareIdRevert = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdRevert>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareRevertToSnapshotOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdRevert>>,
        TError,
        {serviceName: string;shareId: string;data: StorageNetAppShareRevertToSnapshotOVH},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareShareIdRevertMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Shrink share size
 */
export const postStorageNetappServiceNameShareShareIdShrink = (
    serviceName: string,
    shareId: string,
    storageNetAppShareExtendOrShrinkOVH: StorageNetAppShareExtendOrShrinkOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/shrink`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareExtendOrShrinkOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareShareIdShrinkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdShrink>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdShrink>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdShrink>>, {serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  postStorageNetappServiceNameShareShareIdShrink(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareShareIdShrinkMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdShrink>>>
    export type PostStorageNetappServiceNameShareShareIdShrinkMutationBody = StorageNetAppShareExtendOrShrinkOVH
    export type PostStorageNetappServiceNameShareShareIdShrinkMutationError = unknown

    /**
 * @summary Shrink share size
 */
export const usePostStorageNetappServiceNameShareShareIdShrink = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdShrink>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdShrink>>,
        TError,
        {serviceName: string;shareId: string;data: StorageNetAppShareExtendOrShrinkOVH},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareShareIdShrinkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available snapshots
 */
export const getStorageNetappServiceNameShareShareIdSnapshot = (
    serviceName: string,
    shareId: string,
    params?: GetStorageNetappServiceNameShareShareIdSnapshotParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotOVH[]>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshot`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdSnapshotQueryKey = (serviceName: string,
    shareId: string,
    params?: GetStorageNetappServiceNameShareShareIdSnapshotParams,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/snapshot`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdSnapshotQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError = unknown>(serviceName: string,
    shareId: string,
    params?: GetStorageNetappServiceNameShareShareIdSnapshotParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdSnapshotQueryKey(serviceName,shareId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdSnapshot(serviceName,shareId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>>
export type GetStorageNetappServiceNameShareShareIdSnapshotQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdSnapshot<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    params: undefined |  GetStorageNetappServiceNameShareShareIdSnapshotParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshot<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    params?: GetStorageNetappServiceNameShareShareIdSnapshotParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshot<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    params?: GetStorageNetappServiceNameShareShareIdSnapshotParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available snapshots
 */

export function useGetStorageNetappServiceNameShareShareIdSnapshot<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    params?: GetStorageNetappServiceNameShareShareIdSnapshotParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdSnapshotQueryOptions(serviceName,shareId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a snapshot
 */
export const postStorageNetappServiceNameShareShareIdSnapshot = (
    serviceName: string,
    shareId: string,
    storageNetAppShareSnapshotOVH: NonReadonly<StorageNetAppShareSnapshotOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareSnapshotOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareShareIdSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshot>>, TError,{serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareSnapshotOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshot>>, TError,{serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareSnapshotOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshot>>, {serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareSnapshotOVH>}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  postStorageNetappServiceNameShareShareIdSnapshot(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareShareIdSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshot>>>
    export type PostStorageNetappServiceNameShareShareIdSnapshotMutationBody = NonReadonly<StorageNetAppShareSnapshotOVH>
    export type PostStorageNetappServiceNameShareShareIdSnapshotMutationError = unknown

    /**
 * @summary Create a snapshot
 */
export const usePostStorageNetappServiceNameShareShareIdSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshot>>, TError,{serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareSnapshotOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshot>>,
        TError,
        {serviceName: string;shareId: string;data: NonReadonly<StorageNetAppShareSnapshotOVH>},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareShareIdSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a snapshot
 */
export const deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId = (
    serviceName: string,
    shareId: string,
    snapshotId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshot/${snapshotId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError,{serviceName: string;shareId: string;snapshotId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError,{serviceName: string;shareId: string;snapshotId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, {serviceName: string;shareId: string;snapshotId: string}> = (props) => {
          const {serviceName,shareId,snapshotId} = props ?? {};

          return  deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId(serviceName,shareId,snapshotId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>>
    
    export type DeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationError = unknown

    /**
 * @summary Delete a snapshot
 */
export const useDeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError,{serviceName: string;shareId: string;snapshotId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>,
        TError,
        {serviceName: string;shareId: string;snapshotId: string},
        TContext
      > => {

      const mutationOptions = getDeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get snapshot details
 */
export const getStorageNetappServiceNameShareShareIdSnapshotSnapshotId = (
    serviceName: string,
    shareId: string,
    snapshotId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshot/${snapshotId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdQueryKey = (serviceName: string,
    shareId: string,
    snapshotId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/snapshot/${snapshotId}`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError = unknown>(serviceName: string,
    shareId: string,
    snapshotId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdQueryKey(serviceName,shareId,snapshotId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdSnapshotSnapshotId(serviceName,shareId,snapshotId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId && snapshotId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>>
export type GetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdSnapshotSnapshotId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    snapshotId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshotSnapshotId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    snapshotId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshotSnapshotId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    snapshotId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get snapshot details
 */

export function useGetStorageNetappServiceNameShareShareIdSnapshotSnapshotId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError = unknown>(
 serviceName: string,
    shareId: string,
    snapshotId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdQueryOptions(serviceName,shareId,snapshotId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a snapshot
 */
export const putStorageNetappServiceNameShareShareIdSnapshotSnapshotId = (
    serviceName: string,
    shareId: string,
    snapshotId: string,
    storageNetAppShareSnapshotUpdateOVH: StorageNetAppShareSnapshotUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshot/${snapshotId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareSnapshotUpdateOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError,{serviceName: string;shareId: string;snapshotId: string;data: StorageNetAppShareSnapshotUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError,{serviceName: string;shareId: string;snapshotId: string;data: StorageNetAppShareSnapshotUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, {serviceName: string;shareId: string;snapshotId: string;data: StorageNetAppShareSnapshotUpdateOVH}> = (props) => {
          const {serviceName,shareId,snapshotId,data} = props ?? {};

          return  putStorageNetappServiceNameShareShareIdSnapshotSnapshotId(serviceName,shareId,snapshotId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>>
    export type PutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationBody = StorageNetAppShareSnapshotUpdateOVH
    export type PutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationError = unknown

    /**
 * @summary Update a snapshot
 */
export const usePutStorageNetappServiceNameShareShareIdSnapshotSnapshotId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>, TError,{serviceName: string;shareId: string;snapshotId: string;data: StorageNetAppShareSnapshotUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotSnapshotId>>,
        TError,
        {serviceName: string;shareId: string;snapshotId: string;data: StorageNetAppShareSnapshotUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Hold an automatic share snapshot
 */
export const postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold = (
    serviceName: string,
    shareId: string,
    snapshotId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshot/${snapshotId}/hold`, method: 'POST', signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold>>, TError,{serviceName: string;shareId: string;snapshotId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold>>, TError,{serviceName: string;shareId: string;snapshotId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold>>, {serviceName: string;shareId: string;snapshotId: string}> = (props) => {
          const {serviceName,shareId,snapshotId} = props ?? {};

          return  postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold(serviceName,shareId,snapshotId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold>>>
    
    export type PostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldMutationError = unknown

    /**
 * @summary Hold an automatic share snapshot
 */
export const usePostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold>>, TError,{serviceName: string;shareId: string;snapshotId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHold>>,
        TError,
        {serviceName: string;shareId: string;snapshotId: string},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get snapshot policy used by a share
 */
export const getStorageNetappServiceNameShareShareIdSnapshotPolicy = (
    serviceName: string,
    shareId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotPolicyOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshotPolicy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdSnapshotPolicyQueryKey = (serviceName: string,
    shareId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/snapshotPolicy`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdSnapshotPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError = unknown>(serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdSnapshotPolicyQueryKey(serviceName,shareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdSnapshotPolicy(serviceName,shareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdSnapshotPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>>
export type GetStorageNetappServiceNameShareShareIdSnapshotPolicyQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError = unknown>(
 serviceName: string,
    shareId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get snapshot policy used by a share
 */

export function useGetStorageNetappServiceNameShareShareIdSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdSnapshotPolicyQueryOptions(serviceName,shareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update snapshot policy used by a share
 */
export const putStorageNetappServiceNameShareShareIdSnapshotPolicy = (
    serviceName: string,
    shareId: string,
    storageNetAppShareSnapshotPolicyUpdateOVH: StorageNetAppShareSnapshotPolicyUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshotPolicy`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareSnapshotPolicyUpdateOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameShareShareIdSnapshotPolicyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareSnapshotPolicyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareSnapshotPolicyUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotPolicy>>, {serviceName: string;shareId: string;data: StorageNetAppShareSnapshotPolicyUpdateOVH}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  putStorageNetappServiceNameShareShareIdSnapshotPolicy(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameShareShareIdSnapshotPolicyMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotPolicy>>>
    export type PutStorageNetappServiceNameShareShareIdSnapshotPolicyMutationBody = StorageNetAppShareSnapshotPolicyUpdateOVH
    export type PutStorageNetappServiceNameShareShareIdSnapshotPolicyMutationError = unknown

    /**
 * @summary Update snapshot policy used by a share
 */
export const usePutStorageNetappServiceNameShareShareIdSnapshotPolicy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotPolicy>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareSnapshotPolicyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotPolicy>>,
        TError,
        {serviceName: string;shareId: string;data: StorageNetAppShareSnapshotPolicyUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameShareShareIdSnapshotPolicyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get snapshot reserve properties of a share
 */
export const getStorageNetappServiceNameShareShareIdSnapshotReserve = (
    serviceName: string,
    shareId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppShareSnapshotReserveOVH>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshotReserve`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameShareShareIdSnapshotReserveQueryKey = (serviceName: string,
    shareId: string,) => {
    return [`/storage/netapp/${serviceName}/share/${shareId}/snapshotReserve`] as const;
    }

    
export const getGetStorageNetappServiceNameShareShareIdSnapshotReserveQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError = unknown>(serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameShareShareIdSnapshotReserveQueryKey(serviceName,shareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>> = ({ signal }) => getStorageNetappServiceNameShareShareIdSnapshotReserve(serviceName,shareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && shareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameShareShareIdSnapshotReserveQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>>
export type GetStorageNetappServiceNameShareShareIdSnapshotReserveQueryError = unknown


export function useGetStorageNetappServiceNameShareShareIdSnapshotReserve<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError = unknown>(
 serviceName: string,
    shareId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshotReserve<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameShareShareIdSnapshotReserve<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get snapshot reserve properties of a share
 */

export function useGetStorageNetappServiceNameShareShareIdSnapshotReserve<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError = unknown>(
 serviceName: string,
    shareId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameShareShareIdSnapshotReserveQueryOptions(serviceName,shareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update snapshot reserve properties of a share
 */
export const putStorageNetappServiceNameShareShareIdSnapshotReserve = (
    serviceName: string,
    shareId: string,
    storageNetAppShareSnapshotReserveUpdateOVH: StorageNetAppShareSnapshotReserveUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/share/${shareId}/snapshotReserve`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppShareSnapshotReserveUpdateOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameShareShareIdSnapshotReserveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareSnapshotReserveUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareSnapshotReserveUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotReserve>>, {serviceName: string;shareId: string;data: StorageNetAppShareSnapshotReserveUpdateOVH}> = (props) => {
          const {serviceName,shareId,data} = props ?? {};

          return  putStorageNetappServiceNameShareShareIdSnapshotReserve(serviceName,shareId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameShareShareIdSnapshotReserveMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotReserve>>>
    export type PutStorageNetappServiceNameShareShareIdSnapshotReserveMutationBody = StorageNetAppShareSnapshotReserveUpdateOVH
    export type PutStorageNetappServiceNameShareShareIdSnapshotReserveMutationError = unknown

    /**
 * @summary Update snapshot reserve properties of a share
 */
export const usePutStorageNetappServiceNameShareShareIdSnapshotReserve = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotReserve>>, TError,{serviceName: string;shareId: string;data: StorageNetAppShareSnapshotReserveUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceNameShareShareIdSnapshotReserve>>,
        TError,
        {serviceName: string;shareId: string;data: StorageNetAppShareSnapshotReserveUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameShareShareIdSnapshotReserveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a list of snapshot policies
 */
export const getStorageNetappServiceNameSnapshotPolicy = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppSnapshotPolicyOVH[]>(
      {url: `/storage/netapp/${serviceName}/snapshotPolicy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameSnapshotPolicyQueryKey = (serviceName: string,) => {
    return [`/storage/netapp/${serviceName}/snapshotPolicy`] as const;
    }

    
export const getGetStorageNetappServiceNameSnapshotPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameSnapshotPolicyQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>> = ({ signal }) => getStorageNetappServiceNameSnapshotPolicy(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameSnapshotPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>>
export type GetStorageNetappServiceNameSnapshotPolicyQueryError = unknown


export function useGetStorageNetappServiceNameSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of snapshot policies
 */

export function useGetStorageNetappServiceNameSnapshotPolicy<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameSnapshotPolicyQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a snapshot policy
 */
export const postStorageNetappServiceNameSnapshotPolicy = (
    serviceName: string,
    storageNetAppSnapshotPolicyOVH: NonReadonly<StorageNetAppSnapshotPolicyOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppSnapshotPolicyOVH>(
      {url: `/storage/netapp/${serviceName}/snapshotPolicy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppSnapshotPolicyOVH, signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameSnapshotPolicyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameSnapshotPolicy>>, TError,{serviceName: string;data: NonReadonly<StorageNetAppSnapshotPolicyOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameSnapshotPolicy>>, TError,{serviceName: string;data: NonReadonly<StorageNetAppSnapshotPolicyOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameSnapshotPolicy>>, {serviceName: string;data: NonReadonly<StorageNetAppSnapshotPolicyOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postStorageNetappServiceNameSnapshotPolicy(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameSnapshotPolicyMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameSnapshotPolicy>>>
    export type PostStorageNetappServiceNameSnapshotPolicyMutationBody = NonReadonly<StorageNetAppSnapshotPolicyOVH>
    export type PostStorageNetappServiceNameSnapshotPolicyMutationError = unknown

    /**
 * @summary Create a snapshot policy
 */
export const usePostStorageNetappServiceNameSnapshotPolicy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameSnapshotPolicy>>, TError,{serviceName: string;data: NonReadonly<StorageNetAppSnapshotPolicyOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameSnapshotPolicy>>,
        TError,
        {serviceName: string;data: NonReadonly<StorageNetAppSnapshotPolicyOVH>},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameSnapshotPolicyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a snapshot policy
 */
export const deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId = (
    serviceName: string,
    snapshotPolicyId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/snapshotPolicy/${snapshotPolicyId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError,{serviceName: string;snapshotPolicyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError,{serviceName: string;snapshotPolicyId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, {serviceName: string;snapshotPolicyId: string}> = (props) => {
          const {serviceName,snapshotPolicyId} = props ?? {};

          return  deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId(serviceName,snapshotPolicyId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>>
    
    export type DeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationError = unknown

    /**
 * @summary Delete a snapshot policy
 */
export const useDeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError,{serviceName: string;snapshotPolicyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>,
        TError,
        {serviceName: string;snapshotPolicyId: string},
        TContext
      > => {

      const mutationOptions = getDeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get snapshot policy details
 */
export const getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId = (
    serviceName: string,
    snapshotPolicyId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<StorageNetAppSnapshotPolicyOVH>(
      {url: `/storage/netapp/${serviceName}/snapshotPolicy/${snapshotPolicyId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdQueryKey = (serviceName: string,
    snapshotPolicyId: string,) => {
    return [`/storage/netapp/${serviceName}/snapshotPolicy/${snapshotPolicyId}`] as const;
    }

    
export const getGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdQueryOptions = <TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError = unknown>(serviceName: string,
    snapshotPolicyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdQueryKey(serviceName,snapshotPolicyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>> = ({ signal }) => getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId(serviceName,snapshotPolicyId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && snapshotPolicyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>>
export type GetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdQueryError = unknown


export function useGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError = unknown>(
 serviceName: string,
    snapshotPolicyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError = unknown>(
 serviceName: string,
    snapshotPolicyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError = unknown>(
 serviceName: string,
    snapshotPolicyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get snapshot policy details
 */

export function useGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyId<TData = Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError = unknown>(
 serviceName: string,
    snapshotPolicyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdQueryOptions(serviceName,snapshotPolicyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a snapshot policy
 */
export const putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId = (
    serviceName: string,
    snapshotPolicyId: string,
    storageNetAppSnapshotPolicyUpdateOVH: StorageNetAppSnapshotPolicyUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/storage/netapp/${serviceName}/snapshotPolicy/${snapshotPolicyId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storageNetAppSnapshotPolicyUpdateOVH
    },
      options);
    }
  


export const getPutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError,{serviceName: string;snapshotPolicyId: string;data: StorageNetAppSnapshotPolicyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError,{serviceName: string;snapshotPolicyId: string;data: StorageNetAppSnapshotPolicyUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, {serviceName: string;snapshotPolicyId: string;data: StorageNetAppSnapshotPolicyUpdateOVH}> = (props) => {
          const {serviceName,snapshotPolicyId,data} = props ?? {};

          return  putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId(serviceName,snapshotPolicyId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>>
    export type PutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationBody = StorageNetAppSnapshotPolicyUpdateOVH
    export type PutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationError = unknown

    /**
 * @summary Update a snapshot policy
 */
export const usePutStorageNetappServiceNameSnapshotPolicySnapshotPolicyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>, TError,{serviceName: string;snapshotPolicyId: string;data: StorageNetAppSnapshotPolicyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStorageNetappServiceNameSnapshotPolicySnapshotPolicyId>>,
        TError,
        {serviceName: string;snapshotPolicyId: string;data: StorageNetAppSnapshotPolicyUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for the termination of your service
 */
export const postStorageNetappServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/storage/netapp/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostStorageNetappServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStorageNetappServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postStorageNetappServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStorageNetappServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postStorageNetappServiceNameTerminate>>>
    
    export type PostStorageNetappServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostStorageNetappServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStorageNetappServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStorageNetappServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostStorageNetappServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteOrderCartCartIdCouponParams,
  GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams,
  GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams,
  GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams,
  GetOrderCartCartIdAnalyticsOptionsParams,
  GetOrderCartCartIdBaremetalServersOptionsParams,
  GetOrderCartCartIdCdnOptionsParams,
  GetOrderCartCartIdCephaasOptionsParams,
  GetOrderCartCartIdCloudOptionsParams,
  GetOrderCartCartIdCloudwebOptionsParams,
  GetOrderCartCartIdCsp2OptionsParams,
  GetOrderCartCartIdDedicatedCloudOptionsParams,
  GetOrderCartCartIdDedicatedCloudParams,
  GetOrderCartCartIdDedicatedLabsOptionsParams,
  GetOrderCartCartIdDedicatedLabsParams,
  GetOrderCartCartIdDedicatedLegacyOptionsParams,
  GetOrderCartCartIdDedicatedOptionsParams,
  GetOrderCartCartIdDedicatedParams,
  GetOrderCartCartIdDedicatedPciVpsOptionsParams,
  GetOrderCartCartIdDedicatedPciVpsParams,
  GetOrderCartCartIdDedicatedResellerOptionsParams,
  GetOrderCartCartIdDedicatedResellerParams,
  GetOrderCartCartIdDiscoverOptionsParams,
  GetOrderCartCartIdDnsOptionsParams,
  GetOrderCartCartIdDomainOptionsParams,
  GetOrderCartCartIdDomainParams,
  GetOrderCartCartIdEcoOptionsParams,
  GetOrderCartCartIdEmailproOptionsParams,
  GetOrderCartCartIdEndpointNameOptionsParams,
  GetOrderCartCartIdEndpointNameParams,
  GetOrderCartCartIdExchangeEnterpriseOptionsParams,
  GetOrderCartCartIdExchangeOptionsParams,
  GetOrderCartCartIdIpLoadbalancingOptionsParams,
  GetOrderCartCartIdIpOptionsParams,
  GetOrderCartCartIdIspPublicOptionsParams,
  GetOrderCartCartIdIspResellerOptionsParams,
  GetOrderCartCartIdItemItemIdConfigurationParams,
  GetOrderCartCartIdKubernetesOptionsParams,
  GetOrderCartCartIdLicensePleskOptionsParams,
  GetOrderCartCartIdLogsOptionsParams,
  GetOrderCartCartIdManagedServicesOptionsParams,
  GetOrderCartCartIdMetricsOptionsParams,
  GetOrderCartCartIdMicrosoftOptionsParams,
  GetOrderCartCartIdNashaOptionsParams,
  GetOrderCartCartIdNetappOptionsParams,
  GetOrderCartCartIdNutanixOptionsParams,
  GetOrderCartCartIdOffice365OptionsParams,
  GetOrderCartCartIdOffice365PrepaidOptionsParams,
  GetOrderCartCartIdOfficePrepaidOptionsParams,
  GetOrderCartCartIdOtbOptionsParams,
  GetOrderCartCartIdOtbResellerOptionsParams,
  GetOrderCartCartIdPacksProfessionalServicesOptionsParams,
  GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams,
  GetOrderCartCartIdPrivateCloudOptionsParams,
  GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams,
  GetOrderCartCartIdPrivateCloudResellerOptionsParams,
  GetOrderCartCartIdSharepointOptionsParams,
  GetOrderCartCartIdSslComodoOptionsParams,
  GetOrderCartCartIdSslGatewayOptionsParams,
  GetOrderCartCartIdTelephonyOptionsParams,
  GetOrderCartCartIdVdiOptionsParams,
  GetOrderCartCartIdVeeamEnterpriseOptionsParams,
  GetOrderCartCartIdVeeamccOptionsParams,
  GetOrderCartCartIdVmwareCloudDirectorOptionsParams,
  GetOrderCartCartIdVpsOptionsParams,
  GetOrderCartCartIdWebCoachOptionsParams,
  GetOrderCartCartIdWebHostingOptionsParams,
  GetOrderCartCartIdWebPaaSOptionsParams,
  GetOrderCartCartIdXdslOptionsParams,
  GetOrderCartCartIdZimbraOptionsParams,
  GetOrderCartParams,
  GetOrderCartServiceOptionDomainParams,
  GetOrderCatalogFormattedBringYourOwnIpParams,
  GetOrderCatalogFormattedCatalogNameParams,
  GetOrderCatalogFormattedCloudParams,
  GetOrderCatalogFormattedDedicatedParams,
  GetOrderCatalogFormattedDiscoverParams,
  GetOrderCatalogFormattedIpParams,
  GetOrderCatalogFormattedLicenseHycuParams,
  GetOrderCatalogFormattedLicensePleskParams,
  GetOrderCatalogFormattedLicenseSqlServerParams,
  GetOrderCatalogFormattedLicenseWindowsParams,
  GetOrderCatalogFormattedLicensecPanelParams,
  GetOrderCatalogFormattedLogsParams,
  GetOrderCatalogFormattedPrivateCloudParams,
  GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams,
  GetOrderCatalogFormattedPrivateCloudResellerParams,
  GetOrderCatalogFormattedResellerParams,
  GetOrderCatalogPrivatePrivateCloudParams,
  GetOrderCatalogPrivateTrustedZoneCloudParams,
  GetOrderCatalogPublicAdvisoryServicesHostingWebParams,
  GetOrderCatalogPublicAdvisoryServicesPublicCloudParams,
  GetOrderCatalogPublicAdvisoryServicesTelecomParams,
  GetOrderCatalogPublicBaremetalServersParams,
  GetOrderCatalogPublicCephaasParams,
  GetOrderCatalogPublicCloudDBParams,
  GetOrderCatalogPublicCloudParams,
  GetOrderCatalogPublicDnsParams,
  GetOrderCatalogPublicDomainParams,
  GetOrderCatalogPublicEcoParams,
  GetOrderCatalogPublicEmailDomainParams,
  GetOrderCatalogPublicEmailproParams,
  GetOrderCatalogPublicExchangeParams,
  GetOrderCatalogPublicIpLoadbalancingParams,
  GetOrderCatalogPublicLicenseHycuParams,
  GetOrderCatalogPublicLicensecPanelParams,
  GetOrderCatalogPublicLogsParams,
  GetOrderCatalogPublicNashaParams,
  GetOrderCatalogPublicNetappParams,
  GetOrderCatalogPublicNutanixParams,
  GetOrderCatalogPublicOffice365PrepaidParams,
  GetOrderCatalogPublicOfficePrepaidParams,
  GetOrderCatalogPublicOkmsParams,
  GetOrderCatalogPublicOvhCloudConnectParams,
  GetOrderCatalogPublicPacksProfessionalServicesParams,
  GetOrderCatalogPublicPrivateCloudEnterpriseParams,
  GetOrderCatalogPublicPrivateCloudParams,
  GetOrderCatalogPublicPrivateSQLParams,
  GetOrderCatalogPublicProductNameParams,
  GetOrderCatalogPublicSslGatewayParams,
  GetOrderCatalogPublicTelephonyParams,
  GetOrderCatalogPublicVmwareCloudDirectorBackupParams,
  GetOrderCatalogPublicVmwareCloudDirectorParams,
  GetOrderCatalogPublicVpsParams,
  GetOrderCatalogPublicWebHostingParams,
  GetOrderCatalogPublicWebPaaSParams,
  GetOrderCatalogPublicZimbraParams,
  GetOrderCdnDedicatedServiceNameBackendDurationParams,
  GetOrderCdnDedicatedServiceNameBackendParams,
  GetOrderCdnDedicatedServiceNameCacheRuleDurationParams,
  GetOrderCdnDedicatedServiceNameCacheRuleParams,
  GetOrderCdnDedicatedServiceNameQuotaDurationParams,
  GetOrderCdnDedicatedServiceNameQuotaParams,
  GetOrderCloudProjectServiceNameCreditParams,
  GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams,
  GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams,
  GetOrderDedicatedServerServiceNameBackupStorageDurationParams,
  GetOrderDedicatedServerServiceNameBackupStorageParams,
  GetOrderDedicatedServerServiceNameBandwidthDurationParams,
  GetOrderDedicatedServerServiceNameBandwidthParams,
  GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams,
  GetOrderDedicatedServerServiceNameBandwidthvRackParams,
  GetOrderDedicatedServerServiceNameFailoverIPDurationParams,
  GetOrderDedicatedServerServiceNameFailoverIPParams,
  GetOrderDedicatedServerServiceNameFeatureDurationParams,
  GetOrderDedicatedServerServiceNameFeatureParams,
  GetOrderDedicatedServerServiceNameFirewallDurationParams,
  GetOrderDedicatedServerServiceNameFirewallParams,
  GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams,
  GetOrderDedicatedServerServiceNameIPBlockAllocationParams,
  GetOrderDedicatedServerServiceNameIpDurationParams,
  GetOrderDedicatedServerServiceNameIpMigrationDurationParams,
  GetOrderDedicatedServerServiceNameIpMigrationParams,
  GetOrderDedicatedServerServiceNameIpParams,
  GetOrderDedicatedServerServiceNameStaticIPDurationParams,
  GetOrderDedicatedServerServiceNameStaticIPParams,
  GetOrderDedicatedServerServiceNameSupportLevelDurationParams,
  GetOrderDedicatedServerServiceNameSupportLevelParams,
  GetOrderDedicatedServerServiceNameTrafficDurationParams,
  GetOrderDedicatedServerServiceNameTrafficParams,
  GetOrderDedicatedServerServiceNameUsbKeyDurationParams,
  GetOrderDedicatedServerServiceNameUsbKeyParams,
  GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams,
  GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams,
  GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams,
  GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams,
  GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams,
  GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams,
  GetOrderEmailProServiceAccountDurationParams,
  GetOrderEmailProServiceAccountParams,
  GetOrderFreefaxNewParams,
  GetOrderFreefaxServiceNameConvertToVoicefaxParams,
  GetOrderLicenseCpanelNewDurationParams,
  GetOrderLicenseCpanelNewParams,
  GetOrderLicenseCpanelServiceNameUpgradeDurationParams,
  GetOrderLicenseCpanelServiceNameUpgradeParams,
  GetOrderLicenseOfficeNewDurationParams,
  GetOrderLicenseOfficeNewParams,
  GetOrderLicensePleskNewDurationParams,
  GetOrderLicensePleskNewParams,
  GetOrderLicensePleskServiceNameUpgradeDurationParams,
  GetOrderLicensePleskServiceNameUpgradeParams,
  GetOrderLicenseSqlserverNewDurationParams,
  GetOrderLicenseSqlserverNewParams,
  GetOrderLicenseSqlserverServiceNameUpgradeDurationParams,
  GetOrderLicenseSqlserverServiceNameUpgradeParams,
  GetOrderLicenseWindowsNewDurationParams,
  GetOrderLicenseWindowsNewParams,
  GetOrderLicenseWindowsServiceNameUpgradeDurationParams,
  GetOrderLicenseWindowsServiceNameUpgradeParams,
  GetOrderOverTheBoxNewDurationParams,
  GetOrderOverTheBoxNewParams,
  GetOrderOverTheBoxServiceNameMigrateParams,
  GetOrderSaasCsp2NewDurationParams,
  GetOrderSaasCsp2NewParams,
  GetOrderSmsNewParams,
  GetOrderSmsServiceNameCreditsParams,
  GetOrderTelephonyBillingAccountAccessoriesParams,
  GetOrderTelephonyBillingAccountNumberGeographicParams,
  GetOrderTelephonyBillingAccountNumberNogeographicParams,
  GetOrderTelephonyBillingAccountNumberSpecialParams,
  GetOrderTelephonyBillingAccountPortabilityParams,
  GetOrderTelephonyBillingAccountSecurityDepositParams,
  GetOrderTelephonyLinesServiceNameHardwareParams,
  GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams,
  GetOrderTelephonySpareNewParams,
  GetOrderTelephonyTrunksServiceNameHardwareParams,
  GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams,
  GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams,
  GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams,
  GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams,
  GetOrderUpgradeCephaasServiceNamePlanCodeParams,
  GetOrderUpgradeCloudDBDomainPlanCodeParams,
  GetOrderUpgradeEmailDomainServiceNamePlanCodeParams,
  GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams,
  GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams,
  GetOrderUpgradeLicensePleskServiceNamePlanCodeParams,
  GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams,
  GetOrderUpgradeLogsServiceNamePlanCodeParams,
  GetOrderUpgradeMetricsServiceNamePlanCodeParams,
  GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams,
  GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams,
  GetOrderUpgradePrivateCloudServiceNamePlanCodeParams,
  GetOrderUpgradePrivateSQLDomainPlanCodeParams,
  GetOrderUpgradeSslGatewayServiceNamePlanCodeParams,
  GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams,
  GetOrderUpgradeVpsServiceNamePlanCodeParams,
  GetOrderUpgradeWebHostingServiceNamePlanCodeParams,
  GetOrderUpgradeWebPaaSServiceNamePlanCodeParams,
  GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams,
  GetOrderVeeamCloudConnectServiceNameUpgradeParams,
  GetOrderVpsServiceNameAdditionalDiskDurationParams,
  GetOrderVpsServiceNameAdditionalDiskParams,
  GetOrderVpsServiceNameIpDurationParams,
  GetOrderVpsServiceNameIpParams,
  GetOrderVpsServiceNameUpgradeDurationParams,
  GetOrderVpsServiceNameUpgradeParams,
  GetOrderXdslSpareNewParams,
  OrderCartCartOVH,
  OrderCartCheckoutOVH,
  OrderCartConfigurationItemOVH,
  OrderCartConfigurationRequirementsOVH,
  OrderCartCouponCreationOVH,
  OrderCartCreationOVH,
  OrderCartGenericDomainCreationOVH,
  OrderCartGenericDomainOptionsCreationOVH,
  OrderCartGenericOptionCreationOVH,
  OrderCartGenericOptionDefinitionOVH,
  OrderCartGenericProductCreationOVH,
  OrderCartGenericProductDefinitionOVH,
  OrderCartItemConfigurationCreationOVH,
  OrderCartItemOVH,
  OrderCartItemUpdateOVH,
  OrderCartProductInformationOVH,
  OrderCartUpdateOVH,
  OrderCatalogCatalogOVH,
  OrderCatalogDedicatedCatalogOVH,
  OrderCatalogPccCatalogOVH,
  OrderCatalogPublicCatalogOVH,
  OrderCatalogPublicDedicatedServerCatalogOVH,
  OrderOrderOVH,
  OrderUpgradeOperationAndOrderOVH,
  PostOrderCartCartIdEndpointNameBody,
  PostOrderCartCartIdEndpointNameOptionsBody,
  PostOrderCartServiceOptionBaremetalServersServiceNameBody,
  PostOrderCartServiceOptionCloudServiceNameBody,
  PostOrderCartServiceOptionDedicatedServiceNameBody,
  PostOrderCartServiceOptionDnsServiceNameBody,
  PostOrderCartServiceOptionDomainServiceNameBody,
  PostOrderCartServiceOptionEmailproServiceNameBody,
  PostOrderCartServiceOptionExchangeServiceNameBody,
  PostOrderCartServiceOptionIpLoadbalancingServiceNameBody,
  PostOrderCartServiceOptionLicenseHycuServiceNameBody,
  PostOrderCartServiceOptionLicensePleskServiceNameBody,
  PostOrderCartServiceOptionLogsServiceNameBody,
  PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody,
  PostOrderCartServiceOptionMicrosoftServiceNameBody,
  PostOrderCartServiceOptionNutanixServiceNameBody,
  PostOrderCartServiceOptionOffice365PrepaidServiceNameBody,
  PostOrderCartServiceOptionOfficePrepaidServiceNameBody,
  PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody,
  PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody,
  PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody,
  PostOrderCartServiceOptionPrivateCloudServiceNameBody,
  PostOrderCartServiceOptionSharepointServiceNameBody,
  PostOrderCartServiceOptionSmsServiceNameBody,
  PostOrderCartServiceOptionSncConnectivityServiceNameBody,
  PostOrderCartServiceOptionSslGatewayServiceNameBody,
  PostOrderCartServiceOptionVdiServiceNameBody,
  PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody,
  PostOrderCartServiceOptionVpsServiceNameBody,
  PostOrderCartServiceOptionWebHostingServiceNameBody,
  PostOrderCartServiceOptionWebPaaSServiceNameBody,
  PostOrderCdnDedicatedServiceNameBackendDurationBody,
  PostOrderCdnDedicatedServiceNameCacheRuleDurationBody,
  PostOrderCdnDedicatedServiceNameQuotaDurationBody,
  PostOrderCloudProjectServiceNameCreditBody,
  PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody,
  PostOrderDedicatedServerServiceNameBackupStorageDurationBody,
  PostOrderDedicatedServerServiceNameBandwidthDurationBody,
  PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody,
  PostOrderDedicatedServerServiceNameFailoverIPDurationBody,
  PostOrderDedicatedServerServiceNameFeatureDurationBody,
  PostOrderDedicatedServerServiceNameFirewallDurationBody,
  PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody,
  PostOrderDedicatedServerServiceNameIpDurationBody,
  PostOrderDedicatedServerServiceNameIpMigrationDurationBody,
  PostOrderDedicatedServerServiceNameStaticIPDurationBody,
  PostOrderDedicatedServerServiceNameSupportLevelDurationBody,
  PostOrderDedicatedServerServiceNameTrafficDurationBody,
  PostOrderDedicatedServerServiceNameUsbKeyDurationBody,
  PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody,
  PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody,
  PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody,
  PostOrderEmailProServiceAccountDurationBody,
  PostOrderFreefaxNewBody,
  PostOrderFreefaxServiceNameConvertToVoicefaxBody,
  PostOrderLicenseCpanelNewDurationBody,
  PostOrderLicenseCpanelServiceNameUpgradeDurationBody,
  PostOrderLicenseOfficeNewDurationBody,
  PostOrderLicensePleskNewDurationBody,
  PostOrderLicensePleskServiceNameUpgradeDurationBody,
  PostOrderLicenseSqlserverNewDurationBody,
  PostOrderLicenseSqlserverServiceNameUpgradeDurationBody,
  PostOrderLicenseWindowsNewDurationBody,
  PostOrderLicenseWindowsServiceNameUpgradeDurationBody,
  PostOrderOverTheBoxNewDurationBody,
  PostOrderOverTheBoxServiceNameMigrateBody,
  PostOrderSaasCsp2NewDurationBody,
  PostOrderSmsNewBody,
  PostOrderSmsServiceNameCreditsBody,
  PostOrderTelephonyBillingAccountAccessoriesBody,
  PostOrderTelephonyBillingAccountNumberGeographicBody,
  PostOrderTelephonyBillingAccountNumberNogeographicBody,
  PostOrderTelephonyBillingAccountNumberSpecialBody,
  PostOrderTelephonyBillingAccountPortabilityBody,
  PostOrderTelephonyBillingAccountSecurityDepositBody,
  PostOrderTelephonyLinesServiceNameHardwareBody,
  PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody,
  PostOrderTelephonySpareNewBody,
  PostOrderTelephonyTrunksServiceNameHardwareBody,
  PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody,
  PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody,
  PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody,
  PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody,
  PostOrderUpgradeCephaasServiceNamePlanCodeBody,
  PostOrderUpgradeCloudDBDomainPlanCodeBody,
  PostOrderUpgradeEmailDomainServiceNamePlanCodeBody,
  PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody,
  PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody,
  PostOrderUpgradeLicensePleskServiceNamePlanCodeBody,
  PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody,
  PostOrderUpgradeLogsServiceNamePlanCodeBody,
  PostOrderUpgradeMetricsServiceNamePlanCodeBody,
  PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody,
  PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody,
  PostOrderUpgradePrivateCloudServiceNamePlanCodeBody,
  PostOrderUpgradePrivateSQLDomainPlanCodeBody,
  PostOrderUpgradeSslGatewayServiceNamePlanCodeBody,
  PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody,
  PostOrderUpgradeVpsServiceNamePlanCodeBody,
  PostOrderUpgradeWebHostingServiceNamePlanCodeBody,
  PostOrderUpgradeWebPaaSServiceNamePlanCodeBody,
  PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody,
  PostOrderVpsServiceNameAdditionalDiskDurationBody,
  PostOrderVpsServiceNameIpDurationBody,
  PostOrderVpsServiceNameUpgradeDurationBody,
  PostOrderXdslSpareNewBody
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List of your OVH order carts
 */
export const getOrderCart = (
    params?: GetOrderCartParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cart`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartQueryKey = (params?: GetOrderCartParams,) => {
    return [`/order/cart`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCart>>, TError = unknown>(params?: GetOrderCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCart>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCart>>> = ({ signal }) => getOrderCart(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCart>>>
export type GetOrderCartQueryError = unknown


export function useGetOrderCart<TData = Awaited<ReturnType<typeof getOrderCart>>, TError = unknown>(
 params: undefined |  GetOrderCartParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCart>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCart<TData = Awaited<ReturnType<typeof getOrderCart>>, TError = unknown>(
 params?: GetOrderCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCart>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCart<TData = Awaited<ReturnType<typeof getOrderCart>>, TError = unknown>(
 params?: GetOrderCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCart>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your OVH order carts
 */

export function useGetOrderCart<TData = Awaited<ReturnType<typeof getOrderCart>>, TError = unknown>(
 params?: GetOrderCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCart>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new OVH order cart
 */
export const postOrderCart = (
    orderCartCreationOVH: OrderCartCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartCartOVH>(
      {url: `/order/cart`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCart>>, TError,{data: OrderCartCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCart>>, TError,{data: OrderCartCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCart>>, {data: OrderCartCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postOrderCart(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCart>>>
    export type PostOrderCartMutationBody = OrderCartCreationOVH
    export type PostOrderCartMutationError = unknown

    /**
 * @summary Create a new OVH order cart
 */
export const usePostOrderCart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCart>>, TError,{data: OrderCartCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCart>>,
        TError,
        {data: OrderCartCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a cart
 */
export const deleteOrderCartCartId = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/order/cart/${cartId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrderCartCartIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartId>>, TError,{cartId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartId>>, TError,{cartId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderCartCartId>>, {cartId: string}> = (props) => {
          const {cartId} = props ?? {};

          return  deleteOrderCartCartId(cartId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderCartCartIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderCartCartId>>>
    
    export type DeleteOrderCartCartIdMutationError = unknown

    /**
 * @summary Delete a cart
 */
export const useDeleteOrderCartCartId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartId>>, TError,{cartId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderCartCartId>>,
        TError,
        {cartId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOrderCartCartIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a specific cart
 */
export const getOrderCartCartId = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartCartOVH>(
      {url: `/order/cart/${cartId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}`] as const;
    }

    
export const getGetOrderCartCartIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartId>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartId>>> = ({ signal }) => getOrderCartCartId(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartId>>>
export type GetOrderCartCartIdQueryError = unknown


export function useGetOrderCartCartId<TData = Awaited<ReturnType<typeof getOrderCartCartId>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartId<TData = Awaited<ReturnType<typeof getOrderCartCartId>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartId<TData = Awaited<ReturnType<typeof getOrderCartCartId>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a specific cart
 */

export function useGetOrderCartCartId<TData = Awaited<ReturnType<typeof getOrderCartCartId>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify information about a specific cart
 */
export const putOrderCartCartId = (
    cartId: string,
    orderCartUpdateOVH: OrderCartUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<OrderCartCartOVH>(
      {url: `/order/cart/${cartId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: orderCartUpdateOVH
    },
      options);
    }
  


export const getPutOrderCartCartIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOrderCartCartId>>, TError,{cartId: string;data: OrderCartUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOrderCartCartId>>, TError,{cartId: string;data: OrderCartUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOrderCartCartId>>, {cartId: string;data: OrderCartUpdateOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  putOrderCartCartId(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOrderCartCartIdMutationResult = NonNullable<Awaited<ReturnType<typeof putOrderCartCartId>>>
    export type PutOrderCartCartIdMutationBody = OrderCartUpdateOVH
    export type PutOrderCartCartIdMutationError = unknown

    /**
 * @summary Modify information about a specific cart
 */
export const usePutOrderCartCartId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOrderCartCartId>>, TError,{cartId: string;data: OrderCartUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOrderCartCartId>>,
        TError,
        {cartId: string;data: OrderCartUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutOrderCartCartIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about an Advisory Services Hosting Web support
 */
export const getOrderCartCartIdAdvisoryServicesHostingWeb = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/advisoryServicesHostingWeb`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAdvisoryServicesHostingWebQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/advisoryServicesHostingWeb`] as const;
    }

    
export const getGetOrderCartCartIdAdvisoryServicesHostingWebQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAdvisoryServicesHostingWebQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>> = ({ signal }) => getOrderCartCartIdAdvisoryServicesHostingWeb(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAdvisoryServicesHostingWebQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>>
export type GetOrderCartCartIdAdvisoryServicesHostingWebQueryError = unknown


export function useGetOrderCartCartIdAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about an Advisory Services Hosting Web support
 */

export function useGetOrderCartCartIdAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAdvisoryServicesHostingWebQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Advisory Services Hosting Web support item in your cart
 */
export const postOrderCartCartIdAdvisoryServicesHostingWeb = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/advisoryServicesHostingWeb`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAdvisoryServicesHostingWebMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWeb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWeb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWeb>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAdvisoryServicesHostingWeb(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAdvisoryServicesHostingWebMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWeb>>>
    export type PostOrderCartCartIdAdvisoryServicesHostingWebMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdAdvisoryServicesHostingWebMutationError = unknown

    /**
 * @summary Post a new Advisory Services Hosting Web support item in your cart
 */
export const usePostOrderCartCartIdAdvisoryServicesHostingWeb = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWeb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWeb>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAdvisoryServicesHostingWebMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about Advisory Services Hosting Web support options
 */
export const getOrderCartCartIdAdvisoryServicesHostingWebOptions = (
    cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/advisoryServicesHostingWeb/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAdvisoryServicesHostingWebOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams,) => {
    return [`/order/cart/${cartId}/advisoryServicesHostingWeb/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdAdvisoryServicesHostingWebOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAdvisoryServicesHostingWebOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>> = ({ signal }) => getOrderCartCartIdAdvisoryServicesHostingWebOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAdvisoryServicesHostingWebOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>>
export type GetOrderCartCartIdAdvisoryServicesHostingWebOptionsQueryError = unknown


export function useGetOrderCartCartIdAdvisoryServicesHostingWebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesHostingWebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesHostingWebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about Advisory Services Hosting Web support options
 */

export function useGetOrderCartCartIdAdvisoryServicesHostingWebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesHostingWebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAdvisoryServicesHostingWebOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Advisory Services Hosting Web support option in your cart
 */
export const postOrderCartCartIdAdvisoryServicesHostingWebOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/advisoryServicesHostingWeb/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAdvisoryServicesHostingWebOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWebOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAdvisoryServicesHostingWebOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAdvisoryServicesHostingWebOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWebOptions>>>
    export type PostOrderCartCartIdAdvisoryServicesHostingWebOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdAdvisoryServicesHostingWebOptionsMutationError = unknown

    /**
 * @summary Post a new Advisory Services Hosting Web support option in your cart
 */
export const usePostOrderCartCartIdAdvisoryServicesHostingWebOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWebOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesHostingWebOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAdvisoryServicesHostingWebOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about an Advisory Services Public Cloud support
 */
export const getOrderCartCartIdAdvisoryServicesPublicCloud = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/advisoryServicesPublicCloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAdvisoryServicesPublicCloudQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/advisoryServicesPublicCloud`] as const;
    }

    
export const getGetOrderCartCartIdAdvisoryServicesPublicCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAdvisoryServicesPublicCloudQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>> = ({ signal }) => getOrderCartCartIdAdvisoryServicesPublicCloud(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAdvisoryServicesPublicCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>>
export type GetOrderCartCartIdAdvisoryServicesPublicCloudQueryError = unknown


export function useGetOrderCartCartIdAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about an Advisory Services Public Cloud support
 */

export function useGetOrderCartCartIdAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAdvisoryServicesPublicCloudQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Advisory Services Public Cloud support item in your cart
 */
export const postOrderCartCartIdAdvisoryServicesPublicCloud = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/advisoryServicesPublicCloud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAdvisoryServicesPublicCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloud>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAdvisoryServicesPublicCloud(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAdvisoryServicesPublicCloudMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloud>>>
    export type PostOrderCartCartIdAdvisoryServicesPublicCloudMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdAdvisoryServicesPublicCloudMutationError = unknown

    /**
 * @summary Post a new Advisory Services Public Cloud support item in your cart
 */
export const usePostOrderCartCartIdAdvisoryServicesPublicCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloud>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAdvisoryServicesPublicCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about Advisory Services Public Cloud support options
 */
export const getOrderCartCartIdAdvisoryServicesPublicCloudOptions = (
    cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/advisoryServicesPublicCloud/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAdvisoryServicesPublicCloudOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams,) => {
    return [`/order/cart/${cartId}/advisoryServicesPublicCloud/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdAdvisoryServicesPublicCloudOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAdvisoryServicesPublicCloudOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>> = ({ signal }) => getOrderCartCartIdAdvisoryServicesPublicCloudOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>>
export type GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsQueryError = unknown


export function useGetOrderCartCartIdAdvisoryServicesPublicCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesPublicCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesPublicCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about Advisory Services Public Cloud support options
 */

export function useGetOrderCartCartIdAdvisoryServicesPublicCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAdvisoryServicesPublicCloudOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Advisory Services Public Cloud support option in your cart
 */
export const postOrderCartCartIdAdvisoryServicesPublicCloudOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/advisoryServicesPublicCloud/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAdvisoryServicesPublicCloudOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAdvisoryServicesPublicCloudOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAdvisoryServicesPublicCloudOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloudOptions>>>
    export type PostOrderCartCartIdAdvisoryServicesPublicCloudOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdAdvisoryServicesPublicCloudOptionsMutationError = unknown

    /**
 * @summary Post a new Advisory Services Public Cloud support option in your cart
 */
export const usePostOrderCartCartIdAdvisoryServicesPublicCloudOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesPublicCloudOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAdvisoryServicesPublicCloudOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about an Advisory Services Telecom support
 */
export const getOrderCartCartIdAdvisoryServicesTelecom = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/advisoryServicesTelecom`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAdvisoryServicesTelecomQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/advisoryServicesTelecom`] as const;
    }

    
export const getGetOrderCartCartIdAdvisoryServicesTelecomQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAdvisoryServicesTelecomQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>> = ({ signal }) => getOrderCartCartIdAdvisoryServicesTelecom(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAdvisoryServicesTelecomQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>>
export type GetOrderCartCartIdAdvisoryServicesTelecomQueryError = unknown


export function useGetOrderCartCartIdAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about an Advisory Services Telecom support
 */

export function useGetOrderCartCartIdAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAdvisoryServicesTelecomQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Advisory Services Telecom support item in your cart
 */
export const postOrderCartCartIdAdvisoryServicesTelecom = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/advisoryServicesTelecom`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAdvisoryServicesTelecomMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecom>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecom>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecom>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAdvisoryServicesTelecom(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAdvisoryServicesTelecomMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecom>>>
    export type PostOrderCartCartIdAdvisoryServicesTelecomMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdAdvisoryServicesTelecomMutationError = unknown

    /**
 * @summary Post a new Advisory Services Telecom support item in your cart
 */
export const usePostOrderCartCartIdAdvisoryServicesTelecom = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecom>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecom>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAdvisoryServicesTelecomMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get informations about Advisory Services Telecom support options
 */
export const getOrderCartCartIdAdvisoryServicesTelecomOptions = (
    cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/advisoryServicesTelecom/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAdvisoryServicesTelecomOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams,) => {
    return [`/order/cart/${cartId}/advisoryServicesTelecom/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdAdvisoryServicesTelecomOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAdvisoryServicesTelecomOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>> = ({ signal }) => getOrderCartCartIdAdvisoryServicesTelecomOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAdvisoryServicesTelecomOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>>
export type GetOrderCartCartIdAdvisoryServicesTelecomOptionsQueryError = unknown


export function useGetOrderCartCartIdAdvisoryServicesTelecomOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesTelecomOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAdvisoryServicesTelecomOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about Advisory Services Telecom support options
 */

export function useGetOrderCartCartIdAdvisoryServicesTelecomOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAdvisoryServicesTelecomOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAdvisoryServicesTelecomOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Advisory Services Telecom support option in your cart
 */
export const postOrderCartCartIdAdvisoryServicesTelecomOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/advisoryServicesTelecom/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAdvisoryServicesTelecomOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecomOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAdvisoryServicesTelecomOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAdvisoryServicesTelecomOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecomOptions>>>
    export type PostOrderCartCartIdAdvisoryServicesTelecomOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdAdvisoryServicesTelecomOptionsMutationError = unknown

    /**
 * @summary Post a new Advisory Services Telecom support option in your cart
 */
export const usePostOrderCartCartIdAdvisoryServicesTelecomOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecomOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAdvisoryServicesTelecomOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAdvisoryServicesTelecomOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about analytics offers
 */
export const getOrderCartCartIdAnalytics = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/analytics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAnalyticsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/analytics`] as const;
    }

    
export const getGetOrderCartCartIdAnalyticsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAnalyticsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>> = ({ signal }) => getOrderCartCartIdAnalytics(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAnalyticsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>>
export type GetOrderCartCartIdAnalyticsQueryError = unknown


export function useGetOrderCartCartIdAnalytics<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAnalytics<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAnalytics<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about analytics offers
 */

export function useGetOrderCartCartIdAnalytics<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalytics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAnalyticsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new analytics item in your cart
 */
export const postOrderCartCartIdAnalytics = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/analytics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAnalyticsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAnalytics>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAnalytics>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAnalytics>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAnalytics(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAnalyticsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAnalytics>>>
    export type PostOrderCartCartIdAnalyticsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdAnalyticsMutationError = unknown

    /**
 * @summary Post a new analytics item in your cart
 */
export const usePostOrderCartCartIdAnalytics = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAnalytics>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAnalytics>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAnalyticsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about analytics options
 */
export const getOrderCartCartIdAnalyticsOptions = (
    cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/analytics/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdAnalyticsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams,) => {
    return [`/order/cart/${cartId}/analytics/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdAnalyticsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdAnalyticsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>> = ({ signal }) => getOrderCartCartIdAnalyticsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdAnalyticsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>>
export type GetOrderCartCartIdAnalyticsOptionsQueryError = unknown


export function useGetOrderCartCartIdAnalyticsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAnalyticsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdAnalyticsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about analytics options
 */

export function useGetOrderCartCartIdAnalyticsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdAnalyticsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdAnalyticsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdAnalyticsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new analytics addon in your cart
 */
export const postOrderCartCartIdAnalyticsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/analytics/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAnalyticsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAnalyticsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAnalyticsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAnalyticsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdAnalyticsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAnalyticsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAnalyticsOptions>>>
    export type PostOrderCartCartIdAnalyticsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdAnalyticsOptionsMutationError = unknown

    /**
 * @summary Post a new analytics addon in your cart
 */
export const usePostOrderCartCartIdAnalyticsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAnalyticsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAnalyticsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAnalyticsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Assign an order cart to your account
 */
export const postOrderCartCartIdAssign = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/order/cart/${cartId}/assign`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderCartCartIdAssignMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAssign>>, TError,{cartId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAssign>>, TError,{cartId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdAssign>>, {cartId: string}> = (props) => {
          const {cartId} = props ?? {};

          return  postOrderCartCartIdAssign(cartId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdAssignMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdAssign>>>
    
    export type PostOrderCartCartIdAssignMutationError = unknown

    /**
 * @summary Assign an order cart to your account
 */
export const usePostOrderCartCartIdAssign = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdAssign>>, TError,{cartId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdAssign>>,
        TError,
        {cartId: string},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdAssignMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a baremetal server
 */
export const getOrderCartCartIdBaremetalServers = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/baremetalServers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdBaremetalServersQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/baremetalServers`] as const;
    }

    
export const getGetOrderCartCartIdBaremetalServersQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdBaremetalServersQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>> = ({ signal }) => getOrderCartCartIdBaremetalServers(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdBaremetalServersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>>
export type GetOrderCartCartIdBaremetalServersQueryError = unknown


export function useGetOrderCartCartIdBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a baremetal server
 */

export function useGetOrderCartCartIdBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdBaremetalServersQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new baremetal server item in your cart
 */
export const postOrderCartCartIdBaremetalServers = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/baremetalServers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdBaremetalServersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServers>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServers>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServers>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdBaremetalServers(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdBaremetalServersMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServers>>>
    export type PostOrderCartCartIdBaremetalServersMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdBaremetalServersMutationError = unknown

    /**
 * @summary Post a new baremetal server item in your cart
 */
export const usePostOrderCartCartIdBaremetalServers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServers>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServers>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdBaremetalServersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about baremetal server options
 */
export const getOrderCartCartIdBaremetalServersOptions = (
    cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/baremetalServers/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdBaremetalServersOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams,) => {
    return [`/order/cart/${cartId}/baremetalServers/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdBaremetalServersOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdBaremetalServersOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>> = ({ signal }) => getOrderCartCartIdBaremetalServersOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdBaremetalServersOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>>
export type GetOrderCartCartIdBaremetalServersOptionsQueryError = unknown


export function useGetOrderCartCartIdBaremetalServersOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdBaremetalServersOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdBaremetalServersOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about baremetal server options
 */

export function useGetOrderCartCartIdBaremetalServersOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdBaremetalServersOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBaremetalServersOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdBaremetalServersOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new baremetal server option in your cart
 */
export const postOrderCartCartIdBaremetalServersOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/baremetalServers/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdBaremetalServersOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServersOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServersOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServersOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdBaremetalServersOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdBaremetalServersOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServersOptions>>>
    export type PostOrderCartCartIdBaremetalServersOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdBaremetalServersOptionsMutationError = unknown

    /**
 * @summary Post a new baremetal server option in your cart
 */
export const usePostOrderCartCartIdBaremetalServersOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServersOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdBaremetalServersOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdBaremetalServersOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about bring your own IP addresses offers
 */
export const getOrderCartCartIdBringYourOwnIp = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/bringYourOwnIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdBringYourOwnIpQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/bringYourOwnIp`] as const;
    }

    
export const getGetOrderCartCartIdBringYourOwnIpQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdBringYourOwnIpQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>> = ({ signal }) => getOrderCartCartIdBringYourOwnIp(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdBringYourOwnIpQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>>
export type GetOrderCartCartIdBringYourOwnIpQueryError = unknown


export function useGetOrderCartCartIdBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about bring your own IP addresses offers
 */

export function useGetOrderCartCartIdBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdBringYourOwnIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdBringYourOwnIpQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new bring your own IP addresses item in your cart
 */
export const postOrderCartCartIdBringYourOwnIp = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/bringYourOwnIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdBringYourOwnIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBringYourOwnIp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBringYourOwnIp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdBringYourOwnIp>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdBringYourOwnIp(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdBringYourOwnIpMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdBringYourOwnIp>>>
    export type PostOrderCartCartIdBringYourOwnIpMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdBringYourOwnIpMutationError = unknown

    /**
 * @summary Post a new bring your own IP addresses item in your cart
 */
export const usePostOrderCartCartIdBringYourOwnIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdBringYourOwnIp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdBringYourOwnIp>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdBringYourOwnIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about CDN offers
 */
export const getOrderCartCartIdCdn = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cdn`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCdnQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/cdn`] as const;
    }

    
export const getGetOrderCartCartIdCdnQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCdnQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>> = ({ signal }) => getOrderCartCartIdCdn(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCdnQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>>
export type GetOrderCartCartIdCdnQueryError = unknown


export function useGetOrderCartCartIdCdn<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCdn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCdn<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCdn>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCdn<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about CDN offers
 */

export function useGetOrderCartCartIdCdn<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdn>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCdnQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new CDN item in your cart
 */
export const postOrderCartCartIdCdn = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cdn`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCdnMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCdn>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCdn>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCdn>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCdn(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCdnMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCdn>>>
    export type PostOrderCartCartIdCdnMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdCdnMutationError = unknown

    /**
 * @summary Post a new CDN item in your cart
 */
export const usePostOrderCartCartIdCdn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCdn>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCdn>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCdnMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about CDN options
 */
export const getOrderCartCartIdCdnOptions = (
    cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cdn/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCdnOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams,) => {
    return [`/order/cart/${cartId}/cdn/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdCdnOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCdnOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>> = ({ signal }) => getOrderCartCartIdCdnOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCdnOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>>
export type GetOrderCartCartIdCdnOptionsQueryError = unknown


export function useGetOrderCartCartIdCdnOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCdnOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCdnOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about CDN options
 */

export function useGetOrderCartCartIdCdnOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCdnOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCdnOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCdnOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new CDN option in your cart
 */
export const postOrderCartCartIdCdnOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cdn/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCdnOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCdnOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCdnOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCdnOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCdnOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCdnOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCdnOptions>>>
    export type PostOrderCartCartIdCdnOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdCdnOptionsMutationError = unknown

    /**
 * @summary Post a new CDN option in your cart
 */
export const usePostOrderCartCartIdCdnOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCdnOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCdnOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCdnOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Ceph as a Service offers
 */
export const getOrderCartCartIdCephaas = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cephaas`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCephaasQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/cephaas`] as const;
    }

    
export const getGetOrderCartCartIdCephaasQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCephaasQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>> = ({ signal }) => getOrderCartCartIdCephaas(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCephaasQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>>
export type GetOrderCartCartIdCephaasQueryError = unknown


export function useGetOrderCartCartIdCephaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCephaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCephaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Ceph as a Service offers
 */

export function useGetOrderCartCartIdCephaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCephaasQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Ceph as a Service item in your cart
 */
export const postOrderCartCartIdCephaas = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cephaas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCephaasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCephaas>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCephaas>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCephaas>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCephaas(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCephaasMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCephaas>>>
    export type PostOrderCartCartIdCephaasMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdCephaasMutationError = unknown

    /**
 * @summary Post a new Ceph as a Service item in your cart
 */
export const usePostOrderCartCartIdCephaas = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCephaas>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCephaas>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCephaasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Ceph as a Service options
 */
export const getOrderCartCartIdCephaasOptions = (
    cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cephaas/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCephaasOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams,) => {
    return [`/order/cart/${cartId}/cephaas/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdCephaasOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCephaasOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>> = ({ signal }) => getOrderCartCartIdCephaasOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCephaasOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>>
export type GetOrderCartCartIdCephaasOptionsQueryError = unknown


export function useGetOrderCartCartIdCephaasOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCephaasOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCephaasOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Ceph as a Service options
 */

export function useGetOrderCartCartIdCephaasOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCephaasOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCephaasOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCephaasOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Ceph as a Service option in your cart
 */
export const postOrderCartCartIdCephaasOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cephaas/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCephaasOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCephaasOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCephaasOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCephaasOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCephaasOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCephaasOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCephaasOptions>>>
    export type PostOrderCartCartIdCephaasOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdCephaasOptionsMutationError = unknown

    /**
 * @summary Post a new Ceph as a Service option in your cart
 */
export const usePostOrderCartCartIdCephaasOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCephaasOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCephaasOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCephaasOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information for your cart
 */
export const getOrderCartCartIdCheckout = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cart/${cartId}/checkout`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCheckoutQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/checkout`] as const;
    }

    
export const getGetOrderCartCartIdCheckoutQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCheckoutQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>> = ({ signal }) => getOrderCartCartIdCheckout(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCheckoutQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>>
export type GetOrderCartCartIdCheckoutQueryError = unknown


export function useGetOrderCartCartIdCheckout<TData = Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCheckout<TData = Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCheckout<TData = Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information for your cart
 */

export function useGetOrderCartCartIdCheckout<TData = Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCheckout>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCheckoutQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Validate your shopping and create order
 */
export const postOrderCartCartIdCheckout = (
    cartId: string,
    orderCartCheckoutOVH: OrderCartCheckoutOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cart/${cartId}/checkout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartCheckoutOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCheckoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCheckout>>, TError,{cartId: string;data: OrderCartCheckoutOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCheckout>>, TError,{cartId: string;data: OrderCartCheckoutOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCheckout>>, {cartId: string;data: OrderCartCheckoutOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCheckout(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCheckoutMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCheckout>>>
    export type PostOrderCartCartIdCheckoutMutationBody = OrderCartCheckoutOVH
    export type PostOrderCartCartIdCheckoutMutationError = unknown

    /**
 * @summary Validate your shopping and create order
 */
export const usePostOrderCartCartIdCheckout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCheckout>>, TError,{cartId: string;data: OrderCartCheckoutOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCheckout>>,
        TError,
        {cartId: string;data: OrderCartCheckoutOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCheckoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Public Cloud offers
 */
export const getOrderCartCartIdCloud = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCloudQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/cloud`] as const;
    }

    
export const getGetOrderCartCartIdCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCloudQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>> = ({ signal }) => getOrderCartCartIdCloud(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>>
export type GetOrderCartCartIdCloudQueryError = unknown


export function useGetOrderCartCartIdCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Public Cloud offers
 */

export function useGetOrderCartCartIdCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCloudQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Public Cloud item in your cart
 */
export const postOrderCartCartIdCloud = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cloud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCloud>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCloud(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCloudMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCloud>>>
    export type PostOrderCartCartIdCloudMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdCloudMutationError = unknown

    /**
 * @summary Post a new Public Cloud item in your cart
 */
export const usePostOrderCartCartIdCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCloud>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Public Cloud options
 */
export const getOrderCartCartIdCloudOptions = (
    cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cloud/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCloudOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams,) => {
    return [`/order/cart/${cartId}/cloud/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdCloudOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCloudOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>> = ({ signal }) => getOrderCartCartIdCloudOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCloudOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>>
export type GetOrderCartCartIdCloudOptionsQueryError = unknown


export function useGetOrderCartCartIdCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Public Cloud options
 */

export function useGetOrderCartCartIdCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCloudOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Public Cloud option in your cart
 */
export const postOrderCartCartIdCloudOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cloud/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCloudOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCloudOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCloudOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCloudOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCloudOptions>>>
    export type PostOrderCartCartIdCloudOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdCloudOptionsMutationError = unknown

    /**
 * @summary Post a new Public Cloud option in your cart
 */
export const usePostOrderCartCartIdCloudOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCloudOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCloudOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all cloud db offers available
 */
export const getOrderCartCartIdCloudDB = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cloudDB`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCloudDBQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/cloudDB`] as const;
    }

    
export const getGetOrderCartCartIdCloudDBQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCloudDBQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>> = ({ signal }) => getOrderCartCartIdCloudDB(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCloudDBQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>>
export type GetOrderCartCartIdCloudDBQueryError = unknown


export function useGetOrderCartCartIdCloudDB<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudDB<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudDB<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all cloud db offers available
 */

export function useGetOrderCartCartIdCloudDB<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCloudDBQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a cloudDB in your cart
 */
export const postOrderCartCartIdCloudDB = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cloudDB`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCloudDBMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudDB>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudDB>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCloudDB>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCloudDB(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCloudDBMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCloudDB>>>
    export type PostOrderCartCartIdCloudDBMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdCloudDBMutationError = unknown

    /**
 * @summary Add a cloudDB in your cart
 */
export const usePostOrderCartCartIdCloudDB = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudDB>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCloudDB>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCloudDBMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Cloud Web offers
 */
export const getOrderCartCartIdCloudweb = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cloudweb`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCloudwebQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/cloudweb`] as const;
    }

    
export const getGetOrderCartCartIdCloudwebQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCloudwebQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>> = ({ signal }) => getOrderCartCartIdCloudweb(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCloudwebQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>>
export type GetOrderCartCartIdCloudwebQueryError = unknown


export function useGetOrderCartCartIdCloudweb<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudweb<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudweb<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Cloud Web offers
 */

export function useGetOrderCartCartIdCloudweb<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudweb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCloudwebQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Cloud Web item in your cart
 */
export const postOrderCartCartIdCloudweb = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cloudweb`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCloudwebMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudweb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudweb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCloudweb>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCloudweb(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCloudwebMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCloudweb>>>
    export type PostOrderCartCartIdCloudwebMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdCloudwebMutationError = unknown

    /**
 * @summary Post a new Cloud Web item in your cart
 */
export const usePostOrderCartCartIdCloudweb = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudweb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCloudweb>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCloudwebMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Cloud Web options
 */
export const getOrderCartCartIdCloudwebOptions = (
    cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/cloudweb/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCloudwebOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams,) => {
    return [`/order/cart/${cartId}/cloudweb/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdCloudwebOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCloudwebOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>> = ({ signal }) => getOrderCartCartIdCloudwebOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCloudwebOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>>
export type GetOrderCartCartIdCloudwebOptionsQueryError = unknown


export function useGetOrderCartCartIdCloudwebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudwebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCloudwebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Cloud Web options
 */

export function useGetOrderCartCartIdCloudwebOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCloudwebOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCloudwebOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCloudwebOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Cloud Web option in your cart
 */
export const postOrderCartCartIdCloudwebOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/cloudweb/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCloudwebOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudwebOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudwebOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCloudwebOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCloudwebOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCloudwebOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCloudwebOptions>>>
    export type PostOrderCartCartIdCloudwebOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdCloudwebOptionsMutationError = unknown

    /**
 * @summary Post a new Cloud Web option in your cart
 */
export const usePostOrderCartCartIdCloudwebOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCloudwebOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCloudwebOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCloudwebOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a coupon from cart
 */
export const deleteOrderCartCartIdCoupon = (
    cartId: string,
    params: DeleteOrderCartCartIdCouponParams,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/order/cart/${cartId}/coupon`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteOrderCartCartIdCouponMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdCoupon>>, TError,{cartId: string;params: DeleteOrderCartCartIdCouponParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdCoupon>>, TError,{cartId: string;params: DeleteOrderCartCartIdCouponParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderCartCartIdCoupon>>, {cartId: string;params: DeleteOrderCartCartIdCouponParams}> = (props) => {
          const {cartId,params} = props ?? {};

          return  deleteOrderCartCartIdCoupon(cartId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderCartCartIdCouponMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderCartCartIdCoupon>>>
    
    export type DeleteOrderCartCartIdCouponMutationError = unknown

    /**
 * @summary Delete a coupon from cart
 */
export const useDeleteOrderCartCartIdCoupon = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdCoupon>>, TError,{cartId: string;params: DeleteOrderCartCartIdCouponParams}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderCartCartIdCoupon>>,
        TError,
        {cartId: string;params: DeleteOrderCartCartIdCouponParams},
        TContext
      > => {

      const mutationOptions = getDeleteOrderCartCartIdCouponMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve coupons associated to cart
 */
export const getOrderCartCartIdCoupon = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cart/${cartId}/coupon`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCouponQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/coupon`] as const;
    }

    
export const getGetOrderCartCartIdCouponQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCouponQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>> = ({ signal }) => getOrderCartCartIdCoupon(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCouponQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>>
export type GetOrderCartCartIdCouponQueryError = unknown


export function useGetOrderCartCartIdCoupon<TData = Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCoupon<TData = Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCoupon<TData = Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve coupons associated to cart
 */

export function useGetOrderCartCartIdCoupon<TData = Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCoupon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCouponQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new coupon to cart
 */
export const postOrderCartCartIdCoupon = (
    cartId: string,
    orderCartCouponCreationOVH: OrderCartCouponCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cart/${cartId}/coupon`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartCouponCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCouponMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCoupon>>, TError,{cartId: string;data: OrderCartCouponCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCoupon>>, TError,{cartId: string;data: OrderCartCouponCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCoupon>>, {cartId: string;data: OrderCartCouponCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCoupon(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCouponMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCoupon>>>
    export type PostOrderCartCartIdCouponMutationBody = OrderCartCouponCreationOVH
    export type PostOrderCartCartIdCouponMutationError = unknown

    /**
 * @summary Add a new coupon to cart
 */
export const usePostOrderCartCartIdCoupon = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCoupon>>, TError,{cartId: string;data: OrderCartCouponCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCoupon>>,
        TError,
        {cartId: string;data: OrderCartCouponCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCouponMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SaaS CSP2 offers
 */
export const getOrderCartCartIdCsp2 = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/csp2`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCsp2QueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/csp2`] as const;
    }

    
export const getGetOrderCartCartIdCsp2QueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCsp2QueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>> = ({ signal }) => getOrderCartCartIdCsp2(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCsp2QueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>>
export type GetOrderCartCartIdCsp2QueryError = unknown


export function useGetOrderCartCartIdCsp2<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCsp2<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCsp2<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SaaS CSP2 offers
 */

export function useGetOrderCartCartIdCsp2<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCsp2QueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SaaS CSP2 offer item in your cart
 */
export const postOrderCartCartIdCsp2 = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/csp2`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCsp2MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCsp2>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCsp2>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCsp2>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCsp2(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCsp2MutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCsp2>>>
    export type PostOrderCartCartIdCsp2MutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdCsp2MutationError = unknown

    /**
 * @summary Post a new SaaS CSP2 offer item in your cart
 */
export const usePostOrderCartCartIdCsp2 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCsp2>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCsp2>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCsp2MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SaaS CSP2 options
 */
export const getOrderCartCartIdCsp2Options = (
    cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/csp2/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdCsp2OptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams,) => {
    return [`/order/cart/${cartId}/csp2/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdCsp2OptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdCsp2OptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>> = ({ signal }) => getOrderCartCartIdCsp2Options(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdCsp2OptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>>
export type GetOrderCartCartIdCsp2OptionsQueryError = unknown


export function useGetOrderCartCartIdCsp2Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCsp2Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdCsp2Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SaaS CSP2 options
 */

export function useGetOrderCartCartIdCsp2Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdCsp2OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdCsp2Options>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdCsp2OptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SaaS CSP2 option in your cart
 */
export const postOrderCartCartIdCsp2Options = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/csp2/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdCsp2OptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCsp2Options>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCsp2Options>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdCsp2Options>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdCsp2Options(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdCsp2OptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdCsp2Options>>>
    export type PostOrderCartCartIdCsp2OptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdCsp2OptionsMutationError = unknown

    /**
 * @summary Post a new SaaS CSP2 option in your cart
 */
export const usePostOrderCartCartIdCsp2Options = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdCsp2Options>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdCsp2Options>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdCsp2OptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a timeseries offer
 */
export const getOrderCartCartIdDbaasTimeseries = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dbaasTimeseries`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDbaasTimeseriesQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/dbaasTimeseries`] as const;
    }

    
export const getGetOrderCartCartIdDbaasTimeseriesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDbaasTimeseriesQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>> = ({ signal }) => getOrderCartCartIdDbaasTimeseries(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDbaasTimeseriesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>>
export type GetOrderCartCartIdDbaasTimeseriesQueryError = unknown


export function useGetOrderCartCartIdDbaasTimeseries<TData = Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDbaasTimeseries<TData = Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDbaasTimeseries<TData = Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a timeseries offer
 */

export function useGetOrderCartCartIdDbaasTimeseries<TData = Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDbaasTimeseries>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDbaasTimeseriesQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new timeseries offer item in your cart
 */
export const postOrderCartCartIdDbaasTimeseries = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dbaasTimeseries`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDbaasTimeseriesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDbaasTimeseries>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDbaasTimeseries>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDbaasTimeseries>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDbaasTimeseries(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDbaasTimeseriesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDbaasTimeseries>>>
    export type PostOrderCartCartIdDbaasTimeseriesMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDbaasTimeseriesMutationError = unknown

    /**
 * @summary Post a new timeseries offer item in your cart
 */
export const usePostOrderCartCartIdDbaasTimeseries = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDbaasTimeseries>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDbaasTimeseries>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDbaasTimeseriesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a dedicated server
 */
export const getOrderCartCartIdDedicated = (
    cartId: string,
    params?: GetOrderCartCartIdDedicatedParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicated`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedQueryKey = (cartId: string,
    params?: GetOrderCartCartIdDedicatedParams,) => {
    return [`/order/cart/${cartId}/dedicated`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError = unknown>(cartId: string,
    params?: GetOrderCartCartIdDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>> = ({ signal }) => getOrderCartCartIdDedicated(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>>
export type GetOrderCartCartIdDedicatedQueryError = unknown


export function useGetOrderCartCartIdDedicated<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError = unknown>(
 cartId: string,
    params: undefined |  GetOrderCartCartIdDedicatedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicated<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicated<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a dedicated server
 */

export function useGetOrderCartCartIdDedicated<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server item in your cart
 */
export const postOrderCartCartIdDedicated = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicated`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicated>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicated>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicated>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicated(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicated>>>
    export type PostOrderCartCartIdDedicatedMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedMutationError = unknown

    /**
 * @summary Post a new dedicated server item in your cart
 */
export const usePostOrderCartCartIdDedicated = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicated>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicated>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicated server options
 */
export const getOrderCartCartIdDedicatedOptions = (
    cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicated/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams,) => {
    return [`/order/cart/${cartId}/dedicated/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>>
export type GetOrderCartCartIdDedicatedOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicated server options
 */

export function useGetOrderCartCartIdDedicatedOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server option in your cart
 */
export const postOrderCartCartIdDedicatedOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicated/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedOptions>>>
    export type PostOrderCartCartIdDedicatedOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedOptionsMutationError = unknown

    /**
 * @summary Post a new dedicated server option in your cart
 */
export const usePostOrderCartCartIdDedicatedOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a dedicated server
 */
export const getOrderCartCartIdDedicatedCloud = (
    cartId: string,
    params?: GetOrderCartCartIdDedicatedCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedCloudQueryKey = (cartId: string,
    params?: GetOrderCartCartIdDedicatedCloudParams,) => {
    return [`/order/cart/${cartId}/dedicatedCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError = unknown>(cartId: string,
    params?: GetOrderCartCartIdDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedCloudQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>> = ({ signal }) => getOrderCartCartIdDedicatedCloud(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>>
export type GetOrderCartCartIdDedicatedCloudQueryError = unknown


export function useGetOrderCartCartIdDedicatedCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError = unknown>(
 cartId: string,
    params: undefined |  GetOrderCartCartIdDedicatedCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a dedicated server
 */

export function useGetOrderCartCartIdDedicatedCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedCloudQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server item in your cart
 */
export const postOrderCartCartIdDedicatedCloud = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedCloud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloud>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedCloud(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedCloudMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloud>>>
    export type PostOrderCartCartIdDedicatedCloudMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedCloudMutationError = unknown

    /**
 * @summary Post a new dedicated server item in your cart
 */
export const usePostOrderCartCartIdDedicatedCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloud>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicated server options
 */
export const getOrderCartCartIdDedicatedCloudOptions = (
    cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedCloud/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedCloudOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams,) => {
    return [`/order/cart/${cartId}/dedicatedCloud/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedCloudOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedCloudOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedCloudOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedCloudOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>>
export type GetOrderCartCartIdDedicatedCloudOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicated server options
 */

export function useGetOrderCartCartIdDedicatedCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedCloudOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server option in your cart
 */
export const postOrderCartCartIdDedicatedCloudOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedCloud/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedCloudOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloudOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedCloudOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedCloudOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloudOptions>>>
    export type PostOrderCartCartIdDedicatedCloudOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedCloudOptionsMutationError = unknown

    /**
 * @summary Post a new dedicated server option in your cart
 */
export const usePostOrderCartCartIdDedicatedCloudOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedCloudOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedCloudOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a dedicated Direct Sales server
 */
export const getOrderCartCartIdDedicatedDirectSales = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedDirectSales`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedDirectSalesQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/dedicatedDirectSales`] as const;
    }

    
export const getGetOrderCartCartIdDedicatedDirectSalesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedDirectSalesQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>> = ({ signal }) => getOrderCartCartIdDedicatedDirectSales(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedDirectSalesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>>
export type GetOrderCartCartIdDedicatedDirectSalesQueryError = unknown


export function useGetOrderCartCartIdDedicatedDirectSales<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedDirectSales<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedDirectSales<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a dedicated Direct Sales server
 */

export function useGetOrderCartCartIdDedicatedDirectSales<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSales>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedDirectSalesQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated Direct Sales server item in your cart
 */
export const postOrderCartCartIdDedicatedDirectSales = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedDirectSales`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedDirectSalesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSales>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSales>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSales>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedDirectSales(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedDirectSalesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSales>>>
    export type PostOrderCartCartIdDedicatedDirectSalesMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedDirectSalesMutationError = unknown

    /**
 * @summary Post a new dedicated Direct Sales server item in your cart
 */
export const usePostOrderCartCartIdDedicatedDirectSales = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSales>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSales>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedDirectSalesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicated Direct Sales server options
 */
export const getOrderCartCartIdDedicatedDirectSalesOptions = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedDirectSales/options`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedDirectSalesOptionsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/dedicatedDirectSales/options`] as const;
    }

    
export const getGetOrderCartCartIdDedicatedDirectSalesOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedDirectSalesOptionsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedDirectSalesOptions(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedDirectSalesOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>>
export type GetOrderCartCartIdDedicatedDirectSalesOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedDirectSalesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedDirectSalesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedDirectSalesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicated Direct Sales server options
 */

export function useGetOrderCartCartIdDedicatedDirectSalesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedDirectSalesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedDirectSalesOptionsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated Direct Sales server option in your cart
 */
export const postOrderCartCartIdDedicatedDirectSalesOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedDirectSales/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedDirectSalesOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSalesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSalesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSalesOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedDirectSalesOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedDirectSalesOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSalesOptions>>>
    export type PostOrderCartCartIdDedicatedDirectSalesOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedDirectSalesOptionsMutationError = unknown

    /**
 * @summary Post a new dedicated Direct Sales server option in your cart
 */
export const usePostOrderCartCartIdDedicatedDirectSalesOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSalesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedDirectSalesOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedDirectSalesOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a dedicated labs server
 */
export const getOrderCartCartIdDedicatedLabs = (
    cartId: string,
    params?: GetOrderCartCartIdDedicatedLabsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedLabs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedLabsQueryKey = (cartId: string,
    params?: GetOrderCartCartIdDedicatedLabsParams,) => {
    return [`/order/cart/${cartId}/dedicatedLabs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedLabsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError = unknown>(cartId: string,
    params?: GetOrderCartCartIdDedicatedLabsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedLabsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>> = ({ signal }) => getOrderCartCartIdDedicatedLabs(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedLabsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>>
export type GetOrderCartCartIdDedicatedLabsQueryError = unknown


export function useGetOrderCartCartIdDedicatedLabs<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError = unknown>(
 cartId: string,
    params: undefined |  GetOrderCartCartIdDedicatedLabsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLabs<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedLabsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLabs<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedLabsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a dedicated labs server
 */

export function useGetOrderCartCartIdDedicatedLabs<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedLabsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedLabsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated labs server item in your cart
 */
export const postOrderCartCartIdDedicatedLabs = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedLabs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedLabsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabs>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabs>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabs>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedLabs(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedLabsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabs>>>
    export type PostOrderCartCartIdDedicatedLabsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedLabsMutationError = unknown

    /**
 * @summary Post a new dedicated labs server item in your cart
 */
export const usePostOrderCartCartIdDedicatedLabs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabs>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabs>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedLabsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicated labs server options
 */
export const getOrderCartCartIdDedicatedLabsOptions = (
    cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedLabs/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedLabsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams,) => {
    return [`/order/cart/${cartId}/dedicatedLabs/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedLabsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedLabsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedLabsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedLabsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>>
export type GetOrderCartCartIdDedicatedLabsOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedLabsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLabsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLabsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicated labs server options
 */

export function useGetOrderCartCartIdDedicatedLabsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLabsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLabsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedLabsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated labs server option in your cart
 */
export const postOrderCartCartIdDedicatedLabsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedLabs/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedLabsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedLabsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedLabsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabsOptions>>>
    export type PostOrderCartCartIdDedicatedLabsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedLabsOptionsMutationError = unknown

    /**
 * @summary Post a new dedicated labs server option in your cart
 */
export const usePostOrderCartCartIdDedicatedLabsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLabsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedLabsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicatedLegacy
 */
export const getOrderCartCartIdDedicatedLegacy = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedLegacy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedLegacyQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/dedicatedLegacy`] as const;
    }

    
export const getGetOrderCartCartIdDedicatedLegacyQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedLegacyQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>> = ({ signal }) => getOrderCartCartIdDedicatedLegacy(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedLegacyQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>>
export type GetOrderCartCartIdDedicatedLegacyQueryError = unknown


export function useGetOrderCartCartIdDedicatedLegacy<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLegacy<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLegacy<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicatedLegacy
 */

export function useGetOrderCartCartIdDedicatedLegacy<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedLegacyQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicatedLegacy item in your cart
 */
export const postOrderCartCartIdDedicatedLegacy = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedLegacy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedLegacyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacy>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacy>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacy>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedLegacy(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedLegacyMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacy>>>
    export type PostOrderCartCartIdDedicatedLegacyMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedLegacyMutationError = unknown

    /**
 * @summary Post a new dedicatedLegacy item in your cart
 */
export const usePostOrderCartCartIdDedicatedLegacy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacy>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacy>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedLegacyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about the options of Ovh offers
 */
export const getOrderCartCartIdDedicatedLegacyOptions = (
    cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedLegacy/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedLegacyOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams,) => {
    return [`/order/cart/${cartId}/dedicatedLegacy/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedLegacyOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedLegacyOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedLegacyOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedLegacyOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>>
export type GetOrderCartCartIdDedicatedLegacyOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedLegacyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLegacyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedLegacyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about the options of Ovh offers
 */

export function useGetOrderCartCartIdDedicatedLegacyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedLegacyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedLegacyOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedLegacyOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Ovh option in your cart
 */
export const postOrderCartCartIdDedicatedLegacyOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedLegacy/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedLegacyOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacyOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacyOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacyOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedLegacyOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedLegacyOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacyOptions>>>
    export type PostOrderCartCartIdDedicatedLegacyOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedLegacyOptionsMutationError = unknown

    /**
 * @summary Post a new Ovh option in your cart
 */
export const usePostOrderCartCartIdDedicatedLegacyOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacyOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedLegacyOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedLegacyOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a dedicated server
 */
export const getOrderCartCartIdDedicatedPciVps = (
    cartId: string,
    params?: GetOrderCartCartIdDedicatedPciVpsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedPciVps`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedPciVpsQueryKey = (cartId: string,
    params?: GetOrderCartCartIdDedicatedPciVpsParams,) => {
    return [`/order/cart/${cartId}/dedicatedPciVps`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedPciVpsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError = unknown>(cartId: string,
    params?: GetOrderCartCartIdDedicatedPciVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedPciVpsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>> = ({ signal }) => getOrderCartCartIdDedicatedPciVps(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedPciVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>>
export type GetOrderCartCartIdDedicatedPciVpsQueryError = unknown


export function useGetOrderCartCartIdDedicatedPciVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError = unknown>(
 cartId: string,
    params: undefined |  GetOrderCartCartIdDedicatedPciVpsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedPciVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedPciVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedPciVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedPciVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a dedicated server
 */

export function useGetOrderCartCartIdDedicatedPciVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedPciVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedPciVpsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server item in your cart
 */
export const postOrderCartCartIdDedicatedPciVps = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedPciVps`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedPciVpsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVps>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVps>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVps>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedPciVps(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedPciVpsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVps>>>
    export type PostOrderCartCartIdDedicatedPciVpsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedPciVpsMutationError = unknown

    /**
 * @summary Post a new dedicated server item in your cart
 */
export const usePostOrderCartCartIdDedicatedPciVps = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVps>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVps>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedPciVpsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicated server options
 */
export const getOrderCartCartIdDedicatedPciVpsOptions = (
    cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedPciVps/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedPciVpsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams,) => {
    return [`/order/cart/${cartId}/dedicatedPciVps/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedPciVpsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedPciVpsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedPciVpsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedPciVpsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>>
export type GetOrderCartCartIdDedicatedPciVpsOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedPciVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedPciVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedPciVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicated server options
 */

export function useGetOrderCartCartIdDedicatedPciVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedPciVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedPciVpsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedPciVpsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server option in your cart
 */
export const postOrderCartCartIdDedicatedPciVpsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedPciVps/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedPciVpsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVpsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVpsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVpsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedPciVpsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedPciVpsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVpsOptions>>>
    export type PostOrderCartCartIdDedicatedPciVpsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedPciVpsOptionsMutationError = unknown

    /**
 * @summary Post a new dedicated server option in your cart
 */
export const usePostOrderCartCartIdDedicatedPciVpsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVpsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedPciVpsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedPciVpsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a dedicated server for US Reseller
 */
export const getOrderCartCartIdDedicatedReseller = (
    cartId: string,
    params?: GetOrderCartCartIdDedicatedResellerParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedReseller`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedResellerQueryKey = (cartId: string,
    params?: GetOrderCartCartIdDedicatedResellerParams,) => {
    return [`/order/cart/${cartId}/dedicatedReseller`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError = unknown>(cartId: string,
    params?: GetOrderCartCartIdDedicatedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedResellerQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>> = ({ signal }) => getOrderCartCartIdDedicatedReseller(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>>
export type GetOrderCartCartIdDedicatedResellerQueryError = unknown


export function useGetOrderCartCartIdDedicatedReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError = unknown>(
 cartId: string,
    params: undefined |  GetOrderCartCartIdDedicatedResellerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a dedicated server for US Reseller
 */

export function useGetOrderCartCartIdDedicatedReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError = unknown>(
 cartId: string,
    params?: GetOrderCartCartIdDedicatedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedResellerQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server item in your cart
 */
export const postOrderCartCartIdDedicatedReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedReseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedReseller>>>
    export type PostOrderCartCartIdDedicatedResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDedicatedResellerMutationError = unknown

    /**
 * @summary Post a new dedicated server item in your cart
 */
export const usePostOrderCartCartIdDedicatedReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about dedicated server options
 */
export const getOrderCartCartIdDedicatedResellerOptions = (
    cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dedicatedReseller/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDedicatedResellerOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams,) => {
    return [`/order/cart/${cartId}/dedicatedReseller/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDedicatedResellerOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDedicatedResellerOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>> = ({ signal }) => getOrderCartCartIdDedicatedResellerOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDedicatedResellerOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>>
export type GetOrderCartCartIdDedicatedResellerOptionsQueryError = unknown


export function useGetOrderCartCartIdDedicatedResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDedicatedResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about dedicated server options
 */

export function useGetOrderCartCartIdDedicatedResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDedicatedResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDedicatedResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDedicatedResellerOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new dedicated server option in your cart
 */
export const postOrderCartCartIdDedicatedResellerOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dedicatedReseller/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDedicatedResellerOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedResellerOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDedicatedResellerOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDedicatedResellerOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedResellerOptions>>>
    export type PostOrderCartCartIdDedicatedResellerOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDedicatedResellerOptionsMutationError = unknown

    /**
 * @summary Post a new dedicated server option in your cart
 */
export const usePostOrderCartCartIdDedicatedResellerOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDedicatedResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDedicatedResellerOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDedicatedResellerOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Desk As A Service offers
 */
export const getOrderCartCartIdDeskaas = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/deskaas`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDeskaasQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/deskaas`] as const;
    }

    
export const getGetOrderCartCartIdDeskaasQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDeskaasQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>> = ({ signal }) => getOrderCartCartIdDeskaas(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDeskaasQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>>
export type GetOrderCartCartIdDeskaasQueryError = unknown


export function useGetOrderCartCartIdDeskaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDeskaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDeskaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Desk As A Service offers
 */

export function useGetOrderCartCartIdDeskaas<TData = Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDeskaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDeskaasQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Desk as a service item in your cart
 */
export const postOrderCartCartIdDeskaas = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/deskaas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDeskaasMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDeskaas>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDeskaas>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDeskaas>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDeskaas(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDeskaasMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDeskaas>>>
    export type PostOrderCartCartIdDeskaasMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDeskaasMutationError = unknown

    /**
 * @summary Post a new Desk as a service item in your cart
 */
export const usePostOrderCartCartIdDeskaas = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDeskaas>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDeskaas>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDeskaasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Dedicated Discover server offers
 */
export const getOrderCartCartIdDiscover = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/discover`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDiscoverQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/discover`] as const;
    }

    
export const getGetOrderCartCartIdDiscoverQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDiscoverQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>> = ({ signal }) => getOrderCartCartIdDiscover(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDiscoverQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>>
export type GetOrderCartCartIdDiscoverQueryError = unknown


export function useGetOrderCartCartIdDiscover<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDiscover<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDiscover<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Dedicated Discover server offers
 */

export function useGetOrderCartCartIdDiscover<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscover>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDiscoverQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Dedicated Discover server item in your cart
 */
export const postOrderCartCartIdDiscover = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/discover`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDiscoverMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDiscover>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDiscover>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDiscover>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDiscover(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDiscoverMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDiscover>>>
    export type PostOrderCartCartIdDiscoverMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDiscoverMutationError = unknown

    /**
 * @summary Post a new Dedicated Discover server item in your cart
 */
export const usePostOrderCartCartIdDiscover = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDiscover>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDiscover>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDiscoverMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Dedicated Discover server options
 */
export const getOrderCartCartIdDiscoverOptions = (
    cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/discover/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDiscoverOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams,) => {
    return [`/order/cart/${cartId}/discover/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDiscoverOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDiscoverOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>> = ({ signal }) => getOrderCartCartIdDiscoverOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDiscoverOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>>
export type GetOrderCartCartIdDiscoverOptionsQueryError = unknown


export function useGetOrderCartCartIdDiscoverOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDiscoverOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDiscoverOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Dedicated Discover server options
 */

export function useGetOrderCartCartIdDiscoverOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDiscoverOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDiscoverOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDiscoverOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Dedicated Discover server option in your cart
 */
export const postOrderCartCartIdDiscoverOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/discover/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDiscoverOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDiscoverOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDiscoverOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDiscoverOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDiscoverOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDiscoverOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDiscoverOptions>>>
    export type PostOrderCartCartIdDiscoverOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDiscoverOptionsMutationError = unknown

    /**
 * @summary Post a new Dedicated Discover server option in your cart
 */
export const usePostOrderCartCartIdDiscoverOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDiscoverOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDiscoverOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDiscoverOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about DNS zone offer
 */
export const getOrderCartCartIdDns = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dns`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDnsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/dns`] as const;
    }

    
export const getGetOrderCartCartIdDnsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDnsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDns>>> = ({ signal }) => getOrderCartCartIdDns(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDnsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDns>>>
export type GetOrderCartCartIdDnsQueryError = unknown


export function useGetOrderCartCartIdDns<TData = Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDns<TData = Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDns<TData = Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about DNS zone offer
 */

export function useGetOrderCartCartIdDns<TData = Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDnsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new DNS zone item in your cart
 */
export const postOrderCartCartIdDns = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dns`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDnsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDns>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDns>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDns>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDns(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDnsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDns>>>
    export type PostOrderCartCartIdDnsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdDnsMutationError = unknown

    /**
 * @summary Post a new DNS zone item in your cart
 */
export const usePostOrderCartCartIdDns = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDns>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDns>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDnsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about DNS options
 */
export const getOrderCartCartIdDnsOptions = (
    cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/dns/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDnsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams,) => {
    return [`/order/cart/${cartId}/dns/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDnsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDnsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>> = ({ signal }) => getOrderCartCartIdDnsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDnsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>>
export type GetOrderCartCartIdDnsOptionsQueryError = unknown


export function useGetOrderCartCartIdDnsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDnsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDnsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about DNS options
 */

export function useGetOrderCartCartIdDnsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDnsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDnsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDnsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new DNS option in your cart
 */
export const postOrderCartCartIdDnsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/dns/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDnsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDnsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDnsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDnsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDnsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDnsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDnsOptions>>>
    export type PostOrderCartCartIdDnsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdDnsOptionsMutationError = unknown

    /**
 * @summary Post a new DNS option in your cart
 */
export const usePostOrderCartCartIdDnsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDnsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDnsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDnsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a domain name
 */
export const getOrderCartCartIdDomain = (
    cartId: string,
    params: GetOrderCartCartIdDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartProductInformationOVH[]>(
      {url: `/order/cart/${cartId}/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDomainQueryKey = (cartId: string,
    params: GetOrderCartCartIdDomainParams,) => {
    return [`/order/cart/${cartId}/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDomainQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>> = ({ signal }) => getOrderCartCartIdDomain(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>>
export type GetOrderCartCartIdDomainQueryError = unknown


export function useGetOrderCartCartIdDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a domain name
 */

export function useGetOrderCartCartIdDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDomainQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new domain name in your cart
 */
export const postOrderCartCartIdDomain = (
    cartId: string,
    orderCartGenericDomainCreationOVH: OrderCartGenericDomainCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/domain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericDomainCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDomain>>, TError,{cartId: string;data: OrderCartGenericDomainCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDomain>>, TError,{cartId: string;data: OrderCartGenericDomainCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDomain>>, {cartId: string;data: OrderCartGenericDomainCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDomain(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDomain>>>
    export type PostOrderCartCartIdDomainMutationBody = OrderCartGenericDomainCreationOVH
    export type PostOrderCartCartIdDomainMutationError = unknown

    /**
 * @summary Post a new domain name in your cart
 */
export const usePostOrderCartCartIdDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDomain>>, TError,{cartId: string;data: OrderCartGenericDomainCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDomain>>,
        TError,
        {cartId: string;data: OrderCartGenericDomainCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about domain names options
 */
export const getOrderCartCartIdDomainOptions = (
    cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/domain/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdDomainOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams,) => {
    return [`/order/cart/${cartId}/domain/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdDomainOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdDomainOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>> = ({ signal }) => getOrderCartCartIdDomainOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdDomainOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>>
export type GetOrderCartCartIdDomainOptionsQueryError = unknown


export function useGetOrderCartCartIdDomainOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDomainOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdDomainOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about domain names options
 */

export function useGetOrderCartCartIdDomainOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdDomainOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdDomainOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdDomainOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new domain name option in your cart
 */
export const postOrderCartCartIdDomainOptions = (
    cartId: string,
    orderCartGenericDomainOptionsCreationOVH: OrderCartGenericDomainOptionsCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/domain/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericDomainOptionsCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdDomainOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDomainOptions>>, TError,{cartId: string;data: OrderCartGenericDomainOptionsCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDomainOptions>>, TError,{cartId: string;data: OrderCartGenericDomainOptionsCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdDomainOptions>>, {cartId: string;data: OrderCartGenericDomainOptionsCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdDomainOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdDomainOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdDomainOptions>>>
    export type PostOrderCartCartIdDomainOptionsMutationBody = OrderCartGenericDomainOptionsCreationOVH
    export type PostOrderCartCartIdDomainOptionsMutationError = unknown

    /**
 * @summary Post a new domain name option in your cart
 */
export const usePostOrderCartCartIdDomainOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdDomainOptions>>, TError,{cartId: string;data: OrderCartGenericDomainOptionsCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdDomainOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericDomainOptionsCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdDomainOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a eco
 */
export const getOrderCartCartIdEco = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/eco`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEcoQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/eco`] as const;
    }

    
export const getGetOrderCartCartIdEcoQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEcoQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEco>>> = ({ signal }) => getOrderCartCartIdEco(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEcoQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEco>>>
export type GetOrderCartCartIdEcoQueryError = unknown


export function useGetOrderCartCartIdEco<TData = Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEco>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEco<TData = Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEco>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEco<TData = Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a eco
 */

export function useGetOrderCartCartIdEco<TData = Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEco>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEcoQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new eco item in your cart
 */
export const postOrderCartCartIdEco = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/eco`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEcoMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEco>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEco>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEco>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdEco(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEcoMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEco>>>
    export type PostOrderCartCartIdEcoMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdEcoMutationError = unknown

    /**
 * @summary Post a new eco item in your cart
 */
export const usePostOrderCartCartIdEco = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEco>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEco>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEcoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about the options of a Eco
 */
export const getOrderCartCartIdEcoOptions = (
    cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/eco/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEcoOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams,) => {
    return [`/order/cart/${cartId}/eco/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdEcoOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEcoOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>> = ({ signal }) => getOrderCartCartIdEcoOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEcoOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>>
export type GetOrderCartCartIdEcoOptionsQueryError = unknown


export function useGetOrderCartCartIdEcoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEcoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEcoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about the options of a Eco
 */

export function useGetOrderCartCartIdEcoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEcoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEcoOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEcoOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Eco option in your cart
 */
export const postOrderCartCartIdEcoOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/eco/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEcoOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEcoOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEcoOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEcoOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdEcoOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEcoOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEcoOptions>>>
    export type PostOrderCartCartIdEcoOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdEcoOptionsMutationError = unknown

    /**
 * @summary Post a new Eco option in your cart
 */
export const usePostOrderCartCartIdEcoOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEcoOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEcoOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEcoOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all available packs available with emails packs
 */
export const getOrderCartCartIdEmailDomain = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/emailDomain`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEmailDomainQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/emailDomain`] as const;
    }

    
export const getGetOrderCartCartIdEmailDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEmailDomainQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>> = ({ signal }) => getOrderCartCartIdEmailDomain(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEmailDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>>
export type GetOrderCartCartIdEmailDomainQueryError = unknown


export function useGetOrderCartCartIdEmailDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEmailDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEmailDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all available packs available with emails packs
 */

export function useGetOrderCartCartIdEmailDomain<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEmailDomainQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a 1-domain emails pack in your cart
 */
export const postOrderCartCartIdEmailDomain = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/emailDomain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEmailDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailDomain>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailDomain>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEmailDomain>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdEmailDomain(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEmailDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEmailDomain>>>
    export type PostOrderCartCartIdEmailDomainMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdEmailDomainMutationError = unknown

    /**
 * @summary Add a 1-domain emails pack in your cart
 */
export const usePostOrderCartCartIdEmailDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailDomain>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEmailDomain>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEmailDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about EmailPro offers
 */
export const getOrderCartCartIdEmailpro = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/emailpro`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEmailproQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/emailpro`] as const;
    }

    
export const getGetOrderCartCartIdEmailproQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEmailproQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>> = ({ signal }) => getOrderCartCartIdEmailpro(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEmailproQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>>
export type GetOrderCartCartIdEmailproQueryError = unknown


export function useGetOrderCartCartIdEmailpro<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEmailpro<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEmailpro<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about EmailPro offers
 */

export function useGetOrderCartCartIdEmailpro<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEmailproQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new EmailPro item in your cart
 */
export const postOrderCartCartIdEmailpro = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/emailpro`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEmailproMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailpro>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailpro>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEmailpro>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdEmailpro(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEmailproMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEmailpro>>>
    export type PostOrderCartCartIdEmailproMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdEmailproMutationError = unknown

    /**
 * @summary Post a new EmailPro item in your cart
 */
export const usePostOrderCartCartIdEmailpro = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailpro>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEmailpro>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEmailproMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about EmailPro options
 */
export const getOrderCartCartIdEmailproOptions = (
    cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/emailpro/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEmailproOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams,) => {
    return [`/order/cart/${cartId}/emailpro/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdEmailproOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEmailproOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>> = ({ signal }) => getOrderCartCartIdEmailproOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEmailproOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>>
export type GetOrderCartCartIdEmailproOptionsQueryError = unknown


export function useGetOrderCartCartIdEmailproOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEmailproOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEmailproOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about EmailPro options
 */

export function useGetOrderCartCartIdEmailproOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdEmailproOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEmailproOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEmailproOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new EmailPro option in your cart
 */
export const postOrderCartCartIdEmailproOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/emailpro/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEmailproOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailproOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailproOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEmailproOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdEmailproOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEmailproOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEmailproOptions>>>
    export type PostOrderCartCartIdEmailproOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdEmailproOptionsMutationError = unknown

    /**
 * @summary Post a new EmailPro option in your cart
 */
export const usePostOrderCartCartIdEmailproOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEmailproOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEmailproOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEmailproOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Exchange offers
 */
export const getOrderCartCartIdExchange = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/exchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdExchangeQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/exchange`] as const;
    }

    
export const getGetOrderCartCartIdExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdExchangeQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>> = ({ signal }) => getOrderCartCartIdExchange(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>>
export type GetOrderCartCartIdExchangeQueryError = unknown


export function useGetOrderCartCartIdExchange<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchange<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchange<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Exchange offers
 */

export function useGetOrderCartCartIdExchange<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdExchangeQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Exchange item in your cart
 */
export const postOrderCartCartIdExchange = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/exchange`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdExchangeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchange>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchange>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdExchange>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdExchange(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdExchangeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdExchange>>>
    export type PostOrderCartCartIdExchangeMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdExchangeMutationError = unknown

    /**
 * @summary Post a new Exchange item in your cart
 */
export const usePostOrderCartCartIdExchange = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchange>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdExchange>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdExchangeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Exchange options
 */
export const getOrderCartCartIdExchangeOptions = (
    cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/exchange/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdExchangeOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams,) => {
    return [`/order/cart/${cartId}/exchange/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdExchangeOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdExchangeOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>> = ({ signal }) => getOrderCartCartIdExchangeOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdExchangeOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>>
export type GetOrderCartCartIdExchangeOptionsQueryError = unknown


export function useGetOrderCartCartIdExchangeOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchangeOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchangeOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Exchange options
 */

export function useGetOrderCartCartIdExchangeOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdExchangeOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Exchange option in your cart
 */
export const postOrderCartCartIdExchangeOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/exchange/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdExchangeOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdExchangeOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdExchangeOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdExchangeOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdExchangeOptions>>>
    export type PostOrderCartCartIdExchangeOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdExchangeOptionsMutationError = unknown

    /**
 * @summary Post a new Exchange option in your cart
 */
export const usePostOrderCartCartIdExchangeOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdExchangeOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdExchangeOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Exchange Enterprise offers
 */
export const getOrderCartCartIdExchangeEnterprise = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/exchangeEnterprise`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdExchangeEnterpriseQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/exchangeEnterprise`] as const;
    }

    
export const getGetOrderCartCartIdExchangeEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdExchangeEnterpriseQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>> = ({ signal }) => getOrderCartCartIdExchangeEnterprise(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdExchangeEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>>
export type GetOrderCartCartIdExchangeEnterpriseQueryError = unknown


export function useGetOrderCartCartIdExchangeEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchangeEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchangeEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Exchange Enterprise offers
 */

export function useGetOrderCartCartIdExchangeEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdExchangeEnterpriseQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Exchange Enterprise item in your cart
 */
export const postOrderCartCartIdExchangeEnterprise = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/exchangeEnterprise`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdExchangeEnterpriseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterprise>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdExchangeEnterprise(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdExchangeEnterpriseMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterprise>>>
    export type PostOrderCartCartIdExchangeEnterpriseMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdExchangeEnterpriseMutationError = unknown

    /**
 * @summary Post a new Exchange Enterprise item in your cart
 */
export const usePostOrderCartCartIdExchangeEnterprise = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterprise>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdExchangeEnterpriseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Exchange Enterprise options
 */
export const getOrderCartCartIdExchangeEnterpriseOptions = (
    cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/exchangeEnterprise/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdExchangeEnterpriseOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams,) => {
    return [`/order/cart/${cartId}/exchangeEnterprise/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdExchangeEnterpriseOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdExchangeEnterpriseOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>> = ({ signal }) => getOrderCartCartIdExchangeEnterpriseOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdExchangeEnterpriseOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>>
export type GetOrderCartCartIdExchangeEnterpriseOptionsQueryError = unknown


export function useGetOrderCartCartIdExchangeEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchangeEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdExchangeEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Exchange Enterprise options
 */

export function useGetOrderCartCartIdExchangeEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdExchangeEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdExchangeEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdExchangeEnterpriseOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Exchange Enterprise option in your cart
 */
export const postOrderCartCartIdExchangeEnterpriseOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/exchangeEnterprise/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdExchangeEnterpriseOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterpriseOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdExchangeEnterpriseOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdExchangeEnterpriseOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterpriseOptions>>>
    export type PostOrderCartCartIdExchangeEnterpriseOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdExchangeEnterpriseOptionsMutationError = unknown

    /**
 * @summary Post a new Exchange Enterprise option in your cart
 */
export const usePostOrderCartCartIdExchangeEnterpriseOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdExchangeEnterpriseOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdExchangeEnterpriseOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about IP addresses offers
 */
export const getOrderCartCartIdIp = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIpQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/ip`] as const;
    }

    
export const getGetOrderCartCartIdIpQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIpQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIp>>> = ({ signal }) => getOrderCartCartIdIp(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIpQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIp>>>
export type GetOrderCartCartIdIpQueryError = unknown


export function useGetOrderCartCartIdIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about IP addresses offers
 */

export function useGetOrderCartCartIdIp<TData = Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIpQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new IP addresses item in your cart
 */
export const postOrderCartCartIdIp = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ip`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIp>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIp(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIpMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIp>>>
    export type PostOrderCartCartIdIpMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdIpMutationError = unknown

    /**
 * @summary Post a new IP addresses item in your cart
 */
export const usePostOrderCartCartIdIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIp>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about IP addresses options
 */
export const getOrderCartCartIdIpOptions = (
    cartId: string,
    params: GetOrderCartCartIdIpOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ip/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIpOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdIpOptionsParams,) => {
    return [`/order/cart/${cartId}/ip/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdIpOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdIpOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIpOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>> = ({ signal }) => getOrderCartCartIdIpOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIpOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>>
export type GetOrderCartCartIdIpOptionsQueryError = unknown


export function useGetOrderCartCartIdIpOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about IP addresses options
 */

export function useGetOrderCartCartIdIpOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIpOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new IP addresses option in your cart
 */
export const postOrderCartCartIdIpOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ip/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIpOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIpOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIpOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIpOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIpOptions>>>
    export type PostOrderCartCartIdIpOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdIpOptionsMutationError = unknown

    /**
 * @summary Post a new IP addresses option in your cart
 */
export const usePostOrderCartCartIdIpOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIpOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIpOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about IP Load-Balancing offers
 */
export const getOrderCartCartIdIpLoadbalancing = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ipLoadbalancing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIpLoadbalancingQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/ipLoadbalancing`] as const;
    }

    
export const getGetOrderCartCartIdIpLoadbalancingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIpLoadbalancingQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>> = ({ signal }) => getOrderCartCartIdIpLoadbalancing(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIpLoadbalancingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>>
export type GetOrderCartCartIdIpLoadbalancingQueryError = unknown


export function useGetOrderCartCartIdIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about IP Load-Balancing offers
 */

export function useGetOrderCartCartIdIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIpLoadbalancingQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new IP Load-Balancing item in your cart
 */
export const postOrderCartCartIdIpLoadbalancing = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ipLoadbalancing`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIpLoadbalancingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancing>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancing>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancing>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIpLoadbalancing(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIpLoadbalancingMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancing>>>
    export type PostOrderCartCartIdIpLoadbalancingMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdIpLoadbalancingMutationError = unknown

    /**
 * @summary Post a new IP Load-Balancing item in your cart
 */
export const usePostOrderCartCartIdIpLoadbalancing = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancing>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancing>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIpLoadbalancingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about IP Load-Balancing options
 */
export const getOrderCartCartIdIpLoadbalancingOptions = (
    cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ipLoadbalancing/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIpLoadbalancingOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams,) => {
    return [`/order/cart/${cartId}/ipLoadbalancing/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdIpLoadbalancingOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIpLoadbalancingOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>> = ({ signal }) => getOrderCartCartIdIpLoadbalancingOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIpLoadbalancingOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>>
export type GetOrderCartCartIdIpLoadbalancingOptionsQueryError = unknown


export function useGetOrderCartCartIdIpLoadbalancingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpLoadbalancingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpLoadbalancingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about IP Load-Balancing options
 */

export function useGetOrderCartCartIdIpLoadbalancingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIpLoadbalancingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpLoadbalancingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIpLoadbalancingOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new IP Load-Balancing option in your cart
 */
export const postOrderCartCartIdIpLoadbalancingOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ipLoadbalancing/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIpLoadbalancingOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancingOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancingOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancingOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIpLoadbalancingOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIpLoadbalancingOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancingOptions>>>
    export type PostOrderCartCartIdIpLoadbalancingOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdIpLoadbalancingOptionsMutationError = unknown

    /**
 * @summary Post a new IP Load-Balancing option in your cart
 */
export const usePostOrderCartCartIdIpLoadbalancingOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancingOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIpLoadbalancingOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIpLoadbalancingOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a IP Reseller
 */
export const getOrderCartCartIdIpReseller = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ipReseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIpResellerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/ipReseller`] as const;
    }

    
export const getGetOrderCartCartIdIpResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIpResellerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>> = ({ signal }) => getOrderCartCartIdIpReseller(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIpResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>>
export type GetOrderCartCartIdIpResellerQueryError = unknown


export function useGetOrderCartCartIdIpReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIpReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a IP Reseller
 */

export function useGetOrderCartCartIdIpReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIpReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIpResellerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new IP Reseller item in your cart
 */
export const postOrderCartCartIdIpReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ipReseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIpResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIpReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIpReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIpResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIpReseller>>>
    export type PostOrderCartCartIdIpResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdIpResellerMutationError = unknown

    /**
 * @summary Post a new IP Reseller item in your cart
 */
export const usePostOrderCartCartIdIpReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIpReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIpReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIpResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about offers
 */
export const getOrderCartCartIdIspPublic = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ispPublic`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIspPublicQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/ispPublic`] as const;
    }

    
export const getGetOrderCartCartIdIspPublicQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIspPublicQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>> = ({ signal }) => getOrderCartCartIdIspPublic(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIspPublicQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>>
export type GetOrderCartCartIdIspPublicQueryError = unknown


export function useGetOrderCartCartIdIspPublic<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspPublic<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspPublic<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about offers
 */

export function useGetOrderCartCartIdIspPublic<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIspPublicQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new item in your cart
 */
export const postOrderCartCartIdIspPublic = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ispPublic`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIspPublicMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspPublic>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspPublic>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIspPublic>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIspPublic(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIspPublicMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIspPublic>>>
    export type PostOrderCartCartIdIspPublicMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdIspPublicMutationError = unknown

    /**
 * @summary Add a new item in your cart
 */
export const usePostOrderCartCartIdIspPublic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspPublic>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIspPublic>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIspPublicMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about options
 */
export const getOrderCartCartIdIspPublicOptions = (
    cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ispPublic/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIspPublicOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams,) => {
    return [`/order/cart/${cartId}/ispPublic/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdIspPublicOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIspPublicOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>> = ({ signal }) => getOrderCartCartIdIspPublicOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIspPublicOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>>
export type GetOrderCartCartIdIspPublicOptionsQueryError = unknown


export function useGetOrderCartCartIdIspPublicOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspPublicOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspPublicOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about options
 */

export function useGetOrderCartCartIdIspPublicOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspPublicOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspPublicOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIspPublicOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new option in your cart
 */
export const postOrderCartCartIdIspPublicOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ispPublic/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIspPublicOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspPublicOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspPublicOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIspPublicOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIspPublicOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIspPublicOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIspPublicOptions>>>
    export type PostOrderCartCartIdIspPublicOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdIspPublicOptionsMutationError = unknown

    /**
 * @summary Add a new option in your cart
 */
export const usePostOrderCartCartIdIspPublicOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspPublicOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIspPublicOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIspPublicOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about offers
 */
export const getOrderCartCartIdIspReseller = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ispReseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIspResellerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/ispReseller`] as const;
    }

    
export const getGetOrderCartCartIdIspResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIspResellerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>> = ({ signal }) => getOrderCartCartIdIspReseller(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIspResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>>
export type GetOrderCartCartIdIspResellerQueryError = unknown


export function useGetOrderCartCartIdIspReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about offers
 */

export function useGetOrderCartCartIdIspReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIspResellerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new item in your cart
 */
export const postOrderCartCartIdIspReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ispReseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIspResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIspReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIspReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIspResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIspReseller>>>
    export type PostOrderCartCartIdIspResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdIspResellerMutationError = unknown

    /**
 * @summary Add a new item in your cart
 */
export const usePostOrderCartCartIdIspReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIspReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIspResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about options
 */
export const getOrderCartCartIdIspResellerOptions = (
    cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ispReseller/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdIspResellerOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams,) => {
    return [`/order/cart/${cartId}/ispReseller/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdIspResellerOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdIspResellerOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>> = ({ signal }) => getOrderCartCartIdIspResellerOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdIspResellerOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>>
export type GetOrderCartCartIdIspResellerOptionsQueryError = unknown


export function useGetOrderCartCartIdIspResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdIspResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about options
 */

export function useGetOrderCartCartIdIspResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdIspResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdIspResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdIspResellerOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new option in your cart
 */
export const postOrderCartCartIdIspResellerOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ispReseller/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdIspResellerOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdIspResellerOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdIspResellerOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdIspResellerOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdIspResellerOptions>>>
    export type PostOrderCartCartIdIspResellerOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdIspResellerOptionsMutationError = unknown

    /**
 * @summary Post a new option in your cart
 */
export const usePostOrderCartCartIdIspResellerOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdIspResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdIspResellerOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdIspResellerOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all the items of a cart
 */
export const getOrderCartCartIdItem = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/order/cart/${cartId}/item`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdItemQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/item`] as const;
    }

    
export const getGetOrderCartCartIdItemQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdItemQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdItem>>> = ({ signal }) => getOrderCartCartIdItem(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdItemQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdItem>>>
export type GetOrderCartCartIdItemQueryError = unknown


export function useGetOrderCartCartIdItem<TData = Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItem>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItem<TData = Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItem>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItem<TData = Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all the items of a cart
 */

export function useGetOrderCartCartIdItem<TData = Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItem>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdItemQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete an item from a cart
 */
export const deleteOrderCartCartIdItemItemId = (
    cartId: string,
    itemId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/order/cart/${cartId}/item/${itemId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrderCartCartIdItemItemIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemId>>, TError,{cartId: string;itemId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemId>>, TError,{cartId: string;itemId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemId>>, {cartId: string;itemId: number}> = (props) => {
          const {cartId,itemId} = props ?? {};

          return  deleteOrderCartCartIdItemItemId(cartId,itemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderCartCartIdItemItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemId>>>
    
    export type DeleteOrderCartCartIdItemItemIdMutationError = unknown

    /**
 * @summary Delete an item from a cart
 */
export const useDeleteOrderCartCartIdItemItemId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemId>>, TError,{cartId: string;itemId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemId>>,
        TError,
        {cartId: string;itemId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOrderCartCartIdItemItemIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a specific item of a cart
 */
export const getOrderCartCartIdItemItemId = (
    cartId: string,
    itemId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/item/${itemId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdItemItemIdQueryKey = (cartId: string,
    itemId: number,) => {
    return [`/order/cart/${cartId}/item/${itemId}`] as const;
    }

    
export const getGetOrderCartCartIdItemItemIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError = unknown>(cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdItemItemIdQueryKey(cartId,itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>> = ({ signal }) => getOrderCartCartIdItemItemId(cartId,itemId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId && itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdItemItemIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>>
export type GetOrderCartCartIdItemItemIdQueryError = unknown


export function useGetOrderCartCartIdItemItemId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError = unknown>(
 cartId: string,
    itemId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError = unknown>(
 cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError = unknown>(
 cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a specific item of a cart
 */

export function useGetOrderCartCartIdItemItemId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError = unknown>(
 cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdItemItemIdQueryOptions(cartId,itemId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update some values on a cart item
 */
export const putOrderCartCartIdItemItemId = (
    cartId: string,
    itemId: number,
    orderCartItemUpdateOVH: OrderCartItemUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/item/${itemId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: orderCartItemUpdateOVH
    },
      options);
    }
  


export const getPutOrderCartCartIdItemItemIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOrderCartCartIdItemItemId>>, TError,{cartId: string;itemId: number;data: OrderCartItemUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOrderCartCartIdItemItemId>>, TError,{cartId: string;itemId: number;data: OrderCartItemUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOrderCartCartIdItemItemId>>, {cartId: string;itemId: number;data: OrderCartItemUpdateOVH}> = (props) => {
          const {cartId,itemId,data} = props ?? {};

          return  putOrderCartCartIdItemItemId(cartId,itemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOrderCartCartIdItemItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof putOrderCartCartIdItemItemId>>>
    export type PutOrderCartCartIdItemItemIdMutationBody = OrderCartItemUpdateOVH
    export type PutOrderCartCartIdItemItemIdMutationError = unknown

    /**
 * @summary Update some values on a cart item
 */
export const usePutOrderCartCartIdItemItemId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOrderCartCartIdItemItemId>>, TError,{cartId: string;itemId: number;data: OrderCartItemUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOrderCartCartIdItemItemId>>,
        TError,
        {cartId: string;itemId: number;data: OrderCartItemUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutOrderCartCartIdItemItemIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all configuration item of the cart item
 */
export const getOrderCartCartIdItemItemIdConfiguration = (
    cartId: string,
    itemId: number,
    params?: GetOrderCartCartIdItemItemIdConfigurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/order/cart/${cartId}/item/${itemId}/configuration`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdItemItemIdConfigurationQueryKey = (cartId: string,
    itemId: number,
    params?: GetOrderCartCartIdItemItemIdConfigurationParams,) => {
    return [`/order/cart/${cartId}/item/${itemId}/configuration`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdItemItemIdConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError = unknown>(cartId: string,
    itemId: number,
    params?: GetOrderCartCartIdItemItemIdConfigurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdItemItemIdConfigurationQueryKey(cartId,itemId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>> = ({ signal }) => getOrderCartCartIdItemItemIdConfiguration(cartId,itemId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId && itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdItemItemIdConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>>
export type GetOrderCartCartIdItemItemIdConfigurationQueryError = unknown


export function useGetOrderCartCartIdItemItemIdConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number,
    params: undefined |  GetOrderCartCartIdItemItemIdConfigurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemIdConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number,
    params?: GetOrderCartCartIdItemItemIdConfigurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemIdConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number,
    params?: GetOrderCartCartIdItemItemIdConfigurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all configuration item of the cart item
 */

export function useGetOrderCartCartIdItemItemIdConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number,
    params?: GetOrderCartCartIdItemItemIdConfigurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdItemItemIdConfigurationQueryOptions(cartId,itemId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Setup configuration item for the product
 */
export const postOrderCartCartIdItemItemIdConfiguration = (
    cartId: string,
    itemId: number,
    orderCartItemConfigurationCreationOVH: OrderCartItemConfigurationCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartConfigurationItemOVH>(
      {url: `/order/cart/${cartId}/item/${itemId}/configuration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartItemConfigurationCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdItemItemIdConfigurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdItemItemIdConfiguration>>, TError,{cartId: string;itemId: number;data: OrderCartItemConfigurationCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdItemItemIdConfiguration>>, TError,{cartId: string;itemId: number;data: OrderCartItemConfigurationCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdItemItemIdConfiguration>>, {cartId: string;itemId: number;data: OrderCartItemConfigurationCreationOVH}> = (props) => {
          const {cartId,itemId,data} = props ?? {};

          return  postOrderCartCartIdItemItemIdConfiguration(cartId,itemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdItemItemIdConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdItemItemIdConfiguration>>>
    export type PostOrderCartCartIdItemItemIdConfigurationMutationBody = OrderCartItemConfigurationCreationOVH
    export type PostOrderCartCartIdItemItemIdConfigurationMutationError = unknown

    /**
 * @summary Setup configuration item for the product
 */
export const usePostOrderCartCartIdItemItemIdConfiguration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdItemItemIdConfiguration>>, TError,{cartId: string;itemId: number;data: OrderCartItemConfigurationCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdItemItemIdConfiguration>>,
        TError,
        {cartId: string;itemId: number;data: OrderCartItemConfigurationCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdItemItemIdConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete configuration item
 */
export const deleteOrderCartCartIdItemItemIdConfigurationConfigurationId = (
    cartId: string,
    itemId: number,
    configurationId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/order/cart/${cartId}/item/${itemId}/configuration/${configurationId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrderCartCartIdItemItemIdConfigurationConfigurationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError,{cartId: string;itemId: number;configurationId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError,{cartId: string;itemId: number;configurationId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemIdConfigurationConfigurationId>>, {cartId: string;itemId: number;configurationId: number}> = (props) => {
          const {cartId,itemId,configurationId} = props ?? {};

          return  deleteOrderCartCartIdItemItemIdConfigurationConfigurationId(cartId,itemId,configurationId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderCartCartIdItemItemIdConfigurationConfigurationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemIdConfigurationConfigurationId>>>
    
    export type DeleteOrderCartCartIdItemItemIdConfigurationConfigurationIdMutationError = unknown

    /**
 * @summary Delete configuration item
 */
export const useDeleteOrderCartCartIdItemItemIdConfigurationConfigurationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError,{cartId: string;itemId: number;configurationId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderCartCartIdItemItemIdConfigurationConfigurationId>>,
        TError,
        {cartId: string;itemId: number;configurationId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOrderCartCartIdItemItemIdConfigurationConfigurationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve configuration item
 */
export const getOrderCartCartIdItemItemIdConfigurationConfigurationId = (
    cartId: string,
    itemId: number,
    configurationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartConfigurationItemOVH>(
      {url: `/order/cart/${cartId}/item/${itemId}/configuration/${configurationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdItemItemIdConfigurationConfigurationIdQueryKey = (cartId: string,
    itemId: number,
    configurationId: number,) => {
    return [`/order/cart/${cartId}/item/${itemId}/configuration/${configurationId}`] as const;
    }

    
export const getGetOrderCartCartIdItemItemIdConfigurationConfigurationIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError = unknown>(cartId: string,
    itemId: number,
    configurationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdItemItemIdConfigurationConfigurationIdQueryKey(cartId,itemId,configurationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>> = ({ signal }) => getOrderCartCartIdItemItemIdConfigurationConfigurationId(cartId,itemId,configurationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId && itemId && configurationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdItemItemIdConfigurationConfigurationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>>
export type GetOrderCartCartIdItemItemIdConfigurationConfigurationIdQueryError = unknown


export function useGetOrderCartCartIdItemItemIdConfigurationConfigurationId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError = unknown>(
 cartId: string,
    itemId: number,
    configurationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemIdConfigurationConfigurationId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError = unknown>(
 cartId: string,
    itemId: number,
    configurationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemIdConfigurationConfigurationId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError = unknown>(
 cartId: string,
    itemId: number,
    configurationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve configuration item
 */

export function useGetOrderCartCartIdItemItemIdConfigurationConfigurationId<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError = unknown>(
 cartId: string,
    itemId: number,
    configurationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdConfigurationConfigurationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdItemItemIdConfigurationConfigurationIdQueryOptions(cartId,itemId,configurationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all required configuration item of the cart item
 */
export const getOrderCartCartIdItemItemIdRequiredConfiguration = (
    cartId: string,
    itemId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartConfigurationRequirementsOVH[]>(
      {url: `/order/cart/${cartId}/item/${itemId}/requiredConfiguration`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdItemItemIdRequiredConfigurationQueryKey = (cartId: string,
    itemId: number,) => {
    return [`/order/cart/${cartId}/item/${itemId}/requiredConfiguration`] as const;
    }

    
export const getGetOrderCartCartIdItemItemIdRequiredConfigurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError = unknown>(cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdItemItemIdRequiredConfigurationQueryKey(cartId,itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>> = ({ signal }) => getOrderCartCartIdItemItemIdRequiredConfiguration(cartId,itemId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId && itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdItemItemIdRequiredConfigurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>>
export type GetOrderCartCartIdItemItemIdRequiredConfigurationQueryError = unknown


export function useGetOrderCartCartIdItemItemIdRequiredConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemIdRequiredConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdItemItemIdRequiredConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all required configuration item of the cart item
 */

export function useGetOrderCartCartIdItemItemIdRequiredConfiguration<TData = Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError = unknown>(
 cartId: string,
    itemId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdItemItemIdRequiredConfiguration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdItemItemIdRequiredConfigurationQueryOptions(cartId,itemId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about Kubernetes offers
 */
export const getOrderCartCartIdKubernetes = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/kubernetes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdKubernetesQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/kubernetes`] as const;
    }

    
export const getGetOrderCartCartIdKubernetesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdKubernetesQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>> = ({ signal }) => getOrderCartCartIdKubernetes(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdKubernetesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>>
export type GetOrderCartCartIdKubernetesQueryError = unknown


export function useGetOrderCartCartIdKubernetes<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdKubernetes<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdKubernetes<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Kubernetes offers
 */

export function useGetOrderCartCartIdKubernetes<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdKubernetesQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Kubernetes item in your cart
 */
export const postOrderCartCartIdKubernetes = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/kubernetes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdKubernetesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdKubernetes>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdKubernetes>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdKubernetes>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdKubernetes(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdKubernetesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdKubernetes>>>
    export type PostOrderCartCartIdKubernetesMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdKubernetesMutationError = unknown

    /**
 * @summary Post a new Kubernetes item in your cart
 */
export const usePostOrderCartCartIdKubernetes = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdKubernetes>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdKubernetes>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdKubernetesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Kubernetes options
 */
export const getOrderCartCartIdKubernetesOptions = (
    cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/kubernetes/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdKubernetesOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams,) => {
    return [`/order/cart/${cartId}/kubernetes/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdKubernetesOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdKubernetesOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>> = ({ signal }) => getOrderCartCartIdKubernetesOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdKubernetesOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>>
export type GetOrderCartCartIdKubernetesOptionsQueryError = unknown


export function useGetOrderCartCartIdKubernetesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdKubernetesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdKubernetesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Kubernetes options
 */

export function useGetOrderCartCartIdKubernetesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdKubernetesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdKubernetesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdKubernetesOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Kubernetes option in your cart
 */
export const postOrderCartCartIdKubernetesOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/kubernetes/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdKubernetesOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdKubernetesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdKubernetesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdKubernetesOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdKubernetesOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdKubernetesOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdKubernetesOptions>>>
    export type PostOrderCartCartIdKubernetesOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdKubernetesOptionsMutationError = unknown

    /**
 * @summary Post a new Kubernetes option in your cart
 */
export const usePostOrderCartCartIdKubernetesOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdKubernetesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdKubernetesOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdKubernetesOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about HYCU licenses offers
 */
export const getOrderCartCartIdLicenseHycu = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/licenseHycu`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLicenseHycuQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/licenseHycu`] as const;
    }

    
export const getGetOrderCartCartIdLicenseHycuQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLicenseHycuQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>> = ({ signal }) => getOrderCartCartIdLicenseHycu(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLicenseHycuQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>>
export type GetOrderCartCartIdLicenseHycuQueryError = unknown


export function useGetOrderCartCartIdLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about HYCU licenses offers
 */

export function useGetOrderCartCartIdLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLicenseHycuQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new HYCU license item in your cart
 */
export const postOrderCartCartIdLicenseHycu = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/licenseHycu`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLicenseHycuMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseHycu>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseHycu>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLicenseHycu>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLicenseHycu(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLicenseHycuMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLicenseHycu>>>
    export type PostOrderCartCartIdLicenseHycuMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdLicenseHycuMutationError = unknown

    /**
 * @summary Add a new HYCU license item in your cart
 */
export const usePostOrderCartCartIdLicenseHycu = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseHycu>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLicenseHycu>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLicenseHycuMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Plesk licenses offers
 */
export const getOrderCartCartIdLicensePlesk = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/licensePlesk`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLicensePleskQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/licensePlesk`] as const;
    }

    
export const getGetOrderCartCartIdLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLicensePleskQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>> = ({ signal }) => getOrderCartCartIdLicensePlesk(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>>
export type GetOrderCartCartIdLicensePleskQueryError = unknown


export function useGetOrderCartCartIdLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Plesk licenses offers
 */

export function useGetOrderCartCartIdLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLicensePleskQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Plesk license item in your cart
 */
export const postOrderCartCartIdLicensePlesk = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/licensePlesk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLicensePleskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensePlesk>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensePlesk>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLicensePlesk>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLicensePlesk(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLicensePleskMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLicensePlesk>>>
    export type PostOrderCartCartIdLicensePleskMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdLicensePleskMutationError = unknown

    /**
 * @summary Post a new Plesk license item in your cart
 */
export const usePostOrderCartCartIdLicensePlesk = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensePlesk>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLicensePlesk>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLicensePleskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Plesk license options
 */
export const getOrderCartCartIdLicensePleskOptions = (
    cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/licensePlesk/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLicensePleskOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams,) => {
    return [`/order/cart/${cartId}/licensePlesk/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdLicensePleskOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLicensePleskOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>> = ({ signal }) => getOrderCartCartIdLicensePleskOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLicensePleskOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>>
export type GetOrderCartCartIdLicensePleskOptionsQueryError = unknown


export function useGetOrderCartCartIdLicensePleskOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicensePleskOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicensePleskOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Plesk license options
 */

export function useGetOrderCartCartIdLicensePleskOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLicensePleskOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensePleskOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLicensePleskOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Plesk license option in your cart
 */
export const postOrderCartCartIdLicensePleskOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/licensePlesk/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLicensePleskOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensePleskOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensePleskOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLicensePleskOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLicensePleskOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLicensePleskOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLicensePleskOptions>>>
    export type PostOrderCartCartIdLicensePleskOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdLicensePleskOptionsMutationError = unknown

    /**
 * @summary Post a new Plesk license option in your cart
 */
export const usePostOrderCartCartIdLicensePleskOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensePleskOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLicensePleskOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLicensePleskOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SqlServer licenses offers
 */
export const getOrderCartCartIdLicenseSqlServer = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/licenseSqlServer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLicenseSqlServerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/licenseSqlServer`] as const;
    }

    
export const getGetOrderCartCartIdLicenseSqlServerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLicenseSqlServerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>> = ({ signal }) => getOrderCartCartIdLicenseSqlServer(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLicenseSqlServerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>>
export type GetOrderCartCartIdLicenseSqlServerQueryError = unknown


export function useGetOrderCartCartIdLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SqlServer licenses offers
 */

export function useGetOrderCartCartIdLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLicenseSqlServerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SqlServer license item in your cart
 */
export const postOrderCartCartIdLicenseSqlServer = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/licenseSqlServer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLicenseSqlServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseSqlServer>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseSqlServer>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLicenseSqlServer>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLicenseSqlServer(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLicenseSqlServerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLicenseSqlServer>>>
    export type PostOrderCartCartIdLicenseSqlServerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdLicenseSqlServerMutationError = unknown

    /**
 * @summary Post a new SqlServer license item in your cart
 */
export const usePostOrderCartCartIdLicenseSqlServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseSqlServer>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLicenseSqlServer>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLicenseSqlServerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Windows licenses offers
 */
export const getOrderCartCartIdLicenseWindows = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/licenseWindows`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLicenseWindowsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/licenseWindows`] as const;
    }

    
export const getGetOrderCartCartIdLicenseWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLicenseWindowsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>> = ({ signal }) => getOrderCartCartIdLicenseWindows(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLicenseWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>>
export type GetOrderCartCartIdLicenseWindowsQueryError = unknown


export function useGetOrderCartCartIdLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Windows licenses offers
 */

export function useGetOrderCartCartIdLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLicenseWindowsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Windows license item in your cart
 */
export const postOrderCartCartIdLicenseWindows = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/licenseWindows`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLicenseWindowsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseWindows>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseWindows>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLicenseWindows>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLicenseWindows(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLicenseWindowsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLicenseWindows>>>
    export type PostOrderCartCartIdLicenseWindowsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdLicenseWindowsMutationError = unknown

    /**
 * @summary Post a new Windows license item in your cart
 */
export const usePostOrderCartCartIdLicenseWindows = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicenseWindows>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLicenseWindows>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLicenseWindowsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about cPanel licenses offers
 */
export const getOrderCartCartIdLicensecPanel = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/licensecPanel`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLicensecPanelQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/licensecPanel`] as const;
    }

    
export const getGetOrderCartCartIdLicensecPanelQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLicensecPanelQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>> = ({ signal }) => getOrderCartCartIdLicensecPanel(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLicensecPanelQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>>
export type GetOrderCartCartIdLicensecPanelQueryError = unknown


export function useGetOrderCartCartIdLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about cPanel licenses offers
 */

export function useGetOrderCartCartIdLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLicensecPanelQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new cPanel license item in your cart
 */
export const postOrderCartCartIdLicensecPanel = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/licensecPanel`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLicensecPanelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensecPanel>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensecPanel>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLicensecPanel>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLicensecPanel(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLicensecPanelMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLicensecPanel>>>
    export type PostOrderCartCartIdLicensecPanelMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdLicensecPanelMutationError = unknown

    /**
 * @summary Post a new cPanel license item in your cart
 */
export const usePostOrderCartCartIdLicensecPanel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLicensecPanel>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLicensecPanel>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLicensecPanelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Logs offers
 */
export const getOrderCartCartIdLogs = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/logs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLogsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/logs`] as const;
    }

    
export const getGetOrderCartCartIdLogsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLogsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>> = ({ signal }) => getOrderCartCartIdLogs(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>>
export type GetOrderCartCartIdLogsQueryError = unknown


export function useGetOrderCartCartIdLogs<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLogs<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLogs<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Logs offers
 */

export function useGetOrderCartCartIdLogs<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLogsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Logs item in your cart
 */
export const postOrderCartCartIdLogs = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/logs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLogsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLogs>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLogs>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLogs>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLogs(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLogsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLogs>>>
    export type PostOrderCartCartIdLogsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdLogsMutationError = unknown

    /**
 * @summary Post a new Logs item in your cart
 */
export const usePostOrderCartCartIdLogs = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLogs>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLogs>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Logs options
 */
export const getOrderCartCartIdLogsOptions = (
    cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/logs/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdLogsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams,) => {
    return [`/order/cart/${cartId}/logs/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdLogsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdLogsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>> = ({ signal }) => getOrderCartCartIdLogsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdLogsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>>
export type GetOrderCartCartIdLogsOptionsQueryError = unknown


export function useGetOrderCartCartIdLogsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLogsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdLogsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Logs options
 */

export function useGetOrderCartCartIdLogsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdLogsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdLogsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdLogsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Logs option in your cart
 */
export const postOrderCartCartIdLogsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/logs/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdLogsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLogsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLogsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdLogsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdLogsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdLogsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdLogsOptions>>>
    export type PostOrderCartCartIdLogsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdLogsOptionsMutationError = unknown

    /**
 * @summary Post a new Logs option in your cart
 */
export const usePostOrderCartCartIdLogsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdLogsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdLogsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdLogsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Managed Services offers
 */
export const getOrderCartCartIdManagedServices = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/managedServices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdManagedServicesQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/managedServices`] as const;
    }

    
export const getGetOrderCartCartIdManagedServicesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdManagedServicesQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>> = ({ signal }) => getOrderCartCartIdManagedServices(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdManagedServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>>
export type GetOrderCartCartIdManagedServicesQueryError = unknown


export function useGetOrderCartCartIdManagedServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdManagedServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdManagedServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Managed Services offers
 */

export function useGetOrderCartCartIdManagedServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdManagedServicesQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Managed Services item in your cart
 */
export const postOrderCartCartIdManagedServices = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/managedServices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdManagedServicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdManagedServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdManagedServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdManagedServices>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdManagedServices(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdManagedServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdManagedServices>>>
    export type PostOrderCartCartIdManagedServicesMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdManagedServicesMutationError = unknown

    /**
 * @summary Post a new Managed Services item in your cart
 */
export const usePostOrderCartCartIdManagedServices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdManagedServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdManagedServices>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdManagedServicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Managed Services options
 */
export const getOrderCartCartIdManagedServicesOptions = (
    cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/managedServices/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdManagedServicesOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams,) => {
    return [`/order/cart/${cartId}/managedServices/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdManagedServicesOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdManagedServicesOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>> = ({ signal }) => getOrderCartCartIdManagedServicesOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdManagedServicesOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>>
export type GetOrderCartCartIdManagedServicesOptionsQueryError = unknown


export function useGetOrderCartCartIdManagedServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdManagedServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdManagedServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Managed Services options
 */

export function useGetOrderCartCartIdManagedServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdManagedServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdManagedServicesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdManagedServicesOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Managed Services option in your cart
 */
export const postOrderCartCartIdManagedServicesOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/managedServices/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdManagedServicesOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdManagedServicesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdManagedServicesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdManagedServicesOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdManagedServicesOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdManagedServicesOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdManagedServicesOptions>>>
    export type PostOrderCartCartIdManagedServicesOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdManagedServicesOptionsMutationError = unknown

    /**
 * @summary Post a new Managed Services option in your cart
 */
export const usePostOrderCartCartIdManagedServicesOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdManagedServicesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdManagedServicesOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdManagedServicesOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Metrics offers
 */
export const getOrderCartCartIdMetrics = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/metrics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdMetricsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/metrics`] as const;
    }

    
export const getGetOrderCartCartIdMetricsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdMetricsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>> = ({ signal }) => getOrderCartCartIdMetrics(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>>
export type GetOrderCartCartIdMetricsQueryError = unknown


export function useGetOrderCartCartIdMetrics<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMetrics<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMetrics<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Metrics offers
 */

export function useGetOrderCartCartIdMetrics<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdMetricsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Metrics item in your cart
 */
export const postOrderCartCartIdMetrics = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/metrics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdMetricsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMetrics>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMetrics>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdMetrics>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdMetrics(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdMetricsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdMetrics>>>
    export type PostOrderCartCartIdMetricsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdMetricsMutationError = unknown

    /**
 * @summary Post a new Metrics item in your cart
 */
export const usePostOrderCartCartIdMetrics = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMetrics>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdMetrics>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdMetricsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Metrics options
 */
export const getOrderCartCartIdMetricsOptions = (
    cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/metrics/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdMetricsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams,) => {
    return [`/order/cart/${cartId}/metrics/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdMetricsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdMetricsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>> = ({ signal }) => getOrderCartCartIdMetricsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdMetricsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>>
export type GetOrderCartCartIdMetricsOptionsQueryError = unknown


export function useGetOrderCartCartIdMetricsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMetricsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMetricsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Metrics options
 */

export function useGetOrderCartCartIdMetricsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMetricsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMetricsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdMetricsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Metrics option in your cart
 */
export const postOrderCartCartIdMetricsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/metrics/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdMetricsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMetricsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMetricsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdMetricsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdMetricsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdMetricsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdMetricsOptions>>>
    export type PostOrderCartCartIdMetricsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdMetricsOptionsMutationError = unknown

    /**
 * @summary Post a new Metrics option in your cart
 */
export const usePostOrderCartCartIdMetricsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMetricsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdMetricsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdMetricsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Microsoft offers
 */
export const getOrderCartCartIdMicrosoft = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/microsoft`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdMicrosoftQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/microsoft`] as const;
    }

    
export const getGetOrderCartCartIdMicrosoftQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdMicrosoftQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>> = ({ signal }) => getOrderCartCartIdMicrosoft(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdMicrosoftQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>>
export type GetOrderCartCartIdMicrosoftQueryError = unknown


export function useGetOrderCartCartIdMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Microsoft offers
 */

export function useGetOrderCartCartIdMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoft>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdMicrosoftQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Microsoft offer item in your cart
 */
export const postOrderCartCartIdMicrosoft = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/microsoft`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdMicrosoftMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoft>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoft>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoft>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdMicrosoft(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdMicrosoftMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoft>>>
    export type PostOrderCartCartIdMicrosoftMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdMicrosoftMutationError = unknown

    /**
 * @summary Post a new Microsoft offer item in your cart
 */
export const usePostOrderCartCartIdMicrosoft = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoft>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdMicrosoft>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdMicrosoftMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Microsoft options
 */
export const getOrderCartCartIdMicrosoftOptions = (
    cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/microsoft/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdMicrosoftOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams,) => {
    return [`/order/cart/${cartId}/microsoft/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdMicrosoftOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdMicrosoftOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>> = ({ signal }) => getOrderCartCartIdMicrosoftOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdMicrosoftOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>>
export type GetOrderCartCartIdMicrosoftOptionsQueryError = unknown


export function useGetOrderCartCartIdMicrosoftOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMicrosoftOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdMicrosoftOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Microsoft options
 */

export function useGetOrderCartCartIdMicrosoftOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdMicrosoftOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdMicrosoftOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdMicrosoftOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Microsoft option in your cart
 */
export const postOrderCartCartIdMicrosoftOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/microsoft/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdMicrosoftOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoftOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoftOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoftOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdMicrosoftOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdMicrosoftOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoftOptions>>>
    export type PostOrderCartCartIdMicrosoftOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdMicrosoftOptionsMutationError = unknown

    /**
 * @summary Post a new Microsoft option in your cart
 */
export const usePostOrderCartCartIdMicrosoftOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdMicrosoftOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdMicrosoftOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdMicrosoftOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about NAS HA offers
 */
export const getOrderCartCartIdNasha = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/nasha`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdNashaQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/nasha`] as const;
    }

    
export const getGetOrderCartCartIdNashaQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdNashaQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>> = ({ signal }) => getOrderCartCartIdNasha(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdNashaQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>>
export type GetOrderCartCartIdNashaQueryError = unknown


export function useGetOrderCartCartIdNasha<TData = Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNasha>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNasha<TData = Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNasha>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNasha<TData = Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about NAS HA offers
 */

export function useGetOrderCartCartIdNasha<TData = Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdNashaQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new NAS HA item in your cart
 */
export const postOrderCartCartIdNasha = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/nasha`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdNashaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNasha>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNasha>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdNasha>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdNasha(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdNashaMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdNasha>>>
    export type PostOrderCartCartIdNashaMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdNashaMutationError = unknown

    /**
 * @summary Post a new NAS HA item in your cart
 */
export const usePostOrderCartCartIdNasha = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNasha>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdNasha>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdNashaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about NAS HA options
 */
export const getOrderCartCartIdNashaOptions = (
    cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/nasha/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdNashaOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams,) => {
    return [`/order/cart/${cartId}/nasha/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdNashaOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdNashaOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>> = ({ signal }) => getOrderCartCartIdNashaOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdNashaOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>>
export type GetOrderCartCartIdNashaOptionsQueryError = unknown


export function useGetOrderCartCartIdNashaOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNashaOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNashaOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about NAS HA options
 */

export function useGetOrderCartCartIdNashaOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNashaOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNashaOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdNashaOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new NAS HA option in your cart
 */
export const postOrderCartCartIdNashaOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/nasha/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdNashaOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNashaOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNashaOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdNashaOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdNashaOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdNashaOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdNashaOptions>>>
    export type PostOrderCartCartIdNashaOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdNashaOptionsMutationError = unknown

    /**
 * @summary Post a new NAS HA option in your cart
 */
export const usePostOrderCartCartIdNashaOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNashaOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdNashaOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdNashaOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about NetApp offers
 */
export const getOrderCartCartIdNetapp = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/netapp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdNetappQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/netapp`] as const;
    }

    
export const getGetOrderCartCartIdNetappQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdNetappQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>> = ({ signal }) => getOrderCartCartIdNetapp(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdNetappQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>>
export type GetOrderCartCartIdNetappQueryError = unknown


export function useGetOrderCartCartIdNetapp<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNetapp<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNetapp<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about NetApp offers
 */

export function useGetOrderCartCartIdNetapp<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdNetappQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new NetApp offer item in your cart
 */
export const postOrderCartCartIdNetapp = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/netapp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdNetappMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNetapp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNetapp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdNetapp>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdNetapp(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdNetappMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdNetapp>>>
    export type PostOrderCartCartIdNetappMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdNetappMutationError = unknown

    /**
 * @summary Post a new NetApp offer item in your cart
 */
export const usePostOrderCartCartIdNetapp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNetapp>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdNetapp>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdNetappMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about NetApp options
 */
export const getOrderCartCartIdNetappOptions = (
    cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/netapp/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdNetappOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams,) => {
    return [`/order/cart/${cartId}/netapp/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdNetappOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdNetappOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>> = ({ signal }) => getOrderCartCartIdNetappOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdNetappOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>>
export type GetOrderCartCartIdNetappOptionsQueryError = unknown


export function useGetOrderCartCartIdNetappOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNetappOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNetappOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about NetApp options
 */

export function useGetOrderCartCartIdNetappOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNetappOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNetappOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdNetappOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new NetApp option in your cart
 */
export const postOrderCartCartIdNetappOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/netapp/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdNetappOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNetappOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNetappOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdNetappOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdNetappOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdNetappOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdNetappOptions>>>
    export type PostOrderCartCartIdNetappOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdNetappOptionsMutationError = unknown

    /**
 * @summary Post a new NetApp option in your cart
 */
export const usePostOrderCartCartIdNetappOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNetappOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdNetappOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdNetappOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a Nutanix
 */
export const getOrderCartCartIdNutanix = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/nutanix`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdNutanixQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/nutanix`] as const;
    }

    
export const getGetOrderCartCartIdNutanixQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdNutanixQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>> = ({ signal }) => getOrderCartCartIdNutanix(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdNutanixQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>>
export type GetOrderCartCartIdNutanixQueryError = unknown


export function useGetOrderCartCartIdNutanix<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNutanix<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNutanix<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a Nutanix
 */

export function useGetOrderCartCartIdNutanix<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdNutanixQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Nutanix item in your cart
 */
export const postOrderCartCartIdNutanix = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/nutanix`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdNutanixMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNutanix>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNutanix>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdNutanix>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdNutanix(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdNutanixMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdNutanix>>>
    export type PostOrderCartCartIdNutanixMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdNutanixMutationError = unknown

    /**
 * @summary Post a new Nutanix item in your cart
 */
export const usePostOrderCartCartIdNutanix = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNutanix>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdNutanix>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdNutanixMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about the options of a Nutanix
 */
export const getOrderCartCartIdNutanixOptions = (
    cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/nutanix/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdNutanixOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams,) => {
    return [`/order/cart/${cartId}/nutanix/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdNutanixOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdNutanixOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>> = ({ signal }) => getOrderCartCartIdNutanixOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdNutanixOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>>
export type GetOrderCartCartIdNutanixOptionsQueryError = unknown


export function useGetOrderCartCartIdNutanixOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNutanixOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdNutanixOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about the options of a Nutanix
 */

export function useGetOrderCartCartIdNutanixOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdNutanixOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdNutanixOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdNutanixOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Nutanix option in your cart
 */
export const postOrderCartCartIdNutanixOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/nutanix/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdNutanixOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNutanixOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNutanixOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdNutanixOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdNutanixOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdNutanixOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdNutanixOptions>>>
    export type PostOrderCartCartIdNutanixOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdNutanixOptionsMutationError = unknown

    /**
 * @summary Post a new Nutanix option in your cart
 */
export const usePostOrderCartCartIdNutanixOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdNutanixOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdNutanixOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdNutanixOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Office 365 licenses
 */
export const getOrderCartCartIdOffice365 = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/office365`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOffice365QueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/office365`] as const;
    }

    
export const getGetOrderCartCartIdOffice365QueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOffice365QueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>> = ({ signal }) => getOrderCartCartIdOffice365(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOffice365QueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>>
export type GetOrderCartCartIdOffice365QueryError = unknown


export function useGetOrderCartCartIdOffice365<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Office 365 licenses
 */

export function useGetOrderCartCartIdOffice365<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOffice365QueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Office 365 item in your cart
 */
export const postOrderCartCartIdOffice365 = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/office365`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOffice365MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOffice365>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOffice365(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOffice365MutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOffice365>>>
    export type PostOrderCartCartIdOffice365MutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOffice365MutationError = unknown

    /**
 * @summary Post a new Office 365 item in your cart
 */
export const usePostOrderCartCartIdOffice365 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOffice365>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOffice365MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Office 365 options
 */
export const getOrderCartCartIdOffice365Options = (
    cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/office365/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOffice365OptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams,) => {
    return [`/order/cart/${cartId}/office365/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdOffice365OptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOffice365OptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>> = ({ signal }) => getOrderCartCartIdOffice365Options(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOffice365OptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>>
export type GetOrderCartCartIdOffice365OptionsQueryError = unknown


export function useGetOrderCartCartIdOffice365Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Office 365 options
 */

export function useGetOrderCartCartIdOffice365Options<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365OptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Options>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOffice365OptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Office 365 option in your cart
 */
export const postOrderCartCartIdOffice365Options = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/office365/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOffice365OptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Options>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Options>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Options>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOffice365Options(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOffice365OptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Options>>>
    export type PostOrderCartCartIdOffice365OptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdOffice365OptionsMutationError = unknown

    /**
 * @summary Post a new Office 365 option in your cart
 */
export const usePostOrderCartCartIdOffice365Options = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Options>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOffice365Options>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOffice365OptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Office 365 Prepaid licenses
 */
export const getOrderCartCartIdOffice365Prepaid = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/office365Prepaid`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOffice365PrepaidQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/office365Prepaid`] as const;
    }

    
export const getGetOrderCartCartIdOffice365PrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOffice365PrepaidQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>> = ({ signal }) => getOrderCartCartIdOffice365Prepaid(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOffice365PrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>>
export type GetOrderCartCartIdOffice365PrepaidQueryError = unknown


export function useGetOrderCartCartIdOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Office 365 Prepaid licenses
 */

export function useGetOrderCartCartIdOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOffice365PrepaidQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Office 365 Prepaid item in your cart
 */
export const postOrderCartCartIdOffice365Prepaid = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/office365Prepaid`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOffice365PrepaidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Prepaid>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Prepaid>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Prepaid>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOffice365Prepaid(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOffice365PrepaidMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Prepaid>>>
    export type PostOrderCartCartIdOffice365PrepaidMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOffice365PrepaidMutationError = unknown

    /**
 * @summary Post a new Office 365 Prepaid item in your cart
 */
export const usePostOrderCartCartIdOffice365Prepaid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365Prepaid>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOffice365Prepaid>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOffice365PrepaidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Office 365 Prepaid options
 */
export const getOrderCartCartIdOffice365PrepaidOptions = (
    cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/office365Prepaid/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOffice365PrepaidOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams,) => {
    return [`/order/cart/${cartId}/office365Prepaid/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdOffice365PrepaidOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOffice365PrepaidOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>> = ({ signal }) => getOrderCartCartIdOffice365PrepaidOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOffice365PrepaidOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>>
export type GetOrderCartCartIdOffice365PrepaidOptionsQueryError = unknown


export function useGetOrderCartCartIdOffice365PrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365PrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOffice365PrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Office 365 Prepaid options
 */

export function useGetOrderCartCartIdOffice365PrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOffice365PrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOffice365PrepaidOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOffice365PrepaidOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Office 365 Prepaid option in your cart
 */
export const postOrderCartCartIdOffice365PrepaidOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/office365Prepaid/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOffice365PrepaidOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365PrepaidOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365PrepaidOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOffice365PrepaidOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOffice365PrepaidOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOffice365PrepaidOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOffice365PrepaidOptions>>>
    export type PostOrderCartCartIdOffice365PrepaidOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdOffice365PrepaidOptionsMutationError = unknown

    /**
 * @summary Post a new Office 365 Prepaid option in your cart
 */
export const usePostOrderCartCartIdOffice365PrepaidOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOffice365PrepaidOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOffice365PrepaidOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOffice365PrepaidOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a officePrepaid
 */
export const getOrderCartCartIdOfficePrepaid = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/officePrepaid`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOfficePrepaidQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/officePrepaid`] as const;
    }

    
export const getGetOrderCartCartIdOfficePrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOfficePrepaidQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>> = ({ signal }) => getOrderCartCartIdOfficePrepaid(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOfficePrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>>
export type GetOrderCartCartIdOfficePrepaidQueryError = unknown


export function useGetOrderCartCartIdOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a officePrepaid
 */

export function useGetOrderCartCartIdOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOfficePrepaidQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new officePrepaid item in your cart
 */
export const postOrderCartCartIdOfficePrepaid = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/officePrepaid`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOfficePrepaidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaid>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaid>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaid>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOfficePrepaid(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOfficePrepaidMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaid>>>
    export type PostOrderCartCartIdOfficePrepaidMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOfficePrepaidMutationError = unknown

    /**
 * @summary Post a new officePrepaid item in your cart
 */
export const usePostOrderCartCartIdOfficePrepaid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaid>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaid>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOfficePrepaidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about officePrepaid options
 */
export const getOrderCartCartIdOfficePrepaidOptions = (
    cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/officePrepaid/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOfficePrepaidOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams,) => {
    return [`/order/cart/${cartId}/officePrepaid/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdOfficePrepaidOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOfficePrepaidOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>> = ({ signal }) => getOrderCartCartIdOfficePrepaidOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOfficePrepaidOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>>
export type GetOrderCartCartIdOfficePrepaidOptionsQueryError = unknown


export function useGetOrderCartCartIdOfficePrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOfficePrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOfficePrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about officePrepaid options
 */

export function useGetOrderCartCartIdOfficePrepaidOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOfficePrepaidOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOfficePrepaidOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOfficePrepaidOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new officePrepaid option in your cart
 */
export const postOrderCartCartIdOfficePrepaidOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/officePrepaid/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOfficePrepaidOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaidOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaidOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaidOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOfficePrepaidOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOfficePrepaidOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaidOptions>>>
    export type PostOrderCartCartIdOfficePrepaidOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdOfficePrepaidOptionsMutationError = unknown

    /**
 * @summary Post a new officePrepaid option in your cart
 */
export const usePostOrderCartCartIdOfficePrepaidOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaidOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOfficePrepaidOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOfficePrepaidOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all OVHcloud KMS offers available
 */
export const getOrderCartCartIdOkms = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/okms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOkmsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/okms`] as const;
    }

    
export const getGetOrderCartCartIdOkmsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOkmsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>> = ({ signal }) => getOrderCartCartIdOkms(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOkmsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>>
export type GetOrderCartCartIdOkmsQueryError = unknown


export function useGetOrderCartCartIdOkms<TData = Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOkms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOkms<TData = Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOkms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOkms<TData = Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all OVHcloud KMS offers available
 */

export function useGetOrderCartCartIdOkms<TData = Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOkms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOkmsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an OVHcloud KMS offer in your cart
 */
export const postOrderCartCartIdOkms = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/okms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOkmsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOkms>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOkms>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOkms>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOkms(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOkmsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOkms>>>
    export type PostOrderCartCartIdOkmsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOkmsMutationError = unknown

    /**
 * @summary Add an OVHcloud KMS offer in your cart
 */
export const usePostOrderCartCartIdOkms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOkms>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOkms>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOkmsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about OverTheBox offers
 */
export const getOrderCartCartIdOtb = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/otb`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOtbQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/otb`] as const;
    }

    
export const getGetOrderCartCartIdOtbQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOtbQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>> = ({ signal }) => getOrderCartCartIdOtb(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOtbQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>>
export type GetOrderCartCartIdOtbQueryError = unknown


export function useGetOrderCartCartIdOtb<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtb<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtb<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about OverTheBox offers
 */

export function useGetOrderCartCartIdOtb<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOtbQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new OverTheBox item in your cart
 */
export const postOrderCartCartIdOtb = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/otb`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOtbMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOtb>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOtb(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOtbMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOtb>>>
    export type PostOrderCartCartIdOtbMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOtbMutationError = unknown

    /**
 * @summary Post a new OverTheBox item in your cart
 */
export const usePostOrderCartCartIdOtb = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtb>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOtb>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOtbMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about OverTheBox options
 */
export const getOrderCartCartIdOtbOptions = (
    cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/otb/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOtbOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams,) => {
    return [`/order/cart/${cartId}/otb/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdOtbOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOtbOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>> = ({ signal }) => getOrderCartCartIdOtbOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOtbOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>>
export type GetOrderCartCartIdOtbOptionsQueryError = unknown


export function useGetOrderCartCartIdOtbOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtbOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtbOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about OverTheBox options
 */

export function useGetOrderCartCartIdOtbOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOtbOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new OverTheBox option in your cart
 */
export const postOrderCartCartIdOtbOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/otb/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOtbOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOtbOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOtbOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOtbOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOtbOptions>>>
    export type PostOrderCartCartIdOtbOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdOtbOptionsMutationError = unknown

    /**
 * @summary Post a new OverTheBox option in your cart
 */
export const usePostOrderCartCartIdOtbOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOtbOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOtbOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about OverTheBox offers
 */
export const getOrderCartCartIdOtbReseller = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/otbReseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOtbResellerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/otbReseller`] as const;
    }

    
export const getGetOrderCartCartIdOtbResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOtbResellerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>> = ({ signal }) => getOrderCartCartIdOtbReseller(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOtbResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>>
export type GetOrderCartCartIdOtbResellerQueryError = unknown


export function useGetOrderCartCartIdOtbReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtbReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtbReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about OverTheBox offers
 */

export function useGetOrderCartCartIdOtbReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOtbResellerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new OverTheBox item in your cart
 */
export const postOrderCartCartIdOtbReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/otbReseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOtbResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOtbReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOtbReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOtbResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOtbReseller>>>
    export type PostOrderCartCartIdOtbResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOtbResellerMutationError = unknown

    /**
 * @summary Post a new OverTheBox item in your cart
 */
export const usePostOrderCartCartIdOtbReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOtbReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOtbResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about OverTheBox options
 */
export const getOrderCartCartIdOtbResellerOptions = (
    cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/otbReseller/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOtbResellerOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams,) => {
    return [`/order/cart/${cartId}/otbReseller/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdOtbResellerOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOtbResellerOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>> = ({ signal }) => getOrderCartCartIdOtbResellerOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOtbResellerOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>>
export type GetOrderCartCartIdOtbResellerOptionsQueryError = unknown


export function useGetOrderCartCartIdOtbResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtbResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOtbResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about OverTheBox options
 */

export function useGetOrderCartCartIdOtbResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdOtbResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOtbResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOtbResellerOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new OverTheBox option in your cart
 */
export const postOrderCartCartIdOtbResellerOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/otbReseller/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOtbResellerOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOtbResellerOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOtbResellerOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOtbResellerOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOtbResellerOptions>>>
    export type PostOrderCartCartIdOtbResellerOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdOtbResellerOptionsMutationError = unknown

    /**
 * @summary Post a new OverTheBox option in your cart
 */
export const usePostOrderCartCartIdOtbResellerOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOtbResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOtbResellerOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOtbResellerOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about OVHcloud Connect offers
 */
export const getOrderCartCartIdOvhCloudConnect = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/ovhCloudConnect`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdOvhCloudConnectQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/ovhCloudConnect`] as const;
    }

    
export const getGetOrderCartCartIdOvhCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdOvhCloudConnectQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>> = ({ signal }) => getOrderCartCartIdOvhCloudConnect(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdOvhCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>>
export type GetOrderCartCartIdOvhCloudConnectQueryError = unknown


export function useGetOrderCartCartIdOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about OVHcloud Connect offers
 */

export function useGetOrderCartCartIdOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdOvhCloudConnectQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new OVHcloud Connect item in your cart
 */
export const postOrderCartCartIdOvhCloudConnect = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/ovhCloudConnect`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdOvhCloudConnectMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOvhCloudConnect>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOvhCloudConnect>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdOvhCloudConnect>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdOvhCloudConnect(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdOvhCloudConnectMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdOvhCloudConnect>>>
    export type PostOrderCartCartIdOvhCloudConnectMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdOvhCloudConnectMutationError = unknown

    /**
 * @summary Post a new OVHcloud Connect item in your cart
 */
export const usePostOrderCartCartIdOvhCloudConnect = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdOvhCloudConnect>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdOvhCloudConnect>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdOvhCloudConnectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about PaaS Monitoring offers
 */
export const getOrderCartCartIdPaasmon = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/paasmon`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPaasmonQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/paasmon`] as const;
    }

    
export const getGetOrderCartCartIdPaasmonQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPaasmonQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>> = ({ signal }) => getOrderCartCartIdPaasmon(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPaasmonQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>>
export type GetOrderCartCartIdPaasmonQueryError = unknown


export function useGetOrderCartCartIdPaasmon<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPaasmon<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPaasmon<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about PaaS Monitoring offers
 */

export function useGetOrderCartCartIdPaasmon<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasmon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPaasmonQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new PaaS Monitoring item in your cart
 */
export const postOrderCartCartIdPaasmon = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/paasmon`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPaasmonMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPaasmon>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPaasmon>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPaasmon>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPaasmon(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPaasmonMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPaasmon>>>
    export type PostOrderCartCartIdPaasmonMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPaasmonMutationError = unknown

    /**
 * @summary Post a new PaaS Monitoring item in your cart
 */
export const usePostOrderCartCartIdPaasmon = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPaasmon>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPaasmon>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPaasmonMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about PaaS Queue offers
 */
export const getOrderCartCartIdPaasqueue = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/paasqueue`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPaasqueueQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/paasqueue`] as const;
    }

    
export const getGetOrderCartCartIdPaasqueueQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPaasqueueQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>> = ({ signal }) => getOrderCartCartIdPaasqueue(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPaasqueueQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>>
export type GetOrderCartCartIdPaasqueueQueryError = unknown


export function useGetOrderCartCartIdPaasqueue<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPaasqueue<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPaasqueue<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about PaaS Queue offers
 */

export function useGetOrderCartCartIdPaasqueue<TData = Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPaasqueue>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPaasqueueQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new PaaS Queue item in your cart
 */
export const postOrderCartCartIdPaasqueue = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/paasqueue`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPaasqueueMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPaasqueue>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPaasqueue>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPaasqueue>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPaasqueue(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPaasqueueMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPaasqueue>>>
    export type PostOrderCartCartIdPaasqueueMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPaasqueueMutationError = unknown

    /**
 * @summary Post a new PaaS Queue item in your cart
 */
export const usePostOrderCartCartIdPaasqueue = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPaasqueue>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPaasqueue>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPaasqueueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about a packs professional services
 */
export const getOrderCartCartIdPacksProfessionalServices = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/packsProfessionalServices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPacksProfessionalServicesQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/packsProfessionalServices`] as const;
    }

    
export const getGetOrderCartCartIdPacksProfessionalServicesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPacksProfessionalServicesQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>> = ({ signal }) => getOrderCartCartIdPacksProfessionalServices(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPacksProfessionalServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>>
export type GetOrderCartCartIdPacksProfessionalServicesQueryError = unknown


export function useGetOrderCartCartIdPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about a packs professional services
 */

export function useGetOrderCartCartIdPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPacksProfessionalServicesQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new packs professional services item in your cart
 */
export const postOrderCartCartIdPacksProfessionalServices = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/packsProfessionalServices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPacksProfessionalServicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServices>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPacksProfessionalServices(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPacksProfessionalServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServices>>>
    export type PostOrderCartCartIdPacksProfessionalServicesMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPacksProfessionalServicesMutationError = unknown

    /**
 * @summary Post a new packs professional services item in your cart
 */
export const usePostOrderCartCartIdPacksProfessionalServices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServices>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPacksProfessionalServicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about packs professional services options
 */
export const getOrderCartCartIdPacksProfessionalServicesOptions = (
    cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/packsProfessionalServices/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPacksProfessionalServicesOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams,) => {
    return [`/order/cart/${cartId}/packsProfessionalServices/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdPacksProfessionalServicesOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPacksProfessionalServicesOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>> = ({ signal }) => getOrderCartCartIdPacksProfessionalServicesOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPacksProfessionalServicesOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>>
export type GetOrderCartCartIdPacksProfessionalServicesOptionsQueryError = unknown


export function useGetOrderCartCartIdPacksProfessionalServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPacksProfessionalServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPacksProfessionalServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about packs professional services options
 */

export function useGetOrderCartCartIdPacksProfessionalServicesOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPacksProfessionalServicesOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPacksProfessionalServicesOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPacksProfessionalServicesOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new packs professional services option in your cart
 */
export const postOrderCartCartIdPacksProfessionalServicesOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/packsProfessionalServices/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPacksProfessionalServicesOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServicesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServicesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServicesOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPacksProfessionalServicesOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPacksProfessionalServicesOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServicesOptions>>>
    export type PostOrderCartCartIdPacksProfessionalServicesOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdPacksProfessionalServicesOptionsMutationError = unknown

    /**
 * @summary Post a new packs professional services option in your cart
 */
export const usePostOrderCartCartIdPacksProfessionalServicesOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServicesOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPacksProfessionalServicesOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPacksProfessionalServicesOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about power hosting offer
 */
export const getOrderCartCartIdPowerHosting = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/powerHosting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPowerHostingQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/powerHosting`] as const;
    }

    
export const getGetOrderCartCartIdPowerHostingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPowerHostingQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>> = ({ signal }) => getOrderCartCartIdPowerHosting(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPowerHostingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>>
export type GetOrderCartCartIdPowerHostingQueryError = unknown


export function useGetOrderCartCartIdPowerHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPowerHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPowerHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about power hosting offer
 */

export function useGetOrderCartCartIdPowerHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPowerHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPowerHostingQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new power hosting item in your cart
 */
export const postOrderCartCartIdPowerHosting = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/powerHosting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPowerHostingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPowerHosting>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPowerHosting>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPowerHosting>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPowerHosting(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPowerHostingMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPowerHosting>>>
    export type PostOrderCartCartIdPowerHostingMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPowerHostingMutationError = unknown

    /**
 * @summary Post a new power hosting item in your cart
 */
export const usePostOrderCartCartIdPowerHosting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPowerHosting>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPowerHosting>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPowerHostingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Hosted Private Cloud offers
 */
export const getOrderCartCartIdPrivateCloud = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/privateCloud`] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>> = ({ signal }) => getOrderCartCartIdPrivateCloud(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>>
export type GetOrderCartCartIdPrivateCloudQueryError = unknown


export function useGetOrderCartCartIdPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Hosted Private Cloud offers
 */

export function useGetOrderCartCartIdPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Hosted Private Cloud item in your cart
 */
export const postOrderCartCartIdPrivateCloud = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloud>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloud(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloud>>>
    export type PostOrderCartCartIdPrivateCloudMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPrivateCloudMutationError = unknown

    /**
 * @summary Post a new Hosted Private Cloud item in your cart
 */
export const usePostOrderCartCartIdPrivateCloud = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloud>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloud>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Hosted Private Cloud options
 */
export const getOrderCartCartIdPrivateCloudOptions = (
    cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloud/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams,) => {
    return [`/order/cart/${cartId}/privateCloud/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>> = ({ signal }) => getOrderCartCartIdPrivateCloudOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>>
export type GetOrderCartCartIdPrivateCloudOptionsQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Hosted Private Cloud options
 */

export function useGetOrderCartCartIdPrivateCloudOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Hosted Private Cloud option in your cart
 */
export const postOrderCartCartIdPrivateCloudOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloud/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudOptions>>>
    export type PostOrderCartCartIdPrivateCloudOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdPrivateCloudOptionsMutationError = unknown

    /**
 * @summary Post a new Hosted Private Cloud option in your cart
 */
export const usePostOrderCartCartIdPrivateCloudOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Hosted Private Cloud offers
 */
export const getOrderCartCartIdPrivateCloudEnterprise = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloudEnterprise`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudEnterpriseQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/privateCloudEnterprise`] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudEnterpriseQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>> = ({ signal }) => getOrderCartCartIdPrivateCloudEnterprise(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>>
export type GetOrderCartCartIdPrivateCloudEnterpriseQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Hosted Private Cloud offers
 */

export function useGetOrderCartCartIdPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudEnterpriseQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Hosted Private Cloud item in your cart
 */
export const postOrderCartCartIdPrivateCloudEnterprise = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloudEnterprise`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudEnterpriseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterprise>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudEnterprise(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudEnterpriseMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterprise>>>
    export type PostOrderCartCartIdPrivateCloudEnterpriseMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPrivateCloudEnterpriseMutationError = unknown

    /**
 * @summary Post a new Hosted Private Cloud item in your cart
 */
export const usePostOrderCartCartIdPrivateCloudEnterprise = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterprise>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudEnterpriseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Hosted Private Cloud options
 */
export const getOrderCartCartIdPrivateCloudEnterpriseOptions = (
    cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloudEnterprise/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudEnterpriseOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams,) => {
    return [`/order/cart/${cartId}/privateCloudEnterprise/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudEnterpriseOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudEnterpriseOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>> = ({ signal }) => getOrderCartCartIdPrivateCloudEnterpriseOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudEnterpriseOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>>
export type GetOrderCartCartIdPrivateCloudEnterpriseOptionsQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Hosted Private Cloud options
 */

export function useGetOrderCartCartIdPrivateCloudEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudEnterpriseOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Hosted Private Cloud option in your cart
 */
export const postOrderCartCartIdPrivateCloudEnterpriseOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloudEnterprise/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudEnterpriseOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterpriseOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudEnterpriseOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudEnterpriseOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterpriseOptions>>>
    export type PostOrderCartCartIdPrivateCloudEnterpriseOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdPrivateCloudEnterpriseOptionsMutationError = unknown

    /**
 * @summary Post a new Hosted Private Cloud option in your cart
 */
export const usePostOrderCartCartIdPrivateCloudEnterpriseOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudEnterpriseOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudEnterpriseOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Private Cloud Reseller offers
 */
export const getOrderCartCartIdPrivateCloudReseller = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloudReseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudResellerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/privateCloudReseller`] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudResellerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>> = ({ signal }) => getOrderCartCartIdPrivateCloudReseller(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>>
export type GetOrderCartCartIdPrivateCloudResellerQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Private Cloud Reseller offers
 */

export function useGetOrderCartCartIdPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudResellerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Private Cloud Reseller item in your cart
 */
export const postOrderCartCartIdPrivateCloudReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloudReseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudReseller>>>
    export type PostOrderCartCartIdPrivateCloudResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPrivateCloudResellerMutationError = unknown

    /**
 * @summary Post a new Private Cloud Reseller item in your cart
 */
export const usePostOrderCartCartIdPrivateCloudReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Private Cloud Reseller options
 */
export const getOrderCartCartIdPrivateCloudResellerOptions = (
    cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloudReseller/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudResellerOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams,) => {
    return [`/order/cart/${cartId}/privateCloudReseller/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudResellerOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudResellerOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>> = ({ signal }) => getOrderCartCartIdPrivateCloudResellerOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudResellerOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>>
export type GetOrderCartCartIdPrivateCloudResellerOptionsQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Private Cloud Reseller options
 */

export function useGetOrderCartCartIdPrivateCloudResellerOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudResellerOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Private Cloud Reseller option in your cart
 */
export const postOrderCartCartIdPrivateCloudResellerOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloudReseller/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudResellerOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudResellerOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudResellerOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerOptions>>>
    export type PostOrderCartCartIdPrivateCloudResellerOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdPrivateCloudResellerOptionsMutationError = unknown

    /**
 * @summary Post a new Private Cloud Reseller option in your cart
 */
export const usePostOrderCartCartIdPrivateCloudResellerOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudResellerOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Private Cloud Reseller Enterprise offers
 */
export const getOrderCartCartIdPrivateCloudResellerEnterprise = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloudResellerEnterprise`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudResellerEnterpriseQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/privateCloudResellerEnterprise`] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudResellerEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudResellerEnterpriseQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>> = ({ signal }) => getOrderCartCartIdPrivateCloudResellerEnterprise(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudResellerEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>>
export type GetOrderCartCartIdPrivateCloudResellerEnterpriseQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Private Cloud Reseller Enterprise offers
 */

export function useGetOrderCartCartIdPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudResellerEnterpriseQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Private Cloud Reseller Enterprise item in your cart
 */
export const postOrderCartCartIdPrivateCloudResellerEnterprise = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloudResellerEnterprise`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudResellerEnterpriseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterprise>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudResellerEnterprise(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudResellerEnterpriseMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterprise>>>
    export type PostOrderCartCartIdPrivateCloudResellerEnterpriseMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPrivateCloudResellerEnterpriseMutationError = unknown

    /**
 * @summary Post a new Private Cloud Reseller Enterprise item in your cart
 */
export const usePostOrderCartCartIdPrivateCloudResellerEnterprise = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterprise>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudResellerEnterpriseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Private Cloud Reseller Enterprise options
 */
export const getOrderCartCartIdPrivateCloudResellerEnterpriseOptions = (
    cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateCloudResellerEnterprise/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams,) => {
    return [`/order/cart/${cartId}/privateCloudResellerEnterprise/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>> = ({ signal }) => getOrderCartCartIdPrivateCloudResellerEnterpriseOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>>
export type GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsQueryError = unknown


export function useGetOrderCartCartIdPrivateCloudResellerEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudResellerEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateCloudResellerEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Private Cloud Reseller Enterprise options
 */

export function useGetOrderCartCartIdPrivateCloudResellerEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Private Cloud Reseller Enterprise option in your cart
 */
export const postOrderCartCartIdPrivateCloudResellerEnterpriseOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateCloudResellerEnterprise/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateCloudResellerEnterpriseOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>>
    export type PostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsMutationError = unknown

    /**
 * @summary Post a new Private Cloud Reseller Enterprise option in your cart
 */
export const usePostOrderCartCartIdPrivateCloudResellerEnterpriseOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateCloudResellerEnterpriseOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all privateSQL offers available
 */
export const getOrderCartCartIdPrivateSQL = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/privateSQL`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdPrivateSQLQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/privateSQL`] as const;
    }

    
export const getGetOrderCartCartIdPrivateSQLQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdPrivateSQLQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>> = ({ signal }) => getOrderCartCartIdPrivateSQL(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdPrivateSQLQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>>
export type GetOrderCartCartIdPrivateSQLQueryError = unknown


export function useGetOrderCartCartIdPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all privateSQL offers available
 */

export function useGetOrderCartCartIdPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdPrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdPrivateSQLQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a privateSQL in your cart
 */
export const postOrderCartCartIdPrivateSQL = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/privateSQL`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdPrivateSQLMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateSQL>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateSQL>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdPrivateSQL>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdPrivateSQL(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdPrivateSQLMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdPrivateSQL>>>
    export type PostOrderCartCartIdPrivateSQLMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdPrivateSQLMutationError = unknown

    /**
 * @summary Add a privateSQL in your cart
 */
export const usePostOrderCartCartIdPrivateSQL = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdPrivateSQL>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdPrivateSQL>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdPrivateSQLMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Reseller offers
 */
export const getOrderCartCartIdReseller = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/reseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdResellerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/reseller`] as const;
    }

    
export const getGetOrderCartCartIdResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdResellerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>> = ({ signal }) => getOrderCartCartIdReseller(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>>
export type GetOrderCartCartIdResellerQueryError = unknown


export function useGetOrderCartCartIdReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Reseller offers
 */

export function useGetOrderCartCartIdReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdResellerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Reseller offer item in your cart
 */
export const postOrderCartCartIdReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/reseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdReseller>>>
    export type PostOrderCartCartIdResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdResellerMutationError = unknown

    /**
 * @summary Post a new Reseller offer item in your cart
 */
export const usePostOrderCartCartIdReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Sharepoint offers
 */
export const getOrderCartCartIdSharepoint = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sharepoint`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSharepointQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/sharepoint`] as const;
    }

    
export const getGetOrderCartCartIdSharepointQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSharepointQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>> = ({ signal }) => getOrderCartCartIdSharepoint(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSharepointQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>>
export type GetOrderCartCartIdSharepointQueryError = unknown


export function useGetOrderCartCartIdSharepoint<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSharepoint<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSharepoint<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Sharepoint offers
 */

export function useGetOrderCartCartIdSharepoint<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSharepointQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Sharepoint offer item in your cart
 */
export const postOrderCartCartIdSharepoint = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sharepoint`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSharepointMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSharepoint>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSharepoint>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSharepoint>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSharepoint(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSharepointMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSharepoint>>>
    export type PostOrderCartCartIdSharepointMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdSharepointMutationError = unknown

    /**
 * @summary Post a new Sharepoint offer item in your cart
 */
export const usePostOrderCartCartIdSharepoint = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSharepoint>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSharepoint>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSharepointMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Sharepoint options
 */
export const getOrderCartCartIdSharepointOptions = (
    cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sharepoint/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSharepointOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams,) => {
    return [`/order/cart/${cartId}/sharepoint/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdSharepointOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSharepointOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>> = ({ signal }) => getOrderCartCartIdSharepointOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSharepointOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>>
export type GetOrderCartCartIdSharepointOptionsQueryError = unknown


export function useGetOrderCartCartIdSharepointOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSharepointOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSharepointOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Sharepoint options
 */

export function useGetOrderCartCartIdSharepointOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSharepointOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSharepointOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSharepointOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Sharepoint option in your cart
 */
export const postOrderCartCartIdSharepointOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sharepoint/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSharepointOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSharepointOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSharepointOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSharepointOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSharepointOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSharepointOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSharepointOptions>>>
    export type PostOrderCartCartIdSharepointOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdSharepointOptionsMutationError = unknown

    /**
 * @summary Post a new Sharepoint option in your cart
 */
export const usePostOrderCartCartIdSharepointOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSharepointOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSharepointOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSharepointOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SMS offers
 */
export const getOrderCartCartIdSms = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSmsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/sms`] as const;
    }

    
export const getGetOrderCartCartIdSmsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSmsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSms>>> = ({ signal }) => getOrderCartCartIdSms(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSmsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSms>>>
export type GetOrderCartCartIdSmsQueryError = unknown


export function useGetOrderCartCartIdSms<TData = Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSms<TData = Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSms<TData = Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SMS offers
 */

export function useGetOrderCartCartIdSms<TData = Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSmsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SMS item in your cart
 */
export const postOrderCartCartIdSms = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSmsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSms>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSms>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSms>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSms(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSmsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSms>>>
    export type PostOrderCartCartIdSmsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdSmsMutationError = unknown

    /**
 * @summary Post a new SMS item in your cart
 */
export const usePostOrderCartCartIdSms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSms>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSms>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSmsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SSL Comodo offers
 */
export const getOrderCartCartIdSslComodo = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sslComodo`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSslComodoQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/sslComodo`] as const;
    }

    
export const getGetOrderCartCartIdSslComodoQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSslComodoQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>> = ({ signal }) => getOrderCartCartIdSslComodo(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSslComodoQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>>
export type GetOrderCartCartIdSslComodoQueryError = unknown


export function useGetOrderCartCartIdSslComodo<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslComodo<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslComodo<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SSL Comodo offers
 */

export function useGetOrderCartCartIdSslComodo<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSslComodoQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SSL Comodo item in your cart
 */
export const postOrderCartCartIdSslComodo = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sslComodo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSslComodoMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslComodo>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslComodo>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSslComodo>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSslComodo(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSslComodoMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSslComodo>>>
    export type PostOrderCartCartIdSslComodoMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdSslComodoMutationError = unknown

    /**
 * @summary Post a new SSL Comodo item in your cart
 */
export const usePostOrderCartCartIdSslComodo = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslComodo>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSslComodo>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSslComodoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SSL Comodo options
 */
export const getOrderCartCartIdSslComodoOptions = (
    cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sslComodo/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSslComodoOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams,) => {
    return [`/order/cart/${cartId}/sslComodo/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdSslComodoOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSslComodoOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>> = ({ signal }) => getOrderCartCartIdSslComodoOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSslComodoOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>>
export type GetOrderCartCartIdSslComodoOptionsQueryError = unknown


export function useGetOrderCartCartIdSslComodoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslComodoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslComodoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SSL Comodo options
 */

export function useGetOrderCartCartIdSslComodoOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslComodoOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslComodoOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSslComodoOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SSL Comodo option in your cart
 */
export const postOrderCartCartIdSslComodoOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sslComodo/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSslComodoOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslComodoOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslComodoOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSslComodoOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSslComodoOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSslComodoOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSslComodoOptions>>>
    export type PostOrderCartCartIdSslComodoOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdSslComodoOptionsMutationError = unknown

    /**
 * @summary Post a new SSL Comodo option in your cart
 */
export const usePostOrderCartCartIdSslComodoOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslComodoOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSslComodoOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSslComodoOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SSL Gateway offers
 */
export const getOrderCartCartIdSslGateway = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sslGateway`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSslGatewayQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/sslGateway`] as const;
    }

    
export const getGetOrderCartCartIdSslGatewayQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSslGatewayQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>> = ({ signal }) => getOrderCartCartIdSslGateway(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSslGatewayQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>>
export type GetOrderCartCartIdSslGatewayQueryError = unknown


export function useGetOrderCartCartIdSslGateway<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslGateway<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslGateway<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SSL Gateway offers
 */

export function useGetOrderCartCartIdSslGateway<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSslGatewayQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SSL Gateway item in your cart
 */
export const postOrderCartCartIdSslGateway = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sslGateway`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSslGatewayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslGateway>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslGateway>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSslGateway>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSslGateway(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSslGatewayMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSslGateway>>>
    export type PostOrderCartCartIdSslGatewayMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdSslGatewayMutationError = unknown

    /**
 * @summary Post a new SSL Gateway item in your cart
 */
export const usePostOrderCartCartIdSslGateway = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslGateway>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSslGateway>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSslGatewayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about SSL Gateway options
 */
export const getOrderCartCartIdSslGatewayOptions = (
    cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/sslGateway/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSslGatewayOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams,) => {
    return [`/order/cart/${cartId}/sslGateway/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdSslGatewayOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSslGatewayOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>> = ({ signal }) => getOrderCartCartIdSslGatewayOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSslGatewayOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>>
export type GetOrderCartCartIdSslGatewayOptionsQueryError = unknown


export function useGetOrderCartCartIdSslGatewayOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslGatewayOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSslGatewayOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about SSL Gateway options
 */

export function useGetOrderCartCartIdSslGatewayOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdSslGatewayOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSslGatewayOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSslGatewayOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new SSL Gateway option in your cart
 */
export const postOrderCartCartIdSslGatewayOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/sslGateway/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSslGatewayOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslGatewayOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslGatewayOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSslGatewayOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSslGatewayOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSslGatewayOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSslGatewayOptions>>>
    export type PostOrderCartCartIdSslGatewayOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdSslGatewayOptionsMutationError = unknown

    /**
 * @summary Post a new SSL Gateway option in your cart
 */
export const usePostOrderCartCartIdSslGatewayOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSslGatewayOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSslGatewayOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSslGatewayOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a summary of your current order
 */
export const getOrderCartCartIdSummary = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cart/${cartId}/summary`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSummaryQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/summary`] as const;
    }

    
export const getGetOrderCartCartIdSummaryQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSummaryQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>> = ({ signal }) => getOrderCartCartIdSummary(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>>
export type GetOrderCartCartIdSummaryQueryError = unknown


export function useGetOrderCartCartIdSummary<TData = Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSummary>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSummary<TData = Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSummary>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSummary<TData = Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a summary of your current order
 */

export function useGetOrderCartCartIdSummary<TData = Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSummary>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSummaryQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all support offers available
 */
export const getOrderCartCartIdSupport = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/support`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdSupportQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/support`] as const;
    }

    
export const getGetOrderCartCartIdSupportQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdSupportQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>> = ({ signal }) => getOrderCartCartIdSupport(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdSupportQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>>
export type GetOrderCartCartIdSupportQueryError = unknown


export function useGetOrderCartCartIdSupport<TData = Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSupport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSupport<TData = Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdSupport>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdSupport<TData = Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all support offers available
 */

export function useGetOrderCartCartIdSupport<TData = Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdSupport>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdSupportQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a support offer in your cart
 */
export const postOrderCartCartIdSupport = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/support`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdSupportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSupport>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSupport>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdSupport>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdSupport(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdSupportMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdSupport>>>
    export type PostOrderCartCartIdSupportMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdSupportMutationError = unknown

    /**
 * @summary Add a support offer in your cart
 */
export const usePostOrderCartCartIdSupport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdSupport>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdSupport>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdSupportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about VoIP offers
 */
export const getOrderCartCartIdTelephony = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/telephony`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdTelephonyQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/telephony`] as const;
    }

    
export const getGetOrderCartCartIdTelephonyQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdTelephonyQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>> = ({ signal }) => getOrderCartCartIdTelephony(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdTelephonyQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>>
export type GetOrderCartCartIdTelephonyQueryError = unknown


export function useGetOrderCartCartIdTelephony<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdTelephony<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdTelephony<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about VoIP offers
 */

export function useGetOrderCartCartIdTelephony<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdTelephonyQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new VoIP item in your cart
 */
export const postOrderCartCartIdTelephony = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/telephony`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdTelephonyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdTelephony>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdTelephony>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdTelephony>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdTelephony(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdTelephonyMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdTelephony>>>
    export type PostOrderCartCartIdTelephonyMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdTelephonyMutationError = unknown

    /**
 * @summary Post a new VoIP item in your cart
 */
export const usePostOrderCartCartIdTelephony = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdTelephony>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdTelephony>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdTelephonyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about VoIP options
 */
export const getOrderCartCartIdTelephonyOptions = (
    cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/telephony/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdTelephonyOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams,) => {
    return [`/order/cart/${cartId}/telephony/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdTelephonyOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdTelephonyOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>> = ({ signal }) => getOrderCartCartIdTelephonyOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdTelephonyOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>>
export type GetOrderCartCartIdTelephonyOptionsQueryError = unknown


export function useGetOrderCartCartIdTelephonyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdTelephonyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdTelephonyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about VoIP options
 */

export function useGetOrderCartCartIdTelephonyOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdTelephonyOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdTelephonyOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdTelephonyOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new VoIP option in your cart
 */
export const postOrderCartCartIdTelephonyOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/telephony/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdTelephonyOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdTelephonyOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdTelephonyOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdTelephonyOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdTelephonyOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdTelephonyOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdTelephonyOptions>>>
    export type PostOrderCartCartIdTelephonyOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdTelephonyOptionsMutationError = unknown

    /**
 * @summary Post a new VoIP option in your cart
 */
export const usePostOrderCartCartIdTelephonyOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdTelephonyOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdTelephonyOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdTelephonyOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Horizon View offers
 */
export const getOrderCartCartIdVdi = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vdi`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVdiQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/vdi`] as const;
    }

    
export const getGetOrderCartCartIdVdiQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVdiQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>> = ({ signal }) => getOrderCartCartIdVdi(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVdiQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>>
export type GetOrderCartCartIdVdiQueryError = unknown


export function useGetOrderCartCartIdVdi<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVdi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVdi<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVdi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVdi<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Horizon View offers
 */

export function useGetOrderCartCartIdVdi<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVdiQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Horizon View item in your cart
 */
export const postOrderCartCartIdVdi = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vdi`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVdiMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVdi>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVdi>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVdi>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVdi(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVdiMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVdi>>>
    export type PostOrderCartCartIdVdiMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVdiMutationError = unknown

    /**
 * @summary Post a new Horizon View item in your cart
 */
export const usePostOrderCartCartIdVdi = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVdi>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVdi>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVdiMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Horizon View options
 */
export const getOrderCartCartIdVdiOptions = (
    cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vdi/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVdiOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams,) => {
    return [`/order/cart/${cartId}/vdi/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdVdiOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVdiOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>> = ({ signal }) => getOrderCartCartIdVdiOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVdiOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>>
export type GetOrderCartCartIdVdiOptionsQueryError = unknown


export function useGetOrderCartCartIdVdiOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVdiOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVdiOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Horizon View options
 */

export function useGetOrderCartCartIdVdiOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVdiOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVdiOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVdiOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Horizon View option in your cart
 */
export const postOrderCartCartIdVdiOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vdi/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVdiOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVdiOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVdiOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVdiOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVdiOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVdiOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVdiOptions>>>
    export type PostOrderCartCartIdVdiOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdVdiOptionsMutationError = unknown

    /**
 * @summary Post a new Horizon View option in your cart
 */
export const usePostOrderCartCartIdVdiOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVdiOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVdiOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVdiOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Veeam Enterprise offers
 */
export const getOrderCartCartIdVeeamEnterprise = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/veeamEnterprise`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVeeamEnterpriseQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/veeamEnterprise`] as const;
    }

    
export const getGetOrderCartCartIdVeeamEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVeeamEnterpriseQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>> = ({ signal }) => getOrderCartCartIdVeeamEnterprise(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVeeamEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>>
export type GetOrderCartCartIdVeeamEnterpriseQueryError = unknown


export function useGetOrderCartCartIdVeeamEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Veeam Enterprise offers
 */

export function useGetOrderCartCartIdVeeamEnterprise<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVeeamEnterpriseQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Veeam Enterprise item in your cart
 */
export const postOrderCartCartIdVeeamEnterprise = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/veeamEnterprise`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVeeamEnterpriseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterprise>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVeeamEnterprise(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVeeamEnterpriseMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterprise>>>
    export type PostOrderCartCartIdVeeamEnterpriseMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVeeamEnterpriseMutationError = unknown

    /**
 * @summary Post a new Veeam Enterprise item in your cart
 */
export const usePostOrderCartCartIdVeeamEnterprise = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterprise>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterprise>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVeeamEnterpriseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Veeam Enterprise options
 */
export const getOrderCartCartIdVeeamEnterpriseOptions = (
    cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/veeamEnterprise/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVeeamEnterpriseOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams,) => {
    return [`/order/cart/${cartId}/veeamEnterprise/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdVeeamEnterpriseOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVeeamEnterpriseOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>> = ({ signal }) => getOrderCartCartIdVeeamEnterpriseOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVeeamEnterpriseOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>>
export type GetOrderCartCartIdVeeamEnterpriseOptionsQueryError = unknown


export function useGetOrderCartCartIdVeeamEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Veeam Enterprise options
 */

export function useGetOrderCartCartIdVeeamEnterpriseOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamEnterpriseOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamEnterpriseOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVeeamEnterpriseOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Veeam Enterprise option in your cart
 */
export const postOrderCartCartIdVeeamEnterpriseOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/veeamEnterprise/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVeeamEnterpriseOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterpriseOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVeeamEnterpriseOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVeeamEnterpriseOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterpriseOptions>>>
    export type PostOrderCartCartIdVeeamEnterpriseOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdVeeamEnterpriseOptionsMutationError = unknown

    /**
 * @summary Post a new Veeam Enterprise option in your cart
 */
export const usePostOrderCartCartIdVeeamEnterpriseOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterpriseOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVeeamEnterpriseOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVeeamEnterpriseOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Veeam Cloud Connect offers
 */
export const getOrderCartCartIdVeeamcc = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/veeamcc`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVeeamccQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/veeamcc`] as const;
    }

    
export const getGetOrderCartCartIdVeeamccQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVeeamccQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>> = ({ signal }) => getOrderCartCartIdVeeamcc(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVeeamccQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>>
export type GetOrderCartCartIdVeeamccQueryError = unknown


export function useGetOrderCartCartIdVeeamcc<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamcc<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamcc<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Veeam Cloud Connect offers
 */

export function useGetOrderCartCartIdVeeamcc<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamcc>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVeeamccQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Veeam Cloud Connect item in your cart
 */
export const postOrderCartCartIdVeeamcc = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/veeamcc`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVeeamccMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamcc>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamcc>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVeeamcc>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVeeamcc(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVeeamccMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVeeamcc>>>
    export type PostOrderCartCartIdVeeamccMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVeeamccMutationError = unknown

    /**
 * @summary Post a new Veeam Cloud Connect item in your cart
 */
export const usePostOrderCartCartIdVeeamcc = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamcc>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVeeamcc>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVeeamccMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Veeam Cloud Connect options
 */
export const getOrderCartCartIdVeeamccOptions = (
    cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/veeamcc/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVeeamccOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams,) => {
    return [`/order/cart/${cartId}/veeamcc/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdVeeamccOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVeeamccOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>> = ({ signal }) => getOrderCartCartIdVeeamccOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVeeamccOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>>
export type GetOrderCartCartIdVeeamccOptionsQueryError = unknown


export function useGetOrderCartCartIdVeeamccOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamccOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVeeamccOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Veeam Cloud Connect options
 */

export function useGetOrderCartCartIdVeeamccOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVeeamccOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVeeamccOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVeeamccOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Veeam Cloud Connect option in your cart
 */
export const postOrderCartCartIdVeeamccOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/veeamcc/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVeeamccOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamccOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamccOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVeeamccOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVeeamccOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVeeamccOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVeeamccOptions>>>
    export type PostOrderCartCartIdVeeamccOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdVeeamccOptionsMutationError = unknown

    /**
 * @summary Post a new Veeam Cloud Connect option in your cart
 */
export const usePostOrderCartCartIdVeeamccOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVeeamccOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVeeamccOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVeeamccOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about VMware Cloud Director offers
 */
export const getOrderCartCartIdVmwareCloudDirector = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vmwareCloudDirector`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVmwareCloudDirectorQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/vmwareCloudDirector`] as const;
    }

    
export const getGetOrderCartCartIdVmwareCloudDirectorQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVmwareCloudDirectorQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>> = ({ signal }) => getOrderCartCartIdVmwareCloudDirector(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVmwareCloudDirectorQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>>
export type GetOrderCartCartIdVmwareCloudDirectorQueryError = unknown


export function useGetOrderCartCartIdVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about VMware Cloud Director offers
 */

export function useGetOrderCartCartIdVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVmwareCloudDirectorQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new VMware Cloud Director item in your cart
 */
export const postOrderCartCartIdVmwareCloudDirector = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vmwareCloudDirector`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVmwareCloudDirectorMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirector>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirector>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirector>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVmwareCloudDirector(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVmwareCloudDirectorMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirector>>>
    export type PostOrderCartCartIdVmwareCloudDirectorMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVmwareCloudDirectorMutationError = unknown

    /**
 * @summary Post a new VMware Cloud Director item in your cart
 */
export const usePostOrderCartCartIdVmwareCloudDirector = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirector>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirector>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVmwareCloudDirectorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about VMware Cloud Director offers
 */
export const getOrderCartCartIdVmwareCloudDirectorOptions = (
    cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vmwareCloudDirector/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVmwareCloudDirectorOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams,) => {
    return [`/order/cart/${cartId}/vmwareCloudDirector/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdVmwareCloudDirectorOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVmwareCloudDirectorOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>> = ({ signal }) => getOrderCartCartIdVmwareCloudDirectorOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVmwareCloudDirectorOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>>
export type GetOrderCartCartIdVmwareCloudDirectorOptionsQueryError = unknown


export function useGetOrderCartCartIdVmwareCloudDirectorOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVmwareCloudDirectorOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVmwareCloudDirectorOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about VMware Cloud Director offers
 */

export function useGetOrderCartCartIdVmwareCloudDirectorOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVmwareCloudDirectorOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVmwareCloudDirectorOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVmwareCloudDirectorOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new VMware Cloud Director item in your cart
 */
export const postOrderCartCartIdVmwareCloudDirectorOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vmwareCloudDirector/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVmwareCloudDirectorOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirectorOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirectorOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirectorOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVmwareCloudDirectorOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVmwareCloudDirectorOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirectorOptions>>>
    export type PostOrderCartCartIdVmwareCloudDirectorOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdVmwareCloudDirectorOptionsMutationError = unknown

    /**
 * @summary Post a new VMware Cloud Director item in your cart
 */
export const usePostOrderCartCartIdVmwareCloudDirectorOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirectorOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVmwareCloudDirectorOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVmwareCloudDirectorOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about VPS offers
 */
export const getOrderCartCartIdVps = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vps`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVpsQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/vps`] as const;
    }

    
export const getGetOrderCartCartIdVpsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVpsQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVps>>> = ({ signal }) => getOrderCartCartIdVps(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVps>>>
export type GetOrderCartCartIdVpsQueryError = unknown


export function useGetOrderCartCartIdVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about VPS offers
 */

export function useGetOrderCartCartIdVps<TData = Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVpsQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new VPS item in your cart
 */
export const postOrderCartCartIdVps = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vps`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVpsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVps>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVps>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVps>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVps(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVpsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVps>>>
    export type PostOrderCartCartIdVpsMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVpsMutationError = unknown

    /**
 * @summary Post a new VPS item in your cart
 */
export const usePostOrderCartCartIdVps = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVps>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVps>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVpsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about VPS options
 */
export const getOrderCartCartIdVpsOptions = (
    cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vps/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVpsOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams,) => {
    return [`/order/cart/${cartId}/vps/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdVpsOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVpsOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>> = ({ signal }) => getOrderCartCartIdVpsOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVpsOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>>
export type GetOrderCartCartIdVpsOptionsQueryError = unknown


export function useGetOrderCartCartIdVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about VPS options
 */

export function useGetOrderCartCartIdVpsOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdVpsOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVpsOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVpsOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new VPS option in your cart
 */
export const postOrderCartCartIdVpsOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vps/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVpsOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVpsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVpsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVpsOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVpsOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVpsOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVpsOptions>>>
    export type PostOrderCartCartIdVpsOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdVpsOptionsMutationError = unknown

    /**
 * @summary Post a new VPS option in your cart
 */
export const usePostOrderCartCartIdVpsOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVpsOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVpsOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVpsOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about vRack offers
 */
export const getOrderCartCartIdVrack = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vrack`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVrackQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/vrack`] as const;
    }

    
export const getGetOrderCartCartIdVrackQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVrackQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>> = ({ signal }) => getOrderCartCartIdVrack(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVrackQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>>
export type GetOrderCartCartIdVrackQueryError = unknown


export function useGetOrderCartCartIdVrack<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVrack<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVrack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVrack<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about vRack offers
 */

export function useGetOrderCartCartIdVrack<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVrackQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new vRack item in your cart
 */
export const postOrderCartCartIdVrack = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vrack`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVrackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrack>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrack>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVrack>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVrack(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVrackMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVrack>>>
    export type PostOrderCartCartIdVrackMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVrackMutationError = unknown

    /**
 * @summary Post a new vRack item in your cart
 */
export const usePostOrderCartCartIdVrack = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrack>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVrack>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVrackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about vRack offers
 */
export const getOrderCartCartIdVrackReseller = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vrackReseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVrackResellerQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/vrackReseller`] as const;
    }

    
export const getGetOrderCartCartIdVrackResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVrackResellerQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>> = ({ signal }) => getOrderCartCartIdVrackReseller(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVrackResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>>
export type GetOrderCartCartIdVrackResellerQueryError = unknown


export function useGetOrderCartCartIdVrackReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVrackReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVrackReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about vRack offers
 */

export function useGetOrderCartCartIdVrackReseller<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVrackResellerQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new vRack item in your cart
 */
export const postOrderCartCartIdVrackReseller = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vrackReseller`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVrackResellerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrackReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrackReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVrackReseller>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVrackReseller(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVrackResellerMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVrackReseller>>>
    export type PostOrderCartCartIdVrackResellerMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVrackResellerMutationError = unknown

    /**
 * @summary Post a new vRack item in your cart
 */
export const usePostOrderCartCartIdVrackReseller = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrackReseller>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVrackReseller>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVrackResellerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about vRack Services offers
 */
export const getOrderCartCartIdVrackServices = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/vrackServices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdVrackServicesQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/vrackServices`] as const;
    }

    
export const getGetOrderCartCartIdVrackServicesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdVrackServicesQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>> = ({ signal }) => getOrderCartCartIdVrackServices(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdVrackServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>>
export type GetOrderCartCartIdVrackServicesQueryError = unknown


export function useGetOrderCartCartIdVrackServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVrackServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdVrackServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about vRack Services offers
 */

export function useGetOrderCartCartIdVrackServices<TData = Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdVrackServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdVrackServicesQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new vRack Services item in your cart
 */
export const postOrderCartCartIdVrackServices = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/vrackServices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdVrackServicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrackServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrackServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdVrackServices>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdVrackServices(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdVrackServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdVrackServices>>>
    export type PostOrderCartCartIdVrackServicesMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdVrackServicesMutationError = unknown

    /**
 * @summary Post a new vRack Services item in your cart
 */
export const usePostOrderCartCartIdVrackServices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdVrackServices>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdVrackServices>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdVrackServicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Web Coach
 */
export const getOrderCartCartIdWebCoach = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/webCoach`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdWebCoachQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/webCoach`] as const;
    }

    
export const getGetOrderCartCartIdWebCoachQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdWebCoachQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>> = ({ signal }) => getOrderCartCartIdWebCoach(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdWebCoachQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>>
export type GetOrderCartCartIdWebCoachQueryError = unknown


export function useGetOrderCartCartIdWebCoach<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebCoach<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebCoach<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Web Coach
 */

export function useGetOrderCartCartIdWebCoach<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoach>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdWebCoachQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a newWeb Coach item in your cart
 */
export const postOrderCartCartIdWebCoach = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/webCoach`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdWebCoachMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebCoach>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebCoach>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdWebCoach>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdWebCoach(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdWebCoachMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdWebCoach>>>
    export type PostOrderCartCartIdWebCoachMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdWebCoachMutationError = unknown

    /**
 * @summary Post a newWeb Coach item in your cart
 */
export const usePostOrderCartCartIdWebCoach = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebCoach>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdWebCoach>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdWebCoachMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Web Coach options
 */
export const getOrderCartCartIdWebCoachOptions = (
    cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/webCoach/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdWebCoachOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams,) => {
    return [`/order/cart/${cartId}/webCoach/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdWebCoachOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdWebCoachOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>> = ({ signal }) => getOrderCartCartIdWebCoachOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdWebCoachOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>>
export type GetOrderCartCartIdWebCoachOptionsQueryError = unknown


export function useGetOrderCartCartIdWebCoachOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebCoachOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebCoachOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Web Coach options
 */

export function useGetOrderCartCartIdWebCoachOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebCoachOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebCoachOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdWebCoachOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new Web Coach option in your cart
 */
export const postOrderCartCartIdWebCoachOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/webCoach/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdWebCoachOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebCoachOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebCoachOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdWebCoachOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdWebCoachOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdWebCoachOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdWebCoachOptions>>>
    export type PostOrderCartCartIdWebCoachOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdWebCoachOptionsMutationError = unknown

    /**
 * @summary Post a new Web Coach option in your cart
 */
export const usePostOrderCartCartIdWebCoachOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebCoachOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdWebCoachOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdWebCoachOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about webHosting offers
 */
export const getOrderCartCartIdWebHosting = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/webHosting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdWebHostingQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/webHosting`] as const;
    }

    
export const getGetOrderCartCartIdWebHostingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdWebHostingQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>> = ({ signal }) => getOrderCartCartIdWebHosting(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdWebHostingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>>
export type GetOrderCartCartIdWebHostingQueryError = unknown


export function useGetOrderCartCartIdWebHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about webHosting offers
 */

export function useGetOrderCartCartIdWebHosting<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdWebHostingQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new webHosting item in your cart
 */
export const postOrderCartCartIdWebHosting = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/webHosting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdWebHostingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebHosting>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebHosting>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdWebHosting>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdWebHosting(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdWebHostingMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdWebHosting>>>
    export type PostOrderCartCartIdWebHostingMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdWebHostingMutationError = unknown

    /**
 * @summary Post a new webHosting item in your cart
 */
export const usePostOrderCartCartIdWebHosting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebHosting>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdWebHosting>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdWebHostingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about webHosting options
 */
export const getOrderCartCartIdWebHostingOptions = (
    cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/webHosting/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdWebHostingOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams,) => {
    return [`/order/cart/${cartId}/webHosting/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdWebHostingOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdWebHostingOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>> = ({ signal }) => getOrderCartCartIdWebHostingOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdWebHostingOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>>
export type GetOrderCartCartIdWebHostingOptionsQueryError = unknown


export function useGetOrderCartCartIdWebHostingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebHostingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebHostingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about webHosting options
 */

export function useGetOrderCartCartIdWebHostingOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebHostingOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebHostingOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdWebHostingOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new webHosting option in your cart
 */
export const postOrderCartCartIdWebHostingOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/webHosting/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdWebHostingOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebHostingOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebHostingOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdWebHostingOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdWebHostingOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdWebHostingOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdWebHostingOptions>>>
    export type PostOrderCartCartIdWebHostingOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdWebHostingOptionsMutationError = unknown

    /**
 * @summary Post a new webHosting option in your cart
 */
export const usePostOrderCartCartIdWebHostingOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebHostingOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdWebHostingOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdWebHostingOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all web PaaS offers available
 */
export const getOrderCartCartIdWebPaaS = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/webPaaS`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdWebPaaSQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/webPaaS`] as const;
    }

    
export const getGetOrderCartCartIdWebPaaSQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdWebPaaSQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>> = ({ signal }) => getOrderCartCartIdWebPaaS(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdWebPaaSQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>>
export type GetOrderCartCartIdWebPaaSQueryError = unknown


export function useGetOrderCartCartIdWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all web PaaS offers available
 */

export function useGetOrderCartCartIdWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdWebPaaSQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a web PaaS offer in your cart
 */
export const postOrderCartCartIdWebPaaS = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/webPaaS`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdWebPaaSMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaS>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaS>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaS>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdWebPaaS(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdWebPaaSMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaS>>>
    export type PostOrderCartCartIdWebPaaSMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdWebPaaSMutationError = unknown

    /**
 * @summary Add a web PaaS offer in your cart
 */
export const usePostOrderCartCartIdWebPaaS = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaS>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdWebPaaS>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdWebPaaSMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about webPaaS options
 */
export const getOrderCartCartIdWebPaaSOptions = (
    cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/webPaaS/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdWebPaaSOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams,) => {
    return [`/order/cart/${cartId}/webPaaS/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdWebPaaSOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdWebPaaSOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>> = ({ signal }) => getOrderCartCartIdWebPaaSOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdWebPaaSOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>>
export type GetOrderCartCartIdWebPaaSOptionsQueryError = unknown


export function useGetOrderCartCartIdWebPaaSOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebPaaSOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdWebPaaSOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about webPaaS options
 */

export function useGetOrderCartCartIdWebPaaSOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdWebPaaSOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdWebPaaSOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdWebPaaSOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new webPaaS option in your cart
 */
export const postOrderCartCartIdWebPaaSOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/webPaaS/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdWebPaaSOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaSOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaSOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaSOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdWebPaaSOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdWebPaaSOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaSOptions>>>
    export type PostOrderCartCartIdWebPaaSOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdWebPaaSOptionsMutationError = unknown

    /**
 * @summary Post a new webPaaS option in your cart
 */
export const usePostOrderCartCartIdWebPaaSOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdWebPaaSOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdWebPaaSOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdWebPaaSOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about xdsl offers
 */
export const getOrderCartCartIdXdsl = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/xdsl`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdXdslQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/xdsl`] as const;
    }

    
export const getGetOrderCartCartIdXdslQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdXdslQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>> = ({ signal }) => getOrderCartCartIdXdsl(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdXdslQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>>
export type GetOrderCartCartIdXdslQueryError = unknown


export function useGetOrderCartCartIdXdsl<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdXdsl<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdXdsl<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about xdsl offers
 */

export function useGetOrderCartCartIdXdsl<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdsl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdXdslQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new xdsl item in your cart
 */
export const postOrderCartCartIdXdsl = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/xdsl`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdXdslMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdXdsl>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdXdsl>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdXdsl>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdXdsl(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdXdslMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdXdsl>>>
    export type PostOrderCartCartIdXdslMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdXdslMutationError = unknown

    /**
 * @summary Post a new xdsl item in your cart
 */
export const usePostOrderCartCartIdXdsl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdXdsl>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdXdsl>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdXdslMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about xdsl options
 */
export const getOrderCartCartIdXdslOptions = (
    cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/xdsl/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdXdslOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams,) => {
    return [`/order/cart/${cartId}/xdsl/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdXdslOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdXdslOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>> = ({ signal }) => getOrderCartCartIdXdslOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdXdslOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>>
export type GetOrderCartCartIdXdslOptionsQueryError = unknown


export function useGetOrderCartCartIdXdslOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdXdslOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdXdslOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about xdsl options
 */

export function useGetOrderCartCartIdXdslOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdXdslOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdXdslOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdXdslOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new xdsl option in your cart
 */
export const postOrderCartCartIdXdslOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/xdsl/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdXdslOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdXdslOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdXdslOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdXdslOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdXdslOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdXdslOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdXdslOptions>>>
    export type PostOrderCartCartIdXdslOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdXdslOptionsMutationError = unknown

    /**
 * @summary Post a new xdsl option in your cart
 */
export const usePostOrderCartCartIdXdslOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdXdslOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdXdslOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdXdslOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about zimbra offers
 */
export const getOrderCartCartIdZimbra = (
    cartId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/zimbra`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartCartIdZimbraQueryKey = (cartId: string,) => {
    return [`/order/cart/${cartId}/zimbra`] as const;
    }

    
export const getGetOrderCartCartIdZimbraQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError = unknown>(cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdZimbraQueryKey(cartId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>> = ({ signal }) => getOrderCartCartIdZimbra(cartId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdZimbraQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>>
export type GetOrderCartCartIdZimbraQueryError = unknown


export function useGetOrderCartCartIdZimbra<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError = unknown>(
 cartId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdZimbra<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdZimbra<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about zimbra offers
 */

export function useGetOrderCartCartIdZimbra<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError = unknown>(
 cartId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdZimbraQueryOptions(cartId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new zimbra item in your cart
 */
export const postOrderCartCartIdZimbra = (
    cartId: string,
    orderCartGenericProductCreationOVH: OrderCartGenericProductCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/zimbra`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericProductCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdZimbraMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdZimbra>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdZimbra>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdZimbra>>, {cartId: string;data: OrderCartGenericProductCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdZimbra(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdZimbraMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdZimbra>>>
    export type PostOrderCartCartIdZimbraMutationBody = OrderCartGenericProductCreationOVH
    export type PostOrderCartCartIdZimbraMutationError = unknown

    /**
 * @summary Post a new zimbra item in your cart
 */
export const usePostOrderCartCartIdZimbra = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdZimbra>>, TError,{cartId: string;data: OrderCartGenericProductCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdZimbra>>,
        TError,
        {cartId: string;data: OrderCartGenericProductCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdZimbraMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get information about Zimbra addons
 */
export const getOrderCartCartIdZimbraOptions = (
    cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/zimbra/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdZimbraOptionsQueryKey = (cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams,) => {
    return [`/order/cart/${cartId}/zimbra/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdZimbraOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError = unknown>(cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdZimbraOptionsQueryKey(cartId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>> = ({ signal }) => getOrderCartCartIdZimbraOptions(cartId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdZimbraOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>>
export type GetOrderCartCartIdZimbraOptionsQueryError = unknown


export function useGetOrderCartCartIdZimbraOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdZimbraOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdZimbraOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Zimbra addons
 */

export function useGetOrderCartCartIdZimbraOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError = unknown>(
 cartId: string,
    params: GetOrderCartCartIdZimbraOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdZimbraOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdZimbraOptionsQueryOptions(cartId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post a new zimbra addon in your cart
 */
export const postOrderCartCartIdZimbraOptions = (
    cartId: string,
    orderCartGenericOptionCreationOVH: OrderCartGenericOptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/zimbra/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCartGenericOptionCreationOVH, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdZimbraOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdZimbraOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdZimbraOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdZimbraOptions>>, {cartId: string;data: OrderCartGenericOptionCreationOVH}> = (props) => {
          const {cartId,data} = props ?? {};

          return  postOrderCartCartIdZimbraOptions(cartId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdZimbraOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdZimbraOptions>>>
    export type PostOrderCartCartIdZimbraOptionsMutationBody = OrderCartGenericOptionCreationOVH
    export type PostOrderCartCartIdZimbraOptionsMutationError = unknown

    /**
 * @summary Post a new zimbra addon in your cart
 */
export const usePostOrderCartCartIdZimbraOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdZimbraOptions>>, TError,{cartId: string;data: OrderCartGenericOptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdZimbraOptions>>,
        TError,
        {cartId: string;data: OrderCartGenericOptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdZimbraOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary INTERNAL - Get pricing informations on preview order endpoint
 */
export const getOrderCartCartIdEndpointName = (
    cartId: string,
    endpointName: string,
    params?: GetOrderCartCartIdEndpointNameParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/${endpointName}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEndpointNameQueryKey = (cartId: string,
    endpointName: string,
    params?: GetOrderCartCartIdEndpointNameParams,) => {
    return [`/order/cart/${cartId}/${endpointName}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdEndpointNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError = unknown>(cartId: string,
    endpointName: string,
    params?: GetOrderCartCartIdEndpointNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEndpointNameQueryKey(cartId,endpointName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>> = ({ signal }) => getOrderCartCartIdEndpointName(cartId,endpointName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId && endpointName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEndpointNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>>
export type GetOrderCartCartIdEndpointNameQueryError = unknown


export function useGetOrderCartCartIdEndpointName<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params: undefined |  GetOrderCartCartIdEndpointNameParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEndpointName<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params?: GetOrderCartCartIdEndpointNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEndpointName<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params?: GetOrderCartCartIdEndpointNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary INTERNAL - Get pricing informations on preview order endpoint
 */

export function useGetOrderCartCartIdEndpointName<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params?: GetOrderCartCartIdEndpointNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEndpointNameQueryOptions(cartId,endpointName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary INTERNAL - Post a new NOT PRODDED offer item in your cart
 */
export const postOrderCartCartIdEndpointName = (
    cartId: string,
    endpointName: string,
    postOrderCartCartIdEndpointNameBody: PostOrderCartCartIdEndpointNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/${endpointName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartCartIdEndpointNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEndpointNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEndpointName>>, TError,{cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEndpointName>>, TError,{cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEndpointName>>, {cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameBody}> = (props) => {
          const {cartId,endpointName,data} = props ?? {};

          return  postOrderCartCartIdEndpointName(cartId,endpointName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEndpointNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEndpointName>>>
    export type PostOrderCartCartIdEndpointNameMutationBody = PostOrderCartCartIdEndpointNameBody
    export type PostOrderCartCartIdEndpointNameMutationError = unknown

    /**
 * @summary INTERNAL - Post a new NOT PRODDED offer item in your cart
 */
export const usePostOrderCartCartIdEndpointName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEndpointName>>, TError,{cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEndpointName>>,
        TError,
        {cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEndpointNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary INTERNAL - Get pricings informations about options of a NOT PRODDED product
 */
export const getOrderCartCartIdEndpointNameOptions = (
    cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cart/${cartId}/${endpointName}/options`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartCartIdEndpointNameOptionsQueryKey = (cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams,) => {
    return [`/order/cart/${cartId}/${endpointName}/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartCartIdEndpointNameOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError = unknown>(cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartCartIdEndpointNameOptionsQueryKey(cartId,endpointName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>> = ({ signal }) => getOrderCartCartIdEndpointNameOptions(cartId,endpointName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cartId && endpointName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartCartIdEndpointNameOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>>
export type GetOrderCartCartIdEndpointNameOptionsQueryError = unknown


export function useGetOrderCartCartIdEndpointNameOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEndpointNameOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartCartIdEndpointNameOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary INTERNAL - Get pricings informations about options of a NOT PRODDED product
 */

export function useGetOrderCartCartIdEndpointNameOptions<TData = Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError = unknown>(
 cartId: string,
    endpointName: string,
    params: GetOrderCartCartIdEndpointNameOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartCartIdEndpointNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartCartIdEndpointNameOptionsQueryOptions(cartId,endpointName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary INTERNAL - Post a new NOT PRODDED option item in your cart
 */
export const postOrderCartCartIdEndpointNameOptions = (
    cartId: string,
    endpointName: string,
    postOrderCartCartIdEndpointNameOptionsBody: PostOrderCartCartIdEndpointNameOptionsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cart/${cartId}/${endpointName}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartCartIdEndpointNameOptionsBody, signal
    },
      options);
    }
  


export const getPostOrderCartCartIdEndpointNameOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEndpointNameOptions>>, TError,{cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameOptionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEndpointNameOptions>>, TError,{cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameOptionsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartCartIdEndpointNameOptions>>, {cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameOptionsBody}> = (props) => {
          const {cartId,endpointName,data} = props ?? {};

          return  postOrderCartCartIdEndpointNameOptions(cartId,endpointName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartCartIdEndpointNameOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartCartIdEndpointNameOptions>>>
    export type PostOrderCartCartIdEndpointNameOptionsMutationBody = PostOrderCartCartIdEndpointNameOptionsBody
    export type PostOrderCartCartIdEndpointNameOptionsMutationError = unknown

    /**
 * @summary INTERNAL - Post a new NOT PRODDED option item in your cart
 */
export const usePostOrderCartCartIdEndpointNameOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartCartIdEndpointNameOptions>>, TError,{cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameOptionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartCartIdEndpointNameOptions>>,
        TError,
        {cartId: string;endpointName: string;data: PostOrderCartCartIdEndpointNameOptionsBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartCartIdEndpointNameOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionBaremetalServers = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/baremetalServers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionBaremetalServersQueryKey = () => {
    return [`/order/cartServiceOption/baremetalServers`] as const;
    }

    
export const getGetOrderCartServiceOptionBaremetalServersQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionBaremetalServersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>> = ({ signal }) => getOrderCartServiceOptionBaremetalServers(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionBaremetalServersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>>
export type GetOrderCartServiceOptionBaremetalServersQueryError = unknown


export function useGetOrderCartServiceOptionBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionBaremetalServersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional baremetal servers offer for your service
 */
export const getOrderCartServiceOptionBaremetalServersServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/baremetalServers/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionBaremetalServersServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/baremetalServers/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionBaremetalServersServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionBaremetalServersServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>> = ({ signal }) => getOrderCartServiceOptionBaremetalServersServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionBaremetalServersServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>>
export type GetOrderCartServiceOptionBaremetalServersServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionBaremetalServersServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionBaremetalServersServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionBaremetalServersServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional baremetal servers offer for your service
 */

export function useGetOrderCartServiceOptionBaremetalServersServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionBaremetalServersServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionBaremetalServersServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional baremetal servers option in your cart
 */
export const postOrderCartServiceOptionBaremetalServersServiceName = (
    serviceName: string,
    postOrderCartServiceOptionBaremetalServersServiceNameBody: PostOrderCartServiceOptionBaremetalServersServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/baremetalServers/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionBaremetalServersServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionBaremetalServersServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionBaremetalServersServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionBaremetalServersServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionBaremetalServersServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionBaremetalServersServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionBaremetalServersServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionBaremetalServersServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionBaremetalServersServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionBaremetalServersServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionBaremetalServersServiceName>>>
    export type PostOrderCartServiceOptionBaremetalServersServiceNameMutationBody = PostOrderCartServiceOptionBaremetalServersServiceNameBody
    export type PostOrderCartServiceOptionBaremetalServersServiceNameMutationError = unknown

    /**
 * @summary Post an additional baremetal servers option in your cart
 */
export const usePostOrderCartServiceOptionBaremetalServersServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionBaremetalServersServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionBaremetalServersServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionBaremetalServersServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionBaremetalServersServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionBaremetalServersServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionCloud = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/cloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionCloudQueryKey = () => {
    return [`/order/cartServiceOption/cloud`] as const;
    }

    
export const getGetOrderCartServiceOptionCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionCloudQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>> = ({ signal }) => getOrderCartServiceOptionCloud(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>>
export type GetOrderCartServiceOptionCloudQueryError = unknown


export function useGetOrderCartServiceOptionCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionCloudQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Cloud offer for your service
 */
export const getOrderCartServiceOptionCloudServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/cloud/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionCloudServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/cloud/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionCloudServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionCloudServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>> = ({ signal }) => getOrderCartServiceOptionCloudServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionCloudServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>>
export type GetOrderCartServiceOptionCloudServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Cloud offer for your service
 */

export function useGetOrderCartServiceOptionCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionCloudServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Cloud option in your cart
 */
export const postOrderCartServiceOptionCloudServiceName = (
    serviceName: string,
    postOrderCartServiceOptionCloudServiceNameBody: PostOrderCartServiceOptionCloudServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/cloud/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionCloudServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionCloudServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionCloudServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionCloudServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionCloudServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionCloudServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionCloudServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionCloudServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionCloudServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionCloudServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionCloudServiceName>>>
    export type PostOrderCartServiceOptionCloudServiceNameMutationBody = PostOrderCartServiceOptionCloudServiceNameBody
    export type PostOrderCartServiceOptionCloudServiceNameMutationError = unknown

    /**
 * @summary Post an additional Cloud option in your cart
 */
export const usePostOrderCartServiceOptionCloudServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionCloudServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionCloudServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionCloudServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionCloudServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionCloudServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionDedicated = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/dedicated`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionDedicatedQueryKey = () => {
    return [`/order/cartServiceOption/dedicated`] as const;
    }

    
export const getGetOrderCartServiceOptionDedicatedQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionDedicatedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>> = ({ signal }) => getOrderCartServiceOptionDedicated(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionDedicatedQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>>
export type GetOrderCartServiceOptionDedicatedQueryError = unknown


export function useGetOrderCartServiceOptionDedicated<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDedicated<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDedicated<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionDedicated<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionDedicatedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional dedicated offer for your service
 */
export const getOrderCartServiceOptionDedicatedServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/dedicated/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionDedicatedServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/dedicated/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionDedicatedServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionDedicatedServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>> = ({ signal }) => getOrderCartServiceOptionDedicatedServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionDedicatedServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>>
export type GetOrderCartServiceOptionDedicatedServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional dedicated offer for your service
 */

export function useGetOrderCartServiceOptionDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionDedicatedServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional dedicated option in your cart
 */
export const postOrderCartServiceOptionDedicatedServiceName = (
    serviceName: string,
    postOrderCartServiceOptionDedicatedServiceNameBody: PostOrderCartServiceOptionDedicatedServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/dedicated/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionDedicatedServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionDedicatedServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDedicatedServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDedicatedServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDedicatedServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDedicatedServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionDedicatedServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionDedicatedServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionDedicatedServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionDedicatedServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionDedicatedServiceName>>>
    export type PostOrderCartServiceOptionDedicatedServiceNameMutationBody = PostOrderCartServiceOptionDedicatedServiceNameBody
    export type PostOrderCartServiceOptionDedicatedServiceNameMutationError = unknown

    /**
 * @summary Post an additional dedicated option in your cart
 */
export const usePostOrderCartServiceOptionDedicatedServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDedicatedServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDedicatedServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionDedicatedServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionDedicatedServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionDedicatedServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionDns = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/dns`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionDnsQueryKey = () => {
    return [`/order/cartServiceOption/dns`] as const;
    }

    
export const getGetOrderCartServiceOptionDnsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionDnsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>> = ({ signal }) => getOrderCartServiceOptionDns(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionDnsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>>
export type GetOrderCartServiceOptionDnsQueryError = unknown


export function useGetOrderCartServiceOptionDns<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDns<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDns<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionDns<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionDnsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Domain offer for your service
 */
export const getOrderCartServiceOptionDnsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/dns/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionDnsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/dns/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionDnsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionDnsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>> = ({ signal }) => getOrderCartServiceOptionDnsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionDnsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>>
export type GetOrderCartServiceOptionDnsServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionDnsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDnsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDnsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Domain offer for your service
 */

export function useGetOrderCartServiceOptionDnsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDnsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionDnsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Domain option in your cart
 */
export const postOrderCartServiceOptionDnsServiceName = (
    serviceName: string,
    postOrderCartServiceOptionDnsServiceNameBody: PostOrderCartServiceOptionDnsServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/dns/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionDnsServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionDnsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDnsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDnsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDnsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDnsServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionDnsServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionDnsServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionDnsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionDnsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionDnsServiceName>>>
    export type PostOrderCartServiceOptionDnsServiceNameMutationBody = PostOrderCartServiceOptionDnsServiceNameBody
    export type PostOrderCartServiceOptionDnsServiceNameMutationError = unknown

    /**
 * @summary Post an additional Domain option in your cart
 */
export const usePostOrderCartServiceOptionDnsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDnsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDnsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionDnsServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionDnsServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionDnsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionDomain = (
    params?: GetOrderCartServiceOptionDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionDomainQueryKey = (params?: GetOrderCartServiceOptionDomainParams,) => {
    return [`/order/cartServiceOption/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCartServiceOptionDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError = unknown>(params?: GetOrderCartServiceOptionDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionDomainQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>> = ({ signal }) => getOrderCartServiceOptionDomain(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>>
export type GetOrderCartServiceOptionDomainQueryError = unknown


export function useGetOrderCartServiceOptionDomain<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError = unknown>(
 params: undefined |  GetOrderCartServiceOptionDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDomain<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError = unknown>(
 params?: GetOrderCartServiceOptionDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDomain<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError = unknown>(
 params?: GetOrderCartServiceOptionDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionDomain<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError = unknown>(
 params?: GetOrderCartServiceOptionDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionDomainQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Domain offer for your service
 */
export const getOrderCartServiceOptionDomainServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/domain/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionDomainServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/domain/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionDomainServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionDomainServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>> = ({ signal }) => getOrderCartServiceOptionDomainServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionDomainServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>>
export type GetOrderCartServiceOptionDomainServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionDomainServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDomainServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionDomainServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Domain offer for your service
 */

export function useGetOrderCartServiceOptionDomainServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionDomainServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionDomainServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Domain option in your cart
 */
export const postOrderCartServiceOptionDomainServiceName = (
    serviceName: string,
    postOrderCartServiceOptionDomainServiceNameBody: PostOrderCartServiceOptionDomainServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/domain/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionDomainServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionDomainServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDomainServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDomainServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDomainServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDomainServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionDomainServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionDomainServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionDomainServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionDomainServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionDomainServiceName>>>
    export type PostOrderCartServiceOptionDomainServiceNameMutationBody = PostOrderCartServiceOptionDomainServiceNameBody
    export type PostOrderCartServiceOptionDomainServiceNameMutationError = unknown

    /**
 * @summary Post an additional Domain option in your cart
 */
export const usePostOrderCartServiceOptionDomainServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionDomainServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionDomainServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionDomainServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionDomainServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionDomainServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionEmailpro = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/emailpro`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionEmailproQueryKey = () => {
    return [`/order/cartServiceOption/emailpro`] as const;
    }

    
export const getGetOrderCartServiceOptionEmailproQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionEmailproQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>> = ({ signal }) => getOrderCartServiceOptionEmailpro(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionEmailproQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>>
export type GetOrderCartServiceOptionEmailproQueryError = unknown


export function useGetOrderCartServiceOptionEmailpro<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionEmailpro<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionEmailpro<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionEmailpro<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionEmailproQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional EmailPro offer for your service
 */
export const getOrderCartServiceOptionEmailproServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/emailpro/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionEmailproServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/emailpro/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionEmailproServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionEmailproServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>> = ({ signal }) => getOrderCartServiceOptionEmailproServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionEmailproServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>>
export type GetOrderCartServiceOptionEmailproServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionEmailproServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionEmailproServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionEmailproServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional EmailPro offer for your service
 */

export function useGetOrderCartServiceOptionEmailproServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionEmailproServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionEmailproServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional EmailPro option in your cart
 */
export const postOrderCartServiceOptionEmailproServiceName = (
    serviceName: string,
    postOrderCartServiceOptionEmailproServiceNameBody: PostOrderCartServiceOptionEmailproServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/emailpro/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionEmailproServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionEmailproServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionEmailproServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionEmailproServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionEmailproServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionEmailproServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionEmailproServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionEmailproServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionEmailproServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionEmailproServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionEmailproServiceName>>>
    export type PostOrderCartServiceOptionEmailproServiceNameMutationBody = PostOrderCartServiceOptionEmailproServiceNameBody
    export type PostOrderCartServiceOptionEmailproServiceNameMutationError = unknown

    /**
 * @summary Post an additional EmailPro option in your cart
 */
export const usePostOrderCartServiceOptionEmailproServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionEmailproServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionEmailproServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionEmailproServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionEmailproServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionEmailproServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionExchange = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/exchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionExchangeQueryKey = () => {
    return [`/order/cartServiceOption/exchange`] as const;
    }

    
export const getGetOrderCartServiceOptionExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionExchangeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>> = ({ signal }) => getOrderCartServiceOptionExchange(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>>
export type GetOrderCartServiceOptionExchangeQueryError = unknown


export function useGetOrderCartServiceOptionExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionExchangeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Exchange offer for your service
 */
export const getOrderCartServiceOptionExchangeServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/exchange/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionExchangeServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/exchange/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionExchangeServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionExchangeServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>> = ({ signal }) => getOrderCartServiceOptionExchangeServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionExchangeServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>>
export type GetOrderCartServiceOptionExchangeServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Exchange offer for your service
 */

export function useGetOrderCartServiceOptionExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionExchangeServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Exchange option in your cart
 */
export const postOrderCartServiceOptionExchangeServiceName = (
    serviceName: string,
    postOrderCartServiceOptionExchangeServiceNameBody: PostOrderCartServiceOptionExchangeServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/exchange/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionExchangeServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionExchangeServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionExchangeServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionExchangeServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionExchangeServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionExchangeServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionExchangeServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionExchangeServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionExchangeServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionExchangeServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionExchangeServiceName>>>
    export type PostOrderCartServiceOptionExchangeServiceNameMutationBody = PostOrderCartServiceOptionExchangeServiceNameBody
    export type PostOrderCartServiceOptionExchangeServiceNameMutationError = unknown

    /**
 * @summary Post an additional Exchange option in your cart
 */
export const usePostOrderCartServiceOptionExchangeServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionExchangeServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionExchangeServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionExchangeServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionExchangeServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionExchangeServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionIpLoadbalancing = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/ipLoadbalancing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionIpLoadbalancingQueryKey = () => {
    return [`/order/cartServiceOption/ipLoadbalancing`] as const;
    }

    
export const getGetOrderCartServiceOptionIpLoadbalancingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionIpLoadbalancingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>> = ({ signal }) => getOrderCartServiceOptionIpLoadbalancing(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionIpLoadbalancingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>>
export type GetOrderCartServiceOptionIpLoadbalancingQueryError = unknown


export function useGetOrderCartServiceOptionIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionIpLoadbalancingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional IP Load-Balancing offer for your service
 */
export const getOrderCartServiceOptionIpLoadbalancingServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/ipLoadbalancing/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionIpLoadbalancingServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/ipLoadbalancing/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionIpLoadbalancingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionIpLoadbalancingServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>> = ({ signal }) => getOrderCartServiceOptionIpLoadbalancingServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionIpLoadbalancingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>>
export type GetOrderCartServiceOptionIpLoadbalancingServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional IP Load-Balancing offer for your service
 */

export function useGetOrderCartServiceOptionIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionIpLoadbalancingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionIpLoadbalancingServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional IP Load-Balancing option in your cart
 */
export const postOrderCartServiceOptionIpLoadbalancingServiceName = (
    serviceName: string,
    postOrderCartServiceOptionIpLoadbalancingServiceNameBody: PostOrderCartServiceOptionIpLoadbalancingServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/ipLoadbalancing/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionIpLoadbalancingServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionIpLoadbalancingServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionIpLoadbalancingServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionIpLoadbalancingServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionIpLoadbalancingServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionIpLoadbalancingServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionIpLoadbalancingServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionIpLoadbalancingServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionIpLoadbalancingServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionIpLoadbalancingServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionIpLoadbalancingServiceName>>>
    export type PostOrderCartServiceOptionIpLoadbalancingServiceNameMutationBody = PostOrderCartServiceOptionIpLoadbalancingServiceNameBody
    export type PostOrderCartServiceOptionIpLoadbalancingServiceNameMutationError = unknown

    /**
 * @summary Post an additional IP Load-Balancing option in your cart
 */
export const usePostOrderCartServiceOptionIpLoadbalancingServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionIpLoadbalancingServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionIpLoadbalancingServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionIpLoadbalancingServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionIpLoadbalancingServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionIpLoadbalancingServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionLicenseHycu = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/licenseHycu`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionLicenseHycuQueryKey = () => {
    return [`/order/cartServiceOption/licenseHycu`] as const;
    }

    
export const getGetOrderCartServiceOptionLicenseHycuQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionLicenseHycuQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>> = ({ signal }) => getOrderCartServiceOptionLicenseHycu(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionLicenseHycuQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>>
export type GetOrderCartServiceOptionLicenseHycuQueryError = unknown


export function useGetOrderCartServiceOptionLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionLicenseHycuQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about addons offer for your license
 */
export const getOrderCartServiceOptionLicenseHycuServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/licenseHycu/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionLicenseHycuServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/licenseHycu/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionLicenseHycuServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionLicenseHycuServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>> = ({ signal }) => getOrderCartServiceOptionLicenseHycuServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionLicenseHycuServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>>
export type GetOrderCartServiceOptionLicenseHycuServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about addons offer for your license
 */

export function useGetOrderCartServiceOptionLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionLicenseHycuServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an addon of license in your cart
 */
export const postOrderCartServiceOptionLicenseHycuServiceName = (
    serviceName: string,
    postOrderCartServiceOptionLicenseHycuServiceNameBody: PostOrderCartServiceOptionLicenseHycuServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/licenseHycu/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionLicenseHycuServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionLicenseHycuServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLicenseHycuServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLicenseHycuServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLicenseHycuServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLicenseHycuServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionLicenseHycuServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionLicenseHycuServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionLicenseHycuServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionLicenseHycuServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionLicenseHycuServiceName>>>
    export type PostOrderCartServiceOptionLicenseHycuServiceNameMutationBody = PostOrderCartServiceOptionLicenseHycuServiceNameBody
    export type PostOrderCartServiceOptionLicenseHycuServiceNameMutationError = unknown

    /**
 * @summary Post an addon of license in your cart
 */
export const usePostOrderCartServiceOptionLicenseHycuServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLicenseHycuServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLicenseHycuServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionLicenseHycuServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionLicenseHycuServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionLicenseHycuServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionLicensePlesk = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/licensePlesk`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionLicensePleskQueryKey = () => {
    return [`/order/cartServiceOption/licensePlesk`] as const;
    }

    
export const getGetOrderCartServiceOptionLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionLicensePleskQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>> = ({ signal }) => getOrderCartServiceOptionLicensePlesk(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>>
export type GetOrderCartServiceOptionLicensePleskQueryError = unknown


export function useGetOrderCartServiceOptionLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionLicensePleskQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about addons offer for your license
 */
export const getOrderCartServiceOptionLicensePleskServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/licensePlesk/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionLicensePleskServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/licensePlesk/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionLicensePleskServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionLicensePleskServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>> = ({ signal }) => getOrderCartServiceOptionLicensePleskServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionLicensePleskServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>>
export type GetOrderCartServiceOptionLicensePleskServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about addons offer for your license
 */

export function useGetOrderCartServiceOptionLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionLicensePleskServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an addon of license in your cart
 */
export const postOrderCartServiceOptionLicensePleskServiceName = (
    serviceName: string,
    postOrderCartServiceOptionLicensePleskServiceNameBody: PostOrderCartServiceOptionLicensePleskServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/licensePlesk/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionLicensePleskServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionLicensePleskServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLicensePleskServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLicensePleskServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLicensePleskServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLicensePleskServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionLicensePleskServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionLicensePleskServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionLicensePleskServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionLicensePleskServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionLicensePleskServiceName>>>
    export type PostOrderCartServiceOptionLicensePleskServiceNameMutationBody = PostOrderCartServiceOptionLicensePleskServiceNameBody
    export type PostOrderCartServiceOptionLicensePleskServiceNameMutationError = unknown

    /**
 * @summary Post an addon of license in your cart
 */
export const usePostOrderCartServiceOptionLicensePleskServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLicensePleskServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLicensePleskServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionLicensePleskServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionLicensePleskServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionLicensePleskServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionLogs = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/logs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionLogsQueryKey = () => {
    return [`/order/cartServiceOption/logs`] as const;
    }

    
export const getGetOrderCartServiceOptionLogsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionLogsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>> = ({ signal }) => getOrderCartServiceOptionLogs(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>>
export type GetOrderCartServiceOptionLogsQueryError = unknown


export function useGetOrderCartServiceOptionLogs<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLogs<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLogs<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionLogs<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionLogsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Logs offer for your service
 */
export const getOrderCartServiceOptionLogsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/logs/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionLogsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/logs/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionLogsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionLogsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>> = ({ signal }) => getOrderCartServiceOptionLogsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionLogsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>>
export type GetOrderCartServiceOptionLogsServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionLogsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLogsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionLogsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Logs offer for your service
 */

export function useGetOrderCartServiceOptionLogsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionLogsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Logs option in your cart
 */
export const postOrderCartServiceOptionLogsServiceName = (
    serviceName: string,
    postOrderCartServiceOptionLogsServiceNameBody: PostOrderCartServiceOptionLogsServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/logs/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionLogsServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionLogsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLogsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLogsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLogsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLogsServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionLogsServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionLogsServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionLogsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionLogsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionLogsServiceName>>>
    export type PostOrderCartServiceOptionLogsServiceNameMutationBody = PostOrderCartServiceOptionLogsServiceNameBody
    export type PostOrderCartServiceOptionLogsServiceNameMutationError = unknown

    /**
 * @summary Post an additional Logs option in your cart
 */
export const usePostOrderCartServiceOptionLogsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionLogsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionLogsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionLogsServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionLogsServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionLogsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionMicrosoft = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/microsoft`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionMicrosoftQueryKey = () => {
    return [`/order/cartServiceOption/microsoft`] as const;
    }

    
export const getGetOrderCartServiceOptionMicrosoftQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionMicrosoftQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>> = ({ signal }) => getOrderCartServiceOptionMicrosoft(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionMicrosoftQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>>
export type GetOrderCartServiceOptionMicrosoftQueryError = unknown


export function useGetOrderCartServiceOptionMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionMicrosoft<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoft>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionMicrosoftQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Microsoft offer for your service
 */
export const getOrderCartServiceOptionMicrosoftServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/microsoft/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionMicrosoftServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/microsoft/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionMicrosoftServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionMicrosoftServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>> = ({ signal }) => getOrderCartServiceOptionMicrosoftServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionMicrosoftServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>>
export type GetOrderCartServiceOptionMicrosoftServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionMicrosoftServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoftServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoftServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Microsoft offer for your service
 */

export function useGetOrderCartServiceOptionMicrosoftServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionMicrosoftServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Microsoft option in your cart
 */
export const postOrderCartServiceOptionMicrosoftServiceName = (
    serviceName: string,
    postOrderCartServiceOptionMicrosoftServiceNameBody: PostOrderCartServiceOptionMicrosoftServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/microsoft/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionMicrosoftServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionMicrosoftServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionMicrosoftServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionMicrosoftServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionMicrosoftServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionMicrosoftServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionMicrosoftServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftServiceName>>>
    export type PostOrderCartServiceOptionMicrosoftServiceNameMutationBody = PostOrderCartServiceOptionMicrosoftServiceNameBody
    export type PostOrderCartServiceOptionMicrosoftServiceNameMutationError = unknown

    /**
 * @summary Post an additional Microsoft option in your cart
 */
export const usePostOrderCartServiceOptionMicrosoftServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionMicrosoftServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionMicrosoftServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionMicrosoftServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionMicrosoftExchange = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/microsoftExchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionMicrosoftExchangeQueryKey = () => {
    return [`/order/cartServiceOption/microsoftExchange`] as const;
    }

    
export const getGetOrderCartServiceOptionMicrosoftExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionMicrosoftExchangeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>> = ({ signal }) => getOrderCartServiceOptionMicrosoftExchange(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionMicrosoftExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>>
export type GetOrderCartServiceOptionMicrosoftExchangeQueryError = unknown


export function useGetOrderCartServiceOptionMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionMicrosoftExchangeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Microsoft offer for your service
 */
export const getOrderCartServiceOptionMicrosoftExchangeServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/microsoftExchange/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionMicrosoftExchangeServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/microsoftExchange/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionMicrosoftExchangeServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionMicrosoftExchangeServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>> = ({ signal }) => getOrderCartServiceOptionMicrosoftExchangeServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionMicrosoftExchangeServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>>
export type GetOrderCartServiceOptionMicrosoftExchangeServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Microsoft offer for your service
 */

export function useGetOrderCartServiceOptionMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionMicrosoftExchangeServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Microsoft option in your cart
 */
export const postOrderCartServiceOptionMicrosoftExchangeServiceName = (
    serviceName: string,
    postOrderCartServiceOptionMicrosoftExchangeServiceNameBody: PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/microsoftExchange/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionMicrosoftExchangeServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionMicrosoftExchangeServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftExchangeServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionMicrosoftExchangeServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionMicrosoftExchangeServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftExchangeServiceName>>>
    export type PostOrderCartServiceOptionMicrosoftExchangeServiceNameMutationBody = PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody
    export type PostOrderCartServiceOptionMicrosoftExchangeServiceNameMutationError = unknown

    /**
 * @summary Post an additional Microsoft option in your cart
 */
export const usePostOrderCartServiceOptionMicrosoftExchangeServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftExchangeServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionMicrosoftExchangeServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionMicrosoftExchangeServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionMicrosoftExchangeServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionNutanix = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/nutanix`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionNutanixQueryKey = () => {
    return [`/order/cartServiceOption/nutanix`] as const;
    }

    
export const getGetOrderCartServiceOptionNutanixQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionNutanixQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>> = ({ signal }) => getOrderCartServiceOptionNutanix(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionNutanixQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>>
export type GetOrderCartServiceOptionNutanixQueryError = unknown


export function useGetOrderCartServiceOptionNutanix<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionNutanix<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionNutanix<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionNutanix<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionNutanixQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Nutanix offer for your service
 */
export const getOrderCartServiceOptionNutanixServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/nutanix/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionNutanixServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/nutanix/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionNutanixServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionNutanixServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>> = ({ signal }) => getOrderCartServiceOptionNutanixServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionNutanixServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>>
export type GetOrderCartServiceOptionNutanixServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionNutanixServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionNutanixServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionNutanixServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Nutanix offer for your service
 */

export function useGetOrderCartServiceOptionNutanixServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionNutanixServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionNutanixServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional nutanix option in your cart
 */
export const postOrderCartServiceOptionNutanixServiceName = (
    serviceName: string,
    postOrderCartServiceOptionNutanixServiceNameBody: PostOrderCartServiceOptionNutanixServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/nutanix/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionNutanixServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionNutanixServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionNutanixServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionNutanixServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionNutanixServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionNutanixServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionNutanixServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionNutanixServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionNutanixServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionNutanixServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionNutanixServiceName>>>
    export type PostOrderCartServiceOptionNutanixServiceNameMutationBody = PostOrderCartServiceOptionNutanixServiceNameBody
    export type PostOrderCartServiceOptionNutanixServiceNameMutationError = unknown

    /**
 * @summary Post an additional nutanix option in your cart
 */
export const usePostOrderCartServiceOptionNutanixServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionNutanixServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionNutanixServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionNutanixServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionNutanixServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionNutanixServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionOffice365Prepaid = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/office365Prepaid`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionOffice365PrepaidQueryKey = () => {
    return [`/order/cartServiceOption/office365Prepaid`] as const;
    }

    
export const getGetOrderCartServiceOptionOffice365PrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionOffice365PrepaidQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>> = ({ signal }) => getOrderCartServiceOptionOffice365Prepaid(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionOffice365PrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>>
export type GetOrderCartServiceOptionOffice365PrepaidQueryError = unknown


export function useGetOrderCartServiceOptionOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionOffice365PrepaidQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Office offer for your service
 */
export const getOrderCartServiceOptionOffice365PrepaidServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/office365Prepaid/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionOffice365PrepaidServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/office365Prepaid/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionOffice365PrepaidServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionOffice365PrepaidServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>> = ({ signal }) => getOrderCartServiceOptionOffice365PrepaidServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionOffice365PrepaidServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>>
export type GetOrderCartServiceOptionOffice365PrepaidServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionOffice365PrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOffice365PrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOffice365PrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Office offer for your service
 */

export function useGetOrderCartServiceOptionOffice365PrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOffice365PrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionOffice365PrepaidServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Office option in your cart
 */
export const postOrderCartServiceOptionOffice365PrepaidServiceName = (
    serviceName: string,
    postOrderCartServiceOptionOffice365PrepaidServiceNameBody: PostOrderCartServiceOptionOffice365PrepaidServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/office365Prepaid/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionOffice365PrepaidServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionOffice365PrepaidServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionOffice365PrepaidServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionOffice365PrepaidServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionOffice365PrepaidServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionOffice365PrepaidServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionOffice365PrepaidServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionOffice365PrepaidServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionOffice365PrepaidServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionOffice365PrepaidServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionOffice365PrepaidServiceName>>>
    export type PostOrderCartServiceOptionOffice365PrepaidServiceNameMutationBody = PostOrderCartServiceOptionOffice365PrepaidServiceNameBody
    export type PostOrderCartServiceOptionOffice365PrepaidServiceNameMutationError = unknown

    /**
 * @summary Post an additional Office option in your cart
 */
export const usePostOrderCartServiceOptionOffice365PrepaidServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionOffice365PrepaidServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionOffice365PrepaidServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionOffice365PrepaidServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionOffice365PrepaidServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionOffice365PrepaidServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionOfficePrepaid = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/officePrepaid`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionOfficePrepaidQueryKey = () => {
    return [`/order/cartServiceOption/officePrepaid`] as const;
    }

    
export const getGetOrderCartServiceOptionOfficePrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionOfficePrepaidQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>> = ({ signal }) => getOrderCartServiceOptionOfficePrepaid(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionOfficePrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>>
export type GetOrderCartServiceOptionOfficePrepaidQueryError = unknown


export function useGetOrderCartServiceOptionOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionOfficePrepaidQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional officePrepaid offer for your service
 */
export const getOrderCartServiceOptionOfficePrepaidServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/officePrepaid/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionOfficePrepaidServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/officePrepaid/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionOfficePrepaidServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionOfficePrepaidServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>> = ({ signal }) => getOrderCartServiceOptionOfficePrepaidServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionOfficePrepaidServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>>
export type GetOrderCartServiceOptionOfficePrepaidServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional officePrepaid offer for your service
 */

export function useGetOrderCartServiceOptionOfficePrepaidServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionOfficePrepaidServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionOfficePrepaidServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional officePrepaid option in your cart
 */
export const postOrderCartServiceOptionOfficePrepaidServiceName = (
    serviceName: string,
    postOrderCartServiceOptionOfficePrepaidServiceNameBody: PostOrderCartServiceOptionOfficePrepaidServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/officePrepaid/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionOfficePrepaidServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionOfficePrepaidServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionOfficePrepaidServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionOfficePrepaidServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionOfficePrepaidServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionOfficePrepaidServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionOfficePrepaidServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionOfficePrepaidServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionOfficePrepaidServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionOfficePrepaidServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionOfficePrepaidServiceName>>>
    export type PostOrderCartServiceOptionOfficePrepaidServiceNameMutationBody = PostOrderCartServiceOptionOfficePrepaidServiceNameBody
    export type PostOrderCartServiceOptionOfficePrepaidServiceNameMutationError = unknown

    /**
 * @summary Post an additional officePrepaid option in your cart
 */
export const usePostOrderCartServiceOptionOfficePrepaidServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionOfficePrepaidServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionOfficePrepaidServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionOfficePrepaidServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionOfficePrepaidServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionOfficePrepaidServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionPrivateCloud = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/privateCloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudQueryKey = () => {
    return [`/order/cartServiceOption/privateCloud`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloud(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>>
export type GetOrderCartServiceOptionPrivateCloudQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Dedicated Cloud offer for your service
 */
export const getOrderCartServiceOptionPrivateCloudServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/privateCloud/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/privateCloud/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>>
export type GetOrderCartServiceOptionPrivateCloudServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Dedicated Cloud offer for your service
 */

export function useGetOrderCartServiceOptionPrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Dedicated Cloud option in your cart
 */
export const postOrderCartServiceOptionPrivateCloudServiceName = (
    serviceName: string,
    postOrderCartServiceOptionPrivateCloudServiceNameBody: PostOrderCartServiceOptionPrivateCloudServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/privateCloud/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionPrivateCloudServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionPrivateCloudServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionPrivateCloudServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionPrivateCloudServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudServiceName>>>
    export type PostOrderCartServiceOptionPrivateCloudServiceNameMutationBody = PostOrderCartServiceOptionPrivateCloudServiceNameBody
    export type PostOrderCartServiceOptionPrivateCloudServiceNameMutationError = unknown

    /**
 * @summary Post an additional Dedicated Cloud option in your cart
 */
export const usePostOrderCartServiceOptionPrivateCloudServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionPrivateCloudServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionPrivateCloudEnterprise = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/privateCloudEnterprise`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudEnterpriseQueryKey = () => {
    return [`/order/cartServiceOption/privateCloudEnterprise`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudEnterpriseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudEnterprise(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>>
export type GetOrderCartServiceOptionPrivateCloudEnterpriseQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudEnterpriseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Dedicated Cloud offer for your service
 */
export const getOrderCartServiceOptionPrivateCloudEnterpriseServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/privateCloudEnterprise/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/privateCloudEnterprise/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudEnterpriseServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>>
export type GetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Dedicated Cloud offer for your service
 */

export function useGetOrderCartServiceOptionPrivateCloudEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Dedicated Cloud option in your cart
 */
export const postOrderCartServiceOptionPrivateCloudEnterpriseServiceName = (
    serviceName: string,
    postOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody: PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/privateCloudEnterprise/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionPrivateCloudEnterpriseServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>>
    export type PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameMutationBody = PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody
    export type PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameMutationError = unknown

    /**
 * @summary Post an additional Dedicated Cloud option in your cart
 */
export const usePostOrderCartServiceOptionPrivateCloudEnterpriseServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudEnterpriseServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionPrivateCloudReseller = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/privateCloudReseller`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudResellerQueryKey = () => {
    return [`/order/cartServiceOption/privateCloudReseller`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudResellerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudReseller(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>>
export type GetOrderCartServiceOptionPrivateCloudResellerQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudResellerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Dedicated Cloud offer for your service
 */
export const getOrderCartServiceOptionPrivateCloudResellerServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/privateCloudReseller/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudResellerServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/privateCloudReseller/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudResellerServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudResellerServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudResellerServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudResellerServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>>
export type GetOrderCartServiceOptionPrivateCloudResellerServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudResellerServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudResellerServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudResellerServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Dedicated Cloud offer for your service
 */

export function useGetOrderCartServiceOptionPrivateCloudResellerServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudResellerServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Dedicated Cloud option in your cart
 */
export const postOrderCartServiceOptionPrivateCloudResellerServiceName = (
    serviceName: string,
    postOrderCartServiceOptionPrivateCloudResellerServiceNameBody: PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/privateCloudReseller/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionPrivateCloudResellerServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionPrivateCloudResellerServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionPrivateCloudResellerServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionPrivateCloudResellerServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerServiceName>>>
    export type PostOrderCartServiceOptionPrivateCloudResellerServiceNameMutationBody = PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody
    export type PostOrderCartServiceOptionPrivateCloudResellerServiceNameMutationError = unknown

    /**
 * @summary Post an additional Dedicated Cloud option in your cart
 */
export const usePostOrderCartServiceOptionPrivateCloudResellerServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionPrivateCloudResellerServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionPrivateCloudResellerEnterprise = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/privateCloudResellerEnterprise`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseQueryKey = () => {
    return [`/order/cartServiceOption/privateCloudResellerEnterprise`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudResellerEnterprise(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudResellerEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>>
export type GetOrderCartServiceOptionPrivateCloudResellerEnterpriseQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Dedicated Cloud Enterprise offer for your service
 */
export const getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/privateCloudResellerEnterprise/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/privateCloudResellerEnterprise/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>> = ({ signal }) => getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>>
export type GetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Dedicated Cloud Enterprise offer for your service
 */

export function useGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Dedicated Cloud Enterprise option in your cart
 */
export const postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName = (
    serviceName: string,
    postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody: PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/privateCloudResellerEnterprise/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>>
    export type PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameMutationBody = PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody
    export type PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameMutationError = unknown

    /**
 * @summary Post an additional Dedicated Cloud Enterprise option in your cart
 */
export const usePostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionSharepoint = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/sharepoint`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSharepointQueryKey = () => {
    return [`/order/cartServiceOption/sharepoint`] as const;
    }

    
export const getGetOrderCartServiceOptionSharepointQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSharepointQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>> = ({ signal }) => getOrderCartServiceOptionSharepoint(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSharepointQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>>
export type GetOrderCartServiceOptionSharepointQueryError = unknown


export function useGetOrderCartServiceOptionSharepoint<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSharepoint<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSharepoint<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionSharepoint<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSharepointQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Sharepoint offer for your service
 */
export const getOrderCartServiceOptionSharepointServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/sharepoint/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSharepointServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/sharepoint/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionSharepointServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSharepointServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>> = ({ signal }) => getOrderCartServiceOptionSharepointServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSharepointServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>>
export type GetOrderCartServiceOptionSharepointServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionSharepointServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSharepointServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSharepointServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Sharepoint offer for your service
 */

export function useGetOrderCartServiceOptionSharepointServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSharepointServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSharepointServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Sharepoint option in your cart
 */
export const postOrderCartServiceOptionSharepointServiceName = (
    serviceName: string,
    postOrderCartServiceOptionSharepointServiceNameBody: PostOrderCartServiceOptionSharepointServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/sharepoint/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionSharepointServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionSharepointServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSharepointServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSharepointServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSharepointServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSharepointServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionSharepointServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionSharepointServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionSharepointServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionSharepointServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionSharepointServiceName>>>
    export type PostOrderCartServiceOptionSharepointServiceNameMutationBody = PostOrderCartServiceOptionSharepointServiceNameBody
    export type PostOrderCartServiceOptionSharepointServiceNameMutationError = unknown

    /**
 * @summary Post an additional Sharepoint option in your cart
 */
export const usePostOrderCartServiceOptionSharepointServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSharepointServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSharepointServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionSharepointServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionSharepointServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionSharepointServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionSms = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/sms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSmsQueryKey = () => {
    return [`/order/cartServiceOption/sms`] as const;
    }

    
export const getGetOrderCartServiceOptionSmsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSmsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>> = ({ signal }) => getOrderCartServiceOptionSms(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSmsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>>
export type GetOrderCartServiceOptionSmsQueryError = unknown


export function useGetOrderCartServiceOptionSms<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSms<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSms<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionSms<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSmsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about additional SMS offer for your service
 */
export const getOrderCartServiceOptionSmsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/sms/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSmsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/sms/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionSmsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSmsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>> = ({ signal }) => getOrderCartServiceOptionSmsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSmsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>>
export type GetOrderCartServiceOptionSmsServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionSmsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSmsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSmsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about additional SMS offer for your service
 */

export function useGetOrderCartServiceOptionSmsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSmsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional SMS option in your cart
 */
export const postOrderCartServiceOptionSmsServiceName = (
    serviceName: string,
    postOrderCartServiceOptionSmsServiceNameBody: PostOrderCartServiceOptionSmsServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/sms/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionSmsServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionSmsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSmsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSmsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSmsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSmsServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionSmsServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionSmsServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionSmsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionSmsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionSmsServiceName>>>
    export type PostOrderCartServiceOptionSmsServiceNameMutationBody = PostOrderCartServiceOptionSmsServiceNameBody
    export type PostOrderCartServiceOptionSmsServiceNameMutationError = unknown

    /**
 * @summary Post an additional SMS option in your cart
 */
export const usePostOrderCartServiceOptionSmsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSmsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSmsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionSmsServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionSmsServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionSmsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionSncConnectivity = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/sncConnectivity`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSncConnectivityQueryKey = () => {
    return [`/order/cartServiceOption/sncConnectivity`] as const;
    }

    
export const getGetOrderCartServiceOptionSncConnectivityQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSncConnectivityQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>> = ({ signal }) => getOrderCartServiceOptionSncConnectivity(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSncConnectivityQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>>
export type GetOrderCartServiceOptionSncConnectivityQueryError = unknown


export function useGetOrderCartServiceOptionSncConnectivity<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSncConnectivity<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSncConnectivity<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionSncConnectivity<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSncConnectivityQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about additional SNC Connectivity offer for your service
 */
export const getOrderCartServiceOptionSncConnectivityServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/sncConnectivity/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSncConnectivityServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/sncConnectivity/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionSncConnectivityServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSncConnectivityServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>> = ({ signal }) => getOrderCartServiceOptionSncConnectivityServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSncConnectivityServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>>
export type GetOrderCartServiceOptionSncConnectivityServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionSncConnectivityServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSncConnectivityServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSncConnectivityServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about additional SNC Connectivity offer for your service
 */

export function useGetOrderCartServiceOptionSncConnectivityServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSncConnectivityServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSncConnectivityServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional SNC Connectivity option in your cart
 */
export const postOrderCartServiceOptionSncConnectivityServiceName = (
    serviceName: string,
    postOrderCartServiceOptionSncConnectivityServiceNameBody: PostOrderCartServiceOptionSncConnectivityServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/sncConnectivity/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionSncConnectivityServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionSncConnectivityServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSncConnectivityServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSncConnectivityServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSncConnectivityServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSncConnectivityServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionSncConnectivityServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionSncConnectivityServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionSncConnectivityServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionSncConnectivityServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionSncConnectivityServiceName>>>
    export type PostOrderCartServiceOptionSncConnectivityServiceNameMutationBody = PostOrderCartServiceOptionSncConnectivityServiceNameBody
    export type PostOrderCartServiceOptionSncConnectivityServiceNameMutationError = unknown

    /**
 * @summary Post an additional SNC Connectivity option in your cart
 */
export const usePostOrderCartServiceOptionSncConnectivityServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSncConnectivityServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSncConnectivityServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionSncConnectivityServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionSncConnectivityServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionSncConnectivityServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionSslGateway = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/sslGateway`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSslGatewayQueryKey = () => {
    return [`/order/cartServiceOption/sslGateway`] as const;
    }

    
export const getGetOrderCartServiceOptionSslGatewayQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSslGatewayQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>> = ({ signal }) => getOrderCartServiceOptionSslGateway(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSslGatewayQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>>
export type GetOrderCartServiceOptionSslGatewayQueryError = unknown


export function useGetOrderCartServiceOptionSslGateway<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSslGateway<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSslGateway<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionSslGateway<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSslGatewayQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional SSL Gateway offer for your service
 */
export const getOrderCartServiceOptionSslGatewayServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/sslGateway/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionSslGatewayServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/sslGateway/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionSslGatewayServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionSslGatewayServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>> = ({ signal }) => getOrderCartServiceOptionSslGatewayServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionSslGatewayServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>>
export type GetOrderCartServiceOptionSslGatewayServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional SSL Gateway offer for your service
 */

export function useGetOrderCartServiceOptionSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionSslGatewayServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional SSL Gateway option in your cart
 */
export const postOrderCartServiceOptionSslGatewayServiceName = (
    serviceName: string,
    postOrderCartServiceOptionSslGatewayServiceNameBody: PostOrderCartServiceOptionSslGatewayServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/sslGateway/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionSslGatewayServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionSslGatewayServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSslGatewayServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSslGatewayServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSslGatewayServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSslGatewayServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionSslGatewayServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionSslGatewayServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionSslGatewayServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionSslGatewayServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionSslGatewayServiceName>>>
    export type PostOrderCartServiceOptionSslGatewayServiceNameMutationBody = PostOrderCartServiceOptionSslGatewayServiceNameBody
    export type PostOrderCartServiceOptionSslGatewayServiceNameMutationError = unknown

    /**
 * @summary Post an additional SSL Gateway option in your cart
 */
export const usePostOrderCartServiceOptionSslGatewayServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionSslGatewayServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionSslGatewayServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionSslGatewayServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionSslGatewayServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionSslGatewayServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionVdi = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/vdi`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVdiQueryKey = () => {
    return [`/order/cartServiceOption/vdi`] as const;
    }

    
export const getGetOrderCartServiceOptionVdiQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVdiQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>> = ({ signal }) => getOrderCartServiceOptionVdi(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVdiQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>>
export type GetOrderCartServiceOptionVdiQueryError = unknown


export function useGetOrderCartServiceOptionVdi<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVdi<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVdi<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionVdi<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdi>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVdiQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Horizon View offer for your service
 */
export const getOrderCartServiceOptionVdiServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/vdi/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVdiServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/vdi/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionVdiServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVdiServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>> = ({ signal }) => getOrderCartServiceOptionVdiServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVdiServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>>
export type GetOrderCartServiceOptionVdiServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionVdiServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVdiServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVdiServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Horizon View offer for your service
 */

export function useGetOrderCartServiceOptionVdiServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVdiServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVdiServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Horizon View option in your cart
 */
export const postOrderCartServiceOptionVdiServiceName = (
    serviceName: string,
    postOrderCartServiceOptionVdiServiceNameBody: PostOrderCartServiceOptionVdiServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/vdi/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionVdiServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionVdiServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVdiServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVdiServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVdiServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVdiServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionVdiServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionVdiServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionVdiServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionVdiServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionVdiServiceName>>>
    export type PostOrderCartServiceOptionVdiServiceNameMutationBody = PostOrderCartServiceOptionVdiServiceNameBody
    export type PostOrderCartServiceOptionVdiServiceNameMutationError = unknown

    /**
 * @summary Post an additional Horizon View option in your cart
 */
export const usePostOrderCartServiceOptionVdiServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVdiServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVdiServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionVdiServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionVdiServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionVdiServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionVmwareCloudDirector = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/vmwareCloudDirector`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVmwareCloudDirectorQueryKey = () => {
    return [`/order/cartServiceOption/vmwareCloudDirector`] as const;
    }

    
export const getGetOrderCartServiceOptionVmwareCloudDirectorQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVmwareCloudDirectorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>> = ({ signal }) => getOrderCartServiceOptionVmwareCloudDirector(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVmwareCloudDirectorQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>>
export type GetOrderCartServiceOptionVmwareCloudDirectorQueryError = unknown


export function useGetOrderCartServiceOptionVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVmwareCloudDirectorQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about additional VMware Cloud Director offer for your service
 */
export const getOrderCartServiceOptionVmwareCloudDirectorServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/vmwareCloudDirector/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVmwareCloudDirectorServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/vmwareCloudDirector/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionVmwareCloudDirectorServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVmwareCloudDirectorServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>> = ({ signal }) => getOrderCartServiceOptionVmwareCloudDirectorServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVmwareCloudDirectorServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>>
export type GetOrderCartServiceOptionVmwareCloudDirectorServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionVmwareCloudDirectorServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirectorServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirectorServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about additional VMware Cloud Director offer for your service
 */

export function useGetOrderCartServiceOptionVmwareCloudDirectorServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVmwareCloudDirectorServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional VMware Cloud Director option in your cart
 */
export const postOrderCartServiceOptionVmwareCloudDirectorServiceName = (
    serviceName: string,
    postOrderCartServiceOptionVmwareCloudDirectorServiceNameBody: PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/vmwareCloudDirector/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionVmwareCloudDirectorServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionVmwareCloudDirectorServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionVmwareCloudDirectorServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionVmwareCloudDirectorServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionVmwareCloudDirectorServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionVmwareCloudDirectorServiceName>>>
    export type PostOrderCartServiceOptionVmwareCloudDirectorServiceNameMutationBody = PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody
    export type PostOrderCartServiceOptionVmwareCloudDirectorServiceNameMutationError = unknown

    /**
 * @summary Post an additional VMware Cloud Director option in your cart
 */
export const usePostOrderCartServiceOptionVmwareCloudDirectorServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVmwareCloudDirectorServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionVmwareCloudDirectorServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionVmwareCloudDirectorServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionVmwareCloudDirectorServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionVmwareCloudDirectorBackup = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/vmwareCloudDirectorBackup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVmwareCloudDirectorBackupQueryKey = () => {
    return [`/order/cartServiceOption/vmwareCloudDirectorBackup`] as const;
    }

    
export const getGetOrderCartServiceOptionVmwareCloudDirectorBackupQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVmwareCloudDirectorBackupQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>> = ({ signal }) => getOrderCartServiceOptionVmwareCloudDirectorBackup(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVmwareCloudDirectorBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>>
export type GetOrderCartServiceOptionVmwareCloudDirectorBackupQueryError = unknown


export function useGetOrderCartServiceOptionVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVmwareCloudDirectorBackupQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information about Veeam Managed Backup offer for your service
 */
export const getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/vmwareCloudDirectorBackup/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/vmwareCloudDirectorBackup/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>> = ({ signal }) => getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>>
export type GetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information about Veeam Managed Backup offer for your service
 */

export function useGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVmwareCloudDirectorBackupServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getOrderCartServiceOptionVps = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/vps`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVpsQueryKey = () => {
    return [`/order/cartServiceOption/vps`] as const;
    }

    
export const getGetOrderCartServiceOptionVpsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVpsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>> = ({ signal }) => getOrderCartServiceOptionVps(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>>
export type GetOrderCartServiceOptionVpsQueryError = unknown


export function useGetOrderCartServiceOptionVps<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVps<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVps<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionVps<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVpsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional VPS offer for your service
 */
export const getOrderCartServiceOptionVpsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/vps/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionVpsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/vps/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionVpsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionVpsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>> = ({ signal }) => getOrderCartServiceOptionVpsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionVpsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>>
export type GetOrderCartServiceOptionVpsServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionVpsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVpsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionVpsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional VPS offer for your service
 */

export function useGetOrderCartServiceOptionVpsServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionVpsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional VPS option in your cart
 */
export const postOrderCartServiceOptionVpsServiceName = (
    serviceName: string,
    postOrderCartServiceOptionVpsServiceNameBody: PostOrderCartServiceOptionVpsServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/vps/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionVpsServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionVpsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVpsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVpsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVpsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVpsServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionVpsServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionVpsServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionVpsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionVpsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionVpsServiceName>>>
    export type PostOrderCartServiceOptionVpsServiceNameMutationBody = PostOrderCartServiceOptionVpsServiceNameBody
    export type PostOrderCartServiceOptionVpsServiceNameMutationError = unknown

    /**
 * @summary Post an additional VPS option in your cart
 */
export const usePostOrderCartServiceOptionVpsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionVpsServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionVpsServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionVpsServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionVpsServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionVpsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionWebHosting = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/webHosting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionWebHostingQueryKey = () => {
    return [`/order/cartServiceOption/webHosting`] as const;
    }

    
export const getGetOrderCartServiceOptionWebHostingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionWebHostingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>> = ({ signal }) => getOrderCartServiceOptionWebHosting(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionWebHostingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>>
export type GetOrderCartServiceOptionWebHostingQueryError = unknown


export function useGetOrderCartServiceOptionWebHosting<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebHosting<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebHosting<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionWebHosting<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionWebHostingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Web Hosting offer for your service
 */
export const getOrderCartServiceOptionWebHostingServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/webHosting/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionWebHostingServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/webHosting/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionWebHostingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionWebHostingServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>> = ({ signal }) => getOrderCartServiceOptionWebHostingServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionWebHostingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>>
export type GetOrderCartServiceOptionWebHostingServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Web Hosting offer for your service
 */

export function useGetOrderCartServiceOptionWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebHostingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionWebHostingServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Web Hosting option in your cart
 */
export const postOrderCartServiceOptionWebHostingServiceName = (
    serviceName: string,
    postOrderCartServiceOptionWebHostingServiceNameBody: PostOrderCartServiceOptionWebHostingServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/webHosting/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionWebHostingServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionWebHostingServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionWebHostingServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionWebHostingServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionWebHostingServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionWebHostingServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionWebHostingServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionWebHostingServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionWebHostingServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionWebHostingServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionWebHostingServiceName>>>
    export type PostOrderCartServiceOptionWebHostingServiceNameMutationBody = PostOrderCartServiceOptionWebHostingServiceNameBody
    export type PostOrderCartServiceOptionWebHostingServiceNameMutationError = unknown

    /**
 * @summary Post an additional Web Hosting option in your cart
 */
export const usePostOrderCartServiceOptionWebHostingServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionWebHostingServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionWebHostingServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionWebHostingServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionWebHostingServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionWebHostingServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCartServiceOptionWebPaaS = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cartServiceOption/webPaaS`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionWebPaaSQueryKey = () => {
    return [`/order/cartServiceOption/webPaaS`] as const;
    }

    
export const getGetOrderCartServiceOptionWebPaaSQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionWebPaaSQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>> = ({ signal }) => getOrderCartServiceOptionWebPaaS(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionWebPaaSQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>>
export type GetOrderCartServiceOptionWebPaaSQueryError = unknown


export function useGetOrderCartServiceOptionWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCartServiceOptionWebPaaS<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionWebPaaSQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get informations about additional Web PaaS offer for your service
 */
export const getOrderCartServiceOptionWebPaaSServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericOptionDefinitionOVH[]>(
      {url: `/order/cartServiceOption/webPaaS/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCartServiceOptionWebPaaSServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cartServiceOption/webPaaS/${serviceName}`] as const;
    }

    
export const getGetOrderCartServiceOptionWebPaaSServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCartServiceOptionWebPaaSServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>> = ({ signal }) => getOrderCartServiceOptionWebPaaSServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCartServiceOptionWebPaaSServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>>
export type GetOrderCartServiceOptionWebPaaSServiceNameQueryError = unknown


export function useGetOrderCartServiceOptionWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCartServiceOptionWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get informations about additional Web PaaS offer for your service
 */

export function useGetOrderCartServiceOptionWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCartServiceOptionWebPaaSServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCartServiceOptionWebPaaSServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post an additional Web PaaS option in your cart
 */
export const postOrderCartServiceOptionWebPaaSServiceName = (
    serviceName: string,
    postOrderCartServiceOptionWebPaaSServiceNameBody: PostOrderCartServiceOptionWebPaaSServiceNameBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartItemOVH>(
      {url: `/order/cartServiceOption/webPaaS/${serviceName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCartServiceOptionWebPaaSServiceNameBody, signal
    },
      options);
    }
  


export const getPostOrderCartServiceOptionWebPaaSServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionWebPaaSServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionWebPaaSServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionWebPaaSServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionWebPaaSServiceNameBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCartServiceOptionWebPaaSServiceName>>, {serviceName: string;data: PostOrderCartServiceOptionWebPaaSServiceNameBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCartServiceOptionWebPaaSServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCartServiceOptionWebPaaSServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCartServiceOptionWebPaaSServiceName>>>
    export type PostOrderCartServiceOptionWebPaaSServiceNameMutationBody = PostOrderCartServiceOptionWebPaaSServiceNameBody
    export type PostOrderCartServiceOptionWebPaaSServiceNameMutationError = unknown

    /**
 * @summary Post an additional Web PaaS option in your cart
 */
export const usePostOrderCartServiceOptionWebPaaSServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCartServiceOptionWebPaaSServiceName>>, TError,{serviceName: string;data: PostOrderCartServiceOptionWebPaaSServiceNameBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCartServiceOptionWebPaaSServiceName>>,
        TError,
        {serviceName: string;data: PostOrderCartServiceOptionWebPaaSServiceNameBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCartServiceOptionWebPaaSServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information of bring your own IP addresses catalog
 */
export const getOrderCatalogFormattedBringYourOwnIp = (
    params: GetOrderCatalogFormattedBringYourOwnIpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/bringYourOwnIp`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedBringYourOwnIpQueryKey = (params: GetOrderCatalogFormattedBringYourOwnIpParams,) => {
    return [`/order/catalog/formatted/bringYourOwnIp`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedBringYourOwnIpQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError = unknown>(params: GetOrderCatalogFormattedBringYourOwnIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedBringYourOwnIpQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>> = ({ signal }) => getOrderCatalogFormattedBringYourOwnIp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedBringYourOwnIpQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>>
export type GetOrderCatalogFormattedBringYourOwnIpQueryError = unknown


export function useGetOrderCatalogFormattedBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedBringYourOwnIpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedBringYourOwnIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedBringYourOwnIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of bring your own IP addresses catalog
 */

export function useGetOrderCatalogFormattedBringYourOwnIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedBringYourOwnIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedBringYourOwnIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedBringYourOwnIpQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Public Cloud catalog
 */
export const getOrderCatalogFormattedCloud = (
    params: GetOrderCatalogFormattedCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/cloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedCloudQueryKey = (params: GetOrderCatalogFormattedCloudParams,) => {
    return [`/order/catalog/formatted/cloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError = unknown>(params: GetOrderCatalogFormattedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>> = ({ signal }) => getOrderCatalogFormattedCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>>
export type GetOrderCatalogFormattedCloudQueryError = unknown


export function useGetOrderCatalogFormattedCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Public Cloud catalog
 */

export function useGetOrderCatalogFormattedCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of dedicated server catalog
 */
export const getOrderCatalogFormattedDedicated = (
    params: GetOrderCatalogFormattedDedicatedParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogDedicatedCatalogOVH>(
      {url: `/order/catalog/formatted/dedicated`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedDedicatedQueryKey = (params: GetOrderCatalogFormattedDedicatedParams,) => {
    return [`/order/catalog/formatted/dedicated`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedDedicatedQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError = unknown>(params: GetOrderCatalogFormattedDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedDedicatedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>> = ({ signal }) => getOrderCatalogFormattedDedicated(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedDedicatedQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>>
export type GetOrderCatalogFormattedDedicatedQueryError = unknown


export function useGetOrderCatalogFormattedDedicated<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError = unknown>(
 params: GetOrderCatalogFormattedDedicatedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedDedicated<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError = unknown>(
 params: GetOrderCatalogFormattedDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedDedicated<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError = unknown>(
 params: GetOrderCatalogFormattedDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of dedicated server catalog
 */

export function useGetOrderCatalogFormattedDedicated<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError = unknown>(
 params: GetOrderCatalogFormattedDedicatedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedDedicatedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of dedicated discover offer server catalog
 */
export const getOrderCatalogFormattedDiscover = (
    params: GetOrderCatalogFormattedDiscoverParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogDedicatedCatalogOVH>(
      {url: `/order/catalog/formatted/discover`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedDiscoverQueryKey = (params: GetOrderCatalogFormattedDiscoverParams,) => {
    return [`/order/catalog/formatted/discover`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedDiscoverQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError = unknown>(params: GetOrderCatalogFormattedDiscoverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedDiscoverQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>> = ({ signal }) => getOrderCatalogFormattedDiscover(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedDiscoverQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>>
export type GetOrderCatalogFormattedDiscoverQueryError = unknown


export function useGetOrderCatalogFormattedDiscover<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError = unknown>(
 params: GetOrderCatalogFormattedDiscoverParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedDiscover<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError = unknown>(
 params: GetOrderCatalogFormattedDiscoverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedDiscover<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError = unknown>(
 params: GetOrderCatalogFormattedDiscoverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of dedicated discover offer server catalog
 */

export function useGetOrderCatalogFormattedDiscover<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError = unknown>(
 params: GetOrderCatalogFormattedDiscoverParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedDiscover>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedDiscoverQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of IP addresses catalog
 */
export const getOrderCatalogFormattedIp = (
    params: GetOrderCatalogFormattedIpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/ip`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedIpQueryKey = (params: GetOrderCatalogFormattedIpParams,) => {
    return [`/order/catalog/formatted/ip`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedIpQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError = unknown>(params: GetOrderCatalogFormattedIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedIpQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>> = ({ signal }) => getOrderCatalogFormattedIp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedIpQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>>
export type GetOrderCatalogFormattedIpQueryError = unknown


export function useGetOrderCatalogFormattedIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedIpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of IP addresses catalog
 */

export function useGetOrderCatalogFormattedIp<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError = unknown>(
 params: GetOrderCatalogFormattedIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedIpQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of HYCU licenses catalog
 */
export const getOrderCatalogFormattedLicenseHycu = (
    params: GetOrderCatalogFormattedLicenseHycuParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/licenseHycu`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedLicenseHycuQueryKey = (params: GetOrderCatalogFormattedLicenseHycuParams,) => {
    return [`/order/catalog/formatted/licenseHycu`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedLicenseHycuQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError = unknown>(params: GetOrderCatalogFormattedLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedLicenseHycuQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>> = ({ signal }) => getOrderCatalogFormattedLicenseHycu(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedLicenseHycuQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>>
export type GetOrderCatalogFormattedLicenseHycuQueryError = unknown


export function useGetOrderCatalogFormattedLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseHycuParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of HYCU licenses catalog
 */

export function useGetOrderCatalogFormattedLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedLicenseHycuQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Plesk licenses catalog
 */
export const getOrderCatalogFormattedLicensePlesk = (
    params: GetOrderCatalogFormattedLicensePleskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/licensePlesk`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedLicensePleskQueryKey = (params: GetOrderCatalogFormattedLicensePleskParams,) => {
    return [`/order/catalog/formatted/licensePlesk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError = unknown>(params: GetOrderCatalogFormattedLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedLicensePleskQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>> = ({ signal }) => getOrderCatalogFormattedLicensePlesk(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>>
export type GetOrderCatalogFormattedLicensePleskQueryError = unknown


export function useGetOrderCatalogFormattedLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensePleskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Plesk licenses catalog
 */

export function useGetOrderCatalogFormattedLicensePlesk<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensePleskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedLicensePleskQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of SqlServer licenses catalog
 */
export const getOrderCatalogFormattedLicenseSqlServer = (
    params: GetOrderCatalogFormattedLicenseSqlServerParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/licenseSqlServer`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedLicenseSqlServerQueryKey = (params: GetOrderCatalogFormattedLicenseSqlServerParams,) => {
    return [`/order/catalog/formatted/licenseSqlServer`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedLicenseSqlServerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError = unknown>(params: GetOrderCatalogFormattedLicenseSqlServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedLicenseSqlServerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>> = ({ signal }) => getOrderCatalogFormattedLicenseSqlServer(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedLicenseSqlServerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>>
export type GetOrderCatalogFormattedLicenseSqlServerQueryError = unknown


export function useGetOrderCatalogFormattedLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseSqlServerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseSqlServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseSqlServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of SqlServer licenses catalog
 */

export function useGetOrderCatalogFormattedLicenseSqlServer<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseSqlServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseSqlServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedLicenseSqlServerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Windows licenses catalog
 */
export const getOrderCatalogFormattedLicenseWindows = (
    params: GetOrderCatalogFormattedLicenseWindowsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/licenseWindows`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedLicenseWindowsQueryKey = (params: GetOrderCatalogFormattedLicenseWindowsParams,) => {
    return [`/order/catalog/formatted/licenseWindows`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedLicenseWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError = unknown>(params: GetOrderCatalogFormattedLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedLicenseWindowsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>> = ({ signal }) => getOrderCatalogFormattedLicenseWindows(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedLicenseWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>>
export type GetOrderCatalogFormattedLicenseWindowsQueryError = unknown


export function useGetOrderCatalogFormattedLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseWindowsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Windows licenses catalog
 */

export function useGetOrderCatalogFormattedLicenseWindows<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicenseWindowsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedLicenseWindowsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of cPanel licenses catalog
 */
export const getOrderCatalogFormattedLicensecPanel = (
    params: GetOrderCatalogFormattedLicensecPanelParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/licensecPanel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedLicensecPanelQueryKey = (params: GetOrderCatalogFormattedLicensecPanelParams,) => {
    return [`/order/catalog/formatted/licensecPanel`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedLicensecPanelQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError = unknown>(params: GetOrderCatalogFormattedLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedLicensecPanelQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>> = ({ signal }) => getOrderCatalogFormattedLicensecPanel(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedLicensecPanelQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>>
export type GetOrderCatalogFormattedLicensecPanelQueryError = unknown


export function useGetOrderCatalogFormattedLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensecPanelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of cPanel licenses catalog
 */

export function useGetOrderCatalogFormattedLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogFormattedLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedLicensecPanelQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Logs Data Platform catalog
 */
export const getOrderCatalogFormattedLogs = (
    params: GetOrderCatalogFormattedLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/logs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedLogsQueryKey = (params: GetOrderCatalogFormattedLogsParams,) => {
    return [`/order/catalog/formatted/logs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedLogsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError = unknown>(params: GetOrderCatalogFormattedLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedLogsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>> = ({ signal }) => getOrderCatalogFormattedLogs(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>>
export type GetOrderCatalogFormattedLogsQueryError = unknown


export function useGetOrderCatalogFormattedLogs<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError = unknown>(
 params: GetOrderCatalogFormattedLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLogs<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError = unknown>(
 params: GetOrderCatalogFormattedLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedLogs<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError = unknown>(
 params: GetOrderCatalogFormattedLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Logs Data Platform catalog
 */

export function useGetOrderCatalogFormattedLogs<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError = unknown>(
 params: GetOrderCatalogFormattedLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedLogsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Dedicated Cloud catalog
 */
export const getOrderCatalogFormattedPrivateCloud = (
    params: GetOrderCatalogFormattedPrivateCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPccCatalogOVH>(
      {url: `/order/catalog/formatted/privateCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedPrivateCloudQueryKey = (params: GetOrderCatalogFormattedPrivateCloudParams,) => {
    return [`/order/catalog/formatted/privateCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedPrivateCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError = unknown>(params: GetOrderCatalogFormattedPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedPrivateCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>> = ({ signal }) => getOrderCatalogFormattedPrivateCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedPrivateCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>>
export type GetOrderCatalogFormattedPrivateCloudQueryError = unknown


export function useGetOrderCatalogFormattedPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Dedicated Cloud catalog
 */

export function useGetOrderCatalogFormattedPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedPrivateCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Dedicated Cloud Reseller catalog
 */
export const getOrderCatalogFormattedPrivateCloudReseller = (
    params: GetOrderCatalogFormattedPrivateCloudResellerParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPccCatalogOVH>(
      {url: `/order/catalog/formatted/privateCloudReseller`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedPrivateCloudResellerQueryKey = (params: GetOrderCatalogFormattedPrivateCloudResellerParams,) => {
    return [`/order/catalog/formatted/privateCloudReseller`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedPrivateCloudResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError = unknown>(params: GetOrderCatalogFormattedPrivateCloudResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedPrivateCloudResellerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>> = ({ signal }) => getOrderCatalogFormattedPrivateCloudReseller(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedPrivateCloudResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>>
export type GetOrderCatalogFormattedPrivateCloudResellerQueryError = unknown


export function useGetOrderCatalogFormattedPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Dedicated Cloud Reseller catalog
 */

export function useGetOrderCatalogFormattedPrivateCloudReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedPrivateCloudResellerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Dedicated Cloud Reseller Enterprise catalog
 */
export const getOrderCatalogFormattedPrivateCloudResellerEnterprise = (
    params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPccCatalogOVH>(
      {url: `/order/catalog/formatted/privateCloudResellerEnterprise`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedPrivateCloudResellerEnterpriseQueryKey = (params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams,) => {
    return [`/order/catalog/formatted/privateCloudResellerEnterprise`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedPrivateCloudResellerEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError = unknown>(params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedPrivateCloudResellerEnterpriseQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>> = ({ signal }) => getOrderCatalogFormattedPrivateCloudResellerEnterprise(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedPrivateCloudResellerEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>>
export type GetOrderCatalogFormattedPrivateCloudResellerEnterpriseQueryError = unknown


export function useGetOrderCatalogFormattedPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Dedicated Cloud Reseller Enterprise catalog
 */

export function useGetOrderCatalogFormattedPrivateCloudResellerEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError = unknown>(
 params: GetOrderCatalogFormattedPrivateCloudResellerEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedPrivateCloudResellerEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedPrivateCloudResellerEnterpriseQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of Reseller catalog
 */
export const getOrderCatalogFormattedReseller = (
    params: GetOrderCatalogFormattedResellerParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/reseller`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedResellerQueryKey = (params: GetOrderCatalogFormattedResellerParams,) => {
    return [`/order/catalog/formatted/reseller`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedResellerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError = unknown>(params: GetOrderCatalogFormattedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedResellerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>> = ({ signal }) => getOrderCatalogFormattedReseller(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedResellerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>>
export type GetOrderCatalogFormattedResellerQueryError = unknown


export function useGetOrderCatalogFormattedReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedResellerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of Reseller catalog
 */

export function useGetOrderCatalogFormattedReseller<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError = unknown>(
 params: GetOrderCatalogFormattedResellerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedReseller>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedResellerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of catalog
 */
export const getOrderCatalogFormattedCatalogName = (
    catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogCatalogOVH>(
      {url: `/order/catalog/formatted/${catalogName}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogFormattedCatalogNameQueryKey = (catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams,) => {
    return [`/order/catalog/formatted/${catalogName}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogFormattedCatalogNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError = unknown>(catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogFormattedCatalogNameQueryKey(catalogName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>> = ({ signal }) => getOrderCatalogFormattedCatalogName(catalogName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(catalogName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogFormattedCatalogNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>>
export type GetOrderCatalogFormattedCatalogNameQueryError = unknown


export function useGetOrderCatalogFormattedCatalogName<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError = unknown>(
 catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedCatalogName<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError = unknown>(
 catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogFormattedCatalogName<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError = unknown>(
 catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of catalog
 */

export function useGetOrderCatalogFormattedCatalogName<TData = Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError = unknown>(
 catalogName: string,
    params: GetOrderCatalogFormattedCatalogNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogFormattedCatalogName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogFormattedCatalogNameQueryOptions(catalogName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of catalog
 */
export const getOrderCatalogPrivatePrivateCloud = (
    params: GetOrderCatalogPrivatePrivateCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPccCatalogOVH>(
      {url: `/order/catalog/private/privateCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPrivatePrivateCloudQueryKey = (params: GetOrderCatalogPrivatePrivateCloudParams,) => {
    return [`/order/catalog/private/privateCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPrivatePrivateCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError = unknown>(params: GetOrderCatalogPrivatePrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPrivatePrivateCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>> = ({ signal }) => getOrderCatalogPrivatePrivateCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPrivatePrivateCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>>
export type GetOrderCatalogPrivatePrivateCloudQueryError = unknown


export function useGetOrderCatalogPrivatePrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivatePrivateCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPrivatePrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivatePrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPrivatePrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivatePrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of catalog
 */

export function useGetOrderCatalogPrivatePrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivatePrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivatePrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPrivatePrivateCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of catalog
 */
export const getOrderCatalogPrivateTrustedZoneCloud = (
    params: GetOrderCatalogPrivateTrustedZoneCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/private/trustedZoneCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPrivateTrustedZoneCloudQueryKey = (params: GetOrderCatalogPrivateTrustedZoneCloudParams,) => {
    return [`/order/catalog/private/trustedZoneCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPrivateTrustedZoneCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError = unknown>(params: GetOrderCatalogPrivateTrustedZoneCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPrivateTrustedZoneCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>> = ({ signal }) => getOrderCatalogPrivateTrustedZoneCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPrivateTrustedZoneCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>>
export type GetOrderCatalogPrivateTrustedZoneCloudQueryError = unknown


export function useGetOrderCatalogPrivateTrustedZoneCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivateTrustedZoneCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPrivateTrustedZoneCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivateTrustedZoneCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPrivateTrustedZoneCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivateTrustedZoneCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of catalog
 */

export function useGetOrderCatalogPrivateTrustedZoneCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError = unknown>(
 params: GetOrderCatalogPrivateTrustedZoneCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPrivateTrustedZoneCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPrivateTrustedZoneCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Advisory Services Hosting Web support catalog
 */
export const getOrderCatalogPublicAdvisoryServicesHostingWeb = (
    params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/advisoryServicesHostingWeb`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicAdvisoryServicesHostingWebQueryKey = (params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams,) => {
    return [`/order/catalog/public/advisoryServicesHostingWeb`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicAdvisoryServicesHostingWebQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError = unknown>(params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicAdvisoryServicesHostingWebQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>> = ({ signal }) => getOrderCatalogPublicAdvisoryServicesHostingWeb(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicAdvisoryServicesHostingWebQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>>
export type GetOrderCatalogPublicAdvisoryServicesHostingWebQueryError = unknown


export function useGetOrderCatalogPublicAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Advisory Services Hosting Web support catalog
 */

export function useGetOrderCatalogPublicAdvisoryServicesHostingWeb<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesHostingWebParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesHostingWeb>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicAdvisoryServicesHostingWebQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Advisory Services Public Cloud support catalog
 */
export const getOrderCatalogPublicAdvisoryServicesPublicCloud = (
    params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/advisoryServicesPublicCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicAdvisoryServicesPublicCloudQueryKey = (params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams,) => {
    return [`/order/catalog/public/advisoryServicesPublicCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicAdvisoryServicesPublicCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError = unknown>(params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicAdvisoryServicesPublicCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>> = ({ signal }) => getOrderCatalogPublicAdvisoryServicesPublicCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicAdvisoryServicesPublicCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>>
export type GetOrderCatalogPublicAdvisoryServicesPublicCloudQueryError = unknown


export function useGetOrderCatalogPublicAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Advisory Services Public Cloud support catalog
 */

export function useGetOrderCatalogPublicAdvisoryServicesPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicAdvisoryServicesPublicCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Advisory Services Telecom support catalog
 */
export const getOrderCatalogPublicAdvisoryServicesTelecom = (
    params: GetOrderCatalogPublicAdvisoryServicesTelecomParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/advisoryServicesTelecom`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicAdvisoryServicesTelecomQueryKey = (params: GetOrderCatalogPublicAdvisoryServicesTelecomParams,) => {
    return [`/order/catalog/public/advisoryServicesTelecom`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicAdvisoryServicesTelecomQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError = unknown>(params: GetOrderCatalogPublicAdvisoryServicesTelecomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicAdvisoryServicesTelecomQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>> = ({ signal }) => getOrderCatalogPublicAdvisoryServicesTelecom(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicAdvisoryServicesTelecomQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>>
export type GetOrderCatalogPublicAdvisoryServicesTelecomQueryError = unknown


export function useGetOrderCatalogPublicAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesTelecomParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesTelecomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesTelecomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Advisory Services Telecom support catalog
 */

export function useGetOrderCatalogPublicAdvisoryServicesTelecom<TData = Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError = unknown>(
 params: GetOrderCatalogPublicAdvisoryServicesTelecomParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicAdvisoryServicesTelecom>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicAdvisoryServicesTelecomQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve bare-metal servers catalog
 */
export const getOrderCatalogPublicBaremetalServers = (
    params: GetOrderCatalogPublicBaremetalServersParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicDedicatedServerCatalogOVH>(
      {url: `/order/catalog/public/baremetalServers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicBaremetalServersQueryKey = (params: GetOrderCatalogPublicBaremetalServersParams,) => {
    return [`/order/catalog/public/baremetalServers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicBaremetalServersQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError = unknown>(params: GetOrderCatalogPublicBaremetalServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicBaremetalServersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>> = ({ signal }) => getOrderCatalogPublicBaremetalServers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicBaremetalServersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>>
export type GetOrderCatalogPublicBaremetalServersQueryError = unknown


export function useGetOrderCatalogPublicBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError = unknown>(
 params: GetOrderCatalogPublicBaremetalServersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError = unknown>(
 params: GetOrderCatalogPublicBaremetalServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError = unknown>(
 params: GetOrderCatalogPublicBaremetalServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve bare-metal servers catalog
 */

export function useGetOrderCatalogPublicBaremetalServers<TData = Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError = unknown>(
 params: GetOrderCatalogPublicBaremetalServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicBaremetalServers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicBaremetalServersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve cephaas catalog
 */
export const getOrderCatalogPublicCephaas = (
    params: GetOrderCatalogPublicCephaasParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/cephaas`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicCephaasQueryKey = (params: GetOrderCatalogPublicCephaasParams,) => {
    return [`/order/catalog/public/cephaas`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicCephaasQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError = unknown>(params: GetOrderCatalogPublicCephaasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicCephaasQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>> = ({ signal }) => getOrderCatalogPublicCephaas(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicCephaasQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>>
export type GetOrderCatalogPublicCephaasQueryError = unknown


export function useGetOrderCatalogPublicCephaas<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError = unknown>(
 params: GetOrderCatalogPublicCephaasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicCephaas<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError = unknown>(
 params: GetOrderCatalogPublicCephaasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicCephaas<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError = unknown>(
 params: GetOrderCatalogPublicCephaasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve cephaas catalog
 */

export function useGetOrderCatalogPublicCephaas<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError = unknown>(
 params: GetOrderCatalogPublicCephaasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicCephaasQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Public Cloud catalog
 */
export const getOrderCatalogPublicCloud = (
    params: GetOrderCatalogPublicCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/cloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicCloudQueryKey = (params: GetOrderCatalogPublicCloudParams,) => {
    return [`/order/catalog/public/cloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError = unknown>(params: GetOrderCatalogPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>> = ({ signal }) => getOrderCatalogPublicCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>>
export type GetOrderCatalogPublicCloudQueryError = unknown


export function useGetOrderCatalogPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Public Cloud catalog
 */

export function useGetOrderCatalogPublicCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Cloud DB catalog
 */
export const getOrderCatalogPublicCloudDB = (
    params: GetOrderCatalogPublicCloudDBParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/cloudDB`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicCloudDBQueryKey = (params: GetOrderCatalogPublicCloudDBParams,) => {
    return [`/order/catalog/public/cloudDB`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicCloudDBQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError = unknown>(params: GetOrderCatalogPublicCloudDBParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicCloudDBQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>> = ({ signal }) => getOrderCatalogPublicCloudDB(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicCloudDBQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>>
export type GetOrderCatalogPublicCloudDBQueryError = unknown


export function useGetOrderCatalogPublicCloudDB<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudDBParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicCloudDB<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudDBParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicCloudDB<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudDBParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Cloud DB catalog
 */

export function useGetOrderCatalogPublicCloudDB<TData = Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError = unknown>(
 params: GetOrderCatalogPublicCloudDBParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicCloudDBQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve DNS catalog
 */
export const getOrderCatalogPublicDns = (
    params: GetOrderCatalogPublicDnsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/dns`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicDnsQueryKey = (params: GetOrderCatalogPublicDnsParams,) => {
    return [`/order/catalog/public/dns`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicDnsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError = unknown>(params: GetOrderCatalogPublicDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicDnsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>> = ({ signal }) => getOrderCatalogPublicDns(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicDnsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>>
export type GetOrderCatalogPublicDnsQueryError = unknown


export function useGetOrderCatalogPublicDns<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError = unknown>(
 params: GetOrderCatalogPublicDnsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicDns<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError = unknown>(
 params: GetOrderCatalogPublicDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicDns<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError = unknown>(
 params: GetOrderCatalogPublicDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve DNS catalog
 */

export function useGetOrderCatalogPublicDns<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError = unknown>(
 params: GetOrderCatalogPublicDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicDnsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve domain catalog
 */
export const getOrderCatalogPublicDomain = (
    params: GetOrderCatalogPublicDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicDomainQueryKey = (params: GetOrderCatalogPublicDomainParams,) => {
    return [`/order/catalog/public/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError = unknown>(params: GetOrderCatalogPublicDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicDomainQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>> = ({ signal }) => getOrderCatalogPublicDomain(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>>
export type GetOrderCatalogPublicDomainQueryError = unknown


export function useGetOrderCatalogPublicDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve domain catalog
 */

export function useGetOrderCatalogPublicDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicDomainQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Eco catalog
 */
export const getOrderCatalogPublicEco = (
    params: GetOrderCatalogPublicEcoParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/eco`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicEcoQueryKey = (params: GetOrderCatalogPublicEcoParams,) => {
    return [`/order/catalog/public/eco`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicEcoQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError = unknown>(params: GetOrderCatalogPublicEcoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicEcoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>> = ({ signal }) => getOrderCatalogPublicEco(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicEcoQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>>
export type GetOrderCatalogPublicEcoQueryError = unknown


export function useGetOrderCatalogPublicEco<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError = unknown>(
 params: GetOrderCatalogPublicEcoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicEco>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicEco<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError = unknown>(
 params: GetOrderCatalogPublicEcoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicEco>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicEco<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError = unknown>(
 params: GetOrderCatalogPublicEcoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Eco catalog
 */

export function useGetOrderCatalogPublicEco<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError = unknown>(
 params: GetOrderCatalogPublicEcoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEco>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicEcoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Email Domain catalog
 */
export const getOrderCatalogPublicEmailDomain = (
    params: GetOrderCatalogPublicEmailDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/emailDomain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicEmailDomainQueryKey = (params: GetOrderCatalogPublicEmailDomainParams,) => {
    return [`/order/catalog/public/emailDomain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicEmailDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError = unknown>(params: GetOrderCatalogPublicEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicEmailDomainQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>> = ({ signal }) => getOrderCatalogPublicEmailDomain(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicEmailDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>>
export type GetOrderCatalogPublicEmailDomainQueryError = unknown


export function useGetOrderCatalogPublicEmailDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicEmailDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicEmailDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Email Domain catalog
 */

export function useGetOrderCatalogPublicEmailDomain<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicEmailDomainQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve emailpro catalog
 */
export const getOrderCatalogPublicEmailpro = (
    params: GetOrderCatalogPublicEmailproParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/emailpro`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicEmailproQueryKey = (params: GetOrderCatalogPublicEmailproParams,) => {
    return [`/order/catalog/public/emailpro`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicEmailproQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError = unknown>(params: GetOrderCatalogPublicEmailproParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicEmailproQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>> = ({ signal }) => getOrderCatalogPublicEmailpro(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicEmailproQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>>
export type GetOrderCatalogPublicEmailproQueryError = unknown


export function useGetOrderCatalogPublicEmailpro<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailproParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicEmailpro<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailproParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicEmailpro<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailproParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve emailpro catalog
 */

export function useGetOrderCatalogPublicEmailpro<TData = Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError = unknown>(
 params: GetOrderCatalogPublicEmailproParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicEmailpro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicEmailproQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve exchange catalog
 */
export const getOrderCatalogPublicExchange = (
    params: GetOrderCatalogPublicExchangeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/exchange`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicExchangeQueryKey = (params: GetOrderCatalogPublicExchangeParams,) => {
    return [`/order/catalog/public/exchange`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError = unknown>(params: GetOrderCatalogPublicExchangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicExchangeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>> = ({ signal }) => getOrderCatalogPublicExchange(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>>
export type GetOrderCatalogPublicExchangeQueryError = unknown


export function useGetOrderCatalogPublicExchange<TData = Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError = unknown>(
 params: GetOrderCatalogPublicExchangeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicExchange<TData = Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError = unknown>(
 params: GetOrderCatalogPublicExchangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicExchange<TData = Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError = unknown>(
 params: GetOrderCatalogPublicExchangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve exchange catalog
 */

export function useGetOrderCatalogPublicExchange<TData = Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError = unknown>(
 params: GetOrderCatalogPublicExchangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicExchangeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve IP Load Balancing catalog
 */
export const getOrderCatalogPublicIpLoadbalancing = (
    params: GetOrderCatalogPublicIpLoadbalancingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/ipLoadbalancing`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicIpLoadbalancingQueryKey = (params: GetOrderCatalogPublicIpLoadbalancingParams,) => {
    return [`/order/catalog/public/ipLoadbalancing`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicIpLoadbalancingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError = unknown>(params: GetOrderCatalogPublicIpLoadbalancingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicIpLoadbalancingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>> = ({ signal }) => getOrderCatalogPublicIpLoadbalancing(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicIpLoadbalancingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>>
export type GetOrderCatalogPublicIpLoadbalancingQueryError = unknown


export function useGetOrderCatalogPublicIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError = unknown>(
 params: GetOrderCatalogPublicIpLoadbalancingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError = unknown>(
 params: GetOrderCatalogPublicIpLoadbalancingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError = unknown>(
 params: GetOrderCatalogPublicIpLoadbalancingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve IP Load Balancing catalog
 */

export function useGetOrderCatalogPublicIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError = unknown>(
 params: GetOrderCatalogPublicIpLoadbalancingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicIpLoadbalancingQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve License HYCU catalog
 */
export const getOrderCatalogPublicLicenseHycu = (
    params: GetOrderCatalogPublicLicenseHycuParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/licenseHycu`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicLicenseHycuQueryKey = (params: GetOrderCatalogPublicLicenseHycuParams,) => {
    return [`/order/catalog/public/licenseHycu`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicLicenseHycuQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError = unknown>(params: GetOrderCatalogPublicLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicLicenseHycuQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>> = ({ signal }) => getOrderCatalogPublicLicenseHycu(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicLicenseHycuQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>>
export type GetOrderCatalogPublicLicenseHycuQueryError = unknown


export function useGetOrderCatalogPublicLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogPublicLicenseHycuParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogPublicLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogPublicLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve License HYCU catalog
 */

export function useGetOrderCatalogPublicLicenseHycu<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError = unknown>(
 params: GetOrderCatalogPublicLicenseHycuParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicLicenseHycuQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve License cPanel catalog
 */
export const getOrderCatalogPublicLicensecPanel = (
    params: GetOrderCatalogPublicLicensecPanelParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/licensecPanel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicLicensecPanelQueryKey = (params: GetOrderCatalogPublicLicensecPanelParams,) => {
    return [`/order/catalog/public/licensecPanel`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicLicensecPanelQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError = unknown>(params: GetOrderCatalogPublicLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicLicensecPanelQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>> = ({ signal }) => getOrderCatalogPublicLicensecPanel(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicLicensecPanelQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>>
export type GetOrderCatalogPublicLicensecPanelQueryError = unknown


export function useGetOrderCatalogPublicLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogPublicLicensecPanelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogPublicLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogPublicLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve License cPanel catalog
 */

export function useGetOrderCatalogPublicLicensecPanel<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError = unknown>(
 params: GetOrderCatalogPublicLicensecPanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicLicensecPanelQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Logs catalog
 */
export const getOrderCatalogPublicLogs = (
    params: GetOrderCatalogPublicLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/logs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicLogsQueryKey = (params: GetOrderCatalogPublicLogsParams,) => {
    return [`/order/catalog/public/logs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicLogsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError = unknown>(params: GetOrderCatalogPublicLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicLogsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>> = ({ signal }) => getOrderCatalogPublicLogs(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>>
export type GetOrderCatalogPublicLogsQueryError = unknown


export function useGetOrderCatalogPublicLogs<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError = unknown>(
 params: GetOrderCatalogPublicLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicLogs<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError = unknown>(
 params: GetOrderCatalogPublicLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicLogs<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError = unknown>(
 params: GetOrderCatalogPublicLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Logs catalog
 */

export function useGetOrderCatalogPublicLogs<TData = Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError = unknown>(
 params: GetOrderCatalogPublicLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicLogsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve nasha catalog
 */
export const getOrderCatalogPublicNasha = (
    params: GetOrderCatalogPublicNashaParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/nasha`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicNashaQueryKey = (params: GetOrderCatalogPublicNashaParams,) => {
    return [`/order/catalog/public/nasha`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicNashaQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError = unknown>(params: GetOrderCatalogPublicNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicNashaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>> = ({ signal }) => getOrderCatalogPublicNasha(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicNashaQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>>
export type GetOrderCatalogPublicNashaQueryError = unknown


export function useGetOrderCatalogPublicNasha<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError = unknown>(
 params: GetOrderCatalogPublicNashaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicNasha<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError = unknown>(
 params: GetOrderCatalogPublicNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicNasha<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError = unknown>(
 params: GetOrderCatalogPublicNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve nasha catalog
 */

export function useGetOrderCatalogPublicNasha<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError = unknown>(
 params: GetOrderCatalogPublicNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicNashaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Netapp catalog
 */
export const getOrderCatalogPublicNetapp = (
    params: GetOrderCatalogPublicNetappParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/netapp`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicNetappQueryKey = (params: GetOrderCatalogPublicNetappParams,) => {
    return [`/order/catalog/public/netapp`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicNetappQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError = unknown>(params: GetOrderCatalogPublicNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicNetappQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>> = ({ signal }) => getOrderCatalogPublicNetapp(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicNetappQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>>
export type GetOrderCatalogPublicNetappQueryError = unknown


export function useGetOrderCatalogPublicNetapp<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError = unknown>(
 params: GetOrderCatalogPublicNetappParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicNetapp<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError = unknown>(
 params: GetOrderCatalogPublicNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicNetapp<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError = unknown>(
 params: GetOrderCatalogPublicNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Netapp catalog
 */

export function useGetOrderCatalogPublicNetapp<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError = unknown>(
 params: GetOrderCatalogPublicNetappParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNetapp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicNetappQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Nutanix clusters catalog
 */
export const getOrderCatalogPublicNutanix = (
    params: GetOrderCatalogPublicNutanixParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/nutanix`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicNutanixQueryKey = (params: GetOrderCatalogPublicNutanixParams,) => {
    return [`/order/catalog/public/nutanix`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicNutanixQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError = unknown>(params: GetOrderCatalogPublicNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicNutanixQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>> = ({ signal }) => getOrderCatalogPublicNutanix(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicNutanixQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>>
export type GetOrderCatalogPublicNutanixQueryError = unknown


export function useGetOrderCatalogPublicNutanix<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError = unknown>(
 params: GetOrderCatalogPublicNutanixParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicNutanix<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError = unknown>(
 params: GetOrderCatalogPublicNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicNutanix<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError = unknown>(
 params: GetOrderCatalogPublicNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Nutanix clusters catalog
 */

export function useGetOrderCatalogPublicNutanix<TData = Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError = unknown>(
 params: GetOrderCatalogPublicNutanixParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicNutanix>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicNutanixQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve office365Prepaid catalog
 */
export const getOrderCatalogPublicOffice365Prepaid = (
    params: GetOrderCatalogPublicOffice365PrepaidParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/office365Prepaid`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicOffice365PrepaidQueryKey = (params: GetOrderCatalogPublicOffice365PrepaidParams,) => {
    return [`/order/catalog/public/office365Prepaid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicOffice365PrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError = unknown>(params: GetOrderCatalogPublicOffice365PrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicOffice365PrepaidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>> = ({ signal }) => getOrderCatalogPublicOffice365Prepaid(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicOffice365PrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>>
export type GetOrderCatalogPublicOffice365PrepaidQueryError = unknown


export function useGetOrderCatalogPublicOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOffice365PrepaidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOffice365PrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOffice365PrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve office365Prepaid catalog
 */

export function useGetOrderCatalogPublicOffice365Prepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOffice365PrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOffice365Prepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicOffice365PrepaidQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Office Prepaid catalog
 */
export const getOrderCatalogPublicOfficePrepaid = (
    params: GetOrderCatalogPublicOfficePrepaidParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/officePrepaid`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicOfficePrepaidQueryKey = (params: GetOrderCatalogPublicOfficePrepaidParams,) => {
    return [`/order/catalog/public/officePrepaid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicOfficePrepaidQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError = unknown>(params: GetOrderCatalogPublicOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicOfficePrepaidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>> = ({ signal }) => getOrderCatalogPublicOfficePrepaid(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicOfficePrepaidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>>
export type GetOrderCatalogPublicOfficePrepaidQueryError = unknown


export function useGetOrderCatalogPublicOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOfficePrepaidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Office Prepaid catalog
 */

export function useGetOrderCatalogPublicOfficePrepaid<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError = unknown>(
 params: GetOrderCatalogPublicOfficePrepaidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOfficePrepaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicOfficePrepaidQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve OVHcloud KMS catalog
 */
export const getOrderCatalogPublicOkms = (
    params: GetOrderCatalogPublicOkmsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/okms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicOkmsQueryKey = (params: GetOrderCatalogPublicOkmsParams,) => {
    return [`/order/catalog/public/okms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicOkmsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError = unknown>(params: GetOrderCatalogPublicOkmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicOkmsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>> = ({ signal }) => getOrderCatalogPublicOkms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicOkmsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>>
export type GetOrderCatalogPublicOkmsQueryError = unknown


export function useGetOrderCatalogPublicOkms<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError = unknown>(
 params: GetOrderCatalogPublicOkmsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOkms<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError = unknown>(
 params: GetOrderCatalogPublicOkmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOkms<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError = unknown>(
 params: GetOrderCatalogPublicOkmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve OVHcloud KMS catalog
 */

export function useGetOrderCatalogPublicOkms<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError = unknown>(
 params: GetOrderCatalogPublicOkmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOkms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicOkmsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve OVH Cloud Connect catalog
 */
export const getOrderCatalogPublicOvhCloudConnect = (
    params: GetOrderCatalogPublicOvhCloudConnectParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/ovhCloudConnect`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicOvhCloudConnectQueryKey = (params: GetOrderCatalogPublicOvhCloudConnectParams,) => {
    return [`/order/catalog/public/ovhCloudConnect`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicOvhCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError = unknown>(params: GetOrderCatalogPublicOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicOvhCloudConnectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>> = ({ signal }) => getOrderCatalogPublicOvhCloudConnect(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicOvhCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>>
export type GetOrderCatalogPublicOvhCloudConnectQueryError = unknown


export function useGetOrderCatalogPublicOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError = unknown>(
 params: GetOrderCatalogPublicOvhCloudConnectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError = unknown>(
 params: GetOrderCatalogPublicOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError = unknown>(
 params: GetOrderCatalogPublicOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve OVH Cloud Connect catalog
 */

export function useGetOrderCatalogPublicOvhCloudConnect<TData = Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError = unknown>(
 params: GetOrderCatalogPublicOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicOvhCloudConnectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve packs_professional_services catalog
 */
export const getOrderCatalogPublicPacksProfessionalServices = (
    params: GetOrderCatalogPublicPacksProfessionalServicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/packsProfessionalServices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicPacksProfessionalServicesQueryKey = (params: GetOrderCatalogPublicPacksProfessionalServicesParams,) => {
    return [`/order/catalog/public/packsProfessionalServices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicPacksProfessionalServicesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError = unknown>(params: GetOrderCatalogPublicPacksProfessionalServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicPacksProfessionalServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>> = ({ signal }) => getOrderCatalogPublicPacksProfessionalServices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicPacksProfessionalServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>>
export type GetOrderCatalogPublicPacksProfessionalServicesQueryError = unknown


export function useGetOrderCatalogPublicPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError = unknown>(
 params: GetOrderCatalogPublicPacksProfessionalServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError = unknown>(
 params: GetOrderCatalogPublicPacksProfessionalServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError = unknown>(
 params: GetOrderCatalogPublicPacksProfessionalServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve packs_professional_services catalog
 */

export function useGetOrderCatalogPublicPacksProfessionalServices<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError = unknown>(
 params: GetOrderCatalogPublicPacksProfessionalServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPacksProfessionalServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicPacksProfessionalServicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Dedicated Cloud catalog
 */
export const getOrderCatalogPublicPrivateCloud = (
    params: GetOrderCatalogPublicPrivateCloudParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/privateCloud`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicPrivateCloudQueryKey = (params: GetOrderCatalogPublicPrivateCloudParams,) => {
    return [`/order/catalog/public/privateCloud`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicPrivateCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError = unknown>(params: GetOrderCatalogPublicPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicPrivateCloudQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>> = ({ signal }) => getOrderCatalogPublicPrivateCloud(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicPrivateCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>>
export type GetOrderCatalogPublicPrivateCloudQueryError = unknown


export function useGetOrderCatalogPublicPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Dedicated Cloud catalog
 */

export function useGetOrderCatalogPublicPrivateCloud<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicPrivateCloudQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Private Cloud Enterprise catalog
 */
export const getOrderCatalogPublicPrivateCloudEnterprise = (
    params: GetOrderCatalogPublicPrivateCloudEnterpriseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/privateCloudEnterprise`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicPrivateCloudEnterpriseQueryKey = (params: GetOrderCatalogPublicPrivateCloudEnterpriseParams,) => {
    return [`/order/catalog/public/privateCloudEnterprise`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicPrivateCloudEnterpriseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError = unknown>(params: GetOrderCatalogPublicPrivateCloudEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicPrivateCloudEnterpriseQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>> = ({ signal }) => getOrderCatalogPublicPrivateCloudEnterprise(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicPrivateCloudEnterpriseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>>
export type GetOrderCatalogPublicPrivateCloudEnterpriseQueryError = unknown


export function useGetOrderCatalogPublicPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudEnterpriseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Private Cloud Enterprise catalog
 */

export function useGetOrderCatalogPublicPrivateCloudEnterprise<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateCloudEnterpriseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateCloudEnterprise>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicPrivateCloudEnterpriseQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Private SQL catalog
 */
export const getOrderCatalogPublicPrivateSQL = (
    params: GetOrderCatalogPublicPrivateSQLParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/privateSQL`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicPrivateSQLQueryKey = (params: GetOrderCatalogPublicPrivateSQLParams,) => {
    return [`/order/catalog/public/privateSQL`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicPrivateSQLQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError = unknown>(params: GetOrderCatalogPublicPrivateSQLParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicPrivateSQLQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>> = ({ signal }) => getOrderCatalogPublicPrivateSQL(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicPrivateSQLQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>>
export type GetOrderCatalogPublicPrivateSQLQueryError = unknown


export function useGetOrderCatalogPublicPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateSQLParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateSQLParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateSQLParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Private SQL catalog
 */

export function useGetOrderCatalogPublicPrivateSQL<TData = Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError = unknown>(
 params: GetOrderCatalogPublicPrivateSQLParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicPrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicPrivateSQLQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve SSL Gateway catalog
 */
export const getOrderCatalogPublicSslGateway = (
    params: GetOrderCatalogPublicSslGatewayParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/sslGateway`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicSslGatewayQueryKey = (params: GetOrderCatalogPublicSslGatewayParams,) => {
    return [`/order/catalog/public/sslGateway`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicSslGatewayQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError = unknown>(params: GetOrderCatalogPublicSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicSslGatewayQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>> = ({ signal }) => getOrderCatalogPublicSslGateway(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicSslGatewayQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>>
export type GetOrderCatalogPublicSslGatewayQueryError = unknown


export function useGetOrderCatalogPublicSslGateway<TData = Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError = unknown>(
 params: GetOrderCatalogPublicSslGatewayParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicSslGateway<TData = Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError = unknown>(
 params: GetOrderCatalogPublicSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicSslGateway<TData = Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError = unknown>(
 params: GetOrderCatalogPublicSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve SSL Gateway catalog
 */

export function useGetOrderCatalogPublicSslGateway<TData = Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError = unknown>(
 params: GetOrderCatalogPublicSslGatewayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicSslGatewayQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Telephony catalog
 */
export const getOrderCatalogPublicTelephony = (
    params: GetOrderCatalogPublicTelephonyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/telephony`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicTelephonyQueryKey = (params: GetOrderCatalogPublicTelephonyParams,) => {
    return [`/order/catalog/public/telephony`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicTelephonyQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError = unknown>(params: GetOrderCatalogPublicTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicTelephonyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>> = ({ signal }) => getOrderCatalogPublicTelephony(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicTelephonyQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>>
export type GetOrderCatalogPublicTelephonyQueryError = unknown


export function useGetOrderCatalogPublicTelephony<TData = Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError = unknown>(
 params: GetOrderCatalogPublicTelephonyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicTelephony<TData = Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError = unknown>(
 params: GetOrderCatalogPublicTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicTelephony<TData = Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError = unknown>(
 params: GetOrderCatalogPublicTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Telephony catalog
 */

export function useGetOrderCatalogPublicTelephony<TData = Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError = unknown>(
 params: GetOrderCatalogPublicTelephonyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicTelephonyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve vmwareCloudDirector catalog
 */
export const getOrderCatalogPublicVmwareCloudDirector = (
    params: GetOrderCatalogPublicVmwareCloudDirectorParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/vmwareCloudDirector`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicVmwareCloudDirectorQueryKey = (params: GetOrderCatalogPublicVmwareCloudDirectorParams,) => {
    return [`/order/catalog/public/vmwareCloudDirector`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicVmwareCloudDirectorQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError = unknown>(params: GetOrderCatalogPublicVmwareCloudDirectorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicVmwareCloudDirectorQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>> = ({ signal }) => getOrderCatalogPublicVmwareCloudDirector(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicVmwareCloudDirectorQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>>
export type GetOrderCatalogPublicVmwareCloudDirectorQueryError = unknown


export function useGetOrderCatalogPublicVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve vmwareCloudDirector catalog
 */

export function useGetOrderCatalogPublicVmwareCloudDirector<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirector>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicVmwareCloudDirectorQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve vmwareCloudDirectorBackup catalog
 */
export const getOrderCatalogPublicVmwareCloudDirectorBackup = (
    params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/vmwareCloudDirectorBackup`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicVmwareCloudDirectorBackupQueryKey = (params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams,) => {
    return [`/order/catalog/public/vmwareCloudDirectorBackup`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicVmwareCloudDirectorBackupQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError = unknown>(params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicVmwareCloudDirectorBackupQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>> = ({ signal }) => getOrderCatalogPublicVmwareCloudDirectorBackup(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicVmwareCloudDirectorBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>>
export type GetOrderCatalogPublicVmwareCloudDirectorBackupQueryError = unknown


export function useGetOrderCatalogPublicVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve vmwareCloudDirectorBackup catalog
 */

export function useGetOrderCatalogPublicVmwareCloudDirectorBackup<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError = unknown>(
 params: GetOrderCatalogPublicVmwareCloudDirectorBackupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVmwareCloudDirectorBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicVmwareCloudDirectorBackupQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve VPS catalog
 */
export const getOrderCatalogPublicVps = (
    params: GetOrderCatalogPublicVpsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/vps`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicVpsQueryKey = (params: GetOrderCatalogPublicVpsParams,) => {
    return [`/order/catalog/public/vps`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicVpsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError = unknown>(params: GetOrderCatalogPublicVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicVpsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>> = ({ signal }) => getOrderCatalogPublicVps(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>>
export type GetOrderCatalogPublicVpsQueryError = unknown


export function useGetOrderCatalogPublicVps<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError = unknown>(
 params: GetOrderCatalogPublicVpsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicVps<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError = unknown>(
 params: GetOrderCatalogPublicVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicVps<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError = unknown>(
 params: GetOrderCatalogPublicVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve VPS catalog
 */

export function useGetOrderCatalogPublicVps<TData = Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError = unknown>(
 params: GetOrderCatalogPublicVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicVpsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Web Hosting catalog
 */
export const getOrderCatalogPublicWebHosting = (
    params: GetOrderCatalogPublicWebHostingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/webHosting`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicWebHostingQueryKey = (params: GetOrderCatalogPublicWebHostingParams,) => {
    return [`/order/catalog/public/webHosting`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicWebHostingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError = unknown>(params: GetOrderCatalogPublicWebHostingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicWebHostingQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>> = ({ signal }) => getOrderCatalogPublicWebHosting(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicWebHostingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>>
export type GetOrderCatalogPublicWebHostingQueryError = unknown


export function useGetOrderCatalogPublicWebHosting<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError = unknown>(
 params: GetOrderCatalogPublicWebHostingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicWebHosting<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError = unknown>(
 params: GetOrderCatalogPublicWebHostingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicWebHosting<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError = unknown>(
 params: GetOrderCatalogPublicWebHostingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Web Hosting catalog
 */

export function useGetOrderCatalogPublicWebHosting<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError = unknown>(
 params: GetOrderCatalogPublicWebHostingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicWebHostingQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve Web PaaS catalog
 */
export const getOrderCatalogPublicWebPaaS = (
    params: GetOrderCatalogPublicWebPaaSParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/webPaaS`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicWebPaaSQueryKey = (params: GetOrderCatalogPublicWebPaaSParams,) => {
    return [`/order/catalog/public/webPaaS`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicWebPaaSQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError = unknown>(params: GetOrderCatalogPublicWebPaaSParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicWebPaaSQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>> = ({ signal }) => getOrderCatalogPublicWebPaaS(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicWebPaaSQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>>
export type GetOrderCatalogPublicWebPaaSQueryError = unknown


export function useGetOrderCatalogPublicWebPaaS<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError = unknown>(
 params: GetOrderCatalogPublicWebPaaSParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicWebPaaS<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError = unknown>(
 params: GetOrderCatalogPublicWebPaaSParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicWebPaaS<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError = unknown>(
 params: GetOrderCatalogPublicWebPaaSParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Web PaaS catalog
 */

export function useGetOrderCatalogPublicWebPaaS<TData = Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError = unknown>(
 params: GetOrderCatalogPublicWebPaaSParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicWebPaaSQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve zimbra catalog
 */
export const getOrderCatalogPublicZimbra = (
    params: GetOrderCatalogPublicZimbraParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/zimbra`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicZimbraQueryKey = (params: GetOrderCatalogPublicZimbraParams,) => {
    return [`/order/catalog/public/zimbra`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicZimbraQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError = unknown>(params: GetOrderCatalogPublicZimbraParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicZimbraQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>> = ({ signal }) => getOrderCatalogPublicZimbra(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicZimbraQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>>
export type GetOrderCatalogPublicZimbraQueryError = unknown


export function useGetOrderCatalogPublicZimbra<TData = Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError = unknown>(
 params: GetOrderCatalogPublicZimbraParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicZimbra<TData = Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError = unknown>(
 params: GetOrderCatalogPublicZimbraParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicZimbra<TData = Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError = unknown>(
 params: GetOrderCatalogPublicZimbraParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve zimbra catalog
 */

export function useGetOrderCatalogPublicZimbra<TData = Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError = unknown>(
 params: GetOrderCatalogPublicZimbraParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicZimbra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicZimbraQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information of catalog
 */
export const getOrderCatalogPublicProductName = (
    productName: string,
    params: GetOrderCatalogPublicProductNameParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCatalogPublicCatalogOVH>(
      {url: `/order/catalog/public/${productName}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCatalogPublicProductNameQueryKey = (productName: string,
    params: GetOrderCatalogPublicProductNameParams,) => {
    return [`/order/catalog/public/${productName}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCatalogPublicProductNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError = unknown>(productName: string,
    params: GetOrderCatalogPublicProductNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCatalogPublicProductNameQueryKey(productName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>> = ({ signal }) => getOrderCatalogPublicProductName(productName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCatalogPublicProductNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>>
export type GetOrderCatalogPublicProductNameQueryError = unknown


export function useGetOrderCatalogPublicProductName<TData = Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError = unknown>(
 productName: string,
    params: GetOrderCatalogPublicProductNameParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicProductName<TData = Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError = unknown>(
 productName: string,
    params: GetOrderCatalogPublicProductNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCatalogPublicProductName<TData = Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError = unknown>(
 productName: string,
    params: GetOrderCatalogPublicProductNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information of catalog
 */

export function useGetOrderCatalogPublicProductName<TData = Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError = unknown>(
 productName: string,
    params: GetOrderCatalogPublicProductNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCatalogPublicProductName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCatalogPublicProductNameQueryOptions(productName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getOrderCdnDedicated = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cdn/dedicated`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedQueryKey = () => {
    return [`/order/cdn/dedicated`] as const;
    }

    
export const getGetOrderCdnDedicatedQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicated>>> = ({ signal }) => getOrderCdnDedicated(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicated>>>
export type GetOrderCdnDedicatedQueryError = unknown


export function useGetOrderCdnDedicated<TData = Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicated<TData = Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicated>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicated<TData = Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCdnDedicated<TData = Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicated>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderCdnDedicatedNew = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cdn/dedicated/new`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedNewQueryKey = () => {
    return [`/order/cdn/dedicated/new`] as const;
    }

    
export const getGetOrderCdnDedicatedNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedNewQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>> = ({ signal }) => getOrderCdnDedicatedNew(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>>
export type GetOrderCdnDedicatedNewQueryError = unknown


export function useGetOrderCdnDedicatedNew<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedNew<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedNew<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderCdnDedicatedNew<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedNewQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderCdnDedicatedNewDuration = (
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/new/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedNewDurationQueryKey = (duration: string,) => {
    return [`/order/cdn/dedicated/new/${duration}`] as const;
    }

    
export const getGetOrderCdnDedicatedNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError = unknown>(duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedNewDurationQueryKey(duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>> = ({ signal }) => getOrderCdnDedicatedNewDuration(duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>>
export type GetOrderCdnDedicatedNewDurationQueryError = unknown


export function useGetOrderCdnDedicatedNewDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError = unknown>(
 duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedNewDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError = unknown>(
 duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedNewDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError = unknown>(
 duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderCdnDedicatedNewDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError = unknown>(
 duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedNewDurationQueryOptions(duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderCdnDedicatedNewDuration = (
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/new/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderCdnDedicatedNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedNewDuration>>, TError,{duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedNewDuration>>, TError,{duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCdnDedicatedNewDuration>>, {duration: string}> = (props) => {
          const {duration} = props ?? {};

          return  postOrderCdnDedicatedNewDuration(duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCdnDedicatedNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCdnDedicatedNewDuration>>>
    
    export type PostOrderCdnDedicatedNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderCdnDedicatedNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedNewDuration>>, TError,{duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCdnDedicatedNewDuration>>,
        TError,
        {duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderCdnDedicatedNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderCdnDedicatedServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cdn/dedicated/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cdn/dedicated/${serviceName}`] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>> = ({ signal }) => getOrderCdnDedicatedServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>>
export type GetOrderCdnDedicatedServiceNameQueryError = unknown


export function useGetOrderCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderCdnDedicatedServiceName<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'backend' option
 */
export const getOrderCdnDedicatedServiceNameBackend = (
    serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cdn/dedicated/${serviceName}/backend`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameBackendQueryKey = (serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams,) => {
    return [`/order/cdn/dedicated/${serviceName}/backend`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameBackendQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError = unknown>(serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameBackendQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>> = ({ signal }) => getOrderCdnDedicatedServiceNameBackend(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameBackendQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>>
export type GetOrderCdnDedicatedServiceNameBackendQueryError = unknown


export function useGetOrderCdnDedicatedServiceNameBackend<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameBackend<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameBackend<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'backend' option
 */

export function useGetOrderCdnDedicatedServiceNameBackend<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameBackendParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackend>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameBackendQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderCdnDedicatedServiceNameBackendDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/${serviceName}/backend/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameBackendDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams,) => {
    return [`/order/cdn/dedicated/${serviceName}/backend/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameBackendDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameBackendDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>> = ({ signal }) => getOrderCdnDedicatedServiceNameBackendDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameBackendDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>>
export type GetOrderCdnDedicatedServiceNameBackendDurationQueryError = unknown


export function useGetOrderCdnDedicatedServiceNameBackendDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameBackendDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameBackendDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderCdnDedicatedServiceNameBackendDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameBackendDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameBackendDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameBackendDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderCdnDedicatedServiceNameBackendDuration = (
    serviceName: string,
    duration: string,
    postOrderCdnDedicatedServiceNameBackendDurationBody: PostOrderCdnDedicatedServiceNameBackendDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/${serviceName}/backend/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCdnDedicatedServiceNameBackendDurationBody, signal
    },
      options);
    }
  


export const getPostOrderCdnDedicatedServiceNameBackendDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameBackendDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameBackendDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameBackendDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameBackendDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameBackendDuration>>, {serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameBackendDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderCdnDedicatedServiceNameBackendDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCdnDedicatedServiceNameBackendDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameBackendDuration>>>
    export type PostOrderCdnDedicatedServiceNameBackendDurationMutationBody = PostOrderCdnDedicatedServiceNameBackendDurationBody
    export type PostOrderCdnDedicatedServiceNameBackendDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderCdnDedicatedServiceNameBackendDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameBackendDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameBackendDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameBackendDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameBackendDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCdnDedicatedServiceNameBackendDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'cacheRule' option
 */
export const getOrderCdnDedicatedServiceNameCacheRule = (
    serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cdn/dedicated/${serviceName}/cacheRule`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameCacheRuleQueryKey = (serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams,) => {
    return [`/order/cdn/dedicated/${serviceName}/cacheRule`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameCacheRuleQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError = unknown>(serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameCacheRuleQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>> = ({ signal }) => getOrderCdnDedicatedServiceNameCacheRule(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameCacheRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>>
export type GetOrderCdnDedicatedServiceNameCacheRuleQueryError = unknown


export function useGetOrderCdnDedicatedServiceNameCacheRule<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameCacheRule<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameCacheRule<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'cacheRule' option
 */

export function useGetOrderCdnDedicatedServiceNameCacheRule<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameCacheRuleQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderCdnDedicatedServiceNameCacheRuleDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/${serviceName}/cacheRule/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameCacheRuleDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams,) => {
    return [`/order/cdn/dedicated/${serviceName}/cacheRule/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameCacheRuleDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameCacheRuleDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>> = ({ signal }) => getOrderCdnDedicatedServiceNameCacheRuleDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameCacheRuleDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>>
export type GetOrderCdnDedicatedServiceNameCacheRuleDurationQueryError = unknown


export function useGetOrderCdnDedicatedServiceNameCacheRuleDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameCacheRuleDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameCacheRuleDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderCdnDedicatedServiceNameCacheRuleDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameCacheRuleDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameCacheRuleDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderCdnDedicatedServiceNameCacheRuleDuration = (
    serviceName: string,
    duration: string,
    postOrderCdnDedicatedServiceNameCacheRuleDurationBody: PostOrderCdnDedicatedServiceNameCacheRuleDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/${serviceName}/cacheRule/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCdnDedicatedServiceNameCacheRuleDurationBody, signal
    },
      options);
    }
  


export const getPostOrderCdnDedicatedServiceNameCacheRuleDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameCacheRuleDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameCacheRuleDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameCacheRuleDuration>>, {serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameCacheRuleDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderCdnDedicatedServiceNameCacheRuleDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCdnDedicatedServiceNameCacheRuleDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameCacheRuleDuration>>>
    export type PostOrderCdnDedicatedServiceNameCacheRuleDurationMutationBody = PostOrderCdnDedicatedServiceNameCacheRuleDurationBody
    export type PostOrderCdnDedicatedServiceNameCacheRuleDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderCdnDedicatedServiceNameCacheRuleDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameCacheRuleDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameCacheRuleDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameCacheRuleDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameCacheRuleDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCdnDedicatedServiceNameCacheRuleDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'quota' option
 */
export const getOrderCdnDedicatedServiceNameQuota = (
    serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cdn/dedicated/${serviceName}/quota`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameQuotaQueryKey = (serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams,) => {
    return [`/order/cdn/dedicated/${serviceName}/quota`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameQuotaQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError = unknown>(serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameQuotaQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>> = ({ signal }) => getOrderCdnDedicatedServiceNameQuota(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameQuotaQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>>
export type GetOrderCdnDedicatedServiceNameQuotaQueryError = unknown


export function useGetOrderCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'quota' option
 */

export function useGetOrderCdnDedicatedServiceNameQuota<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCdnDedicatedServiceNameQuotaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameQuotaQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderCdnDedicatedServiceNameQuotaDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/${serviceName}/quota/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCdnDedicatedServiceNameQuotaDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams,) => {
    return [`/order/cdn/dedicated/${serviceName}/quota/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCdnDedicatedServiceNameQuotaDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCdnDedicatedServiceNameQuotaDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>> = ({ signal }) => getOrderCdnDedicatedServiceNameQuotaDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCdnDedicatedServiceNameQuotaDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>>
export type GetOrderCdnDedicatedServiceNameQuotaDurationQueryError = unknown


export function useGetOrderCdnDedicatedServiceNameQuotaDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameQuotaDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCdnDedicatedServiceNameQuotaDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderCdnDedicatedServiceNameQuotaDuration<TData = Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderCdnDedicatedServiceNameQuotaDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCdnDedicatedServiceNameQuotaDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCdnDedicatedServiceNameQuotaDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderCdnDedicatedServiceNameQuotaDuration = (
    serviceName: string,
    duration: string,
    postOrderCdnDedicatedServiceNameQuotaDurationBody: PostOrderCdnDedicatedServiceNameQuotaDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cdn/dedicated/${serviceName}/quota/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCdnDedicatedServiceNameQuotaDurationBody, signal
    },
      options);
    }
  


export const getPostOrderCdnDedicatedServiceNameQuotaDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameQuotaDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameQuotaDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameQuotaDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameQuotaDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameQuotaDuration>>, {serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameQuotaDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderCdnDedicatedServiceNameQuotaDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCdnDedicatedServiceNameQuotaDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameQuotaDuration>>>
    export type PostOrderCdnDedicatedServiceNameQuotaDurationMutationBody = PostOrderCdnDedicatedServiceNameQuotaDurationBody
    export type PostOrderCdnDedicatedServiceNameQuotaDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderCdnDedicatedServiceNameQuotaDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameQuotaDuration>>, TError,{serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameQuotaDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCdnDedicatedServiceNameQuotaDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderCdnDedicatedServiceNameQuotaDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCdnDedicatedServiceNameQuotaDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderCloudProject = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cloud/project`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCloudProjectQueryKey = () => {
    return [`/order/cloud/project`] as const;
    }

    
export const getGetOrderCloudProjectQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCloudProject>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCloudProjectQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCloudProject>>> = ({ signal }) => getOrderCloudProject(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCloudProjectQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCloudProject>>>
export type GetOrderCloudProjectQueryError = unknown


export function useGetOrderCloudProject<TData = Awaited<ReturnType<typeof getOrderCloudProject>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCloudProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCloudProject<TData = Awaited<ReturnType<typeof getOrderCloudProject>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCloudProject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCloudProject<TData = Awaited<ReturnType<typeof getOrderCloudProject>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderCloudProject<TData = Awaited<ReturnType<typeof getOrderCloudProject>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCloudProjectQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderCloudProjectServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/cloud/project/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderCloudProjectServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/cloud/project/${serviceName}`] as const;
    }

    
export const getGetOrderCloudProjectServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCloudProjectServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>> = ({ signal }) => getOrderCloudProjectServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCloudProjectServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>>
export type GetOrderCloudProjectServiceNameQueryError = unknown


export function useGetOrderCloudProjectServiceName<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCloudProjectServiceName<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCloudProjectServiceName<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderCloudProjectServiceName<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCloudProjectServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderCloudProjectServiceNameCredit = (
    serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cloud/project/${serviceName}/credit`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderCloudProjectServiceNameCreditQueryKey = (serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams,) => {
    return [`/order/cloud/project/${serviceName}/credit`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderCloudProjectServiceNameCreditQueryOptions = <TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError = unknown>(serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderCloudProjectServiceNameCreditQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>> = ({ signal }) => getOrderCloudProjectServiceNameCredit(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderCloudProjectServiceNameCreditQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>>
export type GetOrderCloudProjectServiceNameCreditQueryError = unknown


export function useGetOrderCloudProjectServiceNameCredit<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCloudProjectServiceNameCredit<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderCloudProjectServiceNameCredit<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderCloudProjectServiceNameCredit<TData = Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError = unknown>(
 serviceName: string,
    params: GetOrderCloudProjectServiceNameCreditParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderCloudProjectServiceNameCredit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderCloudProjectServiceNameCreditQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderCloudProjectServiceNameCredit = (
    serviceName: string,
    postOrderCloudProjectServiceNameCreditBody: PostOrderCloudProjectServiceNameCreditBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/cloud/project/${serviceName}/credit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderCloudProjectServiceNameCreditBody, signal
    },
      options);
    }
  


export const getPostOrderCloudProjectServiceNameCreditMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCloudProjectServiceNameCredit>>, TError,{serviceName: string;data: PostOrderCloudProjectServiceNameCreditBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderCloudProjectServiceNameCredit>>, TError,{serviceName: string;data: PostOrderCloudProjectServiceNameCreditBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderCloudProjectServiceNameCredit>>, {serviceName: string;data: PostOrderCloudProjectServiceNameCreditBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderCloudProjectServiceNameCredit(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderCloudProjectServiceNameCreditMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderCloudProjectServiceNameCredit>>>
    export type PostOrderCloudProjectServiceNameCreditMutationBody = PostOrderCloudProjectServiceNameCreditBody
    export type PostOrderCloudProjectServiceNameCreditMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderCloudProjectServiceNameCredit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderCloudProjectServiceNameCredit>>, TError,{serviceName: string;data: PostOrderCloudProjectServiceNameCreditBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderCloudProjectServiceNameCredit>>,
        TError,
        {serviceName: string;data: PostOrderCloudProjectServiceNameCreditBody},
        TContext
      > => {

      const mutationOptions = getPostOrderCloudProjectServiceNameCreditMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderDedicatedHousing = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/housing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedHousingQueryKey = () => {
    return [`/order/dedicated/housing`] as const;
    }

    
export const getGetOrderDedicatedHousingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedHousingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedHousing>>> = ({ signal }) => getOrderDedicatedHousing(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedHousingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedHousing>>>
export type GetOrderDedicatedHousingQueryError = unknown


export function useGetOrderDedicatedHousing<TData = Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousing<TData = Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousing<TData = Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderDedicatedHousing<TData = Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedHousingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderDedicatedHousingServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/housing/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedHousingServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/housing/${serviceName}`] as const;
    }

    
export const getGetOrderDedicatedHousingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedHousingServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>> = ({ signal }) => getOrderDedicatedHousingServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedHousingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>>
export type GetOrderDedicatedHousingServiceNameQueryError = unknown


export function useGetOrderDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderDedicatedHousingServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedHousingServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'APC' option
 */
export const getOrderDedicatedHousingServiceNameAPC = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/housing/${serviceName}/APC`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedHousingServiceNameAPCQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/housing/${serviceName}/APC`] as const;
    }

    
export const getGetOrderDedicatedHousingServiceNameAPCQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedHousingServiceNameAPCQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>> = ({ signal }) => getOrderDedicatedHousingServiceNameAPC(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedHousingServiceNameAPCQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>>
export type GetOrderDedicatedHousingServiceNameAPCQueryError = unknown


export function useGetOrderDedicatedHousingServiceNameAPC<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameAPC<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameAPC<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'APC' option
 */

export function useGetOrderDedicatedHousingServiceNameAPC<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPC>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedHousingServiceNameAPCQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedHousingServiceNameAPCDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/housing/${serviceName}/APC/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedHousingServiceNameAPCDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/dedicated/housing/${serviceName}/APC/${duration}`] as const;
    }

    
export const getGetOrderDedicatedHousingServiceNameAPCDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedHousingServiceNameAPCDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>> = ({ signal }) => getOrderDedicatedHousingServiceNameAPCDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedHousingServiceNameAPCDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>>
export type GetOrderDedicatedHousingServiceNameAPCDurationQueryError = unknown


export function useGetOrderDedicatedHousingServiceNameAPCDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameAPCDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameAPCDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedHousingServiceNameAPCDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameAPCDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedHousingServiceNameAPCDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedHousingServiceNameAPCDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/housing/${serviceName}/APC/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderDedicatedHousingServiceNameAPCDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameAPCDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameAPCDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameAPCDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderDedicatedHousingServiceNameAPCDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedHousingServiceNameAPCDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameAPCDuration>>>
    
    export type PostOrderDedicatedHousingServiceNameAPCDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedHousingServiceNameAPCDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameAPCDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameAPCDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedHousingServiceNameAPCDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'highAvailabilityRouting' option
 */
export const getOrderDedicatedHousingServiceNameHighAvailabilityRouting = (
    serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/housing/${serviceName}/highAvailabilityRouting`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingQueryKey = (serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams,) => {
    return [`/order/dedicated/housing/${serviceName}/highAvailabilityRouting`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>> = ({ signal }) => getOrderDedicatedHousingServiceNameHighAvailabilityRouting(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>>
export type GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingQueryError = unknown


export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'highAvailabilityRouting' option
 */

export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRouting<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRouting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/housing/${serviceName}/highAvailabilityRouting/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams,) => {
    return [`/order/dedicated/housing/${serviceName}/highAvailabilityRouting/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>> = ({ signal }) => getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>>
export type GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationQueryError = unknown


export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody: PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/housing/${serviceName}/highAvailabilityRouting/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>>
    export type PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationMutationBody = PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody
    export type PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedHousingServiceNameHighAvailabilityRoutingDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedHousingServiceNameHighAvailabilityRoutingDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderDedicatedServer = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerQueryKey = () => {
    return [`/order/dedicated/server`] as const;
    }

    
export const getGetOrderDedicatedServerQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServer>>> = ({ signal }) => getOrderDedicatedServer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServer>>>
export type GetOrderDedicatedServerQueryError = unknown


export function useGetOrderDedicatedServer<TData = Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServer<TData = Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServer<TData = Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderDedicatedServer<TData = Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderDedicatedServerServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/server/${serviceName}`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>> = ({ signal }) => getOrderDedicatedServerServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>>
export type GetOrderDedicatedServerServiceNameQueryError = unknown


export function useGetOrderDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderDedicatedServerServiceName<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'IPBlockAllocation' option
 */
export const getOrderDedicatedServerServiceNameIPBlockAllocation = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/IPBlockAllocation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameIPBlockAllocationQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams,) => {
    return [`/order/dedicated/server/${serviceName}/IPBlockAllocation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameIPBlockAllocationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameIPBlockAllocationQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>> = ({ signal }) => getOrderDedicatedServerServiceNameIPBlockAllocation(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameIPBlockAllocationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>>
export type GetOrderDedicatedServerServiceNameIPBlockAllocationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameIPBlockAllocation<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIPBlockAllocation<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIPBlockAllocation<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'IPBlockAllocation' option
 */

export function useGetOrderDedicatedServerServiceNameIPBlockAllocation<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameIPBlockAllocationQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameIPBlockAllocationDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/IPBlockAllocation/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameIPBlockAllocationDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/IPBlockAllocation/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameIPBlockAllocationDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameIPBlockAllocationDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameIPBlockAllocationDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameIPBlockAllocationDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>>
export type GetOrderDedicatedServerServiceNameIPBlockAllocationDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameIPBlockAllocationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIPBlockAllocationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIPBlockAllocationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameIPBlockAllocationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIPBlockAllocationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameIPBlockAllocationDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameIPBlockAllocationDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameIPBlockAllocationDurationBody: PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/IPBlockAllocation/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameIPBlockAllocationDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameIPBlockAllocationDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameIPBlockAllocationDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameIPBlockAllocationDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIPBlockAllocationDuration>>>
    export type PostOrderDedicatedServerServiceNameIPBlockAllocationDurationMutationBody = PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody
    export type PostOrderDedicatedServerServiceNameIPBlockAllocationDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameIPBlockAllocationDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIPBlockAllocationDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIPBlockAllocationDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIPBlockAllocationDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameIPBlockAllocationDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'anti-DDoSPro' option
 */
export const getOrderDedicatedServerServiceNameAntiDDoSPro = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/anti-DDoSPro`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameAntiDDoSProQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/server/${serviceName}/anti-DDoSPro`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameAntiDDoSProQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameAntiDDoSProQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>> = ({ signal }) => getOrderDedicatedServerServiceNameAntiDDoSPro(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameAntiDDoSProQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>>
export type GetOrderDedicatedServerServiceNameAntiDDoSProQueryError = unknown


export function useGetOrderDedicatedServerServiceNameAntiDDoSPro<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameAntiDDoSPro<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameAntiDDoSPro<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'anti-DDoSPro' option
 */

export function useGetOrderDedicatedServerServiceNameAntiDDoSPro<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameAntiDDoSProQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameAntiDDoSProDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/anti-DDoSPro/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameAntiDDoSProDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/dedicated/server/${serviceName}/anti-DDoSPro/${duration}`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameAntiDDoSProDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameAntiDDoSProDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameAntiDDoSProDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameAntiDDoSProDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>>
export type GetOrderDedicatedServerServiceNameAntiDDoSProDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameAntiDDoSProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameAntiDDoSProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameAntiDDoSProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameAntiDDoSProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameAntiDDoSProDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameAntiDDoSProDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/anti-DDoSPro/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameAntiDDoSProDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameAntiDDoSProDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderDedicatedServerServiceNameAntiDDoSProDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameAntiDDoSProDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameAntiDDoSProDuration>>>
    
    export type PostOrderDedicatedServerServiceNameAntiDDoSProDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameAntiDDoSProDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameAntiDDoSProDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameAntiDDoSProDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameAntiDDoSProDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'backupStorage' option
 */
export const getOrderDedicatedServerServiceNameBackupStorage = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/backupStorage`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameBackupStorageQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams,) => {
    return [`/order/dedicated/server/${serviceName}/backupStorage`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameBackupStorageQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameBackupStorageQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>> = ({ signal }) => getOrderDedicatedServerServiceNameBackupStorage(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameBackupStorageQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>>
export type GetOrderDedicatedServerServiceNameBackupStorageQueryError = unknown


export function useGetOrderDedicatedServerServiceNameBackupStorage<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBackupStorage<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBackupStorage<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'backupStorage' option
 */

export function useGetOrderDedicatedServerServiceNameBackupStorage<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorage>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameBackupStorageQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameBackupStorageDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/backupStorage/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameBackupStorageDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/backupStorage/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameBackupStorageDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameBackupStorageDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameBackupStorageDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameBackupStorageDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>>
export type GetOrderDedicatedServerServiceNameBackupStorageDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameBackupStorageDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBackupStorageDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBackupStorageDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameBackupStorageDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBackupStorageDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBackupStorageDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameBackupStorageDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameBackupStorageDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameBackupStorageDurationBody: PostOrderDedicatedServerServiceNameBackupStorageDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/backupStorage/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameBackupStorageDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameBackupStorageDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBackupStorageDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBackupStorageDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBackupStorageDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBackupStorageDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBackupStorageDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBackupStorageDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameBackupStorageDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameBackupStorageDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBackupStorageDuration>>>
    export type PostOrderDedicatedServerServiceNameBackupStorageDurationMutationBody = PostOrderDedicatedServerServiceNameBackupStorageDurationBody
    export type PostOrderDedicatedServerServiceNameBackupStorageDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameBackupStorageDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBackupStorageDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBackupStorageDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBackupStorageDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBackupStorageDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameBackupStorageDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'bandwidth' option
 */
export const getOrderDedicatedServerServiceNameBandwidth = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/bandwidth`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameBandwidthQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams,) => {
    return [`/order/dedicated/server/${serviceName}/bandwidth`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameBandwidthQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameBandwidthQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>> = ({ signal }) => getOrderDedicatedServerServiceNameBandwidth(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameBandwidthQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>>
export type GetOrderDedicatedServerServiceNameBandwidthQueryError = unknown


export function useGetOrderDedicatedServerServiceNameBandwidth<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidth<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidth<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'bandwidth' option
 */

export function useGetOrderDedicatedServerServiceNameBandwidth<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameBandwidthQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameBandwidthDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/bandwidth/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameBandwidthDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/bandwidth/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameBandwidthDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameBandwidthDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameBandwidthDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameBandwidthDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>>
export type GetOrderDedicatedServerServiceNameBandwidthDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameBandwidthDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidthDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidthDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameBandwidthDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameBandwidthDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameBandwidthDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameBandwidthDurationBody: PostOrderDedicatedServerServiceNameBandwidthDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/bandwidth/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameBandwidthDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameBandwidthDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameBandwidthDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameBandwidthDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthDuration>>>
    export type PostOrderDedicatedServerServiceNameBandwidthDurationMutationBody = PostOrderDedicatedServerServiceNameBandwidthDurationBody
    export type PostOrderDedicatedServerServiceNameBandwidthDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameBandwidthDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameBandwidthDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'bandwidthvRack' option
 */
export const getOrderDedicatedServerServiceNameBandwidthvRack = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/bandwidthvRack`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameBandwidthvRackQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams,) => {
    return [`/order/dedicated/server/${serviceName}/bandwidthvRack`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameBandwidthvRackQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameBandwidthvRackQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>> = ({ signal }) => getOrderDedicatedServerServiceNameBandwidthvRack(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameBandwidthvRackQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>>
export type GetOrderDedicatedServerServiceNameBandwidthvRackQueryError = unknown


export function useGetOrderDedicatedServerServiceNameBandwidthvRack<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidthvRack<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidthvRack<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'bandwidthvRack' option
 */

export function useGetOrderDedicatedServerServiceNameBandwidthvRack<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRack>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameBandwidthvRackQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameBandwidthvRackDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/bandwidthvRack/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameBandwidthvRackDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/bandwidthvRack/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameBandwidthvRackDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameBandwidthvRackDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameBandwidthvRackDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameBandwidthvRackDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>>
export type GetOrderDedicatedServerServiceNameBandwidthvRackDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameBandwidthvRackDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidthvRackDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameBandwidthvRackDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameBandwidthvRackDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameBandwidthvRackDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameBandwidthvRackDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameBandwidthvRackDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameBandwidthvRackDurationBody: PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/bandwidthvRack/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameBandwidthvRackDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameBandwidthvRackDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthvRackDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameBandwidthvRackDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameBandwidthvRackDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthvRackDuration>>>
    export type PostOrderDedicatedServerServiceNameBandwidthvRackDurationMutationBody = PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody
    export type PostOrderDedicatedServerServiceNameBandwidthvRackDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameBandwidthvRackDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthvRackDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameBandwidthvRackDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameBandwidthvRackDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameBandwidthvRackDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'failoverIP' option
 */
export const getOrderDedicatedServerServiceNameFailoverIP = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/failoverIP`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameFailoverIPQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams,) => {
    return [`/order/dedicated/server/${serviceName}/failoverIP`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameFailoverIPQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameFailoverIPQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>> = ({ signal }) => getOrderDedicatedServerServiceNameFailoverIP(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameFailoverIPQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>>
export type GetOrderDedicatedServerServiceNameFailoverIPQueryError = unknown


export function useGetOrderDedicatedServerServiceNameFailoverIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFailoverIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFailoverIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'failoverIP' option
 */

export function useGetOrderDedicatedServerServiceNameFailoverIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameFailoverIPQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameFailoverIPDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/failoverIP/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameFailoverIPDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/failoverIP/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameFailoverIPDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameFailoverIPDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameFailoverIPDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameFailoverIPDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>>
export type GetOrderDedicatedServerServiceNameFailoverIPDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameFailoverIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFailoverIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFailoverIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameFailoverIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFailoverIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFailoverIPDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameFailoverIPDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameFailoverIPDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameFailoverIPDurationBody: PostOrderDedicatedServerServiceNameFailoverIPDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/failoverIP/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameFailoverIPDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameFailoverIPDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFailoverIPDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFailoverIPDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFailoverIPDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFailoverIPDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFailoverIPDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFailoverIPDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameFailoverIPDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameFailoverIPDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFailoverIPDuration>>>
    export type PostOrderDedicatedServerServiceNameFailoverIPDurationMutationBody = PostOrderDedicatedServerServiceNameFailoverIPDurationBody
    export type PostOrderDedicatedServerServiceNameFailoverIPDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameFailoverIPDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFailoverIPDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFailoverIPDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFailoverIPDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFailoverIPDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameFailoverIPDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'feature' option
 */
export const getOrderDedicatedServerServiceNameFeature = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/feature`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameFeatureQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams,) => {
    return [`/order/dedicated/server/${serviceName}/feature`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameFeatureQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameFeatureQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>> = ({ signal }) => getOrderDedicatedServerServiceNameFeature(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameFeatureQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>>
export type GetOrderDedicatedServerServiceNameFeatureQueryError = unknown


export function useGetOrderDedicatedServerServiceNameFeature<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFeature<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFeature<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'feature' option
 */

export function useGetOrderDedicatedServerServiceNameFeature<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFeatureParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeature>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameFeatureQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameFeatureDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/feature/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameFeatureDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/feature/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameFeatureDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameFeatureDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameFeatureDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameFeatureDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>>
export type GetOrderDedicatedServerServiceNameFeatureDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameFeatureDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFeatureDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFeatureDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameFeatureDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFeatureDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFeatureDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameFeatureDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameFeatureDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameFeatureDurationBody: PostOrderDedicatedServerServiceNameFeatureDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/feature/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameFeatureDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameFeatureDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFeatureDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFeatureDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFeatureDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFeatureDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFeatureDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFeatureDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameFeatureDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameFeatureDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFeatureDuration>>>
    export type PostOrderDedicatedServerServiceNameFeatureDurationMutationBody = PostOrderDedicatedServerServiceNameFeatureDurationBody
    export type PostOrderDedicatedServerServiceNameFeatureDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameFeatureDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFeatureDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFeatureDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFeatureDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFeatureDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameFeatureDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'firewall' option
 */
export const getOrderDedicatedServerServiceNameFirewall = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/firewall`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameFirewallQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams,) => {
    return [`/order/dedicated/server/${serviceName}/firewall`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameFirewallQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameFirewallQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>> = ({ signal }) => getOrderDedicatedServerServiceNameFirewall(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameFirewallQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>>
export type GetOrderDedicatedServerServiceNameFirewallQueryError = unknown


export function useGetOrderDedicatedServerServiceNameFirewall<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFirewall<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFirewall<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'firewall' option
 */

export function useGetOrderDedicatedServerServiceNameFirewall<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameFirewallParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewall>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameFirewallQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameFirewallDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/firewall/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameFirewallDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/firewall/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameFirewallDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameFirewallDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameFirewallDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameFirewallDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>>
export type GetOrderDedicatedServerServiceNameFirewallDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameFirewallDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFirewallDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameFirewallDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameFirewallDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameFirewallDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameFirewallDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameFirewallDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameFirewallDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameFirewallDurationBody: PostOrderDedicatedServerServiceNameFirewallDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/firewall/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameFirewallDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameFirewallDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFirewallDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFirewallDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFirewallDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFirewallDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFirewallDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFirewallDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameFirewallDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameFirewallDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFirewallDuration>>>
    export type PostOrderDedicatedServerServiceNameFirewallDurationMutationBody = PostOrderDedicatedServerServiceNameFirewallDurationBody
    export type PostOrderDedicatedServerServiceNameFirewallDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameFirewallDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFirewallDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFirewallDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameFirewallDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameFirewallDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameFirewallDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'ip' option
 */
export const getOrderDedicatedServerServiceNameIp = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/ip`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameIpQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams,) => {
    return [`/order/dedicated/server/${serviceName}/ip`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameIpQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameIpQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>> = ({ signal }) => getOrderDedicatedServerServiceNameIp(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameIpQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>>
export type GetOrderDedicatedServerServiceNameIpQueryError = unknown


export function useGetOrderDedicatedServerServiceNameIp<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIp<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIp<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'ip' option
 */

export function useGetOrderDedicatedServerServiceNameIp<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameIpQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameIpDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/ip/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameIpDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/ip/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameIpDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameIpDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameIpDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameIpDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>>
export type GetOrderDedicatedServerServiceNameIpDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameIpDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameIpDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameIpDurationBody: PostOrderDedicatedServerServiceNameIpDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/ip/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameIpDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameIpDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameIpDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameIpDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpDuration>>>
    export type PostOrderDedicatedServerServiceNameIpDurationMutationBody = PostOrderDedicatedServerServiceNameIpDurationBody
    export type PostOrderDedicatedServerServiceNameIpDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameIpDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameIpDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'ipMigration' option
 */
export const getOrderDedicatedServerServiceNameIpMigration = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/ipMigration`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameIpMigrationQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams,) => {
    return [`/order/dedicated/server/${serviceName}/ipMigration`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameIpMigrationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameIpMigrationQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>> = ({ signal }) => getOrderDedicatedServerServiceNameIpMigration(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameIpMigrationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>>
export type GetOrderDedicatedServerServiceNameIpMigrationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameIpMigration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIpMigration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIpMigration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'ipMigration' option
 */

export function useGetOrderDedicatedServerServiceNameIpMigration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameIpMigrationQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameIpMigrationDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/ipMigration/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameIpMigrationDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/ipMigration/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameIpMigrationDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameIpMigrationDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameIpMigrationDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameIpMigrationDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>>
export type GetOrderDedicatedServerServiceNameIpMigrationDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameIpMigrationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIpMigrationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameIpMigrationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameIpMigrationDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameIpMigrationDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameIpMigrationDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameIpMigrationDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameIpMigrationDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameIpMigrationDurationBody: PostOrderDedicatedServerServiceNameIpMigrationDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/ipMigration/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameIpMigrationDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameIpMigrationDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpMigrationDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpMigrationDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpMigrationDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpMigrationDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpMigrationDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpMigrationDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameIpMigrationDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameIpMigrationDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpMigrationDuration>>>
    export type PostOrderDedicatedServerServiceNameIpMigrationDurationMutationBody = PostOrderDedicatedServerServiceNameIpMigrationDurationBody
    export type PostOrderDedicatedServerServiceNameIpMigrationDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameIpMigrationDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpMigrationDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpMigrationDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameIpMigrationDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameIpMigrationDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameIpMigrationDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'kvm' option
 */
export const getOrderDedicatedServerServiceNameKvm = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/kvm`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameKvmQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/server/${serviceName}/kvm`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameKvmQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameKvmQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>> = ({ signal }) => getOrderDedicatedServerServiceNameKvm(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameKvmQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>>
export type GetOrderDedicatedServerServiceNameKvmQueryError = unknown


export function useGetOrderDedicatedServerServiceNameKvm<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvm<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvm<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'kvm' option
 */

export function useGetOrderDedicatedServerServiceNameKvm<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvm>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameKvmQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameKvmDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/kvm/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameKvmDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/dedicated/server/${serviceName}/kvm/${duration}`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameKvmDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameKvmDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameKvmDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameKvmDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>>
export type GetOrderDedicatedServerServiceNameKvmDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameKvmDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvmDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvmDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameKvmDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameKvmDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameKvmDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/kvm/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameKvmDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderDedicatedServerServiceNameKvmDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameKvmDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmDuration>>>
    
    export type PostOrderDedicatedServerServiceNameKvmDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameKvmDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameKvmDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'kvmExpress' option
 */
export const getOrderDedicatedServerServiceNameKvmExpress = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/kvmExpress`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameKvmExpressQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/server/${serviceName}/kvmExpress`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameKvmExpressQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameKvmExpressQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>> = ({ signal }) => getOrderDedicatedServerServiceNameKvmExpress(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameKvmExpressQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>>
export type GetOrderDedicatedServerServiceNameKvmExpressQueryError = unknown


export function useGetOrderDedicatedServerServiceNameKvmExpress<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvmExpress<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvmExpress<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'kvmExpress' option
 */

export function useGetOrderDedicatedServerServiceNameKvmExpress<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameKvmExpressQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameKvmExpressDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/kvmExpress/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameKvmExpressDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/dedicated/server/${serviceName}/kvmExpress/${duration}`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameKvmExpressDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameKvmExpressDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameKvmExpressDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameKvmExpressDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>>
export type GetOrderDedicatedServerServiceNameKvmExpressDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameKvmExpressDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvmExpressDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameKvmExpressDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameKvmExpressDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameKvmExpressDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameKvmExpressDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameKvmExpressDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/kvmExpress/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameKvmExpressDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmExpressDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmExpressDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmExpressDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderDedicatedServerServiceNameKvmExpressDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameKvmExpressDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmExpressDuration>>>
    
    export type PostOrderDedicatedServerServiceNameKvmExpressDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameKvmExpressDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmExpressDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameKvmExpressDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameKvmExpressDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'professionalUse' option
 */
export const getOrderDedicatedServerServiceNameProfessionalUse = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/professionalUse`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameProfessionalUseQueryKey = (serviceName: string,) => {
    return [`/order/dedicated/server/${serviceName}/professionalUse`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameProfessionalUseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameProfessionalUseQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>> = ({ signal }) => getOrderDedicatedServerServiceNameProfessionalUse(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameProfessionalUseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>>
export type GetOrderDedicatedServerServiceNameProfessionalUseQueryError = unknown


export function useGetOrderDedicatedServerServiceNameProfessionalUse<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameProfessionalUse<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameProfessionalUse<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'professionalUse' option
 */

export function useGetOrderDedicatedServerServiceNameProfessionalUse<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameProfessionalUseQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameProfessionalUseDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/professionalUse/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameProfessionalUseDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/dedicated/server/${serviceName}/professionalUse/${duration}`] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameProfessionalUseDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameProfessionalUseDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameProfessionalUseDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameProfessionalUseDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>>
export type GetOrderDedicatedServerServiceNameProfessionalUseDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameProfessionalUseDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameProfessionalUseDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameProfessionalUseDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameProfessionalUseDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameProfessionalUseDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameProfessionalUseDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/professionalUse/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameProfessionalUseDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameProfessionalUseDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderDedicatedServerServiceNameProfessionalUseDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameProfessionalUseDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameProfessionalUseDuration>>>
    
    export type PostOrderDedicatedServerServiceNameProfessionalUseDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameProfessionalUseDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameProfessionalUseDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameProfessionalUseDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameProfessionalUseDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'staticIP' option
 */
export const getOrderDedicatedServerServiceNameStaticIP = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/staticIP`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameStaticIPQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams,) => {
    return [`/order/dedicated/server/${serviceName}/staticIP`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameStaticIPQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameStaticIPQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>> = ({ signal }) => getOrderDedicatedServerServiceNameStaticIP(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameStaticIPQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>>
export type GetOrderDedicatedServerServiceNameStaticIPQueryError = unknown


export function useGetOrderDedicatedServerServiceNameStaticIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameStaticIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameStaticIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'staticIP' option
 */

export function useGetOrderDedicatedServerServiceNameStaticIP<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameStaticIPParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIP>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameStaticIPQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameStaticIPDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/staticIP/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameStaticIPDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/staticIP/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameStaticIPDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameStaticIPDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameStaticIPDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameStaticIPDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>>
export type GetOrderDedicatedServerServiceNameStaticIPDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameStaticIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameStaticIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameStaticIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameStaticIPDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameStaticIPDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameStaticIPDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameStaticIPDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameStaticIPDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameStaticIPDurationBody: PostOrderDedicatedServerServiceNameStaticIPDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/staticIP/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameStaticIPDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameStaticIPDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameStaticIPDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameStaticIPDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameStaticIPDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameStaticIPDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameStaticIPDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameStaticIPDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameStaticIPDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameStaticIPDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameStaticIPDuration>>>
    export type PostOrderDedicatedServerServiceNameStaticIPDurationMutationBody = PostOrderDedicatedServerServiceNameStaticIPDurationBody
    export type PostOrderDedicatedServerServiceNameStaticIPDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameStaticIPDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameStaticIPDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameStaticIPDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameStaticIPDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameStaticIPDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameStaticIPDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'supportLevel' option
 */
export const getOrderDedicatedServerServiceNameSupportLevel = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/supportLevel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameSupportLevelQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams,) => {
    return [`/order/dedicated/server/${serviceName}/supportLevel`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameSupportLevelQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameSupportLevelQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>> = ({ signal }) => getOrderDedicatedServerServiceNameSupportLevel(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameSupportLevelQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>>
export type GetOrderDedicatedServerServiceNameSupportLevelQueryError = unknown


export function useGetOrderDedicatedServerServiceNameSupportLevel<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameSupportLevel<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameSupportLevel<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'supportLevel' option
 */

export function useGetOrderDedicatedServerServiceNameSupportLevel<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameSupportLevelQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameSupportLevelDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/supportLevel/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameSupportLevelDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/supportLevel/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameSupportLevelDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameSupportLevelDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameSupportLevelDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameSupportLevelDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>>
export type GetOrderDedicatedServerServiceNameSupportLevelDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameSupportLevelDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameSupportLevelDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameSupportLevelDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameSupportLevelDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameSupportLevelDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameSupportLevelDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameSupportLevelDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameSupportLevelDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameSupportLevelDurationBody: PostOrderDedicatedServerServiceNameSupportLevelDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/supportLevel/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameSupportLevelDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameSupportLevelDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameSupportLevelDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameSupportLevelDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameSupportLevelDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameSupportLevelDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameSupportLevelDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameSupportLevelDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameSupportLevelDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameSupportLevelDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameSupportLevelDuration>>>
    export type PostOrderDedicatedServerServiceNameSupportLevelDurationMutationBody = PostOrderDedicatedServerServiceNameSupportLevelDurationBody
    export type PostOrderDedicatedServerServiceNameSupportLevelDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameSupportLevelDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameSupportLevelDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameSupportLevelDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameSupportLevelDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameSupportLevelDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameSupportLevelDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'traffic' option
 */
export const getOrderDedicatedServerServiceNameTraffic = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/traffic`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameTrafficQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams,) => {
    return [`/order/dedicated/server/${serviceName}/traffic`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameTrafficQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameTrafficQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>> = ({ signal }) => getOrderDedicatedServerServiceNameTraffic(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameTrafficQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>>
export type GetOrderDedicatedServerServiceNameTrafficQueryError = unknown


export function useGetOrderDedicatedServerServiceNameTraffic<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameTraffic<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameTraffic<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'traffic' option
 */

export function useGetOrderDedicatedServerServiceNameTraffic<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameTrafficQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameTrafficDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/traffic/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameTrafficDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/traffic/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameTrafficDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameTrafficDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameTrafficDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameTrafficDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>>
export type GetOrderDedicatedServerServiceNameTrafficDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameTrafficDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameTrafficDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameTrafficDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameTrafficDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameTrafficDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameTrafficDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameTrafficDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameTrafficDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameTrafficDurationBody: PostOrderDedicatedServerServiceNameTrafficDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/traffic/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameTrafficDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameTrafficDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameTrafficDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameTrafficDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameTrafficDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameTrafficDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameTrafficDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameTrafficDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameTrafficDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameTrafficDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameTrafficDuration>>>
    export type PostOrderDedicatedServerServiceNameTrafficDurationMutationBody = PostOrderDedicatedServerServiceNameTrafficDurationBody
    export type PostOrderDedicatedServerServiceNameTrafficDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameTrafficDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameTrafficDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameTrafficDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameTrafficDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameTrafficDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameTrafficDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'usbKey' option
 */
export const getOrderDedicatedServerServiceNameUsbKey = (
    serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicated/server/${serviceName}/usbKey`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameUsbKeyQueryKey = (serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams,) => {
    return [`/order/dedicated/server/${serviceName}/usbKey`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameUsbKeyQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError = unknown>(serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameUsbKeyQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>> = ({ signal }) => getOrderDedicatedServerServiceNameUsbKey(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameUsbKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>>
export type GetOrderDedicatedServerServiceNameUsbKeyQueryError = unknown


export function useGetOrderDedicatedServerServiceNameUsbKey<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameUsbKey<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameUsbKey<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'usbKey' option
 */

export function useGetOrderDedicatedServerServiceNameUsbKey<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError = unknown>(
 serviceName: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameUsbKeyQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedServerServiceNameUsbKeyDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/usbKey/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderDedicatedServerServiceNameUsbKeyDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams,) => {
    return [`/order/dedicated/server/${serviceName}/usbKey/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderDedicatedServerServiceNameUsbKeyDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedServerServiceNameUsbKeyDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>> = ({ signal }) => getOrderDedicatedServerServiceNameUsbKeyDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedServerServiceNameUsbKeyDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>>
export type GetOrderDedicatedServerServiceNameUsbKeyDurationQueryError = unknown


export function useGetOrderDedicatedServerServiceNameUsbKeyDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameUsbKeyDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedServerServiceNameUsbKeyDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedServerServiceNameUsbKeyDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderDedicatedServerServiceNameUsbKeyDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedServerServiceNameUsbKeyDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedServerServiceNameUsbKeyDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedServerServiceNameUsbKeyDuration = (
    serviceName: string,
    duration: string,
    postOrderDedicatedServerServiceNameUsbKeyDurationBody: PostOrderDedicatedServerServiceNameUsbKeyDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicated/server/${serviceName}/usbKey/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderDedicatedServerServiceNameUsbKeyDurationBody, signal
    },
      options);
    }
  


export const getPostOrderDedicatedServerServiceNameUsbKeyDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameUsbKeyDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameUsbKeyDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameUsbKeyDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameUsbKeyDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameUsbKeyDuration>>, {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameUsbKeyDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderDedicatedServerServiceNameUsbKeyDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedServerServiceNameUsbKeyDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameUsbKeyDuration>>>
    export type PostOrderDedicatedServerServiceNameUsbKeyDurationMutationBody = PostOrderDedicatedServerServiceNameUsbKeyDurationBody
    export type PostOrderDedicatedServerServiceNameUsbKeyDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedServerServiceNameUsbKeyDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameUsbKeyDuration>>, TError,{serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameUsbKeyDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedServerServiceNameUsbKeyDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderDedicatedServerServiceNameUsbKeyDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedServerServiceNameUsbKeyDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'antiddos-pro' option
 */
export const getOrderDedicatedCloudServiceNameAntiddosPro = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/dedicatedCloud/${serviceName}/antiddos-pro`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedCloudServiceNameAntiddosProQueryKey = (serviceName: string,) => {
    return [`/order/dedicatedCloud/${serviceName}/antiddos-pro`] as const;
    }

    
export const getGetOrderDedicatedCloudServiceNameAntiddosProQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedCloudServiceNameAntiddosProQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>> = ({ signal }) => getOrderDedicatedCloudServiceNameAntiddosPro(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedCloudServiceNameAntiddosProQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>>
export type GetOrderDedicatedCloudServiceNameAntiddosProQueryError = unknown


export function useGetOrderDedicatedCloudServiceNameAntiddosPro<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedCloudServiceNameAntiddosPro<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedCloudServiceNameAntiddosPro<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'antiddos-pro' option
 */

export function useGetOrderDedicatedCloudServiceNameAntiddosPro<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedCloudServiceNameAntiddosProQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderDedicatedCloudServiceNameAntiddosProDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicatedCloud/${serviceName}/antiddos-pro/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderDedicatedCloudServiceNameAntiddosProDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/dedicatedCloud/${serviceName}/antiddos-pro/${duration}`] as const;
    }

    
export const getGetOrderDedicatedCloudServiceNameAntiddosProDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderDedicatedCloudServiceNameAntiddosProDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>> = ({ signal }) => getOrderDedicatedCloudServiceNameAntiddosProDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderDedicatedCloudServiceNameAntiddosProDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>>
export type GetOrderDedicatedCloudServiceNameAntiddosProDurationQueryError = unknown


export function useGetOrderDedicatedCloudServiceNameAntiddosProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedCloudServiceNameAntiddosProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderDedicatedCloudServiceNameAntiddosProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderDedicatedCloudServiceNameAntiddosProDuration<TData = Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderDedicatedCloudServiceNameAntiddosProDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderDedicatedCloudServiceNameAntiddosProDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/dedicatedCloud/${serviceName}/antiddos-pro/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderDedicatedCloudServiceNameAntiddosProDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderDedicatedCloudServiceNameAntiddosProDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderDedicatedCloudServiceNameAntiddosProDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderDedicatedCloudServiceNameAntiddosProDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderDedicatedCloudServiceNameAntiddosProDuration>>>
    
    export type PostOrderDedicatedCloudServiceNameAntiddosProDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderDedicatedCloudServiceNameAntiddosProDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderDedicatedCloudServiceNameAntiddosProDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderDedicatedCloudServiceNameAntiddosProDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderDedicatedCloudServiceNameAntiddosProDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderEmailExchange = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/exchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeQueryKey = () => {
    return [`/order/email/exchange`] as const;
    }

    
export const getGetOrderEmailExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchange>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchange>>> = ({ signal }) => getOrderEmailExchange(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchange>>>
export type GetOrderEmailExchangeQueryError = unknown


export function useGetOrderEmailExchange<TData = Awaited<ReturnType<typeof getOrderEmailExchange>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchange<TData = Awaited<ReturnType<typeof getOrderEmailExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchange<TData = Awaited<ReturnType<typeof getOrderEmailExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderEmailExchange<TData = Awaited<ReturnType<typeof getOrderEmailExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getOrderEmailExchangeOrganizationNameService = (
    organizationName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/exchange/${organizationName}/service`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceQueryKey = (organizationName: string,) => {
    return [`/order/email/exchange/${organizationName}/service`] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError = unknown>(organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceQueryKey(organizationName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameService(organizationName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>>
export type GetOrderEmailExchangeOrganizationNameServiceQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderEmailExchangeOrganizationNameService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError = unknown>(
 organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceQueryOptions(organizationName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeService = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}`] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeService(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeService<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'account' option
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount = (
    organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryKey = (organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'account' option
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration = (
    organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/account/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationQueryKey = (organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/account/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationQueryKey(organizationName,exchangeService,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration(organizationName,exchangeService,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationQueryOptions(organizationName,exchangeService,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration = (
    organizationName: string,
    exchangeService: string,
    duration: string,
    postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/account/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody, signal
    },
      options);
    }
  


export const getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, {organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody}> = (props) => {
          const {organizationName,exchangeService,duration,data} = props ?? {};

          return  postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration(organizationName,exchangeService,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>>
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationMutationBody = PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDuration>>,
        TError,
        {organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'accountUpgrade' option
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade = (
    organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/accountUpgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeQueryKey = (organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/accountUpgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'accountUpgrade' option
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration = (
    organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/accountUpgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationQueryKey = (organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/accountUpgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationQueryKey(organizationName,exchangeService,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration(organizationName,exchangeService,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationQueryOptions(organizationName,exchangeService,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration = (
    organizationName: string,
    exchangeService: string,
    duration: string,
    postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/accountUpgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, {organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody}> = (props) => {
          const {organizationName,exchangeService,duration,data} = props ?? {};

          return  postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration(organizationName,exchangeService,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>>
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationMutationBody = PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDuration>>,
        TError,
        {organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/diskSpace`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/diskSpace`] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/diskSpace`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError,{organizationName: string;exchangeService: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, {organizationName: string;exchangeService: string}> = (props) => {
          const {organizationName,exchangeService} = props ?? {};

          return  postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace(organizationName,exchangeService,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>>
    
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpace>>,
        TError,
        {organizationName: string;exchangeService: string},
        TContext
      > => {

      const mutationOptions = getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'outlook' option
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook = (
    organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/outlook`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookQueryKey = (organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/outlook`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookQueryKey(organizationName,exchangeService,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook(organizationName,exchangeService,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'outlook' option
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlook>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookQueryOptions(organizationName,exchangeService,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration = (
    organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/outlook/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationQueryKey = (organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/outlook/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError = unknown>(organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationQueryKey(organizationName,exchangeService,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration(organizationName,exchangeService,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError = unknown>(
 organizationName: string,
    exchangeService: string,
    duration: string,
    params: GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationQueryOptions(organizationName,exchangeService,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration = (
    organizationName: string,
    exchangeService: string,
    duration: string,
    postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/outlook/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody, signal
    },
      options);
    }
  


export const getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, {organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody}> = (props) => {
          const {organizationName,exchangeService,duration,data} = props ?? {};

          return  postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration(organizationName,exchangeService,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>>
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationMutationBody = PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>, TError,{organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDuration>>,
        TError,
        {organizationName: string;exchangeService: string;duration: string;data: PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/upgrade`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeQueryKey = (organizationName: string,
    exchangeService: string,) => {
    return [`/order/email/exchange/${organizationName}/service/${exchangeService}/upgrade`] as const;
    }

    
export const getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError = unknown>(organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeQueryKey(organizationName,exchangeService);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>> = ({ signal }) => getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade(organizationName,exchangeService, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName && exchangeService), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>>
export type GetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeQueryError = unknown


export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade<TData = Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError = unknown>(
 organizationName: string,
    exchangeService: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeQueryOptions(organizationName,exchangeService,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade = (
    organizationName: string,
    exchangeService: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/exchange/${organizationName}/service/${exchangeService}/upgrade`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError,{organizationName: string;exchangeService: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, {organizationName: string;exchangeService: string}> = (props) => {
          const {organizationName,exchangeService} = props ?? {};

          return  postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade(organizationName,exchangeService,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>>
    
    export type PostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>, TError,{organizationName: string;exchangeService: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgrade>>,
        TError,
        {organizationName: string;exchangeService: string},
        TContext
      > => {

      const mutationOptions = getPostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderEmailPro = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/pro`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailProQueryKey = () => {
    return [`/order/email/pro`] as const;
    }

    
export const getGetOrderEmailProQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailPro>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailProQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailPro>>> = ({ signal }) => getOrderEmailPro(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailPro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailProQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailPro>>>
export type GetOrderEmailProQueryError = unknown


export function useGetOrderEmailPro<TData = Awaited<ReturnType<typeof getOrderEmailPro>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailPro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailPro<TData = Awaited<ReturnType<typeof getOrderEmailPro>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailPro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailPro>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailPro<TData = Awaited<ReturnType<typeof getOrderEmailPro>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderEmailPro<TData = Awaited<ReturnType<typeof getOrderEmailPro>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailPro>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailProQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderEmailProService = (
    service: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/pro/${service}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderEmailProServiceQueryKey = (service: string,) => {
    return [`/order/email/pro/${service}`] as const;
    }

    
export const getGetOrderEmailProServiceQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailProService>>, TError = unknown>(service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailProServiceQueryKey(service);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailProService>>> = ({ signal }) => getOrderEmailProService(service, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailProServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailProService>>>
export type GetOrderEmailProServiceQueryError = unknown


export function useGetOrderEmailProService<TData = Awaited<ReturnType<typeof getOrderEmailProService>>, TError = unknown>(
 service: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailProService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailProService<TData = Awaited<ReturnType<typeof getOrderEmailProService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailProService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailProService<TData = Awaited<ReturnType<typeof getOrderEmailProService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderEmailProService<TData = Awaited<ReturnType<typeof getOrderEmailProService>>, TError = unknown>(
 service: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailProServiceQueryOptions(service,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'account' option
 */
export const getOrderEmailProServiceAccount = (
    service: string,
    params: GetOrderEmailProServiceAccountParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/email/pro/${service}/account`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailProServiceAccountQueryKey = (service: string,
    params: GetOrderEmailProServiceAccountParams,) => {
    return [`/order/email/pro/${service}/account`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailProServiceAccountQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError = unknown>(service: string,
    params: GetOrderEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailProServiceAccountQueryKey(service,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>> = ({ signal }) => getOrderEmailProServiceAccount(service,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailProServiceAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>>
export type GetOrderEmailProServiceAccountQueryError = unknown


export function useGetOrderEmailProServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params: GetOrderEmailProServiceAccountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailProServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params: GetOrderEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailProServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params: GetOrderEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'account' option
 */

export function useGetOrderEmailProServiceAccount<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError = unknown>(
 service: string,
    params: GetOrderEmailProServiceAccountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailProServiceAccountQueryOptions(service,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderEmailProServiceAccountDuration = (
    service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/pro/${service}/account/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderEmailProServiceAccountDurationQueryKey = (service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams,) => {
    return [`/order/email/pro/${service}/account/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderEmailProServiceAccountDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError = unknown>(service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderEmailProServiceAccountDurationQueryKey(service,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>> = ({ signal }) => getOrderEmailProServiceAccountDuration(service,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(service && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderEmailProServiceAccountDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>>
export type GetOrderEmailProServiceAccountDurationQueryError = unknown


export function useGetOrderEmailProServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError = unknown>(
 service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailProServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError = unknown>(
 service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderEmailProServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError = unknown>(
 service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderEmailProServiceAccountDuration<TData = Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError = unknown>(
 service: string,
    duration: string,
    params: GetOrderEmailProServiceAccountDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderEmailProServiceAccountDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderEmailProServiceAccountDurationQueryOptions(service,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderEmailProServiceAccountDuration = (
    service: string,
    duration: string,
    postOrderEmailProServiceAccountDurationBody: PostOrderEmailProServiceAccountDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/email/pro/${service}/account/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderEmailProServiceAccountDurationBody, signal
    },
      options);
    }
  


export const getPostOrderEmailProServiceAccountDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailProServiceAccountDuration>>, TError,{service: string;duration: string;data: PostOrderEmailProServiceAccountDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailProServiceAccountDuration>>, TError,{service: string;duration: string;data: PostOrderEmailProServiceAccountDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderEmailProServiceAccountDuration>>, {service: string;duration: string;data: PostOrderEmailProServiceAccountDurationBody}> = (props) => {
          const {service,duration,data} = props ?? {};

          return  postOrderEmailProServiceAccountDuration(service,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderEmailProServiceAccountDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderEmailProServiceAccountDuration>>>
    export type PostOrderEmailProServiceAccountDurationMutationBody = PostOrderEmailProServiceAccountDurationBody
    export type PostOrderEmailProServiceAccountDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderEmailProServiceAccountDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderEmailProServiceAccountDuration>>, TError,{service: string;duration: string;data: PostOrderEmailProServiceAccountDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderEmailProServiceAccountDuration>>,
        TError,
        {service: string;duration: string;data: PostOrderEmailProServiceAccountDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderEmailProServiceAccountDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Freefax line accounts
 */
export const getOrderFreefax = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/freefax`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderFreefaxQueryKey = () => {
    return [`/order/freefax`] as const;
    }

    
export const getGetOrderFreefaxQueryOptions = <TData = Awaited<ReturnType<typeof getOrderFreefax>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderFreefaxQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderFreefax>>> = ({ signal }) => getOrderFreefax(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefax>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderFreefaxQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderFreefax>>>
export type GetOrderFreefaxQueryError = unknown


export function useGetOrderFreefax<TData = Awaited<ReturnType<typeof getOrderFreefax>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefax>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefax<TData = Awaited<ReturnType<typeof getOrderFreefax>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefax>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefax<TData = Awaited<ReturnType<typeof getOrderFreefax>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Freefax line accounts
 */

export function useGetOrderFreefax<TData = Awaited<ReturnType<typeof getOrderFreefax>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderFreefaxQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderFreefaxNew = (
    params: GetOrderFreefaxNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/freefax/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderFreefaxNewQueryKey = (params: GetOrderFreefaxNewParams,) => {
    return [`/order/freefax/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderFreefaxNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError = unknown>(params: GetOrderFreefaxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderFreefaxNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderFreefaxNew>>> = ({ signal }) => getOrderFreefaxNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderFreefaxNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderFreefaxNew>>>
export type GetOrderFreefaxNewQueryError = unknown


export function useGetOrderFreefaxNew<TData = Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError = unknown>(
 params: GetOrderFreefaxNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefaxNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefaxNew<TData = Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError = unknown>(
 params: GetOrderFreefaxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefaxNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefaxNew<TData = Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError = unknown>(
 params: GetOrderFreefaxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderFreefaxNew<TData = Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError = unknown>(
 params: GetOrderFreefaxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderFreefaxNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderFreefaxNew = (
    postOrderFreefaxNewBody: PostOrderFreefaxNewBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/freefax/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderFreefaxNewBody, signal
    },
      options);
    }
  


export const getPostOrderFreefaxNewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderFreefaxNew>>, TError,{data: PostOrderFreefaxNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderFreefaxNew>>, TError,{data: PostOrderFreefaxNewBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderFreefaxNew>>, {data: PostOrderFreefaxNewBody}> = (props) => {
          const {data} = props ?? {};

          return  postOrderFreefaxNew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderFreefaxNewMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderFreefaxNew>>>
    export type PostOrderFreefaxNewMutationBody = PostOrderFreefaxNewBody
    export type PostOrderFreefaxNewMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderFreefaxNew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderFreefaxNew>>, TError,{data: PostOrderFreefaxNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderFreefaxNew>>,
        TError,
        {data: PostOrderFreefaxNewBody},
        TContext
      > => {

      const mutationOptions = getPostOrderFreefaxNewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderFreefaxServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/freefax/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderFreefaxServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/freefax/${serviceName}`] as const;
    }

    
export const getGetOrderFreefaxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderFreefaxServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>> = ({ signal }) => getOrderFreefaxServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderFreefaxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>>
export type GetOrderFreefaxServiceNameQueryError = unknown


export function useGetOrderFreefaxServiceName<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefaxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefaxServiceName<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefaxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefaxServiceName<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderFreefaxServiceName<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderFreefaxServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderFreefaxServiceNameConvertToVoicefax = (
    serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/freefax/${serviceName}/convertToVoicefax`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderFreefaxServiceNameConvertToVoicefaxQueryKey = (serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams,) => {
    return [`/order/freefax/${serviceName}/convertToVoicefax`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderFreefaxServiceNameConvertToVoicefaxQueryOptions = <TData = Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError = unknown>(serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderFreefaxServiceNameConvertToVoicefaxQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>> = ({ signal }) => getOrderFreefaxServiceNameConvertToVoicefax(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderFreefaxServiceNameConvertToVoicefaxQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>>
export type GetOrderFreefaxServiceNameConvertToVoicefaxQueryError = unknown


export function useGetOrderFreefaxServiceNameConvertToVoicefax<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError = unknown>(
 serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefaxServiceNameConvertToVoicefax<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError = unknown>(
 serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderFreefaxServiceNameConvertToVoicefax<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError = unknown>(
 serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderFreefaxServiceNameConvertToVoicefax<TData = Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError = unknown>(
 serviceName: string,
    params: GetOrderFreefaxServiceNameConvertToVoicefaxParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderFreefaxServiceNameConvertToVoicefax>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderFreefaxServiceNameConvertToVoicefaxQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderFreefaxServiceNameConvertToVoicefax = (
    serviceName: string,
    postOrderFreefaxServiceNameConvertToVoicefaxBody: PostOrderFreefaxServiceNameConvertToVoicefaxBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/freefax/${serviceName}/convertToVoicefax`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderFreefaxServiceNameConvertToVoicefaxBody, signal
    },
      options);
    }
  


export const getPostOrderFreefaxServiceNameConvertToVoicefaxMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderFreefaxServiceNameConvertToVoicefax>>, TError,{serviceName: string;data: PostOrderFreefaxServiceNameConvertToVoicefaxBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderFreefaxServiceNameConvertToVoicefax>>, TError,{serviceName: string;data: PostOrderFreefaxServiceNameConvertToVoicefaxBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderFreefaxServiceNameConvertToVoicefax>>, {serviceName: string;data: PostOrderFreefaxServiceNameConvertToVoicefaxBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderFreefaxServiceNameConvertToVoicefax(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderFreefaxServiceNameConvertToVoicefaxMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderFreefaxServiceNameConvertToVoicefax>>>
    export type PostOrderFreefaxServiceNameConvertToVoicefaxMutationBody = PostOrderFreefaxServiceNameConvertToVoicefaxBody
    export type PostOrderFreefaxServiceNameConvertToVoicefaxMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderFreefaxServiceNameConvertToVoicefax = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderFreefaxServiceNameConvertToVoicefax>>, TError,{serviceName: string;data: PostOrderFreefaxServiceNameConvertToVoicefaxBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderFreefaxServiceNameConvertToVoicefax>>,
        TError,
        {serviceName: string;data: PostOrderFreefaxServiceNameConvertToVoicefaxBody},
        TContext
      > => {

      const mutationOptions = getPostOrderFreefaxServiceNameConvertToVoicefaxMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderLicenseCpanel = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/cpanel`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicenseCpanelQueryKey = () => {
    return [`/order/license/cpanel`] as const;
    }

    
export const getGetOrderLicenseCpanelQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseCpanelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseCpanel>>> = ({ signal }) => getOrderLicenseCpanel(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseCpanelQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseCpanel>>>
export type GetOrderLicenseCpanelQueryError = unknown


export function useGetOrderLicenseCpanel<TData = Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanel<TData = Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanel<TData = Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderLicenseCpanel<TData = Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseCpanelQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderLicenseCpanelNew = (
    params: GetOrderLicenseCpanelNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/cpanel/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseCpanelNewQueryKey = (params: GetOrderLicenseCpanelNewParams,) => {
    return [`/order/license/cpanel/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseCpanelNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError = unknown>(params: GetOrderLicenseCpanelNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseCpanelNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>> = ({ signal }) => getOrderLicenseCpanelNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseCpanelNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>>
export type GetOrderLicenseCpanelNewQueryError = unknown


export function useGetOrderLicenseCpanelNew<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError = unknown>(
 params: GetOrderLicenseCpanelNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelNew<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError = unknown>(
 params: GetOrderLicenseCpanelNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelNew<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError = unknown>(
 params: GetOrderLicenseCpanelNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderLicenseCpanelNew<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError = unknown>(
 params: GetOrderLicenseCpanelNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseCpanelNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseCpanelNewDuration = (
    duration: string,
    params: GetOrderLicenseCpanelNewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/cpanel/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseCpanelNewDurationQueryKey = (duration: string,
    params: GetOrderLicenseCpanelNewDurationParams,) => {
    return [`/order/license/cpanel/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseCpanelNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError = unknown>(duration: string,
    params: GetOrderLicenseCpanelNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseCpanelNewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>> = ({ signal }) => getOrderLicenseCpanelNewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseCpanelNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>>
export type GetOrderLicenseCpanelNewDurationQueryError = unknown


export function useGetOrderLicenseCpanelNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseCpanelNewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseCpanelNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseCpanelNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseCpanelNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseCpanelNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseCpanelNewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseCpanelNewDuration = (
    duration: string,
    postOrderLicenseCpanelNewDurationBody: PostOrderLicenseCpanelNewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/cpanel/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseCpanelNewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseCpanelNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseCpanelNewDuration>>, TError,{duration: string;data: PostOrderLicenseCpanelNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseCpanelNewDuration>>, TError,{duration: string;data: PostOrderLicenseCpanelNewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseCpanelNewDuration>>, {duration: string;data: PostOrderLicenseCpanelNewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderLicenseCpanelNewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseCpanelNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseCpanelNewDuration>>>
    export type PostOrderLicenseCpanelNewDurationMutationBody = PostOrderLicenseCpanelNewDurationBody
    export type PostOrderLicenseCpanelNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseCpanelNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseCpanelNewDuration>>, TError,{duration: string;data: PostOrderLicenseCpanelNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseCpanelNewDuration>>,
        TError,
        {duration: string;data: PostOrderLicenseCpanelNewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseCpanelNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderLicenseCpanelServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/cpanel/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicenseCpanelServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/license/cpanel/${serviceName}`] as const;
    }

    
export const getGetOrderLicenseCpanelServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseCpanelServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>> = ({ signal }) => getOrderLicenseCpanelServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseCpanelServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>>
export type GetOrderLicenseCpanelServiceNameQueryError = unknown


export function useGetOrderLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseCpanelServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'upgrade' option
 */
export const getOrderLicenseCpanelServiceNameUpgrade = (
    serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/cpanel/${serviceName}/upgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseCpanelServiceNameUpgradeQueryKey = (serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams,) => {
    return [`/order/license/cpanel/${serviceName}/upgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseCpanelServiceNameUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError = unknown>(serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseCpanelServiceNameUpgradeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>> = ({ signal }) => getOrderLicenseCpanelServiceNameUpgrade(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseCpanelServiceNameUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>>
export type GetOrderLicenseCpanelServiceNameUpgradeQueryError = unknown


export function useGetOrderLicenseCpanelServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'upgrade' option
 */

export function useGetOrderLicenseCpanelServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseCpanelServiceNameUpgradeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseCpanelServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/cpanel/${serviceName}/upgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseCpanelServiceNameUpgradeDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams,) => {
    return [`/order/license/cpanel/${serviceName}/upgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseCpanelServiceNameUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseCpanelServiceNameUpgradeDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>> = ({ signal }) => getOrderLicenseCpanelServiceNameUpgradeDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseCpanelServiceNameUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>>
export type GetOrderLicenseCpanelServiceNameUpgradeDurationQueryError = unknown


export function useGetOrderLicenseCpanelServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseCpanelServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseCpanelServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseCpanelServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseCpanelServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseCpanelServiceNameUpgradeDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseCpanelServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    postOrderLicenseCpanelServiceNameUpgradeDurationBody: PostOrderLicenseCpanelServiceNameUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/cpanel/${serviceName}/upgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseCpanelServiceNameUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseCpanelServiceNameUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseCpanelServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseCpanelServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseCpanelServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseCpanelServiceNameUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseCpanelServiceNameUpgradeDuration>>, {serviceName: string;duration: string;data: PostOrderLicenseCpanelServiceNameUpgradeDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderLicenseCpanelServiceNameUpgradeDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseCpanelServiceNameUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseCpanelServiceNameUpgradeDuration>>>
    export type PostOrderLicenseCpanelServiceNameUpgradeDurationMutationBody = PostOrderLicenseCpanelServiceNameUpgradeDurationBody
    export type PostOrderLicenseCpanelServiceNameUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseCpanelServiceNameUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseCpanelServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseCpanelServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseCpanelServiceNameUpgradeDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderLicenseCpanelServiceNameUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseCpanelServiceNameUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderLicenseOfficeNew = (
    params?: GetOrderLicenseOfficeNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/office/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseOfficeNewQueryKey = (params?: GetOrderLicenseOfficeNewParams,) => {
    return [`/order/license/office/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseOfficeNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError = unknown>(params?: GetOrderLicenseOfficeNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseOfficeNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>> = ({ signal }) => getOrderLicenseOfficeNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseOfficeNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>>
export type GetOrderLicenseOfficeNewQueryError = unknown


export function useGetOrderLicenseOfficeNew<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError = unknown>(
 params: undefined |  GetOrderLicenseOfficeNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseOfficeNew<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError = unknown>(
 params?: GetOrderLicenseOfficeNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseOfficeNew<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError = unknown>(
 params?: GetOrderLicenseOfficeNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderLicenseOfficeNew<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError = unknown>(
 params?: GetOrderLicenseOfficeNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseOfficeNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseOfficeNewDuration = (
    duration: string,
    params?: GetOrderLicenseOfficeNewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/office/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseOfficeNewDurationQueryKey = (duration: string,
    params?: GetOrderLicenseOfficeNewDurationParams,) => {
    return [`/order/license/office/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseOfficeNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError = unknown>(duration: string,
    params?: GetOrderLicenseOfficeNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseOfficeNewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>> = ({ signal }) => getOrderLicenseOfficeNewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseOfficeNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>>
export type GetOrderLicenseOfficeNewDurationQueryError = unknown


export function useGetOrderLicenseOfficeNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError = unknown>(
 duration: string,
    params: undefined |  GetOrderLicenseOfficeNewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseOfficeNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError = unknown>(
 duration: string,
    params?: GetOrderLicenseOfficeNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseOfficeNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError = unknown>(
 duration: string,
    params?: GetOrderLicenseOfficeNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseOfficeNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError = unknown>(
 duration: string,
    params?: GetOrderLicenseOfficeNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseOfficeNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseOfficeNewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseOfficeNewDuration = (
    duration: string,
    postOrderLicenseOfficeNewDurationBody: PostOrderLicenseOfficeNewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/office/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseOfficeNewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseOfficeNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseOfficeNewDuration>>, TError,{duration: string;data: PostOrderLicenseOfficeNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseOfficeNewDuration>>, TError,{duration: string;data: PostOrderLicenseOfficeNewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseOfficeNewDuration>>, {duration: string;data: PostOrderLicenseOfficeNewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderLicenseOfficeNewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseOfficeNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseOfficeNewDuration>>>
    export type PostOrderLicenseOfficeNewDurationMutationBody = PostOrderLicenseOfficeNewDurationBody
    export type PostOrderLicenseOfficeNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseOfficeNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseOfficeNewDuration>>, TError,{duration: string;data: PostOrderLicenseOfficeNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseOfficeNewDuration>>,
        TError,
        {duration: string;data: PostOrderLicenseOfficeNewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseOfficeNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderLicensePlesk = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/plesk`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicensePleskQueryKey = () => {
    return [`/order/license/plesk`] as const;
    }

    
export const getGetOrderLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicensePleskQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicensePlesk>>> = ({ signal }) => getOrderLicensePlesk(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicensePlesk>>>
export type GetOrderLicensePleskQueryError = unknown


export function useGetOrderLicensePlesk<TData = Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePlesk<TData = Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePlesk<TData = Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderLicensePlesk<TData = Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicensePleskQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderLicensePleskNew = (
    params: GetOrderLicensePleskNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/plesk/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicensePleskNewQueryKey = (params: GetOrderLicensePleskNewParams,) => {
    return [`/order/license/plesk/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicensePleskNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError = unknown>(params: GetOrderLicensePleskNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicensePleskNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicensePleskNew>>> = ({ signal }) => getOrderLicensePleskNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicensePleskNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicensePleskNew>>>
export type GetOrderLicensePleskNewQueryError = unknown


export function useGetOrderLicensePleskNew<TData = Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError = unknown>(
 params: GetOrderLicensePleskNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskNew<TData = Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError = unknown>(
 params: GetOrderLicensePleskNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskNew<TData = Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError = unknown>(
 params: GetOrderLicensePleskNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderLicensePleskNew<TData = Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError = unknown>(
 params: GetOrderLicensePleskNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicensePleskNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicensePleskNewDuration = (
    duration: string,
    params: GetOrderLicensePleskNewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/plesk/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicensePleskNewDurationQueryKey = (duration: string,
    params: GetOrderLicensePleskNewDurationParams,) => {
    return [`/order/license/plesk/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicensePleskNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError = unknown>(duration: string,
    params: GetOrderLicensePleskNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicensePleskNewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>> = ({ signal }) => getOrderLicensePleskNewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicensePleskNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>>
export type GetOrderLicensePleskNewDurationQueryError = unknown


export function useGetOrderLicensePleskNewDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicensePleskNewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskNewDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicensePleskNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskNewDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicensePleskNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicensePleskNewDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicensePleskNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicensePleskNewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicensePleskNewDuration = (
    duration: string,
    postOrderLicensePleskNewDurationBody: PostOrderLicensePleskNewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/plesk/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicensePleskNewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicensePleskNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicensePleskNewDuration>>, TError,{duration: string;data: PostOrderLicensePleskNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicensePleskNewDuration>>, TError,{duration: string;data: PostOrderLicensePleskNewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicensePleskNewDuration>>, {duration: string;data: PostOrderLicensePleskNewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderLicensePleskNewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicensePleskNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicensePleskNewDuration>>>
    export type PostOrderLicensePleskNewDurationMutationBody = PostOrderLicensePleskNewDurationBody
    export type PostOrderLicensePleskNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicensePleskNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicensePleskNewDuration>>, TError,{duration: string;data: PostOrderLicensePleskNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicensePleskNewDuration>>,
        TError,
        {duration: string;data: PostOrderLicensePleskNewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicensePleskNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderLicensePleskServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/plesk/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicensePleskServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/license/plesk/${serviceName}`] as const;
    }

    
export const getGetOrderLicensePleskServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicensePleskServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>> = ({ signal }) => getOrderLicensePleskServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicensePleskServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>>
export type GetOrderLicensePleskServiceNameQueryError = unknown


export function useGetOrderLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicensePleskServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'upgrade' option
 */
export const getOrderLicensePleskServiceNameUpgrade = (
    serviceName: string,
    params?: GetOrderLicensePleskServiceNameUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/plesk/${serviceName}/upgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicensePleskServiceNameUpgradeQueryKey = (serviceName: string,
    params?: GetOrderLicensePleskServiceNameUpgradeParams,) => {
    return [`/order/license/plesk/${serviceName}/upgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicensePleskServiceNameUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError = unknown>(serviceName: string,
    params?: GetOrderLicensePleskServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicensePleskServiceNameUpgradeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>> = ({ signal }) => getOrderLicensePleskServiceNameUpgrade(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicensePleskServiceNameUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>>
export type GetOrderLicensePleskServiceNameUpgradeQueryError = unknown


export function useGetOrderLicensePleskServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetOrderLicensePleskServiceNameUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params?: GetOrderLicensePleskServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params?: GetOrderLicensePleskServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'upgrade' option
 */

export function useGetOrderLicensePleskServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params?: GetOrderLicensePleskServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicensePleskServiceNameUpgradeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicensePleskServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    params?: GetOrderLicensePleskServiceNameUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/plesk/${serviceName}/upgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicensePleskServiceNameUpgradeDurationQueryKey = (serviceName: string,
    duration: string,
    params?: GetOrderLicensePleskServiceNameUpgradeDurationParams,) => {
    return [`/order/license/plesk/${serviceName}/upgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicensePleskServiceNameUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params?: GetOrderLicensePleskServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicensePleskServiceNameUpgradeDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>> = ({ signal }) => getOrderLicensePleskServiceNameUpgradeDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicensePleskServiceNameUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>>
export type GetOrderLicensePleskServiceNameUpgradeDurationQueryError = unknown


export function useGetOrderLicensePleskServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: undefined |  GetOrderLicensePleskServiceNameUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params?: GetOrderLicensePleskServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicensePleskServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params?: GetOrderLicensePleskServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicensePleskServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params?: GetOrderLicensePleskServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicensePleskServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicensePleskServiceNameUpgradeDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicensePleskServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    postOrderLicensePleskServiceNameUpgradeDurationBody: PostOrderLicensePleskServiceNameUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/plesk/${serviceName}/upgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicensePleskServiceNameUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicensePleskServiceNameUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicensePleskServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicensePleskServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicensePleskServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicensePleskServiceNameUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicensePleskServiceNameUpgradeDuration>>, {serviceName: string;duration: string;data: PostOrderLicensePleskServiceNameUpgradeDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderLicensePleskServiceNameUpgradeDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicensePleskServiceNameUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicensePleskServiceNameUpgradeDuration>>>
    export type PostOrderLicensePleskServiceNameUpgradeDurationMutationBody = PostOrderLicensePleskServiceNameUpgradeDurationBody
    export type PostOrderLicensePleskServiceNameUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicensePleskServiceNameUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicensePleskServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicensePleskServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicensePleskServiceNameUpgradeDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderLicensePleskServiceNameUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicensePleskServiceNameUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderLicenseSqlserver = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/sqlserver`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicenseSqlserverQueryKey = () => {
    return [`/order/license/sqlserver`] as const;
    }

    
export const getGetOrderLicenseSqlserverQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseSqlserverQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>> = ({ signal }) => getOrderLicenseSqlserver(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseSqlserverQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>>
export type GetOrderLicenseSqlserverQueryError = unknown


export function useGetOrderLicenseSqlserver<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserver>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserver<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserver>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserver<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderLicenseSqlserver<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserver>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseSqlserverQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderLicenseSqlserverNew = (
    params: GetOrderLicenseSqlserverNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/sqlserver/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseSqlserverNewQueryKey = (params: GetOrderLicenseSqlserverNewParams,) => {
    return [`/order/license/sqlserver/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseSqlserverNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError = unknown>(params: GetOrderLicenseSqlserverNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseSqlserverNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>> = ({ signal }) => getOrderLicenseSqlserverNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseSqlserverNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>>
export type GetOrderLicenseSqlserverNewQueryError = unknown


export function useGetOrderLicenseSqlserverNew<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError = unknown>(
 params: GetOrderLicenseSqlserverNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverNew<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError = unknown>(
 params: GetOrderLicenseSqlserverNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverNew<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError = unknown>(
 params: GetOrderLicenseSqlserverNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderLicenseSqlserverNew<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError = unknown>(
 params: GetOrderLicenseSqlserverNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseSqlserverNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseSqlserverNewDuration = (
    duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/sqlserver/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseSqlserverNewDurationQueryKey = (duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams,) => {
    return [`/order/license/sqlserver/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseSqlserverNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError = unknown>(duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseSqlserverNewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>> = ({ signal }) => getOrderLicenseSqlserverNewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseSqlserverNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>>
export type GetOrderLicenseSqlserverNewDurationQueryError = unknown


export function useGetOrderLicenseSqlserverNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseSqlserverNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseSqlserverNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseSqlserverNewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseSqlserverNewDuration = (
    duration: string,
    postOrderLicenseSqlserverNewDurationBody: PostOrderLicenseSqlserverNewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/sqlserver/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseSqlserverNewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseSqlserverNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseSqlserverNewDuration>>, TError,{duration: string;data: PostOrderLicenseSqlserverNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseSqlserverNewDuration>>, TError,{duration: string;data: PostOrderLicenseSqlserverNewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseSqlserverNewDuration>>, {duration: string;data: PostOrderLicenseSqlserverNewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderLicenseSqlserverNewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseSqlserverNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseSqlserverNewDuration>>>
    export type PostOrderLicenseSqlserverNewDurationMutationBody = PostOrderLicenseSqlserverNewDurationBody
    export type PostOrderLicenseSqlserverNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseSqlserverNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseSqlserverNewDuration>>, TError,{duration: string;data: PostOrderLicenseSqlserverNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseSqlserverNewDuration>>,
        TError,
        {duration: string;data: PostOrderLicenseSqlserverNewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseSqlserverNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderLicenseSqlserverServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/sqlserver/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicenseSqlserverServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/license/sqlserver/${serviceName}`] as const;
    }

    
export const getGetOrderLicenseSqlserverServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseSqlserverServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>> = ({ signal }) => getOrderLicenseSqlserverServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseSqlserverServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>>
export type GetOrderLicenseSqlserverServiceNameQueryError = unknown


export function useGetOrderLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderLicenseSqlserverServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseSqlserverServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'upgrade' option
 */
export const getOrderLicenseSqlserverServiceNameUpgrade = (
    serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/sqlserver/${serviceName}/upgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseSqlserverServiceNameUpgradeQueryKey = (serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams,) => {
    return [`/order/license/sqlserver/${serviceName}/upgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseSqlserverServiceNameUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError = unknown>(serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseSqlserverServiceNameUpgradeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>> = ({ signal }) => getOrderLicenseSqlserverServiceNameUpgrade(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseSqlserverServiceNameUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>>
export type GetOrderLicenseSqlserverServiceNameUpgradeQueryError = unknown


export function useGetOrderLicenseSqlserverServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'upgrade' option
 */

export function useGetOrderLicenseSqlserverServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseSqlserverServiceNameUpgradeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseSqlserverServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/sqlserver/${serviceName}/upgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseSqlserverServiceNameUpgradeDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams,) => {
    return [`/order/license/sqlserver/${serviceName}/upgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseSqlserverServiceNameUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseSqlserverServiceNameUpgradeDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>> = ({ signal }) => getOrderLicenseSqlserverServiceNameUpgradeDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseSqlserverServiceNameUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>>
export type GetOrderLicenseSqlserverServiceNameUpgradeDurationQueryError = unknown


export function useGetOrderLicenseSqlserverServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseSqlserverServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseSqlserverServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderLicenseSqlserverServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseSqlserverServiceNameUpgradeDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseSqlserverServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    postOrderLicenseSqlserverServiceNameUpgradeDurationBody: PostOrderLicenseSqlserverServiceNameUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/sqlserver/${serviceName}/upgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseSqlserverServiceNameUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseSqlserverServiceNameUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseSqlserverServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseSqlserverServiceNameUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseSqlserverServiceNameUpgradeDuration>>, {serviceName: string;duration: string;data: PostOrderLicenseSqlserverServiceNameUpgradeDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderLicenseSqlserverServiceNameUpgradeDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseSqlserverServiceNameUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseSqlserverServiceNameUpgradeDuration>>>
    export type PostOrderLicenseSqlserverServiceNameUpgradeDurationMutationBody = PostOrderLicenseSqlserverServiceNameUpgradeDurationBody
    export type PostOrderLicenseSqlserverServiceNameUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseSqlserverServiceNameUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseSqlserverServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseSqlserverServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseSqlserverServiceNameUpgradeDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderLicenseSqlserverServiceNameUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseSqlserverServiceNameUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderLicenseWindows = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/windows`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicenseWindowsQueryKey = () => {
    return [`/order/license/windows`] as const;
    }

    
export const getGetOrderLicenseWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseWindowsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseWindows>>> = ({ signal }) => getOrderLicenseWindows(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseWindows>>>
export type GetOrderLicenseWindowsQueryError = unknown


export function useGetOrderLicenseWindows<TData = Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindows<TData = Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindows<TData = Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderLicenseWindows<TData = Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseWindowsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderLicenseWindowsNew = (
    params: GetOrderLicenseWindowsNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/windows/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseWindowsNewQueryKey = (params: GetOrderLicenseWindowsNewParams,) => {
    return [`/order/license/windows/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseWindowsNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError = unknown>(params: GetOrderLicenseWindowsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseWindowsNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>> = ({ signal }) => getOrderLicenseWindowsNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseWindowsNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>>
export type GetOrderLicenseWindowsNewQueryError = unknown


export function useGetOrderLicenseWindowsNew<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError = unknown>(
 params: GetOrderLicenseWindowsNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsNew<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError = unknown>(
 params: GetOrderLicenseWindowsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsNew<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError = unknown>(
 params: GetOrderLicenseWindowsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderLicenseWindowsNew<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError = unknown>(
 params: GetOrderLicenseWindowsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseWindowsNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseWindowsNewDuration = (
    duration: string,
    params: GetOrderLicenseWindowsNewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/windows/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseWindowsNewDurationQueryKey = (duration: string,
    params: GetOrderLicenseWindowsNewDurationParams,) => {
    return [`/order/license/windows/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseWindowsNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError = unknown>(duration: string,
    params: GetOrderLicenseWindowsNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseWindowsNewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>> = ({ signal }) => getOrderLicenseWindowsNewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseWindowsNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>>
export type GetOrderLicenseWindowsNewDurationQueryError = unknown


export function useGetOrderLicenseWindowsNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseWindowsNewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseWindowsNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseWindowsNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseWindowsNewDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderLicenseWindowsNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseWindowsNewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseWindowsNewDuration = (
    duration: string,
    postOrderLicenseWindowsNewDurationBody: PostOrderLicenseWindowsNewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/windows/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseWindowsNewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseWindowsNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseWindowsNewDuration>>, TError,{duration: string;data: PostOrderLicenseWindowsNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseWindowsNewDuration>>, TError,{duration: string;data: PostOrderLicenseWindowsNewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseWindowsNewDuration>>, {duration: string;data: PostOrderLicenseWindowsNewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderLicenseWindowsNewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseWindowsNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseWindowsNewDuration>>>
    export type PostOrderLicenseWindowsNewDurationMutationBody = PostOrderLicenseWindowsNewDurationBody
    export type PostOrderLicenseWindowsNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseWindowsNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseWindowsNewDuration>>, TError,{duration: string;data: PostOrderLicenseWindowsNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseWindowsNewDuration>>,
        TError,
        {duration: string;data: PostOrderLicenseWindowsNewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseWindowsNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderLicenseWindowsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/windows/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderLicenseWindowsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/license/windows/${serviceName}`] as const;
    }

    
export const getGetOrderLicenseWindowsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseWindowsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>> = ({ signal }) => getOrderLicenseWindowsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseWindowsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>>
export type GetOrderLicenseWindowsServiceNameQueryError = unknown


export function useGetOrderLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderLicenseWindowsServiceName<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseWindowsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'upgrade' option
 */
export const getOrderLicenseWindowsServiceNameUpgrade = (
    serviceName: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/license/windows/${serviceName}/upgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseWindowsServiceNameUpgradeQueryKey = (serviceName: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeParams,) => {
    return [`/order/license/windows/${serviceName}/upgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseWindowsServiceNameUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError = unknown>(serviceName: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseWindowsServiceNameUpgradeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>> = ({ signal }) => getOrderLicenseWindowsServiceNameUpgrade(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseWindowsServiceNameUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>>
export type GetOrderLicenseWindowsServiceNameUpgradeQueryError = unknown


export function useGetOrderLicenseWindowsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetOrderLicenseWindowsServiceNameUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'upgrade' option
 */

export function useGetOrderLicenseWindowsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseWindowsServiceNameUpgradeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderLicenseWindowsServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/windows/${serviceName}/upgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderLicenseWindowsServiceNameUpgradeDurationQueryKey = (serviceName: string,
    duration: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeDurationParams,) => {
    return [`/order/license/windows/${serviceName}/upgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderLicenseWindowsServiceNameUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderLicenseWindowsServiceNameUpgradeDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>> = ({ signal }) => getOrderLicenseWindowsServiceNameUpgradeDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderLicenseWindowsServiceNameUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>>
export type GetOrderLicenseWindowsServiceNameUpgradeDurationQueryError = unknown


export function useGetOrderLicenseWindowsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: undefined |  GetOrderLicenseWindowsServiceNameUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderLicenseWindowsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderLicenseWindowsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params?: GetOrderLicenseWindowsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderLicenseWindowsServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderLicenseWindowsServiceNameUpgradeDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderLicenseWindowsServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    postOrderLicenseWindowsServiceNameUpgradeDurationBody: PostOrderLicenseWindowsServiceNameUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/license/windows/${serviceName}/upgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderLicenseWindowsServiceNameUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderLicenseWindowsServiceNameUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseWindowsServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseWindowsServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseWindowsServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseWindowsServiceNameUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderLicenseWindowsServiceNameUpgradeDuration>>, {serviceName: string;duration: string;data: PostOrderLicenseWindowsServiceNameUpgradeDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderLicenseWindowsServiceNameUpgradeDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderLicenseWindowsServiceNameUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderLicenseWindowsServiceNameUpgradeDuration>>>
    export type PostOrderLicenseWindowsServiceNameUpgradeDurationMutationBody = PostOrderLicenseWindowsServiceNameUpgradeDurationBody
    export type PostOrderLicenseWindowsServiceNameUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderLicenseWindowsServiceNameUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderLicenseWindowsServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderLicenseWindowsServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderLicenseWindowsServiceNameUpgradeDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderLicenseWindowsServiceNameUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderLicenseWindowsServiceNameUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderOverTheBox = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/overTheBox`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderOverTheBoxQueryKey = () => {
    return [`/order/overTheBox`] as const;
    }

    
export const getGetOrderOverTheBoxQueryOptions = <TData = Awaited<ReturnType<typeof getOrderOverTheBox>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBox>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderOverTheBoxQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderOverTheBox>>> = ({ signal }) => getOrderOverTheBox(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBox>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderOverTheBoxQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderOverTheBox>>>
export type GetOrderOverTheBoxQueryError = unknown


export function useGetOrderOverTheBox<TData = Awaited<ReturnType<typeof getOrderOverTheBox>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBox>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBox>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBox<TData = Awaited<ReturnType<typeof getOrderOverTheBox>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBox>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBox>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBox<TData = Awaited<ReturnType<typeof getOrderOverTheBox>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBox>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderOverTheBox<TData = Awaited<ReturnType<typeof getOrderOverTheBox>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBox>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderOverTheBoxQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderOverTheBoxNew = (
    params: GetOrderOverTheBoxNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/overTheBox/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderOverTheBoxNewQueryKey = (params: GetOrderOverTheBoxNewParams,) => {
    return [`/order/overTheBox/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderOverTheBoxNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError = unknown>(params: GetOrderOverTheBoxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderOverTheBoxNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>> = ({ signal }) => getOrderOverTheBoxNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderOverTheBoxNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>>
export type GetOrderOverTheBoxNewQueryError = unknown


export function useGetOrderOverTheBoxNew<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError = unknown>(
 params: GetOrderOverTheBoxNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxNew<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError = unknown>(
 params: GetOrderOverTheBoxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxNew<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError = unknown>(
 params: GetOrderOverTheBoxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderOverTheBoxNew<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError = unknown>(
 params: GetOrderOverTheBoxNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderOverTheBoxNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderOverTheBoxNewDuration = (
    duration: string,
    params: GetOrderOverTheBoxNewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/overTheBox/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderOverTheBoxNewDurationQueryKey = (duration: string,
    params: GetOrderOverTheBoxNewDurationParams,) => {
    return [`/order/overTheBox/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderOverTheBoxNewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError = unknown>(duration: string,
    params: GetOrderOverTheBoxNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderOverTheBoxNewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>> = ({ signal }) => getOrderOverTheBoxNewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderOverTheBoxNewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>>
export type GetOrderOverTheBoxNewDurationQueryError = unknown


export function useGetOrderOverTheBoxNewDuration<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderOverTheBoxNewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxNewDuration<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderOverTheBoxNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxNewDuration<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderOverTheBoxNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderOverTheBoxNewDuration<TData = Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError = unknown>(
 duration: string,
    params: GetOrderOverTheBoxNewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxNewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderOverTheBoxNewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderOverTheBoxNewDuration = (
    duration: string,
    postOrderOverTheBoxNewDurationBody: PostOrderOverTheBoxNewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/overTheBox/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderOverTheBoxNewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderOverTheBoxNewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderOverTheBoxNewDuration>>, TError,{duration: string;data: PostOrderOverTheBoxNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderOverTheBoxNewDuration>>, TError,{duration: string;data: PostOrderOverTheBoxNewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderOverTheBoxNewDuration>>, {duration: string;data: PostOrderOverTheBoxNewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderOverTheBoxNewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderOverTheBoxNewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderOverTheBoxNewDuration>>>
    export type PostOrderOverTheBoxNewDurationMutationBody = PostOrderOverTheBoxNewDurationBody
    export type PostOrderOverTheBoxNewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderOverTheBoxNewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderOverTheBoxNewDuration>>, TError,{duration: string;data: PostOrderOverTheBoxNewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderOverTheBoxNewDuration>>,
        TError,
        {duration: string;data: PostOrderOverTheBoxNewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderOverTheBoxNewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderOverTheBoxServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/overTheBox/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderOverTheBoxServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/overTheBox/${serviceName}`] as const;
    }

    
export const getGetOrderOverTheBoxServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderOverTheBoxServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>> = ({ signal }) => getOrderOverTheBoxServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderOverTheBoxServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>>
export type GetOrderOverTheBoxServiceNameQueryError = unknown


export function useGetOrderOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderOverTheBoxServiceName<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderOverTheBoxServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderOverTheBoxServiceNameMigrate = (
    serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/overTheBox/${serviceName}/migrate`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderOverTheBoxServiceNameMigrateQueryKey = (serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams,) => {
    return [`/order/overTheBox/${serviceName}/migrate`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderOverTheBoxServiceNameMigrateQueryOptions = <TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError = unknown>(serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderOverTheBoxServiceNameMigrateQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>> = ({ signal }) => getOrderOverTheBoxServiceNameMigrate(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderOverTheBoxServiceNameMigrateQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>>
export type GetOrderOverTheBoxServiceNameMigrateQueryError = unknown


export function useGetOrderOverTheBoxServiceNameMigrate<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError = unknown>(
 serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxServiceNameMigrate<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError = unknown>(
 serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderOverTheBoxServiceNameMigrate<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError = unknown>(
 serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderOverTheBoxServiceNameMigrate<TData = Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError = unknown>(
 serviceName: string,
    params: GetOrderOverTheBoxServiceNameMigrateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderOverTheBoxServiceNameMigrate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderOverTheBoxServiceNameMigrateQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderOverTheBoxServiceNameMigrate = (
    serviceName: string,
    postOrderOverTheBoxServiceNameMigrateBody: PostOrderOverTheBoxServiceNameMigrateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/overTheBox/${serviceName}/migrate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderOverTheBoxServiceNameMigrateBody, signal
    },
      options);
    }
  


export const getPostOrderOverTheBoxServiceNameMigrateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderOverTheBoxServiceNameMigrate>>, TError,{serviceName: string;data: PostOrderOverTheBoxServiceNameMigrateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderOverTheBoxServiceNameMigrate>>, TError,{serviceName: string;data: PostOrderOverTheBoxServiceNameMigrateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderOverTheBoxServiceNameMigrate>>, {serviceName: string;data: PostOrderOverTheBoxServiceNameMigrateBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderOverTheBoxServiceNameMigrate(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderOverTheBoxServiceNameMigrateMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderOverTheBoxServiceNameMigrate>>>
    export type PostOrderOverTheBoxServiceNameMigrateMutationBody = PostOrderOverTheBoxServiceNameMigrateBody
    export type PostOrderOverTheBoxServiceNameMigrateMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderOverTheBoxServiceNameMigrate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderOverTheBoxServiceNameMigrate>>, TError,{serviceName: string;data: PostOrderOverTheBoxServiceNameMigrateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderOverTheBoxServiceNameMigrate>>,
        TError,
        {serviceName: string;data: PostOrderOverTheBoxServiceNameMigrateBody},
        TContext
      > => {

      const mutationOptions = getPostOrderOverTheBoxServiceNameMigrateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'new' option
 */
export const getOrderSaasCsp2New = (
    params?: GetOrderSaasCsp2NewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/saas/csp2/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderSaasCsp2NewQueryKey = (params?: GetOrderSaasCsp2NewParams,) => {
    return [`/order/saas/csp2/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderSaasCsp2NewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError = unknown>(params?: GetOrderSaasCsp2NewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderSaasCsp2NewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderSaasCsp2New>>> = ({ signal }) => getOrderSaasCsp2New(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderSaasCsp2NewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderSaasCsp2New>>>
export type GetOrderSaasCsp2NewQueryError = unknown


export function useGetOrderSaasCsp2New<TData = Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError = unknown>(
 params: undefined |  GetOrderSaasCsp2NewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSaasCsp2New>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSaasCsp2New<TData = Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError = unknown>(
 params?: GetOrderSaasCsp2NewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSaasCsp2New>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSaasCsp2New<TData = Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError = unknown>(
 params?: GetOrderSaasCsp2NewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'new' option
 */

export function useGetOrderSaasCsp2New<TData = Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError = unknown>(
 params?: GetOrderSaasCsp2NewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2New>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderSaasCsp2NewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderSaasCsp2NewDuration = (
    duration: string,
    params?: GetOrderSaasCsp2NewDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/saas/csp2/new/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderSaasCsp2NewDurationQueryKey = (duration: string,
    params?: GetOrderSaasCsp2NewDurationParams,) => {
    return [`/order/saas/csp2/new/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderSaasCsp2NewDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError = unknown>(duration: string,
    params?: GetOrderSaasCsp2NewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderSaasCsp2NewDurationQueryKey(duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>> = ({ signal }) => getOrderSaasCsp2NewDuration(duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderSaasCsp2NewDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>>
export type GetOrderSaasCsp2NewDurationQueryError = unknown


export function useGetOrderSaasCsp2NewDuration<TData = Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError = unknown>(
 duration: string,
    params: undefined |  GetOrderSaasCsp2NewDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSaasCsp2NewDuration<TData = Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError = unknown>(
 duration: string,
    params?: GetOrderSaasCsp2NewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSaasCsp2NewDuration<TData = Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError = unknown>(
 duration: string,
    params?: GetOrderSaasCsp2NewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderSaasCsp2NewDuration<TData = Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError = unknown>(
 duration: string,
    params?: GetOrderSaasCsp2NewDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSaasCsp2NewDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderSaasCsp2NewDurationQueryOptions(duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderSaasCsp2NewDuration = (
    duration: string,
    postOrderSaasCsp2NewDurationBody: PostOrderSaasCsp2NewDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/saas/csp2/new/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderSaasCsp2NewDurationBody, signal
    },
      options);
    }
  


export const getPostOrderSaasCsp2NewDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderSaasCsp2NewDuration>>, TError,{duration: string;data: PostOrderSaasCsp2NewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderSaasCsp2NewDuration>>, TError,{duration: string;data: PostOrderSaasCsp2NewDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderSaasCsp2NewDuration>>, {duration: string;data: PostOrderSaasCsp2NewDurationBody}> = (props) => {
          const {duration,data} = props ?? {};

          return  postOrderSaasCsp2NewDuration(duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderSaasCsp2NewDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderSaasCsp2NewDuration>>>
    export type PostOrderSaasCsp2NewDurationMutationBody = PostOrderSaasCsp2NewDurationBody
    export type PostOrderSaasCsp2NewDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderSaasCsp2NewDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderSaasCsp2NewDuration>>, TError,{duration: string;data: PostOrderSaasCsp2NewDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderSaasCsp2NewDuration>>,
        TError,
        {duration: string;data: PostOrderSaasCsp2NewDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderSaasCsp2NewDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderSms = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/sms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderSmsQueryKey = () => {
    return [`/order/sms`] as const;
    }

    
export const getGetOrderSmsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderSms>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderSmsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderSms>>> = ({ signal }) => getOrderSms(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderSms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderSmsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderSms>>>
export type GetOrderSmsQueryError = unknown


export function useGetOrderSms<TData = Awaited<ReturnType<typeof getOrderSms>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSms<TData = Awaited<ReturnType<typeof getOrderSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSms<TData = Awaited<ReturnType<typeof getOrderSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderSms<TData = Awaited<ReturnType<typeof getOrderSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderSmsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderSmsNew = (
    params: GetOrderSmsNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/sms/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderSmsNewQueryKey = (params: GetOrderSmsNewParams,) => {
    return [`/order/sms/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderSmsNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderSmsNew>>, TError = unknown>(params: GetOrderSmsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderSmsNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderSmsNew>>> = ({ signal }) => getOrderSmsNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderSmsNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderSmsNew>>>
export type GetOrderSmsNewQueryError = unknown


export function useGetOrderSmsNew<TData = Awaited<ReturnType<typeof getOrderSmsNew>>, TError = unknown>(
 params: GetOrderSmsNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSmsNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSmsNew<TData = Awaited<ReturnType<typeof getOrderSmsNew>>, TError = unknown>(
 params: GetOrderSmsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSmsNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSmsNew<TData = Awaited<ReturnType<typeof getOrderSmsNew>>, TError = unknown>(
 params: GetOrderSmsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderSmsNew<TData = Awaited<ReturnType<typeof getOrderSmsNew>>, TError = unknown>(
 params: GetOrderSmsNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderSmsNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderSmsNew = (
    postOrderSmsNewBody: PostOrderSmsNewBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/sms/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderSmsNewBody, signal
    },
      options);
    }
  


export const getPostOrderSmsNewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderSmsNew>>, TError,{data: PostOrderSmsNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderSmsNew>>, TError,{data: PostOrderSmsNewBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderSmsNew>>, {data: PostOrderSmsNewBody}> = (props) => {
          const {data} = props ?? {};

          return  postOrderSmsNew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderSmsNewMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderSmsNew>>>
    export type PostOrderSmsNewMutationBody = PostOrderSmsNewBody
    export type PostOrderSmsNewMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderSmsNew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderSmsNew>>, TError,{data: PostOrderSmsNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderSmsNew>>,
        TError,
        {data: PostOrderSmsNewBody},
        TContext
      > => {

      const mutationOptions = getPostOrderSmsNewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderSmsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/sms/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderSmsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/sms/${serviceName}`] as const;
    }

    
export const getGetOrderSmsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderSmsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderSmsServiceName>>> = ({ signal }) => getOrderSmsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderSmsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderSmsServiceName>>>
export type GetOrderSmsServiceNameQueryError = unknown


export function useGetOrderSmsServiceName<TData = Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSmsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSmsServiceName<TData = Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSmsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSmsServiceName<TData = Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderSmsServiceName<TData = Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderSmsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderSmsServiceNameCredits = (
    serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/sms/${serviceName}/credits`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderSmsServiceNameCreditsQueryKey = (serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams,) => {
    return [`/order/sms/${serviceName}/credits`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderSmsServiceNameCreditsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError = unknown>(serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderSmsServiceNameCreditsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>> = ({ signal }) => getOrderSmsServiceNameCredits(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderSmsServiceNameCreditsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>>
export type GetOrderSmsServiceNameCreditsQueryError = unknown


export function useGetOrderSmsServiceNameCredits<TData = Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError = unknown>(
 serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSmsServiceNameCredits<TData = Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError = unknown>(
 serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderSmsServiceNameCredits<TData = Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError = unknown>(
 serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderSmsServiceNameCredits<TData = Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError = unknown>(
 serviceName: string,
    params: GetOrderSmsServiceNameCreditsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderSmsServiceNameCredits>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderSmsServiceNameCreditsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderSmsServiceNameCredits = (
    serviceName: string,
    postOrderSmsServiceNameCreditsBody: PostOrderSmsServiceNameCreditsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/sms/${serviceName}/credits`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderSmsServiceNameCreditsBody, signal
    },
      options);
    }
  


export const getPostOrderSmsServiceNameCreditsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderSmsServiceNameCredits>>, TError,{serviceName: string;data: PostOrderSmsServiceNameCreditsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderSmsServiceNameCredits>>, TError,{serviceName: string;data: PostOrderSmsServiceNameCreditsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderSmsServiceNameCredits>>, {serviceName: string;data: PostOrderSmsServiceNameCreditsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderSmsServiceNameCredits(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderSmsServiceNameCreditsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderSmsServiceNameCredits>>>
    export type PostOrderSmsServiceNameCreditsMutationBody = PostOrderSmsServiceNameCreditsBody
    export type PostOrderSmsServiceNameCreditsMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderSmsServiceNameCredits = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderSmsServiceNameCredits>>, TError,{serviceName: string;data: PostOrderSmsServiceNameCreditsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderSmsServiceNameCredits>>,
        TError,
        {serviceName: string;data: PostOrderSmsServiceNameCreditsBody},
        TContext
      > => {

      const mutationOptions = getPostOrderSmsServiceNameCreditsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Your telephony billing accounts
 */
export const getOrderTelephony = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/telephony`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyQueryKey = () => {
    return [`/order/telephony`] as const;
    }

    
export const getGetOrderTelephonyQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephony>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephony>>> = ({ signal }) => getOrderTelephony(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephony>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephony>>>
export type GetOrderTelephonyQueryError = unknown


export function useGetOrderTelephony<TData = Awaited<ReturnType<typeof getOrderTelephony>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephony>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephony<TData = Awaited<ReturnType<typeof getOrderTelephony>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephony>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephony>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephony<TData = Awaited<ReturnType<typeof getOrderTelephony>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony billing accounts
 */

export function useGetOrderTelephony<TData = Awaited<ReturnType<typeof getOrderTelephony>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephony>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your telephony billing accounts
 */
export const getOrderTelephonyLines = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/telephony/lines`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyLinesQueryKey = () => {
    return [`/order/telephony/lines`] as const;
    }

    
export const getGetOrderTelephonyLinesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyLinesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyLines>>> = ({ signal }) => getOrderTelephonyLines(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyLinesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyLines>>>
export type GetOrderTelephonyLinesQueryError = unknown


export function useGetOrderTelephonyLines<TData = Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLines<TData = Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLines>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLines<TData = Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony billing accounts
 */

export function useGetOrderTelephonyLines<TData = Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLines>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyLinesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderTelephonyLinesServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/telephony/lines/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyLinesServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/telephony/lines/${serviceName}`] as const;
    }

    
export const getGetOrderTelephonyLinesServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyLinesServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>> = ({ signal }) => getOrderTelephonyLinesServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyLinesServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>>
export type GetOrderTelephonyLinesServiceNameQueryError = unknown


export function useGetOrderTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderTelephonyLinesServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyLinesServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyLinesServiceNameHardware = (
    serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/lines/${serviceName}/hardware`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyLinesServiceNameHardwareQueryKey = (serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams,) => {
    return [`/order/telephony/lines/${serviceName}/hardware`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyLinesServiceNameHardwareQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError = unknown>(serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyLinesServiceNameHardwareQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>> = ({ signal }) => getOrderTelephonyLinesServiceNameHardware(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyLinesServiceNameHardwareQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>>
export type GetOrderTelephonyLinesServiceNameHardwareQueryError = unknown


export function useGetOrderTelephonyLinesServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLinesServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLinesServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyLinesServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyLinesServiceNameHardwareQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyLinesServiceNameHardware = (
    serviceName: string,
    postOrderTelephonyLinesServiceNameHardwareBody: PostOrderTelephonyLinesServiceNameHardwareBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/lines/${serviceName}/hardware`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyLinesServiceNameHardwareBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyLinesServiceNameHardwareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameHardware>>, TError,{serviceName: string;data: PostOrderTelephonyLinesServiceNameHardwareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameHardware>>, TError,{serviceName: string;data: PostOrderTelephonyLinesServiceNameHardwareBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameHardware>>, {serviceName: string;data: PostOrderTelephonyLinesServiceNameHardwareBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderTelephonyLinesServiceNameHardware(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyLinesServiceNameHardwareMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameHardware>>>
    export type PostOrderTelephonyLinesServiceNameHardwareMutationBody = PostOrderTelephonyLinesServiceNameHardwareBody
    export type PostOrderTelephonyLinesServiceNameHardwareMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyLinesServiceNameHardware = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameHardware>>, TError,{serviceName: string;data: PostOrderTelephonyLinesServiceNameHardwareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameHardware>>,
        TError,
        {serviceName: string;data: PostOrderTelephonyLinesServiceNameHardwareBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyLinesServiceNameHardwareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels = (
    serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/lines/${serviceName}/updateSimultaneousChannels`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsQueryKey = (serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams,) => {
    return [`/order/telephony/lines/${serviceName}/updateSimultaneousChannels`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError = unknown>(serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>> = ({ signal }) => getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>>
export type GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsQueryError = unknown


export function useGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels = (
    serviceName: string,
    postOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody: PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/lines/${serviceName}/updateSimultaneousChannels`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError,{serviceName: string;data: PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError,{serviceName: string;data: PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, {serviceName: string;data: PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>>
    export type PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsMutationBody = PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody
    export type PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyLinesServiceNameUpdateSimultaneousChannels = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>, TError,{serviceName: string;data: PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyLinesServiceNameUpdateSimultaneousChannels>>,
        TError,
        {serviceName: string;data: PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyNew = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/new`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyNewQueryKey = () => {
    return [`/order/telephony/new`] as const;
    }

    
export const getGetOrderTelephonyNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyNewQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyNew>>> = ({ signal }) => getOrderTelephonyNew(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyNew>>>
export type GetOrderTelephonyNewQueryError = unknown


export function useGetOrderTelephonyNew<TData = Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyNew<TData = Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyNew<TData = Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyNew<TData = Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyNewQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyNew = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/new`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderTelephonyNewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyNew>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyNew>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyNew>>, void> = () => {
          

          return  postOrderTelephonyNew(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyNewMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyNew>>>
    
    export type PostOrderTelephonyNewMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyNew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyNew>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyNew>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyNewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonySpareNew = (
    params: GetOrderTelephonySpareNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/spare/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonySpareNewQueryKey = (params: GetOrderTelephonySpareNewParams,) => {
    return [`/order/telephony/spare/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonySpareNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError = unknown>(params: GetOrderTelephonySpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonySpareNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>> = ({ signal }) => getOrderTelephonySpareNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonySpareNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>>
export type GetOrderTelephonySpareNewQueryError = unknown


export function useGetOrderTelephonySpareNew<TData = Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError = unknown>(
 params: GetOrderTelephonySpareNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonySpareNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonySpareNew<TData = Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError = unknown>(
 params: GetOrderTelephonySpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonySpareNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonySpareNew<TData = Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError = unknown>(
 params: GetOrderTelephonySpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonySpareNew<TData = Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError = unknown>(
 params: GetOrderTelephonySpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonySpareNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonySpareNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonySpareNew = (
    postOrderTelephonySpareNewBody: PostOrderTelephonySpareNewBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/spare/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonySpareNewBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonySpareNewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonySpareNew>>, TError,{data: PostOrderTelephonySpareNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonySpareNew>>, TError,{data: PostOrderTelephonySpareNewBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonySpareNew>>, {data: PostOrderTelephonySpareNewBody}> = (props) => {
          const {data} = props ?? {};

          return  postOrderTelephonySpareNew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonySpareNewMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonySpareNew>>>
    export type PostOrderTelephonySpareNewMutationBody = PostOrderTelephonySpareNewBody
    export type PostOrderTelephonySpareNewMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonySpareNew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonySpareNew>>, TError,{data: PostOrderTelephonySpareNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonySpareNew>>,
        TError,
        {data: PostOrderTelephonySpareNewBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonySpareNewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Your telephony trunks
 */
export const getOrderTelephonyTrunks = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/telephony/trunks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyTrunksQueryKey = () => {
    return [`/order/telephony/trunks`] as const;
    }

    
export const getGetOrderTelephonyTrunksQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyTrunksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>> = ({ signal }) => getOrderTelephonyTrunks(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyTrunksQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>>
export type GetOrderTelephonyTrunksQueryError = unknown


export function useGetOrderTelephonyTrunks<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunks<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunks<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your telephony trunks
 */

export function useGetOrderTelephonyTrunks<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyTrunksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderTelephonyTrunksServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/telephony/trunks/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyTrunksServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/telephony/trunks/${serviceName}`] as const;
    }

    
export const getGetOrderTelephonyTrunksServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyTrunksServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>> = ({ signal }) => getOrderTelephonyTrunksServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyTrunksServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>>
export type GetOrderTelephonyTrunksServiceNameQueryError = unknown


export function useGetOrderTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderTelephonyTrunksServiceName<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyTrunksServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyTrunksServiceNameHardware = (
    serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/trunks/${serviceName}/hardware`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyTrunksServiceNameHardwareQueryKey = (serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams,) => {
    return [`/order/telephony/trunks/${serviceName}/hardware`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyTrunksServiceNameHardwareQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError = unknown>(serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyTrunksServiceNameHardwareQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>> = ({ signal }) => getOrderTelephonyTrunksServiceNameHardware(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyTrunksServiceNameHardwareQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>>
export type GetOrderTelephonyTrunksServiceNameHardwareQueryError = unknown


export function useGetOrderTelephonyTrunksServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunksServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunksServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyTrunksServiceNameHardware<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameHardwareParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameHardware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyTrunksServiceNameHardwareQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyTrunksServiceNameHardware = (
    serviceName: string,
    postOrderTelephonyTrunksServiceNameHardwareBody: PostOrderTelephonyTrunksServiceNameHardwareBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/trunks/${serviceName}/hardware`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyTrunksServiceNameHardwareBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyTrunksServiceNameHardwareMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameHardware>>, TError,{serviceName: string;data: PostOrderTelephonyTrunksServiceNameHardwareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameHardware>>, TError,{serviceName: string;data: PostOrderTelephonyTrunksServiceNameHardwareBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameHardware>>, {serviceName: string;data: PostOrderTelephonyTrunksServiceNameHardwareBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderTelephonyTrunksServiceNameHardware(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyTrunksServiceNameHardwareMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameHardware>>>
    export type PostOrderTelephonyTrunksServiceNameHardwareMutationBody = PostOrderTelephonyTrunksServiceNameHardwareBody
    export type PostOrderTelephonyTrunksServiceNameHardwareMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyTrunksServiceNameHardware = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameHardware>>, TError,{serviceName: string;data: PostOrderTelephonyTrunksServiceNameHardwareBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameHardware>>,
        TError,
        {serviceName: string;data: PostOrderTelephonyTrunksServiceNameHardwareBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyTrunksServiceNameHardwareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels = (
    serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/trunks/${serviceName}/updateSimultaneousChannels`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsQueryKey = (serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams,) => {
    return [`/order/telephony/trunks/${serviceName}/updateSimultaneousChannels`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError = unknown>(serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>> = ({ signal }) => getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>>
export type GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsQueryError = unknown


export function useGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels<TData = Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError = unknown>(
 serviceName: string,
    params: GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels = (
    serviceName: string,
    postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody: PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/trunks/${serviceName}/updateSimultaneousChannels`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError,{serviceName: string;data: PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError,{serviceName: string;data: PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, {serviceName: string;data: PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>>
    export type PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsMutationBody = PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody
    export type PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>, TError,{serviceName: string;data: PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyTrunksServiceNameUpdateSimultaneousChannels>>,
        TError,
        {serviceName: string;data: PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed options
 */
export const getOrderTelephonyBillingAccount = (
    billingAccount: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/telephony/${billingAccount}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountQueryKey = (billingAccount: string,) => {
    return [`/order/telephony/${billingAccount}`] as const;
    }

    
export const getGetOrderTelephonyBillingAccountQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError = unknown>(billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountQueryKey(billingAccount);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>> = ({ signal }) => getOrderTelephonyBillingAccount(billingAccount, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>>
export type GetOrderTelephonyBillingAccountQueryError = unknown


export function useGetOrderTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderTelephonyBillingAccount<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError = unknown>(
 billingAccount: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountQueryOptions(billingAccount,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyBillingAccountAccessories = (
    billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/accessories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountAccessoriesQueryKey = (billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams,) => {
    return [`/order/telephony/${billingAccount}/accessories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyBillingAccountAccessoriesQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError = unknown>(billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountAccessoriesQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>> = ({ signal }) => getOrderTelephonyBillingAccountAccessories(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountAccessoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>>
export type GetOrderTelephonyBillingAccountAccessoriesQueryError = unknown


export function useGetOrderTelephonyBillingAccountAccessories<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountAccessories<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountAccessories<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyBillingAccountAccessories<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountAccessoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountAccessories>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountAccessoriesQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyBillingAccountAccessories = (
    billingAccount: string,
    postOrderTelephonyBillingAccountAccessoriesBody: PostOrderTelephonyBillingAccountAccessoriesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/accessories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyBillingAccountAccessoriesBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyBillingAccountAccessoriesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountAccessories>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountAccessoriesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountAccessories>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountAccessoriesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountAccessories>>, {billingAccount: string;data: PostOrderTelephonyBillingAccountAccessoriesBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postOrderTelephonyBillingAccountAccessories(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyBillingAccountAccessoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountAccessories>>>
    export type PostOrderTelephonyBillingAccountAccessoriesMutationBody = PostOrderTelephonyBillingAccountAccessoriesBody
    export type PostOrderTelephonyBillingAccountAccessoriesMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyBillingAccountAccessories = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountAccessories>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountAccessoriesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyBillingAccountAccessories>>,
        TError,
        {billingAccount: string;data: PostOrderTelephonyBillingAccountAccessoriesBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyBillingAccountAccessoriesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyBillingAccountNumberGeographic = (
    billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/numberGeographic`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountNumberGeographicQueryKey = (billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams,) => {
    return [`/order/telephony/${billingAccount}/numberGeographic`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyBillingAccountNumberGeographicQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError = unknown>(billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountNumberGeographicQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>> = ({ signal }) => getOrderTelephonyBillingAccountNumberGeographic(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountNumberGeographicQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>>
export type GetOrderTelephonyBillingAccountNumberGeographicQueryError = unknown


export function useGetOrderTelephonyBillingAccountNumberGeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountNumberGeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountNumberGeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyBillingAccountNumberGeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberGeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberGeographic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountNumberGeographicQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyBillingAccountNumberGeographic = (
    billingAccount: string,
    postOrderTelephonyBillingAccountNumberGeographicBody: PostOrderTelephonyBillingAccountNumberGeographicBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/numberGeographic`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyBillingAccountNumberGeographicBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyBillingAccountNumberGeographicMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberGeographic>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberGeographicBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberGeographic>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberGeographicBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberGeographic>>, {billingAccount: string;data: PostOrderTelephonyBillingAccountNumberGeographicBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postOrderTelephonyBillingAccountNumberGeographic(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyBillingAccountNumberGeographicMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberGeographic>>>
    export type PostOrderTelephonyBillingAccountNumberGeographicMutationBody = PostOrderTelephonyBillingAccountNumberGeographicBody
    export type PostOrderTelephonyBillingAccountNumberGeographicMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyBillingAccountNumberGeographic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberGeographic>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberGeographicBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberGeographic>>,
        TError,
        {billingAccount: string;data: PostOrderTelephonyBillingAccountNumberGeographicBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyBillingAccountNumberGeographicMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyBillingAccountNumberNogeographic = (
    billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/numberNogeographic`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountNumberNogeographicQueryKey = (billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams,) => {
    return [`/order/telephony/${billingAccount}/numberNogeographic`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyBillingAccountNumberNogeographicQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError = unknown>(billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountNumberNogeographicQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>> = ({ signal }) => getOrderTelephonyBillingAccountNumberNogeographic(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountNumberNogeographicQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>>
export type GetOrderTelephonyBillingAccountNumberNogeographicQueryError = unknown


export function useGetOrderTelephonyBillingAccountNumberNogeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountNumberNogeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountNumberNogeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyBillingAccountNumberNogeographic<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberNogeographicParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberNogeographic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountNumberNogeographicQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyBillingAccountNumberNogeographic = (
    billingAccount: string,
    postOrderTelephonyBillingAccountNumberNogeographicBody: PostOrderTelephonyBillingAccountNumberNogeographicBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/numberNogeographic`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyBillingAccountNumberNogeographicBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyBillingAccountNumberNogeographicMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberNogeographic>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberNogeographicBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberNogeographic>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberNogeographicBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberNogeographic>>, {billingAccount: string;data: PostOrderTelephonyBillingAccountNumberNogeographicBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postOrderTelephonyBillingAccountNumberNogeographic(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyBillingAccountNumberNogeographicMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberNogeographic>>>
    export type PostOrderTelephonyBillingAccountNumberNogeographicMutationBody = PostOrderTelephonyBillingAccountNumberNogeographicBody
    export type PostOrderTelephonyBillingAccountNumberNogeographicMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyBillingAccountNumberNogeographic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberNogeographic>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberNogeographicBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberNogeographic>>,
        TError,
        {billingAccount: string;data: PostOrderTelephonyBillingAccountNumberNogeographicBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyBillingAccountNumberNogeographicMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyBillingAccountNumberSpecial = (
    billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/numberSpecial`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountNumberSpecialQueryKey = (billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams,) => {
    return [`/order/telephony/${billingAccount}/numberSpecial`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyBillingAccountNumberSpecialQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError = unknown>(billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountNumberSpecialQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>> = ({ signal }) => getOrderTelephonyBillingAccountNumberSpecial(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountNumberSpecialQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>>
export type GetOrderTelephonyBillingAccountNumberSpecialQueryError = unknown


export function useGetOrderTelephonyBillingAccountNumberSpecial<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountNumberSpecial<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountNumberSpecial<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyBillingAccountNumberSpecial<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountNumberSpecialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountNumberSpecial>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountNumberSpecialQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyBillingAccountNumberSpecial = (
    billingAccount: string,
    postOrderTelephonyBillingAccountNumberSpecialBody: PostOrderTelephonyBillingAccountNumberSpecialBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/numberSpecial`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyBillingAccountNumberSpecialBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyBillingAccountNumberSpecialMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberSpecial>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberSpecialBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberSpecial>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberSpecialBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberSpecial>>, {billingAccount: string;data: PostOrderTelephonyBillingAccountNumberSpecialBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postOrderTelephonyBillingAccountNumberSpecial(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyBillingAccountNumberSpecialMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberSpecial>>>
    export type PostOrderTelephonyBillingAccountNumberSpecialMutationBody = PostOrderTelephonyBillingAccountNumberSpecialBody
    export type PostOrderTelephonyBillingAccountNumberSpecialMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyBillingAccountNumberSpecial = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberSpecial>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountNumberSpecialBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyBillingAccountNumberSpecial>>,
        TError,
        {billingAccount: string;data: PostOrderTelephonyBillingAccountNumberSpecialBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyBillingAccountNumberSpecialMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyBillingAccountPortability = (
    billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/portability`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountPortabilityQueryKey = (billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams,) => {
    return [`/order/telephony/${billingAccount}/portability`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyBillingAccountPortabilityQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError = unknown>(billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountPortabilityQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>> = ({ signal }) => getOrderTelephonyBillingAccountPortability(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountPortabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>>
export type GetOrderTelephonyBillingAccountPortabilityQueryError = unknown


export function useGetOrderTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyBillingAccountPortability<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountPortabilityParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountPortability>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountPortabilityQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyBillingAccountPortability = (
    billingAccount: string,
    postOrderTelephonyBillingAccountPortabilityBody: PostOrderTelephonyBillingAccountPortabilityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/portability`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyBillingAccountPortabilityBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyBillingAccountPortabilityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountPortability>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountPortabilityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountPortability>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountPortabilityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountPortability>>, {billingAccount: string;data: PostOrderTelephonyBillingAccountPortabilityBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postOrderTelephonyBillingAccountPortability(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyBillingAccountPortabilityMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountPortability>>>
    export type PostOrderTelephonyBillingAccountPortabilityMutationBody = PostOrderTelephonyBillingAccountPortabilityBody
    export type PostOrderTelephonyBillingAccountPortabilityMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyBillingAccountPortability = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountPortability>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountPortabilityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyBillingAccountPortability>>,
        TError,
        {billingAccount: string;data: PostOrderTelephonyBillingAccountPortabilityBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyBillingAccountPortabilityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderTelephonyBillingAccountSecurityDeposit = (
    billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/securityDeposit`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderTelephonyBillingAccountSecurityDepositQueryKey = (billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams,) => {
    return [`/order/telephony/${billingAccount}/securityDeposit`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderTelephonyBillingAccountSecurityDepositQueryOptions = <TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError = unknown>(billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderTelephonyBillingAccountSecurityDepositQueryKey(billingAccount,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>> = ({ signal }) => getOrderTelephonyBillingAccountSecurityDeposit(billingAccount,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billingAccount), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderTelephonyBillingAccountSecurityDepositQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>>
export type GetOrderTelephonyBillingAccountSecurityDepositQueryError = unknown


export function useGetOrderTelephonyBillingAccountSecurityDeposit<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountSecurityDeposit<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderTelephonyBillingAccountSecurityDeposit<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderTelephonyBillingAccountSecurityDeposit<TData = Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError = unknown>(
 billingAccount: string,
    params: GetOrderTelephonyBillingAccountSecurityDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderTelephonyBillingAccountSecurityDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderTelephonyBillingAccountSecurityDepositQueryOptions(billingAccount,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderTelephonyBillingAccountSecurityDeposit = (
    billingAccount: string,
    postOrderTelephonyBillingAccountSecurityDepositBody: PostOrderTelephonyBillingAccountSecurityDepositBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/telephony/${billingAccount}/securityDeposit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderTelephonyBillingAccountSecurityDepositBody, signal
    },
      options);
    }
  


export const getPostOrderTelephonyBillingAccountSecurityDepositMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountSecurityDeposit>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountSecurityDepositBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountSecurityDeposit>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountSecurityDepositBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountSecurityDeposit>>, {billingAccount: string;data: PostOrderTelephonyBillingAccountSecurityDepositBody}> = (props) => {
          const {billingAccount,data} = props ?? {};

          return  postOrderTelephonyBillingAccountSecurityDeposit(billingAccount,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderTelephonyBillingAccountSecurityDepositMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountSecurityDeposit>>>
    export type PostOrderTelephonyBillingAccountSecurityDepositMutationBody = PostOrderTelephonyBillingAccountSecurityDepositBody
    export type PostOrderTelephonyBillingAccountSecurityDepositMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderTelephonyBillingAccountSecurityDeposit = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderTelephonyBillingAccountSecurityDeposit>>, TError,{billingAccount: string;data: PostOrderTelephonyBillingAccountSecurityDepositBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderTelephonyBillingAccountSecurityDeposit>>,
        TError,
        {billingAccount: string;data: PostOrderTelephonyBillingAccountSecurityDepositBody},
        TContext
      > => {

      const mutationOptions = getPostOrderTelephonyBillingAccountSecurityDepositMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeBaremetalMemory = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/baremetalMemory`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalMemoryQueryKey = () => {
    return [`/order/upgrade/baremetalMemory`] as const;
    }

    
export const getGetOrderUpgradeBaremetalMemoryQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalMemoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>> = ({ signal }) => getOrderUpgradeBaremetalMemory(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalMemoryQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>>
export type GetOrderUpgradeBaremetalMemoryQueryError = unknown


export function useGetOrderUpgradeBaremetalMemory<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalMemory<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalMemory<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeBaremetalMemory<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalMemoryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeBaremetalMemoryServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/baremetalMemory/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalMemoryServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/baremetalMemory/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeBaremetalMemoryServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalMemoryServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>> = ({ signal }) => getOrderUpgradeBaremetalMemoryServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalMemoryServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>>
export type GetOrderUpgradeBaremetalMemoryServiceNameQueryError = unknown


export function useGetOrderUpgradeBaremetalMemoryServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalMemoryServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalMemoryServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeBaremetalMemoryServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalMemoryServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeBaremetalMemoryServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/baremetalMemory/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalMemoryServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/baremetalMemory/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeBaremetalMemoryServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalMemoryServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeBaremetalMemoryServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>>
export type GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeBaremetalMemoryServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalMemoryServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalMemoryServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeBaremetalMemoryServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalMemoryServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalMemoryServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeBaremetalMemoryServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody: PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/baremetalMemory/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeBaremetalMemoryServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeBaremetalMemoryServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeBaremetalMemoryServiceNamePlanCode>>>
    export type PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeMutationBody = PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody
    export type PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeBaremetalMemoryServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalMemoryServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeBaremetalMemoryServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalMemoryServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeBaremetalMemoryServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeBaremetalPrivateBandwidth = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/baremetalPrivateBandwidth`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalPrivateBandwidthQueryKey = () => {
    return [`/order/upgrade/baremetalPrivateBandwidth`] as const;
    }

    
export const getGetOrderUpgradeBaremetalPrivateBandwidthQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalPrivateBandwidthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>> = ({ signal }) => getOrderUpgradeBaremetalPrivateBandwidth(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalPrivateBandwidthQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>>
export type GetOrderUpgradeBaremetalPrivateBandwidthQueryError = unknown


export function useGetOrderUpgradeBaremetalPrivateBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPrivateBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPrivateBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeBaremetalPrivateBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalPrivateBandwidthQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeBaremetalPrivateBandwidthServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/baremetalPrivateBandwidth/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalPrivateBandwidthServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/baremetalPrivateBandwidth/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeBaremetalPrivateBandwidthServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalPrivateBandwidthServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>> = ({ signal }) => getOrderUpgradeBaremetalPrivateBandwidthServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalPrivateBandwidthServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>>
export type GetOrderUpgradeBaremetalPrivateBandwidthServiceNameQueryError = unknown


export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalPrivateBandwidthServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/baremetalPrivateBandwidth/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/baremetalPrivateBandwidth/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>>
export type GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody: PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/baremetalPrivateBandwidth/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>>
    export type PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeMutationBody = PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody
    export type PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeBaremetalPublicBandwidth = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/baremetalPublicBandwidth`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalPublicBandwidthQueryKey = () => {
    return [`/order/upgrade/baremetalPublicBandwidth`] as const;
    }

    
export const getGetOrderUpgradeBaremetalPublicBandwidthQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalPublicBandwidthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>> = ({ signal }) => getOrderUpgradeBaremetalPublicBandwidth(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalPublicBandwidthQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>>
export type GetOrderUpgradeBaremetalPublicBandwidthQueryError = unknown


export function useGetOrderUpgradeBaremetalPublicBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPublicBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPublicBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeBaremetalPublicBandwidth<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidth>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalPublicBandwidthQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeBaremetalPublicBandwidthServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/baremetalPublicBandwidth/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalPublicBandwidthServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/baremetalPublicBandwidth/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeBaremetalPublicBandwidthServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalPublicBandwidthServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>> = ({ signal }) => getOrderUpgradeBaremetalPublicBandwidthServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalPublicBandwidthServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>>
export type GetOrderUpgradeBaremetalPublicBandwidthServiceNameQueryError = unknown


export function useGetOrderUpgradeBaremetalPublicBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPublicBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPublicBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeBaremetalPublicBandwidthServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalPublicBandwidthServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/baremetalPublicBandwidth/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/baremetalPublicBandwidth/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>>
export type GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody: PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/baremetalPublicBandwidth/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>>
    export type PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeMutationBody = PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody
    export type PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeCephaas = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/cephaas`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeCephaasQueryKey = () => {
    return [`/order/upgrade/cephaas`] as const;
    }

    
export const getGetOrderUpgradeCephaasQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeCephaasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>> = ({ signal }) => getOrderUpgradeCephaas(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeCephaasQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>>
export type GetOrderUpgradeCephaasQueryError = unknown


export function useGetOrderUpgradeCephaas<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCephaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCephaas<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCephaas>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCephaas<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeCephaas<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaas>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeCephaasQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeCephaasServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/cephaas/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeCephaasServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/cephaas/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeCephaasServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeCephaasServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>> = ({ signal }) => getOrderUpgradeCephaasServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeCephaasServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>>
export type GetOrderUpgradeCephaasServiceNameQueryError = unknown


export function useGetOrderUpgradeCephaasServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCephaasServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCephaasServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeCephaasServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeCephaasServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeCephaasServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/cephaas/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeCephaasServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/cephaas/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeCephaasServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeCephaasServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeCephaasServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeCephaasServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>>
export type GetOrderUpgradeCephaasServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeCephaasServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCephaasServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCephaasServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeCephaasServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeCephaasServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCephaasServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeCephaasServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeCephaasServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeCephaasServiceNamePlanCodeBody: PostOrderUpgradeCephaasServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/cephaas/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeCephaasServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeCephaasServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeCephaasServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeCephaasServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeCephaasServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeCephaasServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeCephaasServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeCephaasServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeCephaasServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeCephaasServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeCephaasServiceNamePlanCode>>>
    export type PostOrderUpgradeCephaasServiceNamePlanCodeMutationBody = PostOrderUpgradeCephaasServiceNamePlanCodeBody
    export type PostOrderUpgradeCephaasServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeCephaasServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeCephaasServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeCephaasServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeCephaasServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeCephaasServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeCephaasServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeCloudDB = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/cloudDB`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeCloudDBQueryKey = () => {
    return [`/order/upgrade/cloudDB`] as const;
    }

    
export const getGetOrderUpgradeCloudDBQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeCloudDBQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>> = ({ signal }) => getOrderUpgradeCloudDB(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeCloudDBQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>>
export type GetOrderUpgradeCloudDBQueryError = unknown


export function useGetOrderUpgradeCloudDB<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCloudDB<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCloudDB<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeCloudDB<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDB>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeCloudDBQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeCloudDBDomain = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/cloudDB/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeCloudDBDomainQueryKey = (domain: string,) => {
    return [`/order/upgrade/cloudDB/${domain}`] as const;
    }

    
export const getGetOrderUpgradeCloudDBDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeCloudDBDomainQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>> = ({ signal }) => getOrderUpgradeCloudDBDomain(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeCloudDBDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>>
export type GetOrderUpgradeCloudDBDomainQueryError = unknown


export function useGetOrderUpgradeCloudDBDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCloudDBDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCloudDBDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeCloudDBDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeCloudDBDomainQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeCloudDBDomainPlanCode = (
    domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/cloudDB/${domain}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeCloudDBDomainPlanCodeQueryKey = (domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams,) => {
    return [`/order/upgrade/cloudDB/${domain}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeCloudDBDomainPlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError = unknown>(domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeCloudDBDomainPlanCodeQueryKey(domain,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>> = ({ signal }) => getOrderUpgradeCloudDBDomainPlanCode(domain,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeCloudDBDomainPlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>>
export type GetOrderUpgradeCloudDBDomainPlanCodeQueryError = unknown


export function useGetOrderUpgradeCloudDBDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCloudDBDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeCloudDBDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeCloudDBDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradeCloudDBDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeCloudDBDomainPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeCloudDBDomainPlanCodeQueryOptions(domain,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeCloudDBDomainPlanCode = (
    domain: string,
    planCode: string,
    postOrderUpgradeCloudDBDomainPlanCodeBody: PostOrderUpgradeCloudDBDomainPlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/cloudDB/${domain}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeCloudDBDomainPlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeCloudDBDomainPlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeCloudDBDomainPlanCode>>, TError,{domain: string;planCode: string;data: PostOrderUpgradeCloudDBDomainPlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeCloudDBDomainPlanCode>>, TError,{domain: string;planCode: string;data: PostOrderUpgradeCloudDBDomainPlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeCloudDBDomainPlanCode>>, {domain: string;planCode: string;data: PostOrderUpgradeCloudDBDomainPlanCodeBody}> = (props) => {
          const {domain,planCode,data} = props ?? {};

          return  postOrderUpgradeCloudDBDomainPlanCode(domain,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeCloudDBDomainPlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeCloudDBDomainPlanCode>>>
    export type PostOrderUpgradeCloudDBDomainPlanCodeMutationBody = PostOrderUpgradeCloudDBDomainPlanCodeBody
    export type PostOrderUpgradeCloudDBDomainPlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeCloudDBDomainPlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeCloudDBDomainPlanCode>>, TError,{domain: string;planCode: string;data: PostOrderUpgradeCloudDBDomainPlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeCloudDBDomainPlanCode>>,
        TError,
        {domain: string;planCode: string;data: PostOrderUpgradeCloudDBDomainPlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeCloudDBDomainPlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeEmailDomain = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/emailDomain`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeEmailDomainQueryKey = () => {
    return [`/order/upgrade/emailDomain`] as const;
    }

    
export const getGetOrderUpgradeEmailDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeEmailDomainQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>> = ({ signal }) => getOrderUpgradeEmailDomain(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeEmailDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>>
export type GetOrderUpgradeEmailDomainQueryError = unknown


export function useGetOrderUpgradeEmailDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeEmailDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeEmailDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeEmailDomain<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeEmailDomainQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeEmailDomainServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/emailDomain/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeEmailDomainServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/emailDomain/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeEmailDomainServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeEmailDomainServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>> = ({ signal }) => getOrderUpgradeEmailDomainServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeEmailDomainServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>>
export type GetOrderUpgradeEmailDomainServiceNameQueryError = unknown


export function useGetOrderUpgradeEmailDomainServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeEmailDomainServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeEmailDomainServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeEmailDomainServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeEmailDomainServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeEmailDomainServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/emailDomain/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeEmailDomainServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/emailDomain/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeEmailDomainServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeEmailDomainServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeEmailDomainServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeEmailDomainServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>>
export type GetOrderUpgradeEmailDomainServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeEmailDomainServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeEmailDomainServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeEmailDomainServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeEmailDomainServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeEmailDomainServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeEmailDomainServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeEmailDomainServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeEmailDomainServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeEmailDomainServiceNamePlanCodeBody: PostOrderUpgradeEmailDomainServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/emailDomain/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeEmailDomainServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeEmailDomainServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeEmailDomainServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeEmailDomainServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeEmailDomainServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeEmailDomainServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeEmailDomainServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeEmailDomainServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeEmailDomainServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeEmailDomainServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeEmailDomainServiceNamePlanCode>>>
    export type PostOrderUpgradeEmailDomainServiceNamePlanCodeMutationBody = PostOrderUpgradeEmailDomainServiceNamePlanCodeBody
    export type PostOrderUpgradeEmailDomainServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeEmailDomainServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeEmailDomainServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeEmailDomainServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeEmailDomainServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeEmailDomainServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeEmailDomainServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeIpLoadbalancing = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/ipLoadbalancing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeIpLoadbalancingQueryKey = () => {
    return [`/order/upgrade/ipLoadbalancing`] as const;
    }

    
export const getGetOrderUpgradeIpLoadbalancingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeIpLoadbalancingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>> = ({ signal }) => getOrderUpgradeIpLoadbalancing(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeIpLoadbalancingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>>
export type GetOrderUpgradeIpLoadbalancingQueryError = unknown


export function useGetOrderUpgradeIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeIpLoadbalancing<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeIpLoadbalancingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeIpLoadbalancingServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/ipLoadbalancing/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeIpLoadbalancingServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/ipLoadbalancing/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeIpLoadbalancingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeIpLoadbalancingServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>> = ({ signal }) => getOrderUpgradeIpLoadbalancingServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeIpLoadbalancingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>>
export type GetOrderUpgradeIpLoadbalancingServiceNameQueryError = unknown


export function useGetOrderUpgradeIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeIpLoadbalancingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeIpLoadbalancingServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeIpLoadbalancingServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/ipLoadbalancing/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeIpLoadbalancingServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/ipLoadbalancing/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeIpLoadbalancingServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeIpLoadbalancingServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeIpLoadbalancingServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>>
export type GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeIpLoadbalancingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeIpLoadbalancingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeIpLoadbalancingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeIpLoadbalancingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeIpLoadbalancingServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeIpLoadbalancingServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody: PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/ipLoadbalancing/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeIpLoadbalancingServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeIpLoadbalancingServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeIpLoadbalancingServiceNamePlanCode>>>
    export type PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeMutationBody = PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody
    export type PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeIpLoadbalancingServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeIpLoadbalancingServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeIpLoadbalancingServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeIpLoadbalancingServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeLicenseHycu = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/licenseHycu`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicenseHycuQueryKey = () => {
    return [`/order/upgrade/licenseHycu`] as const;
    }

    
export const getGetOrderUpgradeLicenseHycuQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicenseHycuQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>> = ({ signal }) => getOrderUpgradeLicenseHycu(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicenseHycuQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>>
export type GetOrderUpgradeLicenseHycuQueryError = unknown


export function useGetOrderUpgradeLicenseHycu<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicenseHycu<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicenseHycu<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeLicenseHycu<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycu>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicenseHycuQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeLicenseHycuServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/licenseHycu/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicenseHycuServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/licenseHycu/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeLicenseHycuServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicenseHycuServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>> = ({ signal }) => getOrderUpgradeLicenseHycuServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicenseHycuServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>>
export type GetOrderUpgradeLicenseHycuServiceNameQueryError = unknown


export function useGetOrderUpgradeLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeLicenseHycuServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicenseHycuServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeLicenseHycuServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/licenseHycu/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicenseHycuServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/licenseHycu/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeLicenseHycuServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicenseHycuServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeLicenseHycuServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicenseHycuServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>>
export type GetOrderUpgradeLicenseHycuServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeLicenseHycuServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicenseHycuServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicenseHycuServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeLicenseHycuServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicenseHycuServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicenseHycuServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeLicenseHycuServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeLicenseHycuServiceNamePlanCodeBody: PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/licenseHycu/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeLicenseHycuServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeLicenseHycuServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeLicenseHycuServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeLicenseHycuServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeLicenseHycuServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeLicenseHycuServiceNamePlanCode>>>
    export type PostOrderUpgradeLicenseHycuServiceNamePlanCodeMutationBody = PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody
    export type PostOrderUpgradeLicenseHycuServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeLicenseHycuServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicenseHycuServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeLicenseHycuServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeLicenseHycuServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeLicenseHycuServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeLicensePlesk = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/licensePlesk`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicensePleskQueryKey = () => {
    return [`/order/upgrade/licensePlesk`] as const;
    }

    
export const getGetOrderUpgradeLicensePleskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicensePleskQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>> = ({ signal }) => getOrderUpgradeLicensePlesk(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicensePleskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>>
export type GetOrderUpgradeLicensePleskQueryError = unknown


export function useGetOrderUpgradeLicensePlesk<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensePlesk<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensePlesk<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeLicensePlesk<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePlesk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicensePleskQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeLicensePleskServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/licensePlesk/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicensePleskServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/licensePlesk/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeLicensePleskServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicensePleskServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>> = ({ signal }) => getOrderUpgradeLicensePleskServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicensePleskServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>>
export type GetOrderUpgradeLicensePleskServiceNameQueryError = unknown


export function useGetOrderUpgradeLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeLicensePleskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicensePleskServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeLicensePleskServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/licensePlesk/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicensePleskServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/licensePlesk/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeLicensePleskServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicensePleskServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeLicensePleskServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicensePleskServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>>
export type GetOrderUpgradeLicensePleskServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeLicensePleskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensePleskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensePleskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeLicensePleskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensePleskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensePleskServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicensePleskServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeLicensePleskServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeLicensePleskServiceNamePlanCodeBody: PostOrderUpgradeLicensePleskServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/licensePlesk/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeLicensePleskServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeLicensePleskServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicensePleskServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicensePleskServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicensePleskServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicensePleskServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeLicensePleskServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeLicensePleskServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeLicensePleskServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeLicensePleskServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeLicensePleskServiceNamePlanCode>>>
    export type PostOrderUpgradeLicensePleskServiceNamePlanCodeMutationBody = PostOrderUpgradeLicensePleskServiceNamePlanCodeBody
    export type PostOrderUpgradeLicensePleskServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeLicensePleskServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicensePleskServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicensePleskServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeLicensePleskServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeLicensePleskServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeLicensePleskServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeLicensecPanel = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/licensecPanel`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicensecPanelQueryKey = () => {
    return [`/order/upgrade/licensecPanel`] as const;
    }

    
export const getGetOrderUpgradeLicensecPanelQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicensecPanelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>> = ({ signal }) => getOrderUpgradeLicensecPanel(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicensecPanelQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>>
export type GetOrderUpgradeLicensecPanelQueryError = unknown


export function useGetOrderUpgradeLicensecPanel<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensecPanel<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensecPanel<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeLicensecPanel<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicensecPanelQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeLicensecPanelServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/licensecPanel/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicensecPanelServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/licensecPanel/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeLicensecPanelServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicensecPanelServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>> = ({ signal }) => getOrderUpgradeLicensecPanelServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicensecPanelServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>>
export type GetOrderUpgradeLicensecPanelServiceNameQueryError = unknown


export function useGetOrderUpgradeLicensecPanelServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensecPanelServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensecPanelServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeLicensecPanelServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicensecPanelServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeLicensecPanelServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/licensecPanel/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeLicensecPanelServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/licensecPanel/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeLicensecPanelServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLicensecPanelServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeLicensecPanelServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLicensecPanelServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>>
export type GetOrderUpgradeLicensecPanelServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeLicensecPanelServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensecPanelServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLicensecPanelServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeLicensecPanelServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLicensecPanelServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLicensecPanelServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeLicensecPanelServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeLicensecPanelServiceNamePlanCodeBody: PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/licensecPanel/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeLicensecPanelServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeLicensecPanelServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeLicensecPanelServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeLicensecPanelServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeLicensecPanelServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeLicensecPanelServiceNamePlanCode>>>
    export type PostOrderUpgradeLicensecPanelServiceNamePlanCodeMutationBody = PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody
    export type PostOrderUpgradeLicensecPanelServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeLicensecPanelServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLicensecPanelServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeLicensecPanelServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeLicensecPanelServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeLicensecPanelServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeLogs = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/logs`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLogsQueryKey = () => {
    return [`/order/upgrade/logs`] as const;
    }

    
export const getGetOrderUpgradeLogsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLogsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLogs>>> = ({ signal }) => getOrderUpgradeLogs(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLogs>>>
export type GetOrderUpgradeLogsQueryError = unknown


export function useGetOrderUpgradeLogs<TData = Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLogs<TData = Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLogs<TData = Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeLogs<TData = Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLogsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeLogsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/logs/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeLogsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/logs/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeLogsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLogsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>> = ({ signal }) => getOrderUpgradeLogsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLogsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>>
export type GetOrderUpgradeLogsServiceNameQueryError = unknown


export function useGetOrderUpgradeLogsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLogsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLogsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeLogsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLogsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeLogsServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/logs/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeLogsServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/logs/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeLogsServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeLogsServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeLogsServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeLogsServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>>
export type GetOrderUpgradeLogsServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeLogsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLogsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeLogsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeLogsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeLogsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeLogsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeLogsServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeLogsServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeLogsServiceNamePlanCodeBody: PostOrderUpgradeLogsServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/logs/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeLogsServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeLogsServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLogsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLogsServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLogsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLogsServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeLogsServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeLogsServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeLogsServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeLogsServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeLogsServiceNamePlanCode>>>
    export type PostOrderUpgradeLogsServiceNamePlanCodeMutationBody = PostOrderUpgradeLogsServiceNamePlanCodeBody
    export type PostOrderUpgradeLogsServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeLogsServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeLogsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeLogsServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeLogsServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeLogsServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeLogsServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeMetrics = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/metrics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeMetricsQueryKey = () => {
    return [`/order/upgrade/metrics`] as const;
    }

    
export const getGetOrderUpgradeMetricsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeMetricsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>> = ({ signal }) => getOrderUpgradeMetrics(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>>
export type GetOrderUpgradeMetricsQueryError = unknown


export function useGetOrderUpgradeMetrics<TData = Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMetrics<TData = Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMetrics<TData = Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeMetrics<TData = Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeMetricsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeMetricsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/metrics/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeMetricsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/metrics/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeMetricsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeMetricsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>> = ({ signal }) => getOrderUpgradeMetricsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeMetricsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>>
export type GetOrderUpgradeMetricsServiceNameQueryError = unknown


export function useGetOrderUpgradeMetricsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMetricsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMetricsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeMetricsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeMetricsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeMetricsServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/metrics/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeMetricsServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/metrics/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeMetricsServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeMetricsServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeMetricsServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeMetricsServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>>
export type GetOrderUpgradeMetricsServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeMetricsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMetricsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMetricsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeMetricsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMetricsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMetricsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeMetricsServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeMetricsServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeMetricsServiceNamePlanCodeBody: PostOrderUpgradeMetricsServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/metrics/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeMetricsServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeMetricsServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeMetricsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeMetricsServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeMetricsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeMetricsServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeMetricsServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeMetricsServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeMetricsServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeMetricsServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeMetricsServiceNamePlanCode>>>
    export type PostOrderUpgradeMetricsServiceNamePlanCodeMutationBody = PostOrderUpgradeMetricsServiceNamePlanCodeBody
    export type PostOrderUpgradeMetricsServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeMetricsServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeMetricsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeMetricsServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeMetricsServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeMetricsServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeMetricsServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeMicrosoftExchange = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/microsoftExchange`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeMicrosoftExchangeQueryKey = () => {
    return [`/order/upgrade/microsoftExchange`] as const;
    }

    
export const getGetOrderUpgradeMicrosoftExchangeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeMicrosoftExchangeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>> = ({ signal }) => getOrderUpgradeMicrosoftExchange(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeMicrosoftExchangeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>>
export type GetOrderUpgradeMicrosoftExchangeQueryError = unknown


export function useGetOrderUpgradeMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeMicrosoftExchange<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeMicrosoftExchangeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeMicrosoftExchangeServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/microsoftExchange/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeMicrosoftExchangeServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/microsoftExchange/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeMicrosoftExchangeServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeMicrosoftExchangeServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>> = ({ signal }) => getOrderUpgradeMicrosoftExchangeServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeMicrosoftExchangeServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>>
export type GetOrderUpgradeMicrosoftExchangeServiceNameQueryError = unknown


export function useGetOrderUpgradeMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeMicrosoftExchangeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeMicrosoftExchangeServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeMicrosoftExchangeServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/microsoftExchange/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/microsoftExchange/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeMicrosoftExchangeServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>>
export type GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeMicrosoftExchangeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMicrosoftExchangeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeMicrosoftExchangeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeMicrosoftExchangeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeMicrosoftExchangeServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody: PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/microsoftExchange/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeMicrosoftExchangeServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>>
    export type PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeMutationBody = PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody
    export type PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeMicrosoftExchangeServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeMicrosoftExchangeServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradePrivateCloud = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/privateCloud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateCloudQueryKey = () => {
    return [`/order/upgrade/privateCloud`] as const;
    }

    
export const getGetOrderUpgradePrivateCloudQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateCloudQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>> = ({ signal }) => getOrderUpgradePrivateCloud(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateCloudQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>>
export type GetOrderUpgradePrivateCloudQueryError = unknown


export function useGetOrderUpgradePrivateCloud<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloud<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloud<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradePrivateCloud<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateCloudQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradePrivateCloudServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/privateCloud/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateCloudServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/privateCloud/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradePrivateCloudServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateCloudServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>> = ({ signal }) => getOrderUpgradePrivateCloudServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateCloudServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>>
export type GetOrderUpgradePrivateCloudServiceNameQueryError = unknown


export function useGetOrderUpgradePrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradePrivateCloudServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateCloudServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradePrivateCloudServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/privateCloud/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateCloudServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/privateCloud/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradePrivateCloudServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateCloudServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradePrivateCloudServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateCloudServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>>
export type GetOrderUpgradePrivateCloudServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradePrivateCloudServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradePrivateCloudServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateCloudServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradePrivateCloudServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradePrivateCloudServiceNamePlanCodeBody: PostOrderUpgradePrivateCloudServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/privateCloud/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradePrivateCloudServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradePrivateCloudServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradePrivateCloudServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradePrivateCloudServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudServiceNamePlanCode>>>
    export type PostOrderUpgradePrivateCloudServiceNamePlanCodeMutationBody = PostOrderUpgradePrivateCloudServiceNamePlanCodeBody
    export type PostOrderUpgradePrivateCloudServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradePrivateCloudServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradePrivateCloudServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradePrivateCloudServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradePrivateCloudManagementFee = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/privateCloudManagementFee`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateCloudManagementFeeQueryKey = () => {
    return [`/order/upgrade/privateCloudManagementFee`] as const;
    }

    
export const getGetOrderUpgradePrivateCloudManagementFeeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateCloudManagementFeeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>> = ({ signal }) => getOrderUpgradePrivateCloudManagementFee(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateCloudManagementFeeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>>
export type GetOrderUpgradePrivateCloudManagementFeeQueryError = unknown


export function useGetOrderUpgradePrivateCloudManagementFee<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudManagementFee<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudManagementFee<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradePrivateCloudManagementFee<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFee>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateCloudManagementFeeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradePrivateCloudManagementFeeServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/privateCloudManagementFee/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateCloudManagementFeeServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/privateCloudManagementFee/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradePrivateCloudManagementFeeServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateCloudManagementFeeServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>> = ({ signal }) => getOrderUpgradePrivateCloudManagementFeeServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateCloudManagementFeeServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>>
export type GetOrderUpgradePrivateCloudManagementFeeServiceNameQueryError = unknown


export function useGetOrderUpgradePrivateCloudManagementFeeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudManagementFeeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudManagementFeeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradePrivateCloudManagementFeeServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateCloudManagementFeeServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/privateCloudManagementFee/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/privateCloudManagementFee/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>>
export type GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody: PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/privateCloudManagementFee/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>>
    export type PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeMutationBody = PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody
    export type PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradePrivateCloudManagementFeeServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradePrivateSQL = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/privateSQL`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateSQLQueryKey = () => {
    return [`/order/upgrade/privateSQL`] as const;
    }

    
export const getGetOrderUpgradePrivateSQLQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateSQLQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>> = ({ signal }) => getOrderUpgradePrivateSQL(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateSQLQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>>
export type GetOrderUpgradePrivateSQLQueryError = unknown


export function useGetOrderUpgradePrivateSQL<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateSQL<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateSQL<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradePrivateSQL<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQL>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateSQLQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradePrivateSQLDomain = (
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/privateSQL/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateSQLDomainQueryKey = (domain: string,) => {
    return [`/order/upgrade/privateSQL/${domain}`] as const;
    }

    
export const getGetOrderUpgradePrivateSQLDomainQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError = unknown>(domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateSQLDomainQueryKey(domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>> = ({ signal }) => getOrderUpgradePrivateSQLDomain(domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateSQLDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>>
export type GetOrderUpgradePrivateSQLDomainQueryError = unknown


export function useGetOrderUpgradePrivateSQLDomain<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError = unknown>(
 domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateSQLDomain<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateSQLDomain<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradePrivateSQLDomain<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError = unknown>(
 domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateSQLDomainQueryOptions(domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradePrivateSQLDomainPlanCode = (
    domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/privateSQL/${domain}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradePrivateSQLDomainPlanCodeQueryKey = (domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams,) => {
    return [`/order/upgrade/privateSQL/${domain}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradePrivateSQLDomainPlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError = unknown>(domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradePrivateSQLDomainPlanCodeQueryKey(domain,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>> = ({ signal }) => getOrderUpgradePrivateSQLDomainPlanCode(domain,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(domain && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradePrivateSQLDomainPlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>>
export type GetOrderUpgradePrivateSQLDomainPlanCodeQueryError = unknown


export function useGetOrderUpgradePrivateSQLDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateSQLDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradePrivateSQLDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradePrivateSQLDomainPlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError = unknown>(
 domain: string,
    planCode: string,
    params: GetOrderUpgradePrivateSQLDomainPlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradePrivateSQLDomainPlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradePrivateSQLDomainPlanCodeQueryOptions(domain,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradePrivateSQLDomainPlanCode = (
    domain: string,
    planCode: string,
    postOrderUpgradePrivateSQLDomainPlanCodeBody: PostOrderUpgradePrivateSQLDomainPlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/privateSQL/${domain}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradePrivateSQLDomainPlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradePrivateSQLDomainPlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateSQLDomainPlanCode>>, TError,{domain: string;planCode: string;data: PostOrderUpgradePrivateSQLDomainPlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateSQLDomainPlanCode>>, TError,{domain: string;planCode: string;data: PostOrderUpgradePrivateSQLDomainPlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradePrivateSQLDomainPlanCode>>, {domain: string;planCode: string;data: PostOrderUpgradePrivateSQLDomainPlanCodeBody}> = (props) => {
          const {domain,planCode,data} = props ?? {};

          return  postOrderUpgradePrivateSQLDomainPlanCode(domain,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradePrivateSQLDomainPlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradePrivateSQLDomainPlanCode>>>
    export type PostOrderUpgradePrivateSQLDomainPlanCodeMutationBody = PostOrderUpgradePrivateSQLDomainPlanCodeBody
    export type PostOrderUpgradePrivateSQLDomainPlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradePrivateSQLDomainPlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradePrivateSQLDomainPlanCode>>, TError,{domain: string;planCode: string;data: PostOrderUpgradePrivateSQLDomainPlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradePrivateSQLDomainPlanCode>>,
        TError,
        {domain: string;planCode: string;data: PostOrderUpgradePrivateSQLDomainPlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradePrivateSQLDomainPlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeSslGateway = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/sslGateway`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeSslGatewayQueryKey = () => {
    return [`/order/upgrade/sslGateway`] as const;
    }

    
export const getGetOrderUpgradeSslGatewayQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeSslGatewayQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>> = ({ signal }) => getOrderUpgradeSslGateway(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeSslGatewayQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>>
export type GetOrderUpgradeSslGatewayQueryError = unknown


export function useGetOrderUpgradeSslGateway<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeSslGateway<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeSslGateway<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeSslGateway<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGateway>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeSslGatewayQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeSslGatewayServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/sslGateway/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeSslGatewayServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/sslGateway/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeSslGatewayServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeSslGatewayServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>> = ({ signal }) => getOrderUpgradeSslGatewayServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeSslGatewayServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>>
export type GetOrderUpgradeSslGatewayServiceNameQueryError = unknown


export function useGetOrderUpgradeSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeSslGatewayServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeSslGatewayServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeSslGatewayServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/sslGateway/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeSslGatewayServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/sslGateway/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeSslGatewayServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeSslGatewayServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeSslGatewayServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeSslGatewayServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>>
export type GetOrderUpgradeSslGatewayServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeSslGatewayServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeSslGatewayServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeSslGatewayServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeSslGatewayServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeSslGatewayServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeSslGatewayServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeSslGatewayServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeSslGatewayServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeSslGatewayServiceNamePlanCodeBody: PostOrderUpgradeSslGatewayServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/sslGateway/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeSslGatewayServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeSslGatewayServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeSslGatewayServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeSslGatewayServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeSslGatewayServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeSslGatewayServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeSslGatewayServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeSslGatewayServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeSslGatewayServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeSslGatewayServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeSslGatewayServiceNamePlanCode>>>
    export type PostOrderUpgradeSslGatewayServiceNamePlanCodeMutationBody = PostOrderUpgradeSslGatewayServiceNamePlanCodeBody
    export type PostOrderUpgradeSslGatewayServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeSslGatewayServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeSslGatewayServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeSslGatewayServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeSslGatewayServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeSslGatewayServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeSslGatewayServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeVps = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/vps`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeVpsQueryKey = () => {
    return [`/order/upgrade/vps`] as const;
    }

    
export const getGetOrderUpgradeVpsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeVpsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeVps>>> = ({ signal }) => getOrderUpgradeVps(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeVps>>>
export type GetOrderUpgradeVpsQueryError = unknown


export function useGetOrderUpgradeVps<TData = Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVps<TData = Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVps<TData = Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeVps<TData = Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeVpsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeVpsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/vps/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeVpsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/vps/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeVpsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeVpsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>> = ({ signal }) => getOrderUpgradeVpsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeVpsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>>
export type GetOrderUpgradeVpsServiceNameQueryError = unknown


export function useGetOrderUpgradeVpsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeVpsServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeVpsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeVpsServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/vps/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeVpsServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/vps/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeVpsServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeVpsServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeVpsServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeVpsServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>>
export type GetOrderUpgradeVpsServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeVpsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeVpsServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeVpsServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeVpsServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeVpsServiceNamePlanCodeBody: PostOrderUpgradeVpsServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/vps/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeVpsServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeVpsServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeVpsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeVpsServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeVpsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeVpsServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeVpsServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeVpsServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeVpsServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeVpsServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeVpsServiceNamePlanCode>>>
    export type PostOrderUpgradeVpsServiceNamePlanCodeMutationBody = PostOrderUpgradeVpsServiceNamePlanCodeBody
    export type PostOrderUpgradeVpsServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeVpsServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeVpsServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeVpsServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeVpsServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeVpsServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeVpsServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeVpsAdditionalDisk = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/vpsAdditionalDisk`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeVpsAdditionalDiskQueryKey = () => {
    return [`/order/upgrade/vpsAdditionalDisk`] as const;
    }

    
export const getGetOrderUpgradeVpsAdditionalDiskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeVpsAdditionalDiskQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>> = ({ signal }) => getOrderUpgradeVpsAdditionalDisk(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeVpsAdditionalDiskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>>
export type GetOrderUpgradeVpsAdditionalDiskQueryError = unknown


export function useGetOrderUpgradeVpsAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeVpsAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDisk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeVpsAdditionalDiskQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeVpsAdditionalDiskServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/vpsAdditionalDisk/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeVpsAdditionalDiskServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/vpsAdditionalDisk/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeVpsAdditionalDiskServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeVpsAdditionalDiskServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>> = ({ signal }) => getOrderUpgradeVpsAdditionalDiskServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeVpsAdditionalDiskServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>>
export type GetOrderUpgradeVpsAdditionalDiskServiceNameQueryError = unknown


export function useGetOrderUpgradeVpsAdditionalDiskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsAdditionalDiskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsAdditionalDiskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeVpsAdditionalDiskServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeVpsAdditionalDiskServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/vpsAdditionalDisk/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/vpsAdditionalDisk/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>>
export type GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody: PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/vpsAdditionalDisk/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>>
    export type PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeMutationBody = PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody
    export type PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeVpsAdditionalDiskServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeVpsAdditionalDiskServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeWebHosting = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/webHosting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeWebHostingQueryKey = () => {
    return [`/order/upgrade/webHosting`] as const;
    }

    
export const getGetOrderUpgradeWebHostingQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeWebHostingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>> = ({ signal }) => getOrderUpgradeWebHosting(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeWebHostingQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>>
export type GetOrderUpgradeWebHostingQueryError = unknown


export function useGetOrderUpgradeWebHosting<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebHosting<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebHosting<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeWebHosting<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHosting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeWebHostingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeWebHostingServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/webHosting/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeWebHostingServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/webHosting/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeWebHostingServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeWebHostingServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>> = ({ signal }) => getOrderUpgradeWebHostingServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeWebHostingServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>>
export type GetOrderUpgradeWebHostingServiceNameQueryError = unknown


export function useGetOrderUpgradeWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeWebHostingServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeWebHostingServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeWebHostingServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/webHosting/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeWebHostingServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/webHosting/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeWebHostingServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeWebHostingServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeWebHostingServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeWebHostingServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>>
export type GetOrderUpgradeWebHostingServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeWebHostingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebHostingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebHostingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeWebHostingServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebHostingServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebHostingServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeWebHostingServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeWebHostingServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeWebHostingServiceNamePlanCodeBody: PostOrderUpgradeWebHostingServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/webHosting/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeWebHostingServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeWebHostingServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeWebHostingServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeWebHostingServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeWebHostingServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeWebHostingServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeWebHostingServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeWebHostingServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeWebHostingServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeWebHostingServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeWebHostingServiceNamePlanCode>>>
    export type PostOrderUpgradeWebHostingServiceNamePlanCodeMutationBody = PostOrderUpgradeWebHostingServiceNamePlanCodeBody
    export type PostOrderUpgradeWebHostingServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeWebHostingServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeWebHostingServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeWebHostingServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeWebHostingServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeWebHostingServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeWebHostingServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderUpgradeWebPaaS = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/upgrade/webPaaS`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeWebPaaSQueryKey = () => {
    return [`/order/upgrade/webPaaS`] as const;
    }

    
export const getGetOrderUpgradeWebPaaSQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeWebPaaSQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>> = ({ signal }) => getOrderUpgradeWebPaaS(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeWebPaaSQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>>
export type GetOrderUpgradeWebPaaSQueryError = unknown


export function useGetOrderUpgradeWebPaaS<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebPaaS<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebPaaS<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderUpgradeWebPaaS<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaS>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeWebPaaSQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve available offers to upgrade your service to
 */
export const getOrderUpgradeWebPaaSServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderCartGenericProductDefinitionOVH[]>(
      {url: `/order/upgrade/webPaaS/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderUpgradeWebPaaSServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/upgrade/webPaaS/${serviceName}`] as const;
    }

    
export const getGetOrderUpgradeWebPaaSServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeWebPaaSServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>> = ({ signal }) => getOrderUpgradeWebPaaSServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeWebPaaSServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>>
export type GetOrderUpgradeWebPaaSServiceNameQueryError = unknown


export function useGetOrderUpgradeWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available offers to upgrade your service to
 */

export function useGetOrderUpgradeWebPaaSServiceName<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeWebPaaSServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a provisional order for the selected upgrade of your service
 */
export const getOrderUpgradeWebPaaSServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/webPaaS/${serviceName}/${planCode}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderUpgradeWebPaaSServiceNamePlanCodeQueryKey = (serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams,) => {
    return [`/order/upgrade/webPaaS/${serviceName}/${planCode}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderUpgradeWebPaaSServiceNamePlanCodeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError = unknown>(serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderUpgradeWebPaaSServiceNamePlanCodeQueryKey(serviceName,planCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>> = ({ signal }) => getOrderUpgradeWebPaaSServiceNamePlanCode(serviceName,planCode,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && planCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderUpgradeWebPaaSServiceNamePlanCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>>
export type GetOrderUpgradeWebPaaSServiceNamePlanCodeQueryError = unknown


export function useGetOrderUpgradeWebPaaSServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebPaaSServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderUpgradeWebPaaSServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a provisional order for the selected upgrade of your service
 */

export function useGetOrderUpgradeWebPaaSServiceNamePlanCode<TData = Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError = unknown>(
 serviceName: string,
    planCode: string,
    params: GetOrderUpgradeWebPaaSServiceNamePlanCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderUpgradeWebPaaSServiceNamePlanCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderUpgradeWebPaaSServiceNamePlanCodeQueryOptions(serviceName,planCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Perform the requested upgrade of your service
 */
export const postOrderUpgradeWebPaaSServiceNamePlanCode = (
    serviceName: string,
    planCode: string,
    postOrderUpgradeWebPaaSServiceNamePlanCodeBody: PostOrderUpgradeWebPaaSServiceNamePlanCodeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderUpgradeOperationAndOrderOVH>(
      {url: `/order/upgrade/webPaaS/${serviceName}/${planCode}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderUpgradeWebPaaSServiceNamePlanCodeBody, signal
    },
      options);
    }
  


export const getPostOrderUpgradeWebPaaSServiceNamePlanCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeWebPaaSServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeWebPaaSServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeWebPaaSServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeWebPaaSServiceNamePlanCodeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderUpgradeWebPaaSServiceNamePlanCode>>, {serviceName: string;planCode: string;data: PostOrderUpgradeWebPaaSServiceNamePlanCodeBody}> = (props) => {
          const {serviceName,planCode,data} = props ?? {};

          return  postOrderUpgradeWebPaaSServiceNamePlanCode(serviceName,planCode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderUpgradeWebPaaSServiceNamePlanCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderUpgradeWebPaaSServiceNamePlanCode>>>
    export type PostOrderUpgradeWebPaaSServiceNamePlanCodeMutationBody = PostOrderUpgradeWebPaaSServiceNamePlanCodeBody
    export type PostOrderUpgradeWebPaaSServiceNamePlanCodeMutationError = unknown

    /**
 * @summary Perform the requested upgrade of your service
 */
export const usePostOrderUpgradeWebPaaSServiceNamePlanCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderUpgradeWebPaaSServiceNamePlanCode>>, TError,{serviceName: string;planCode: string;data: PostOrderUpgradeWebPaaSServiceNamePlanCodeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderUpgradeWebPaaSServiceNamePlanCode>>,
        TError,
        {serviceName: string;planCode: string;data: PostOrderUpgradeWebPaaSServiceNamePlanCodeBody},
        TContext
      > => {

      const mutationOptions = getPostOrderUpgradeWebPaaSServiceNamePlanCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Veeam Cloud Connect order
 */
export const getOrderVeeamCloudConnect = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/veeamCloudConnect`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVeeamCloudConnectQueryKey = () => {
    return [`/order/veeamCloudConnect`] as const;
    }

    
export const getGetOrderVeeamCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVeeamCloudConnectQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>> = ({ signal }) => getOrderVeeamCloudConnect(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVeeamCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>>
export type GetOrderVeeamCloudConnectQueryError = unknown


export function useGetOrderVeeamCloudConnect<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnect<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnect<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Veeam Cloud Connect order
 */

export function useGetOrderVeeamCloudConnect<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVeeamCloudConnectQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderVeeamCloudConnectServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/veeamCloudConnect/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVeeamCloudConnectServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/veeamCloudConnect/${serviceName}`] as const;
    }

    
export const getGetOrderVeeamCloudConnectServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVeeamCloudConnectServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>> = ({ signal }) => getOrderVeeamCloudConnectServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVeeamCloudConnectServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>>
export type GetOrderVeeamCloudConnectServiceNameQueryError = unknown


export function useGetOrderVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderVeeamCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVeeamCloudConnectServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'upgrade' option
 */
export const getOrderVeeamCloudConnectServiceNameUpgrade = (
    serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/veeamCloudConnect/${serviceName}/upgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVeeamCloudConnectServiceNameUpgradeQueryKey = (serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams,) => {
    return [`/order/veeamCloudConnect/${serviceName}/upgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVeeamCloudConnectServiceNameUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError = unknown>(serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVeeamCloudConnectServiceNameUpgradeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>> = ({ signal }) => getOrderVeeamCloudConnectServiceNameUpgrade(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVeeamCloudConnectServiceNameUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>>
export type GetOrderVeeamCloudConnectServiceNameUpgradeQueryError = unknown


export function useGetOrderVeeamCloudConnectServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnectServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnectServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'upgrade' option
 */

export function useGetOrderVeeamCloudConnectServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVeeamCloudConnectServiceNameUpgradeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVeeamCloudConnectServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/veeamCloudConnect/${serviceName}/upgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVeeamCloudConnectServiceNameUpgradeDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams,) => {
    return [`/order/veeamCloudConnect/${serviceName}/upgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVeeamCloudConnectServiceNameUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVeeamCloudConnectServiceNameUpgradeDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>> = ({ signal }) => getOrderVeeamCloudConnectServiceNameUpgradeDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVeeamCloudConnectServiceNameUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>>
export type GetOrderVeeamCloudConnectServiceNameUpgradeDurationQueryError = unknown


export function useGetOrderVeeamCloudConnectServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnectServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVeeamCloudConnectServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVeeamCloudConnectServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVeeamCloudConnectServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVeeamCloudConnectServiceNameUpgradeDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVeeamCloudConnectServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    postOrderVeeamCloudConnectServiceNameUpgradeDurationBody: PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/veeamCloudConnect/${serviceName}/upgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderVeeamCloudConnectServiceNameUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderVeeamCloudConnectServiceNameUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVeeamCloudConnectServiceNameUpgradeDuration>>, {serviceName: string;duration: string;data: PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderVeeamCloudConnectServiceNameUpgradeDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVeeamCloudConnectServiceNameUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVeeamCloudConnectServiceNameUpgradeDuration>>>
    export type PostOrderVeeamCloudConnectServiceNameUpgradeDurationMutationBody = PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody
    export type PostOrderVeeamCloudConnectServiceNameUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVeeamCloudConnectServiceNameUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVeeamCloudConnectServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVeeamCloudConnectServiceNameUpgradeDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderVeeamCloudConnectServiceNameUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderVeeamCloudConnectServiceNameUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available services
 */
export const getOrderVps = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsQueryKey = () => {
    return [`/order/vps`] as const;
    }

    
export const getGetOrderVpsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVps>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVps>>> = ({ signal }) => getOrderVps(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVps>>>
export type GetOrderVpsQueryError = unknown


export function useGetOrderVps<TData = Awaited<ReturnType<typeof getOrderVps>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVps<TData = Awaited<ReturnType<typeof getOrderVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVps<TData = Awaited<ReturnType<typeof getOrderVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOrderVps<TData = Awaited<ReturnType<typeof getOrderVps>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed options
 */
export const getOrderVpsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameQueryKey = (serviceName: string,) => {
    return [`/order/vps/${serviceName}`] as const;
    }

    
export const getGetOrderVpsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceName>>> = ({ signal }) => getOrderVpsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceName>>>
export type GetOrderVpsServiceNameQueryError = unknown


export function useGetOrderVpsServiceName<TData = Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceName<TData = Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceName<TData = Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed options
 */

export function useGetOrderVpsServiceName<TData = Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get allowed durations for 'additionalDisk' option
 */
export const getOrderVpsServiceNameAdditionalDisk = (
    serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/additionalDisk`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameAdditionalDiskQueryKey = (serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams,) => {
    return [`/order/vps/${serviceName}/additionalDisk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVpsServiceNameAdditionalDiskQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError = unknown>(serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameAdditionalDiskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>> = ({ signal }) => getOrderVpsServiceNameAdditionalDisk(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameAdditionalDiskQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>>
export type GetOrderVpsServiceNameAdditionalDiskQueryError = unknown


export function useGetOrderVpsServiceNameAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'additionalDisk' option
 */

export function useGetOrderVpsServiceNameAdditionalDisk<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameAdditionalDiskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDisk>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameAdditionalDiskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameAdditionalDiskDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/additionalDisk/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameAdditionalDiskDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams,) => {
    return [`/order/vps/${serviceName}/additionalDisk/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVpsServiceNameAdditionalDiskDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameAdditionalDiskDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>> = ({ signal }) => getOrderVpsServiceNameAdditionalDiskDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameAdditionalDiskDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>>
export type GetOrderVpsServiceNameAdditionalDiskDurationQueryError = unknown


export function useGetOrderVpsServiceNameAdditionalDiskDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAdditionalDiskDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAdditionalDiskDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameAdditionalDiskDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameAdditionalDiskDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAdditionalDiskDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameAdditionalDiskDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameAdditionalDiskDuration = (
    serviceName: string,
    duration: string,
    postOrderVpsServiceNameAdditionalDiskDurationBody: PostOrderVpsServiceNameAdditionalDiskDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/additionalDisk/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderVpsServiceNameAdditionalDiskDurationBody, signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameAdditionalDiskDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameAdditionalDiskDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameAdditionalDiskDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameAdditionalDiskDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameAdditionalDiskDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameAdditionalDiskDuration>>, {serviceName: string;duration: string;data: PostOrderVpsServiceNameAdditionalDiskDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderVpsServiceNameAdditionalDiskDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameAdditionalDiskDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameAdditionalDiskDuration>>>
    export type PostOrderVpsServiceNameAdditionalDiskDurationMutationBody = PostOrderVpsServiceNameAdditionalDiskDurationBody
    export type PostOrderVpsServiceNameAdditionalDiskDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameAdditionalDiskDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameAdditionalDiskDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameAdditionalDiskDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameAdditionalDiskDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderVpsServiceNameAdditionalDiskDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameAdditionalDiskDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'automatedBackup' option
 */
export const getOrderVpsServiceNameAutomatedBackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/automatedBackup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameAutomatedBackupQueryKey = (serviceName: string,) => {
    return [`/order/vps/${serviceName}/automatedBackup`] as const;
    }

    
export const getGetOrderVpsServiceNameAutomatedBackupQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameAutomatedBackupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>> = ({ signal }) => getOrderVpsServiceNameAutomatedBackup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameAutomatedBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>>
export type GetOrderVpsServiceNameAutomatedBackupQueryError = unknown


export function useGetOrderVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'automatedBackup' option
 */

export function useGetOrderVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameAutomatedBackupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameAutomatedBackupDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/automatedBackup/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameAutomatedBackupDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/vps/${serviceName}/automatedBackup/${duration}`] as const;
    }

    
export const getGetOrderVpsServiceNameAutomatedBackupDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameAutomatedBackupDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>> = ({ signal }) => getOrderVpsServiceNameAutomatedBackupDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameAutomatedBackupDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>>
export type GetOrderVpsServiceNameAutomatedBackupDurationQueryError = unknown


export function useGetOrderVpsServiceNameAutomatedBackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAutomatedBackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameAutomatedBackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameAutomatedBackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameAutomatedBackupDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameAutomatedBackupDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameAutomatedBackupDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/automatedBackup/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameAutomatedBackupDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameAutomatedBackupDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameAutomatedBackupDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameAutomatedBackupDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderVpsServiceNameAutomatedBackupDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameAutomatedBackupDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameAutomatedBackupDuration>>>
    
    export type PostOrderVpsServiceNameAutomatedBackupDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameAutomatedBackupDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameAutomatedBackupDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameAutomatedBackupDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameAutomatedBackupDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'ftpbackup' option
 */
export const getOrderVpsServiceNameFtpbackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/ftpbackup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameFtpbackupQueryKey = (serviceName: string,) => {
    return [`/order/vps/${serviceName}/ftpbackup`] as const;
    }

    
export const getGetOrderVpsServiceNameFtpbackupQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameFtpbackupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>> = ({ signal }) => getOrderVpsServiceNameFtpbackup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameFtpbackupQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>>
export type GetOrderVpsServiceNameFtpbackupQueryError = unknown


export function useGetOrderVpsServiceNameFtpbackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameFtpbackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameFtpbackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'ftpbackup' option
 */

export function useGetOrderVpsServiceNameFtpbackup<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameFtpbackupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameFtpbackupDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/ftpbackup/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameFtpbackupDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/vps/${serviceName}/ftpbackup/${duration}`] as const;
    }

    
export const getGetOrderVpsServiceNameFtpbackupDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameFtpbackupDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>> = ({ signal }) => getOrderVpsServiceNameFtpbackupDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameFtpbackupDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>>
export type GetOrderVpsServiceNameFtpbackupDurationQueryError = unknown


export function useGetOrderVpsServiceNameFtpbackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameFtpbackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameFtpbackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameFtpbackupDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameFtpbackupDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameFtpbackupDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameFtpbackupDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/ftpbackup/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameFtpbackupDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameFtpbackupDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameFtpbackupDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameFtpbackupDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderVpsServiceNameFtpbackupDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameFtpbackupDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameFtpbackupDuration>>>
    
    export type PostOrderVpsServiceNameFtpbackupDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameFtpbackupDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameFtpbackupDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameFtpbackupDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameFtpbackupDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'ip' option
 */
export const getOrderVpsServiceNameIp = (
    serviceName: string,
    params: GetOrderVpsServiceNameIpParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/ip`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameIpQueryKey = (serviceName: string,
    params: GetOrderVpsServiceNameIpParams,) => {
    return [`/order/vps/${serviceName}/ip`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVpsServiceNameIpQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError = unknown>(serviceName: string,
    params: GetOrderVpsServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameIpQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>> = ({ signal }) => getOrderVpsServiceNameIp(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameIpQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>>
export type GetOrderVpsServiceNameIpQueryError = unknown


export function useGetOrderVpsServiceNameIp<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameIpParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameIp<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameIp<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'ip' option
 */

export function useGetOrderVpsServiceNameIp<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameIpParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameIpQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameIpDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/ip/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameIpDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams,) => {
    return [`/order/vps/${serviceName}/ip/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVpsServiceNameIpDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameIpDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>> = ({ signal }) => getOrderVpsServiceNameIpDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameIpDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>>
export type GetOrderVpsServiceNameIpDurationQueryError = unknown


export function useGetOrderVpsServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameIpDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameIpDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameIpDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameIpDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameIpDuration = (
    serviceName: string,
    duration: string,
    postOrderVpsServiceNameIpDurationBody: PostOrderVpsServiceNameIpDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/ip/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderVpsServiceNameIpDurationBody, signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameIpDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameIpDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameIpDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameIpDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameIpDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameIpDuration>>, {serviceName: string;duration: string;data: PostOrderVpsServiceNameIpDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderVpsServiceNameIpDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameIpDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameIpDuration>>>
    export type PostOrderVpsServiceNameIpDurationMutationBody = PostOrderVpsServiceNameIpDurationBody
    export type PostOrderVpsServiceNameIpDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameIpDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameIpDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameIpDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameIpDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderVpsServiceNameIpDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameIpDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'snapshot' option
 */
export const getOrderVpsServiceNameSnapshot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/snapshot`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameSnapshotQueryKey = (serviceName: string,) => {
    return [`/order/vps/${serviceName}/snapshot`] as const;
    }

    
export const getGetOrderVpsServiceNameSnapshotQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameSnapshotQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>> = ({ signal }) => getOrderVpsServiceNameSnapshot(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>>
export type GetOrderVpsServiceNameSnapshotQueryError = unknown


export function useGetOrderVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'snapshot' option
 */

export function useGetOrderVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameSnapshotQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameSnapshotDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/snapshot/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameSnapshotDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/vps/${serviceName}/snapshot/${duration}`] as const;
    }

    
export const getGetOrderVpsServiceNameSnapshotDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameSnapshotDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>> = ({ signal }) => getOrderVpsServiceNameSnapshotDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameSnapshotDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>>
export type GetOrderVpsServiceNameSnapshotDurationQueryError = unknown


export function useGetOrderVpsServiceNameSnapshotDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameSnapshotDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameSnapshotDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameSnapshotDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameSnapshotDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameSnapshotDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameSnapshotDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/snapshot/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameSnapshotDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameSnapshotDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameSnapshotDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameSnapshotDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderVpsServiceNameSnapshotDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameSnapshotDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameSnapshotDuration>>>
    
    export type PostOrderVpsServiceNameSnapshotDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameSnapshotDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameSnapshotDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameSnapshotDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameSnapshotDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'upgrade' option
 */
export const getOrderVpsServiceNameUpgrade = (
    serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/upgrade`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameUpgradeQueryKey = (serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams,) => {
    return [`/order/vps/${serviceName}/upgrade`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVpsServiceNameUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError = unknown>(serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameUpgradeQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>> = ({ signal }) => getOrderVpsServiceNameUpgrade(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>>
export type GetOrderVpsServiceNameUpgradeQueryError = unknown


export function useGetOrderVpsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'upgrade' option
 */

export function useGetOrderVpsServiceNameUpgrade<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError = unknown>(
 serviceName: string,
    params: GetOrderVpsServiceNameUpgradeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameUpgradeQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/upgrade/${duration}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameUpgradeDurationQueryKey = (serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams,) => {
    return [`/order/vps/${serviceName}/upgrade/${duration}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderVpsServiceNameUpgradeDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError = unknown>(serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameUpgradeDurationQueryKey(serviceName,duration,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>> = ({ signal }) => getOrderVpsServiceNameUpgradeDuration(serviceName,duration,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameUpgradeDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>>
export type GetOrderVpsServiceNameUpgradeDurationQueryError = unknown


export function useGetOrderVpsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameUpgradeDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError = unknown>(
 serviceName: string,
    duration: string,
    params: GetOrderVpsServiceNameUpgradeDurationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameUpgradeDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameUpgradeDurationQueryOptions(serviceName,duration,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameUpgradeDuration = (
    serviceName: string,
    duration: string,
    postOrderVpsServiceNameUpgradeDurationBody: PostOrderVpsServiceNameUpgradeDurationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/upgrade/${duration}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderVpsServiceNameUpgradeDurationBody, signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameUpgradeDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameUpgradeDurationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameUpgradeDuration>>, {serviceName: string;duration: string;data: PostOrderVpsServiceNameUpgradeDurationBody}> = (props) => {
          const {serviceName,duration,data} = props ?? {};

          return  postOrderVpsServiceNameUpgradeDuration(serviceName,duration,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameUpgradeDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameUpgradeDuration>>>
    export type PostOrderVpsServiceNameUpgradeDurationMutationBody = PostOrderVpsServiceNameUpgradeDurationBody
    export type PostOrderVpsServiceNameUpgradeDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameUpgradeDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameUpgradeDuration>>, TError,{serviceName: string;duration: string;data: PostOrderVpsServiceNameUpgradeDurationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameUpgradeDuration>>,
        TError,
        {serviceName: string;duration: string;data: PostOrderVpsServiceNameUpgradeDurationBody},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameUpgradeDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get allowed durations for 'windows' option
 */
export const getOrderVpsServiceNameWindows = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/order/vps/${serviceName}/windows`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameWindowsQueryKey = (serviceName: string,) => {
    return [`/order/vps/${serviceName}/windows`] as const;
    }

    
export const getGetOrderVpsServiceNameWindowsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameWindowsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>> = ({ signal }) => getOrderVpsServiceNameWindows(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameWindowsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>>
export type GetOrderVpsServiceNameWindowsQueryError = unknown


export function useGetOrderVpsServiceNameWindows<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameWindows<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameWindows<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get allowed durations for 'windows' option
 */

export function useGetOrderVpsServiceNameWindows<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindows>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameWindowsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get prices and contracts information
 */
export const getOrderVpsServiceNameWindowsDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/windows/${duration}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderVpsServiceNameWindowsDurationQueryKey = (serviceName: string,
    duration: string,) => {
    return [`/order/vps/${serviceName}/windows/${duration}`] as const;
    }

    
export const getGetOrderVpsServiceNameWindowsDurationQueryOptions = <TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError = unknown>(serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderVpsServiceNameWindowsDurationQueryKey(serviceName,duration);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>> = ({ signal }) => getOrderVpsServiceNameWindowsDuration(serviceName,duration, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && duration), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderVpsServiceNameWindowsDurationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>>
export type GetOrderVpsServiceNameWindowsDurationQueryError = unknown


export function useGetOrderVpsServiceNameWindowsDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameWindowsDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderVpsServiceNameWindowsDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderVpsServiceNameWindowsDuration<TData = Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError = unknown>(
 serviceName: string,
    duration: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderVpsServiceNameWindowsDuration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderVpsServiceNameWindowsDurationQueryOptions(serviceName,duration,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderVpsServiceNameWindowsDuration = (
    serviceName: string,
    duration: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/vps/${serviceName}/windows/${duration}`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOrderVpsServiceNameWindowsDurationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameWindowsDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameWindowsDuration>>, TError,{serviceName: string;duration: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderVpsServiceNameWindowsDuration>>, {serviceName: string;duration: string}> = (props) => {
          const {serviceName,duration} = props ?? {};

          return  postOrderVpsServiceNameWindowsDuration(serviceName,duration,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderVpsServiceNameWindowsDurationMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderVpsServiceNameWindowsDuration>>>
    
    export type PostOrderVpsServiceNameWindowsDurationMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderVpsServiceNameWindowsDuration = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderVpsServiceNameWindowsDuration>>, TError,{serviceName: string;duration: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderVpsServiceNameWindowsDuration>>,
        TError,
        {serviceName: string;duration: string},
        TContext
      > => {

      const mutationOptions = getPostOrderVpsServiceNameWindowsDurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get prices and contracts information
 */
export const getOrderXdslSpareNew = (
    params: GetOrderXdslSpareNewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/xdsl/spare/new`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrderXdslSpareNewQueryKey = (params: GetOrderXdslSpareNewParams,) => {
    return [`/order/xdsl/spare/new`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrderXdslSpareNewQueryOptions = <TData = Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError = unknown>(params: GetOrderXdslSpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderXdslSpareNewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderXdslSpareNew>>> = ({ signal }) => getOrderXdslSpareNew(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderXdslSpareNewQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderXdslSpareNew>>>
export type GetOrderXdslSpareNewQueryError = unknown


export function useGetOrderXdslSpareNew<TData = Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError = unknown>(
 params: GetOrderXdslSpareNewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderXdslSpareNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderXdslSpareNew<TData = Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError = unknown>(
 params: GetOrderXdslSpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderXdslSpareNew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderXdslSpareNew<TData = Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError = unknown>(
 params: GetOrderXdslSpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get prices and contracts information
 */

export function useGetOrderXdslSpareNew<TData = Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError = unknown>(
 params: GetOrderXdslSpareNewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderXdslSpareNew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderXdslSpareNewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create order
 */
export const postOrderXdslSpareNew = (
    postOrderXdslSpareNewBody: PostOrderXdslSpareNewBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OrderOrderOVH>(
      {url: `/order/xdsl/spare/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrderXdslSpareNewBody, signal
    },
      options);
    }
  


export const getPostOrderXdslSpareNewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderXdslSpareNew>>, TError,{data: PostOrderXdslSpareNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrderXdslSpareNew>>, TError,{data: PostOrderXdslSpareNewBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrderXdslSpareNew>>, {data: PostOrderXdslSpareNewBody}> = (props) => {
          const {data} = props ?? {};

          return  postOrderXdslSpareNew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrderXdslSpareNewMutationResult = NonNullable<Awaited<ReturnType<typeof postOrderXdslSpareNew>>>
    export type PostOrderXdslSpareNewMutationBody = PostOrderXdslSpareNewBody
    export type PostOrderXdslSpareNewMutationError = unknown

    /**
 * @summary Create order
 */
export const usePostOrderXdslSpareNew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrderXdslSpareNew>>, TError,{data: PostOrderXdslSpareNewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrderXdslSpareNew>>,
        TError,
        {data: PostOrderXdslSpareNewBody},
        TContext
      > => {

      const mutationOptions = getPostOrderXdslSpareNewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

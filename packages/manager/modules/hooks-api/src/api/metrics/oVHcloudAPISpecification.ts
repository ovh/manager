/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetMetricsServiceConsumptionParams,
  ListMetricsServicesParams,
  MetricsApiConsumptionOVH,
  MetricsApiServiceOVH,
  MetricsApiServiceWithIAMOVH,
  MetricsApiTokenOVH,
  MetricsLookupTokenCreationOVH,
  MetricsQuotaUpdateOVH,
  MetricsTokenCreationOVH,
  MetricsTokenUpdateOVH,
  MetricsUpdateOVH,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const listMetricsServices = (
    params?: ListMetricsServicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/metrics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListMetricsServicesQueryKey = (params?: ListMetricsServicesParams,) => {
    return [`/metrics`, ...(params ? [params]: [])] as const;
    }

    
export const getListMetricsServicesQueryOptions = <TData = Awaited<ReturnType<typeof listMetricsServices>>, TError = unknown>(params?: ListMetricsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListMetricsServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listMetricsServices>>> = ({ signal }) => listMetricsServices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listMetricsServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListMetricsServicesQueryResult = NonNullable<Awaited<ReturnType<typeof listMetricsServices>>>
export type ListMetricsServicesQueryError = unknown


export function useListMetricsServices<TData = Awaited<ReturnType<typeof listMetricsServices>>, TError = unknown>(
 params: undefined |  ListMetricsServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMetricsServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListMetricsServices<TData = Awaited<ReturnType<typeof listMetricsServices>>, TError = unknown>(
 params?: ListMetricsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMetricsServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListMetricsServices<TData = Awaited<ReturnType<typeof listMetricsServices>>, TError = unknown>(
 params?: ListMetricsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useListMetricsServices<TData = Awaited<ReturnType<typeof listMetricsServices>>, TError = unknown>(
 params?: ListMetricsServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListMetricsServicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service
 */
export const getMetricsService = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MetricsApiServiceWithIAMOVH>(
      {url: `/metrics/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetricsServiceQueryKey = (serviceName: string,) => {
    return [`/metrics/${serviceName}`] as const;
    }

    
export const getGetMetricsServiceQueryOptions = <TData = Awaited<ReturnType<typeof getMetricsService>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetricsServiceQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetricsService>>> = ({ signal }) => getMetricsService(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetricsService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMetricsServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getMetricsService>>>
export type GetMetricsServiceQueryError = unknown


export function useGetMetricsService<TData = Awaited<ReturnType<typeof getMetricsService>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsService<TData = Awaited<ReturnType<typeof getMetricsService>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsService<TData = Awaited<ReturnType<typeof getMetricsService>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service
 */

export function useGetMetricsService<TData = Awaited<ReturnType<typeof getMetricsService>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMetricsServiceQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify service
 */
export const editMetricsService = (
    serviceName: string,
    metricsUpdateOVH: MetricsUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MetricsApiServiceOVH>(
      {url: `/metrics/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: metricsUpdateOVH
    },
      options);
    }
  


export const getEditMetricsServiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editMetricsService>>, TError,{serviceName: string;data: MetricsUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof editMetricsService>>, TError,{serviceName: string;data: MetricsUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editMetricsService>>, {serviceName: string;data: MetricsUpdateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  editMetricsService(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditMetricsServiceMutationResult = NonNullable<Awaited<ReturnType<typeof editMetricsService>>>
    export type EditMetricsServiceMutationBody = MetricsUpdateOVH
    export type EditMetricsServiceMutationError = unknown

    /**
 * @summary Modify service
 */
export const useEditMetricsService = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editMetricsService>>, TError,{serviceName: string;data: MetricsUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof editMetricsService>>,
        TError,
        {serviceName: string;data: MetricsUpdateOVH},
        TContext
      > => {

      const mutationOptions = getEditMetricsServiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postMetricsServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/metrics/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostMetricsServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMetricsServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postMetricsServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMetricsServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postMetricsServiceNameChangeContact>>>
    export type PostMetricsServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostMetricsServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostMetricsServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMetricsServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostMetricsServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postMetricsServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/metrics/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostMetricsServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMetricsServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postMetricsServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMetricsServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postMetricsServiceNameConfirmTermination>>>
    export type PostMetricsServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostMetricsServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostMetricsServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMetricsServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostMetricsServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get consumption for your service
 */
export const getMetricsServiceConsumption = (
    serviceName: string,
    params?: GetMetricsServiceConsumptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MetricsApiConsumptionOVH>(
      {url: `/metrics/${serviceName}/consumption`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMetricsServiceConsumptionQueryKey = (serviceName: string,
    params?: GetMetricsServiceConsumptionParams,) => {
    return [`/metrics/${serviceName}/consumption`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMetricsServiceConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError = unknown>(serviceName: string,
    params?: GetMetricsServiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetricsServiceConsumptionQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetricsServiceConsumption>>> = ({ signal }) => getMetricsServiceConsumption(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMetricsServiceConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getMetricsServiceConsumption>>>
export type GetMetricsServiceConsumptionQueryError = unknown


export function useGetMetricsServiceConsumption<TData = Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetMetricsServiceConsumptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsServiceConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsServiceConsumption<TData = Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError = unknown>(
 serviceName: string,
    params?: GetMetricsServiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsServiceConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsServiceConsumption<TData = Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError = unknown>(
 serviceName: string,
    params?: GetMetricsServiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get consumption for your service
 */

export function useGetMetricsServiceConsumption<TData = Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError = unknown>(
 serviceName: string,
    params?: GetMetricsServiceConsumptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMetricsServiceConsumptionQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Find TokenID for a specific token
 */
export const lookupMetricsToken = (
    serviceName: string,
    metricsLookupTokenCreationOVH: MetricsLookupTokenCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/metrics/${serviceName}/lookup/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: metricsLookupTokenCreationOVH, signal
    },
      options);
    }
  


export const getLookupMetricsTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof lookupMetricsToken>>, TError,{serviceName: string;data: MetricsLookupTokenCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof lookupMetricsToken>>, TError,{serviceName: string;data: MetricsLookupTokenCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof lookupMetricsToken>>, {serviceName: string;data: MetricsLookupTokenCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  lookupMetricsToken(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LookupMetricsTokenMutationResult = NonNullable<Awaited<ReturnType<typeof lookupMetricsToken>>>
    export type LookupMetricsTokenMutationBody = MetricsLookupTokenCreationOVH
    export type LookupMetricsTokenMutationError = unknown

    /**
 * @summary Find TokenID for a specific token
 */
export const useLookupMetricsToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof lookupMetricsToken>>, TError,{serviceName: string;data: MetricsLookupTokenCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof lookupMetricsToken>>,
        TError,
        {serviceName: string;data: MetricsLookupTokenCreationOVH},
        TContext
      > => {

      const mutationOptions = getLookupMetricsTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Set overquota
 */
export const setMetricsServiceQuota = (
    serviceName: string,
    metricsQuotaUpdateOVH: MetricsQuotaUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<string>(
      {url: `/metrics/${serviceName}/quota`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: metricsQuotaUpdateOVH
    },
      options);
    }
  


export const getSetMetricsServiceQuotaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setMetricsServiceQuota>>, TError,{serviceName: string;data: MetricsQuotaUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof setMetricsServiceQuota>>, TError,{serviceName: string;data: MetricsQuotaUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setMetricsServiceQuota>>, {serviceName: string;data: MetricsQuotaUpdateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  setMetricsServiceQuota(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetMetricsServiceQuotaMutationResult = NonNullable<Awaited<ReturnType<typeof setMetricsServiceQuota>>>
    export type SetMetricsServiceQuotaMutationBody = MetricsQuotaUpdateOVH
    export type SetMetricsServiceQuotaMutationError = unknown

    /**
 * @summary Set overquota
 */
export const useSetMetricsServiceQuota = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setMetricsServiceQuota>>, TError,{serviceName: string;data: MetricsQuotaUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof setMetricsServiceQuota>>,
        TError,
        {serviceName: string;data: MetricsQuotaUpdateOVH},
        TContext
      > => {

      const mutationOptions = getSetMetricsServiceQuotaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getMetricsServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/metrics/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetricsServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/metrics/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetMetricsServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetricsServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>> = ({ signal }) => getMetricsServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMetricsServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>>
export type GetMetricsServiceNameServiceInfosQueryError = unknown


export function useGetMetricsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetMetricsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMetricsServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putMetricsServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/metrics/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutMetricsServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMetricsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMetricsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMetricsServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putMetricsServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMetricsServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putMetricsServiceNameServiceInfos>>>
    export type PutMetricsServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutMetricsServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutMetricsServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMetricsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMetricsServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutMetricsServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Ask for the termination of your service
 */
export const postMetricsServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/metrics/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMetricsServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMetricsServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postMetricsServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMetricsServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postMetricsServiceNameTerminate>>>
    
    export type PostMetricsServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostMetricsServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetricsServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMetricsServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostMetricsServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of tokens
 */
export const listMetricsTokens = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/metrics/${serviceName}/token`, method: 'GET', signal
    },
      options);
    }
  

export const getListMetricsTokensQueryKey = (serviceName: string,) => {
    return [`/metrics/${serviceName}/token`] as const;
    }

    
export const getListMetricsTokensQueryOptions = <TData = Awaited<ReturnType<typeof listMetricsTokens>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsTokens>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListMetricsTokensQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listMetricsTokens>>> = ({ signal }) => listMetricsTokens(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listMetricsTokens>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListMetricsTokensQueryResult = NonNullable<Awaited<ReturnType<typeof listMetricsTokens>>>
export type ListMetricsTokensQueryError = unknown


export function useListMetricsTokens<TData = Awaited<ReturnType<typeof listMetricsTokens>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsTokens>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMetricsTokens>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListMetricsTokens<TData = Awaited<ReturnType<typeof listMetricsTokens>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsTokens>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMetricsTokens>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListMetricsTokens<TData = Awaited<ReturnType<typeof listMetricsTokens>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsTokens>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of tokens
 */

export function useListMetricsTokens<TData = Awaited<ReturnType<typeof listMetricsTokens>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMetricsTokens>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListMetricsTokensQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a token
 */
export const createMetricsToken = (
    serviceName: string,
    metricsTokenCreationOVH: MetricsTokenCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MetricsApiTokenOVH>(
      {url: `/metrics/${serviceName}/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: metricsTokenCreationOVH, signal
    },
      options);
    }
  


export const getCreateMetricsTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMetricsToken>>, TError,{serviceName: string;data: MetricsTokenCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof createMetricsToken>>, TError,{serviceName: string;data: MetricsTokenCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMetricsToken>>, {serviceName: string;data: MetricsTokenCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  createMetricsToken(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMetricsTokenMutationResult = NonNullable<Awaited<ReturnType<typeof createMetricsToken>>>
    export type CreateMetricsTokenMutationBody = MetricsTokenCreationOVH
    export type CreateMetricsTokenMutationError = unknown

    /**
 * @summary Create a token
 */
export const useCreateMetricsToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMetricsToken>>, TError,{serviceName: string;data: MetricsTokenCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof createMetricsToken>>,
        TError,
        {serviceName: string;data: MetricsTokenCreationOVH},
        TContext
      > => {

      const mutationOptions = getCreateMetricsTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke a token
 */
export const deleteMetricsToken = (
    serviceName: string,
    tokenId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/metrics/${serviceName}/token/${tokenId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMetricsTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetricsToken>>, TError,{serviceName: string;tokenId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMetricsToken>>, TError,{serviceName: string;tokenId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMetricsToken>>, {serviceName: string;tokenId: string}> = (props) => {
          const {serviceName,tokenId} = props ?? {};

          return  deleteMetricsToken(serviceName,tokenId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMetricsTokenMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMetricsToken>>>
    
    export type DeleteMetricsTokenMutationError = unknown

    /**
 * @summary Revoke a token
 */
export const useDeleteMetricsToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetricsToken>>, TError,{serviceName: string;tokenId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMetricsToken>>,
        TError,
        {serviceName: string;tokenId: string},
        TContext
      > => {

      const mutationOptions = getDeleteMetricsTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a specific token
 */
export const getMetricsToken = (
    serviceName: string,
    tokenId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MetricsApiTokenOVH>(
      {url: `/metrics/${serviceName}/token/${tokenId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetricsTokenQueryKey = (serviceName: string,
    tokenId: string,) => {
    return [`/metrics/${serviceName}/token/${tokenId}`] as const;
    }

    
export const getGetMetricsTokenQueryOptions = <TData = Awaited<ReturnType<typeof getMetricsToken>>, TError = unknown>(serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetricsTokenQueryKey(serviceName,tokenId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetricsToken>>> = ({ signal }) => getMetricsToken(serviceName,tokenId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && tokenId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetricsToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMetricsTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getMetricsToken>>>
export type GetMetricsTokenQueryError = unknown


export function useGetMetricsToken<TData = Awaited<ReturnType<typeof getMetricsToken>>, TError = unknown>(
 serviceName: string,
    tokenId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsToken<TData = Awaited<ReturnType<typeof getMetricsToken>>, TError = unknown>(
 serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMetricsToken<TData = Awaited<ReturnType<typeof getMetricsToken>>, TError = unknown>(
 serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a specific token
 */

export function useGetMetricsToken<TData = Awaited<ReturnType<typeof getMetricsToken>>, TError = unknown>(
 serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMetricsTokenQueryOptions(serviceName,tokenId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify a token
 */
export const editMetricsToken = (
    serviceName: string,
    tokenId: string,
    metricsTokenUpdateOVH: MetricsTokenUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MetricsApiTokenOVH>(
      {url: `/metrics/${serviceName}/token/${tokenId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: metricsTokenUpdateOVH
    },
      options);
    }
  


export const getEditMetricsTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editMetricsToken>>, TError,{serviceName: string;tokenId: string;data: MetricsTokenUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof editMetricsToken>>, TError,{serviceName: string;tokenId: string;data: MetricsTokenUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editMetricsToken>>, {serviceName: string;tokenId: string;data: MetricsTokenUpdateOVH}> = (props) => {
          const {serviceName,tokenId,data} = props ?? {};

          return  editMetricsToken(serviceName,tokenId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditMetricsTokenMutationResult = NonNullable<Awaited<ReturnType<typeof editMetricsToken>>>
    export type EditMetricsTokenMutationBody = MetricsTokenUpdateOVH
    export type EditMetricsTokenMutationError = unknown

    /**
 * @summary Modify a token
 */
export const useEditMetricsToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editMetricsToken>>, TError,{serviceName: string;tokenId: string;data: MetricsTokenUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof editMetricsToken>>,
        TError,
        {serviceName: string;tokenId: string;data: MetricsTokenUpdateOVH},
        TContext
      > => {

      const mutationOptions = getEditMetricsTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

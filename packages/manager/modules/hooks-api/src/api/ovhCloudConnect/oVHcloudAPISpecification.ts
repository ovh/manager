/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetOvhCloudConnectParams,
  GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams,
  OvhcloudconnectDatacenterConfigOVH,
  OvhcloudconnectDatacenterExtraConfigOVH,
  OvhcloudconnectDatacenterOVH,
  OvhcloudconnectDiagnosticConfigurationOVH,
  OvhcloudconnectDiagnosticOVH,
  OvhcloudconnectIncidentOVH,
  OvhcloudconnectInterfaceOVH,
  OvhcloudconnectKeyOVH,
  OvhcloudconnectMetricsOVH,
  OvhcloudconnectMonitoringOVH,
  OvhcloudconnectOrderOVH,
  OvhcloudconnectPopConfigOVH,
  OvhcloudconnectSendKeyAnswerOVH,
  OvhcloudconnectServiceWithIAMOVH,
  OvhcloudconnectSubscriptionsOVH,
  OvhcloudconnectTaskOVH,
  OvhcloudconnectToOVH,
  OvhcloudconnectUpdateOVH,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getOvhCloudConnect = (
    params?: GetOvhCloudConnectParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ovhCloudConnect`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOvhCloudConnectQueryKey = (params?: GetOvhCloudConnectParams,) => {
    return [`/ovhCloudConnect`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOvhCloudConnectQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnect>>, TError = unknown>(params?: GetOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnect>>> = ({ signal }) => getOvhCloudConnect(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnect>>>
export type GetOvhCloudConnectQueryError = unknown


export function useGetOvhCloudConnect<TData = Awaited<ReturnType<typeof getOvhCloudConnect>>, TError = unknown>(
 params: undefined |  GetOvhCloudConnectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnect<TData = Awaited<ReturnType<typeof getOvhCloudConnect>>, TError = unknown>(
 params?: GetOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnect>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnect<TData = Awaited<ReturnType<typeof getOvhCloudConnect>>, TError = unknown>(
 params?: GetOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetOvhCloudConnect<TData = Awaited<ReturnType<typeof getOvhCloudConnect>>, TError = unknown>(
 params?: GetOvhCloudConnectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnect>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available orders
 */
export const getOvhCloudConnectOrder = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/ovhCloudConnect/order`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectOrderQueryKey = () => {
    return [`/ovhCloudConnect/order`] as const;
    }

    
export const getGetOvhCloudConnectOrderQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectOrderQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>> = ({ signal }) => getOvhCloudConnectOrder(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectOrderQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>>
export type GetOvhCloudConnectOrderQueryError = unknown


export function useGetOvhCloudConnectOrder<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectOrder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectOrder<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectOrder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectOrder<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available orders
 */

export function useGetOvhCloudConnectOrder<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectOrderQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Order
 */
export const getOvhCloudConnectOrderOrderName = (
    orderName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectOrderOVH>(
      {url: `/ovhCloudConnect/order/${orderName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectOrderOrderNameQueryKey = (orderName: string,) => {
    return [`/ovhCloudConnect/order/${orderName}`] as const;
    }

    
export const getGetOvhCloudConnectOrderOrderNameQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError = unknown>(orderName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectOrderOrderNameQueryKey(orderName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>> = ({ signal }) => getOvhCloudConnectOrderOrderName(orderName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectOrderOrderNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>>
export type GetOvhCloudConnectOrderOrderNameQueryError = unknown


export function useGetOvhCloudConnectOrderOrderName<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError = unknown>(
 orderName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectOrderOrderName<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError = unknown>(
 orderName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectOrderOrderName<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError = unknown>(
 orderName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Order
 */

export function useGetOvhCloudConnectOrderOrderName<TData = Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError = unknown>(
 orderName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectOrderOrderName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectOrderOrderNameQueryOptions(orderName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service
 */
export const getOvhCloudConnectServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectServiceWithIAMOVH>(
      {url: `/ovhCloudConnect/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>> = ({ signal }) => getOvhCloudConnectServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>>
export type GetOvhCloudConnectServiceNameQueryError = unknown


export function useGetOvhCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service
 */

export function useGetOvhCloudConnectServiceName<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify service
 */
export const putOvhCloudConnectServiceName = (
    serviceName: string,
    ovhcloudconnectUpdateOVH: OvhcloudconnectUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ovhCloudConnect/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectUpdateOVH
    },
      options);
    }
  


export const getPutOvhCloudConnectServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOvhCloudConnectServiceName>>, TError,{serviceName: string;data: OvhcloudconnectUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOvhCloudConnectServiceName>>, TError,{serviceName: string;data: OvhcloudconnectUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOvhCloudConnectServiceName>>, {serviceName: string;data: OvhcloudconnectUpdateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putOvhCloudConnectServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOvhCloudConnectServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putOvhCloudConnectServiceName>>>
    export type PutOvhCloudConnectServiceNameMutationBody = OvhcloudconnectUpdateOVH
    export type PutOvhCloudConnectServiceNameMutationError = unknown

    /**
 * @summary Modify service
 */
export const usePutOvhCloudConnectServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOvhCloudConnectServiceName>>, TError,{serviceName: string;data: OvhcloudconnectUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOvhCloudConnectServiceName>>,
        TError,
        {serviceName: string;data: OvhcloudconnectUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutOvhCloudConnectServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postOvhCloudConnectServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOvhCloudConnectServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameChangeContact>>>
    export type PostOvhCloudConnectServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostOvhCloudConnectServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostOvhCloudConnectServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Pop Configuration linked to of a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameConfigPop = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameConfigPopQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/config/pop`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameConfigPopQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameConfigPopQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>> = ({ signal }) => getOvhCloudConnectServiceNameConfigPop(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameConfigPopQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>>
export type GetOvhCloudConnectServiceNameConfigPopQueryError = unknown


export function useGetOvhCloudConnectServiceNameConfigPop<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPop<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPop<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Pop Configuration linked to of a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameConfigPop<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPop>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameConfigPopQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a Pop Configuration
 */
export const postOvhCloudConnectServiceNameConfigPop = (
    serviceName: string,
    ovhcloudconnectPopConfigOVH: NonReadonly<OvhcloudconnectPopConfigOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectPopConfigOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameConfigPopMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPop>>, TError,{serviceName: string;data: NonReadonly<OvhcloudconnectPopConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPop>>, TError,{serviceName: string;data: NonReadonly<OvhcloudconnectPopConfigOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPop>>, {serviceName: string;data: NonReadonly<OvhcloudconnectPopConfigOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOvhCloudConnectServiceNameConfigPop(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameConfigPopMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPop>>>
    export type PostOvhCloudConnectServiceNameConfigPopMutationBody = NonReadonly<OvhcloudconnectPopConfigOVH>
    export type PostOvhCloudConnectServiceNameConfigPopMutationError = unknown

    /**
 * @summary Create a Pop Configuration
 */
export const usePostOvhCloudConnectServiceNameConfigPop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPop>>, TError,{serviceName: string;data: NonReadonly<OvhcloudconnectPopConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPop>>,
        TError,
        {serviceName: string;data: NonReadonly<OvhcloudconnectPopConfigOVH>},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameConfigPopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a Pop Configuration
 */
export const deleteOvhCloudConnectServiceNameConfigPopPopId = (
    serviceName: string,
    popId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOvhCloudConnectServiceNameConfigPopPopIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopId>>, TError,{serviceName: string;popId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopId>>, TError,{serviceName: string;popId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopId>>, {serviceName: string;popId: number}> = (props) => {
          const {serviceName,popId} = props ?? {};

          return  deleteOvhCloudConnectServiceNameConfigPopPopId(serviceName,popId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOvhCloudConnectServiceNameConfigPopPopIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopId>>>
    
    export type DeleteOvhCloudConnectServiceNameConfigPopPopIdMutationError = unknown

    /**
 * @summary Delete a Pop Configuration
 */
export const useDeleteOvhCloudConnectServiceNameConfigPopPopId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopId>>, TError,{serviceName: string;popId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopId>>,
        TError,
        {serviceName: string;popId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOvhCloudConnectServiceNameConfigPopPopIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Pop Configuration of a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameConfigPopPopId = (
    serviceName: string,
    popId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectPopConfigOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameConfigPopPopIdQueryKey = (serviceName: string,
    popId: number,) => {
    return [`/ovhCloudConnect/${serviceName}/config/pop/${popId}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameConfigPopPopIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError = unknown>(serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameConfigPopPopIdQueryKey(serviceName,popId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>> = ({ signal }) => getOvhCloudConnectServiceNameConfigPopPopId(serviceName,popId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && popId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameConfigPopPopIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>>
export type GetOvhCloudConnectServiceNameConfigPopPopIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameConfigPopPopId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError = unknown>(
 serviceName: string,
    popId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError = unknown>(
 serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError = unknown>(
 serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Pop Configuration of a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameConfigPopPopId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError = unknown>(
 serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameConfigPopPopIdQueryOptions(serviceName,popId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Datacenter Configuration linked to of a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameConfigPopPopIdDatacenter = (
    serviceName: string,
    popId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterQueryKey = (serviceName: string,
    popId: number,) => {
    return [`/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError = unknown>(serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterQueryKey(serviceName,popId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>> = ({ signal }) => getOvhCloudConnectServiceNameConfigPopPopIdDatacenter(serviceName,popId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && popId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>>
export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterQueryError = unknown


export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError = unknown>(
 serviceName: string,
    popId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError = unknown>(
 serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError = unknown>(
 serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Datacenter Configuration linked to of a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError = unknown>(
 serviceName: string,
    popId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterQueryOptions(serviceName,popId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a Datacenter Configuration
 */
export const postOvhCloudConnectServiceNameConfigPopPopIdDatacenter = (
    serviceName: string,
    popId: number,
    ovhcloudconnectDatacenterConfigOVH: NonReadonly<OvhcloudconnectDatacenterConfigOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectDatacenterConfigOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameConfigPopPopIdDatacenterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError,{serviceName: string;popId: number;data: NonReadonly<OvhcloudconnectDatacenterConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError,{serviceName: string;popId: number;data: NonReadonly<OvhcloudconnectDatacenterConfigOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, {serviceName: string;popId: number;data: NonReadonly<OvhcloudconnectDatacenterConfigOVH>}> = (props) => {
          const {serviceName,popId,data} = props ?? {};

          return  postOvhCloudConnectServiceNameConfigPopPopIdDatacenter(serviceName,popId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>>
    export type PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterMutationBody = NonReadonly<OvhcloudconnectDatacenterConfigOVH>
    export type PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterMutationError = unknown

    /**
 * @summary Create a Datacenter Configuration
 */
export const usePostOvhCloudConnectServiceNameConfigPopPopIdDatacenter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>, TError,{serviceName: string;popId: number;data: NonReadonly<OvhcloudconnectDatacenterConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenter>>,
        TError,
        {serviceName: string;popId: number;data: NonReadonly<OvhcloudconnectDatacenterConfigOVH>},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameConfigPopPopIdDatacenterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a Datacenter Configuration
 */
export const deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId = (
    serviceName: string,
    popId: number,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError,{serviceName: string;popId: number;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError,{serviceName: string;popId: number;datacenterId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, {serviceName: string;popId: number;datacenterId: number}> = (props) => {
          const {serviceName,popId,datacenterId} = props ?? {};

          return  deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId(serviceName,popId,datacenterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>>
    
    export type DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdMutationError = unknown

    /**
 * @summary Delete a Datacenter Configuration
 */
export const useDeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError,{serviceName: string;popId: number;datacenterId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>,
        TError,
        {serviceName: string;popId: number;datacenterId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Datacenter Configuration of a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId = (
    serviceName: string,
    popId: number,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectDatacenterConfigOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdQueryKey = (serviceName: string,
    popId: number,
    datacenterId: number,) => {
    return [`/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError = unknown>(serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdQueryKey(serviceName,popId,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>> = ({ signal }) => getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId(serviceName,popId,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && popId && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>>
export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Datacenter Configuration of a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdQueryOptions(serviceName,popId,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Datacenter Extra Configuration linked to of a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra = (
    serviceName: string,
    popId: number,
    datacenterId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}/extra`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraQueryKey = (serviceName: string,
    popId: number,
    datacenterId: number,) => {
    return [`/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}/extra`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError = unknown>(serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraQueryKey(serviceName,popId,datacenterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>> = ({ signal }) => getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra(serviceName,popId,datacenterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && popId && datacenterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>>
export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraQueryError = unknown


export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Datacenter Extra Configuration linked to of a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraQueryOptions(serviceName,popId,datacenterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a Datacenter Extra Configuration
 */
export const postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra = (
    serviceName: string,
    popId: number,
    datacenterId: number,
    ovhcloudconnectDatacenterExtraConfigOVH: NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}/extra`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectDatacenterExtraConfigOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError,{serviceName: string;popId: number;datacenterId: number;data: NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError,{serviceName: string;popId: number;datacenterId: number;data: NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, {serviceName: string;popId: number;datacenterId: number;data: NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>}> = (props) => {
          const {serviceName,popId,datacenterId,data} = props ?? {};

          return  postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra(serviceName,popId,datacenterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>>
    export type PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraMutationBody = NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>
    export type PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraMutationError = unknown

    /**
 * @summary Create a Datacenter Extra Configuration
 */
export const usePostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>, TError,{serviceName: string;popId: number;datacenterId: number;data: NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtra>>,
        TError,
        {serviceName: string;popId: number;datacenterId: number;data: NonReadonly<OvhcloudconnectDatacenterExtraConfigOVH>},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a Datacenter Extra Configuration
 */
export const deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId = (
    serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}/extra/${extraId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError,{serviceName: string;popId: number;datacenterId: number;extraId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError,{serviceName: string;popId: number;datacenterId: number;extraId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, {serviceName: string;popId: number;datacenterId: number;extraId: number}> = (props) => {
          const {serviceName,popId,datacenterId,extraId} = props ?? {};

          return  deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId(serviceName,popId,datacenterId,extraId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>>
    
    export type DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdMutationError = unknown

    /**
 * @summary Delete a Datacenter Extra Configuration
 */
export const useDeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError,{serviceName: string;popId: number;datacenterId: number;extraId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>,
        TError,
        {serviceName: string;popId: number;datacenterId: number;extraId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Datacenter Extra Configuration of a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId = (
    serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectDatacenterExtraConfigOVH>(
      {url: `/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}/extra/${extraId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdQueryKey = (serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number,) => {
    return [`/ovhCloudConnect/${serviceName}/config/pop/${popId}/datacenter/${datacenterId}/extra/${extraId}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError = unknown>(serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdQueryKey(serviceName,popId,datacenterId,extraId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>> = ({ signal }) => getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId(serviceName,popId,datacenterId,extraId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && popId && datacenterId && extraId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>>
export type GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Datacenter Extra Configuration of a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError = unknown>(
 serviceName: string,
    popId: number,
    datacenterId: number,
    extraId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdQueryOptions(serviceName,popId,datacenterId,extraId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirm service termination
 */
export const postOvhCloudConnectServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/ovhCloudConnect/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOvhCloudConnectServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfirmTermination>>>
    export type PostOvhCloudConnectServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostOvhCloudConnectServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostOvhCloudConnectServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available Datacenter
 */
export const getOvhCloudConnectServiceNameDatacenter = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/datacenter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameDatacenterQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/datacenter`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameDatacenterQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>> = ({ signal }) => getOvhCloudConnectServiceNameDatacenter(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>>
export type GetOvhCloudConnectServiceNameDatacenterQueryError = unknown


export function useGetOvhCloudConnectServiceNameDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available Datacenter
 */

export function useGetOvhCloudConnectServiceNameDatacenter<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameDatacenterQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Datacenter
 */
export const getOvhCloudConnectServiceNameDatacenterId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectDatacenterOVH>(
      {url: `/ovhCloudConnect/${serviceName}/datacenter/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameDatacenterIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/ovhCloudConnect/${serviceName}/datacenter/${id}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameDatacenterIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameDatacenterIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>> = ({ signal }) => getOvhCloudConnectServiceNameDatacenterId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameDatacenterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>>
export type GetOvhCloudConnectServiceNameDatacenterIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Datacenter
 */

export function useGetOvhCloudConnectServiceNameDatacenterId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDatacenterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameDatacenterIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Diagnostics linked to a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameDiagnostic = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/diagnostic`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameDiagnosticQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/diagnostic`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameDiagnosticQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameDiagnosticQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>> = ({ signal }) => getOvhCloudConnectServiceNameDiagnostic(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameDiagnosticQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>>
export type GetOvhCloudConnectServiceNameDiagnosticQueryError = unknown


export function useGetOvhCloudConnectServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Diagnostics linked to a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameDiagnostic<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnostic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameDiagnosticQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a Diagnostic linked to a OVHcloud Connect Service
 */
export const postOvhCloudConnectServiceNameDiagnostic = (
    serviceName: string,
    ovhcloudconnectDiagnosticConfigurationOVH: OvhcloudconnectDiagnosticConfigurationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectDiagnosticOVH>(
      {url: `/ovhCloudConnect/${serviceName}/diagnostic`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectDiagnosticConfigurationOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameDiagnosticMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameDiagnostic>>, TError,{serviceName: string;data: OvhcloudconnectDiagnosticConfigurationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameDiagnostic>>, TError,{serviceName: string;data: OvhcloudconnectDiagnosticConfigurationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameDiagnostic>>, {serviceName: string;data: OvhcloudconnectDiagnosticConfigurationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOvhCloudConnectServiceNameDiagnostic(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameDiagnosticMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameDiagnostic>>>
    export type PostOvhCloudConnectServiceNameDiagnosticMutationBody = OvhcloudconnectDiagnosticConfigurationOVH
    export type PostOvhCloudConnectServiceNameDiagnosticMutationError = unknown

    /**
 * @summary Create a Diagnostic linked to a OVHcloud Connect Service
 */
export const usePostOvhCloudConnectServiceNameDiagnostic = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameDiagnostic>>, TError,{serviceName: string;data: OvhcloudconnectDiagnosticConfigurationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameDiagnostic>>,
        TError,
        {serviceName: string;data: OvhcloudconnectDiagnosticConfigurationOVH},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameDiagnosticMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Diagnostic linked to a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameDiagnosticId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectDiagnosticOVH>(
      {url: `/ovhCloudConnect/${serviceName}/diagnostic/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameDiagnosticIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/ovhCloudConnect/${serviceName}/diagnostic/${id}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameDiagnosticIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameDiagnosticIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>> = ({ signal }) => getOvhCloudConnectServiceNameDiagnosticId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameDiagnosticIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>>
export type GetOvhCloudConnectServiceNameDiagnosticIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameDiagnosticId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDiagnosticId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameDiagnosticId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Diagnostic linked to a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameDiagnosticId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameDiagnosticId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameDiagnosticIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List incidents linked to the Service
 */
export const getOvhCloudConnectServiceNameIncident = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/incident`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameIncidentQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/incident`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameIncidentQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameIncidentQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>> = ({ signal }) => getOvhCloudConnectServiceNameIncident(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameIncidentQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>>
export type GetOvhCloudConnectServiceNameIncidentQueryError = unknown


export function useGetOvhCloudConnectServiceNameIncident<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameIncident<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameIncident<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List incidents linked to the Service
 */

export function useGetOvhCloudConnectServiceNameIncident<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncident>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameIncidentQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the incident information
 */
export const getOvhCloudConnectServiceNameIncidentId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectIncidentOVH>(
      {url: `/ovhCloudConnect/${serviceName}/incident/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameIncidentIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/ovhCloudConnect/${serviceName}/incident/${id}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameIncidentIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameIncidentIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>> = ({ signal }) => getOvhCloudConnectServiceNameIncidentId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameIncidentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>>
export type GetOvhCloudConnectServiceNameIncidentIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameIncidentId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameIncidentId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameIncidentId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the incident information
 */

export function useGetOvhCloudConnectServiceNameIncidentId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameIncidentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameIncidentIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List interfaces linked to the Service
 */
export const getOvhCloudConnectServiceNameInterface = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/interface`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameInterfaceQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/interface`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameInterfaceQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameInterfaceQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>> = ({ signal }) => getOvhCloudConnectServiceNameInterface(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameInterfaceQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>>
export type GetOvhCloudConnectServiceNameInterfaceQueryError = unknown


export function useGetOvhCloudConnectServiceNameInterface<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameInterface<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameInterface<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List interfaces linked to the Service
 */

export function useGetOvhCloudConnectServiceNameInterface<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterface>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameInterfaceQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the Interface information
 */
export const getOvhCloudConnectServiceNameInterfaceId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectInterfaceOVH>(
      {url: `/ovhCloudConnect/${serviceName}/interface/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameInterfaceIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/ovhCloudConnect/${serviceName}/interface/${id}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameInterfaceIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameInterfaceIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>> = ({ signal }) => getOvhCloudConnectServiceNameInterfaceId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameInterfaceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>>
export type GetOvhCloudConnectServiceNameInterfaceIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameInterfaceId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameInterfaceId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameInterfaceId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the Interface information
 */

export function useGetOvhCloudConnectServiceNameInterfaceId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameInterfaceIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lock the port
 */
export const postOvhCloudConnectServiceNameInterfaceIdLock = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/interface/${id}/lock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameInterfaceIdLockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdLock>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdLock>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdLock>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postOvhCloudConnectServiceNameInterfaceIdLock(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameInterfaceIdLockMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdLock>>>
    
    export type PostOvhCloudConnectServiceNameInterfaceIdLockMutationError = unknown

    /**
 * @summary Lock the port
 */
export const usePostOvhCloudConnectServiceNameInterfaceIdLock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdLock>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdLock>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameInterfaceIdLockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Statistics for an OCC interface for a given type
 */
export const getOvhCloudConnectServiceNameInterfaceIdStatistics = (
    serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectMetricsOVH[]>(
      {url: `/ovhCloudConnect/${serviceName}/interface/${id}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameInterfaceIdStatisticsQueryKey = (serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams,) => {
    return [`/ovhCloudConnect/${serviceName}/interface/${id}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOvhCloudConnectServiceNameInterfaceIdStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError = unknown>(serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameInterfaceIdStatisticsQueryKey(serviceName,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>> = ({ signal }) => getOvhCloudConnectServiceNameInterfaceIdStatistics(serviceName,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameInterfaceIdStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>>
export type GetOvhCloudConnectServiceNameInterfaceIdStatisticsQueryError = unknown


export function useGetOvhCloudConnectServiceNameInterfaceIdStatistics<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameInterfaceIdStatistics<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameInterfaceIdStatistics<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Statistics for an OCC interface for a given type
 */

export function useGetOvhCloudConnectServiceNameInterfaceIdStatistics<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetOvhCloudConnectServiceNameInterfaceIdStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameInterfaceIdStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameInterfaceIdStatisticsQueryOptions(serviceName,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Unlock the port
 */
export const postOvhCloudConnectServiceNameInterfaceIdUnlock = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/interface/${id}/unlock`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameInterfaceIdUnlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdUnlock>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdUnlock>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdUnlock>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  postOvhCloudConnectServiceNameInterfaceIdUnlock(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameInterfaceIdUnlockMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdUnlock>>>
    
    export type PostOvhCloudConnectServiceNameInterfaceIdUnlockMutationError = unknown

    /**
 * @summary Unlock the port
 */
export const usePostOvhCloudConnectServiceNameInterfaceIdUnlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdUnlock>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameInterfaceIdUnlock>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameInterfaceIdUnlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a loa for a service
 */
export const postOvhCloudConnectServiceNameLoa = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/ovhCloudConnect/${serviceName}/loa`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameLoaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameLoa>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameLoa>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameLoa>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postOvhCloudConnectServiceNameLoa(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameLoaMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameLoa>>>
    
    export type PostOvhCloudConnectServiceNameLoaMutationError = unknown

    /**
 * @summary Generate a loa for a service
 */
export const usePostOvhCloudConnectServiceNameLoa = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameLoa>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameLoa>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameLoaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete monitoring
 */
export const deleteOvhCloudConnectServiceNameMonitoring = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ovhCloudConnect/${serviceName}/monitoring`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOvhCloudConnectServiceNameMonitoringMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameMonitoring>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameMonitoring>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameMonitoring>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteOvhCloudConnectServiceNameMonitoring(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOvhCloudConnectServiceNameMonitoringMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameMonitoring>>>
    
    export type DeleteOvhCloudConnectServiceNameMonitoringMutationError = unknown

    /**
 * @summary Delete monitoring
 */
export const useDeleteOvhCloudConnectServiceNameMonitoring = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameMonitoring>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOvhCloudConnectServiceNameMonitoring>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteOvhCloudConnectServiceNameMonitoringMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List monitoring alerts
 */
export const getOvhCloudConnectServiceNameMonitoring = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectMonitoringOVH[]>(
      {url: `/ovhCloudConnect/${serviceName}/monitoring`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameMonitoringQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/monitoring`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameMonitoringQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameMonitoringQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>> = ({ signal }) => getOvhCloudConnectServiceNameMonitoring(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameMonitoringQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>>
export type GetOvhCloudConnectServiceNameMonitoringQueryError = unknown


export function useGetOvhCloudConnectServiceNameMonitoring<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameMonitoring<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameMonitoring<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List monitoring alerts
 */

export function useGetOvhCloudConnectServiceNameMonitoring<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameMonitoring>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameMonitoringQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Monitor the Service
 */
export const postOvhCloudConnectServiceNameMonitoring = (
    serviceName: string,
    ovhcloudconnectSubscriptionsOVH: OvhcloudconnectSubscriptionsOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/ovhCloudConnect/${serviceName}/monitoring`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectSubscriptionsOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameMonitoringMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameMonitoring>>, TError,{serviceName: string;data: OvhcloudconnectSubscriptionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameMonitoring>>, TError,{serviceName: string;data: OvhcloudconnectSubscriptionsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameMonitoring>>, {serviceName: string;data: OvhcloudconnectSubscriptionsOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postOvhCloudConnectServiceNameMonitoring(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameMonitoringMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameMonitoring>>>
    export type PostOvhCloudConnectServiceNameMonitoringMutationBody = OvhcloudconnectSubscriptionsOVH
    export type PostOvhCloudConnectServiceNameMonitoringMutationError = unknown

    /**
 * @summary Monitor the Service
 */
export const usePostOvhCloudConnectServiceNameMonitoring = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameMonitoring>>, TError,{serviceName: string;data: OvhcloudconnectSubscriptionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameMonitoring>>,
        TError,
        {serviceName: string;data: OvhcloudconnectSubscriptionsOVH},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameMonitoringMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getOvhCloudConnectServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/ovhCloudConnect/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>> = ({ signal }) => getOvhCloudConnectServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>>
export type GetOvhCloudConnectServiceNameServiceInfosQueryError = unknown


export function useGetOvhCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetOvhCloudConnectServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putOvhCloudConnectServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/ovhCloudConnect/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutOvhCloudConnectServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOvhCloudConnectServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putOvhCloudConnectServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOvhCloudConnectServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putOvhCloudConnectServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOvhCloudConnectServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putOvhCloudConnectServiceNameServiceInfos>>>
    export type PutOvhCloudConnectServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutOvhCloudConnectServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutOvhCloudConnectServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOvhCloudConnectServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putOvhCloudConnectServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutOvhCloudConnectServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Keys linked to a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameServiceKey = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/serviceKey`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameServiceKeyQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/serviceKey`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameServiceKeyQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameServiceKeyQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>> = ({ signal }) => getOvhCloudConnectServiceNameServiceKey(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameServiceKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>>
export type GetOvhCloudConnectServiceNameServiceKeyQueryError = unknown


export function useGetOvhCloudConnectServiceNameServiceKey<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameServiceKey<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameServiceKey<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Keys linked to a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameServiceKey<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameServiceKeyQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Key linked to a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameServiceKeyServiceKeyId = (
    serviceName: string,
    serviceKeyId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectKeyOVH>(
      {url: `/ovhCloudConnect/${serviceName}/serviceKey/${serviceKeyId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameServiceKeyServiceKeyIdQueryKey = (serviceName: string,
    serviceKeyId: number,) => {
    return [`/ovhCloudConnect/${serviceName}/serviceKey/${serviceKeyId}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameServiceKeyServiceKeyIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError = unknown>(serviceName: string,
    serviceKeyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameServiceKeyServiceKeyIdQueryKey(serviceName,serviceKeyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>> = ({ signal }) => getOvhCloudConnectServiceNameServiceKeyServiceKeyId(serviceName,serviceKeyId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && serviceKeyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameServiceKeyServiceKeyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>>
export type GetOvhCloudConnectServiceNameServiceKeyServiceKeyIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameServiceKeyServiceKeyId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError = unknown>(
 serviceName: string,
    serviceKeyId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameServiceKeyServiceKeyId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError = unknown>(
 serviceName: string,
    serviceKeyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameServiceKeyServiceKeyId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError = unknown>(
 serviceName: string,
    serviceKeyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Key linked to a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameServiceKeyServiceKeyId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError = unknown>(
 serviceName: string,
    serviceKeyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameServiceKeyServiceKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameServiceKeyServiceKeyIdQueryOptions(serviceName,serviceKeyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Regenerate Service Key linked to a OVHcloud Connect Service
 */
export const postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate = (
    serviceName: string,
    serviceKeyId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectKeyOVH>(
      {url: `/ovhCloudConnect/${serviceName}/serviceKey/${serviceKeyId}/regenerate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate>>, TError,{serviceName: string;serviceKeyId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate>>, TError,{serviceName: string;serviceKeyId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate>>, {serviceName: string;serviceKeyId: number}> = (props) => {
          const {serviceName,serviceKeyId} = props ?? {};

          return  postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate(serviceName,serviceKeyId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate>>>
    
    export type PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateMutationError = unknown

    /**
 * @summary Regenerate Service Key linked to a OVHcloud Connect Service
 */
export const usePostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate>>, TError,{serviceName: string;serviceKeyId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerate>>,
        TError,
        {serviceName: string;serviceKeyId: number},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Send key value to customer
 */
export const postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend = (
    serviceName: string,
    serviceKeyId: number,
    ovhcloudconnectToOVH: OvhcloudconnectToOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectSendKeyAnswerOVH>(
      {url: `/ovhCloudConnect/${serviceName}/serviceKey/${serviceKeyId}/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ovhcloudconnectToOVH, signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend>>, TError,{serviceName: string;serviceKeyId: number;data: OvhcloudconnectToOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend>>, TError,{serviceName: string;serviceKeyId: number;data: OvhcloudconnectToOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend>>, {serviceName: string;serviceKeyId: number;data: OvhcloudconnectToOVH}> = (props) => {
          const {serviceName,serviceKeyId,data} = props ?? {};

          return  postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend(serviceName,serviceKeyId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend>>>
    export type PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendMutationBody = OvhcloudconnectToOVH
    export type PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendMutationError = unknown

    /**
 * @summary Send key value to customer
 */
export const usePostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend>>, TError,{serviceName: string;serviceKeyId: number;data: OvhcloudconnectToOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameServiceKeyServiceKeyIdSend>>,
        TError,
        {serviceName: string;serviceKeyId: number;data: OvhcloudconnectToOVH},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Task linked to a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/ovhCloudConnect/${serviceName}/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameTaskQueryKey = (serviceName: string,) => {
    return [`/ovhCloudConnect/${serviceName}/task`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>> = ({ signal }) => getOvhCloudConnectServiceNameTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>>
export type GetOvhCloudConnectServiceNameTaskQueryError = unknown


export function useGetOvhCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Task linked to a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameTask<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Tasks linked to a OVHcloud Connect Service
 */
export const getOvhCloudConnectServiceNameTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<OvhcloudconnectTaskOVH>(
      {url: `/ovhCloudConnect/${serviceName}/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOvhCloudConnectServiceNameTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/ovhCloudConnect/${serviceName}/task/${id}`] as const;
    }

    
export const getGetOvhCloudConnectServiceNameTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOvhCloudConnectServiceNameTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>> = ({ signal }) => getOvhCloudConnectServiceNameTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOvhCloudConnectServiceNameTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>>
export type GetOvhCloudConnectServiceNameTaskIdQueryError = unknown


export function useGetOvhCloudConnectServiceNameTaskId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameTaskId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOvhCloudConnectServiceNameTaskId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Tasks linked to a OVHcloud Connect Service
 */

export function useGetOvhCloudConnectServiceNameTaskId<TData = Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOvhCloudConnectServiceNameTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOvhCloudConnectServiceNameTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for the termination of your service
 */
export const postOvhCloudConnectServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/ovhCloudConnect/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostOvhCloudConnectServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postOvhCloudConnectServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOvhCloudConnectServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameTerminate>>>
    
    export type PostOvhCloudConnectServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostOvhCloudConnectServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOvhCloudConnectServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postOvhCloudConnectServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostOvhCloudConnectServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseVirtuozzoOrderableVersionsParams,
  GetLicenseVirtuozzoParams,
  GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams,
  GetLicenseVirtuozzoServiceNameOptionParams,
  GetLicenseVirtuozzoServiceNameTasksParams,
  IpBlockOVH,
  LicenseChangeIpStatusOVH,
  LicenseOptionLabelOVH,
  LicenseOptionOVH,
  LicenseTaskOVH,
  LicenseVirtuozzoOrderConfigurationOVH,
  LicenseVirtuozzoVirtuozzoOVH,
  LicenseVirtuozzoVirtuozzoWithIAMOVH,
  PostLicenseVirtuozzoServiceNameChangeIpBody,
  PostLicenseVirtuozzoServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseVirtuozzo = (
    params?: GetLicenseVirtuozzoParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/virtuozzo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoQueryKey = (params?: GetLicenseVirtuozzoParams,) => {
    return [`/license/virtuozzo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseVirtuozzoQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError = unknown>(params?: GetLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzo>>> = ({ signal }) => getLicenseVirtuozzo(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzo>>>
export type GetLicenseVirtuozzoQueryError = unknown


export function useGetLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError = unknown>(
 params: undefined |  GetLicenseVirtuozzoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError = unknown>(
 params?: GetLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError = unknown>(
 params?: GetLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseVirtuozzo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError = unknown>(
 params?: GetLicenseVirtuozzoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable Virtuozzo versions
 */
export const getLicenseVirtuozzoOrderableVersions = (
    params: GetLicenseVirtuozzoOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseVirtuozzoOrderConfigurationOVH[]>(
      {url: `/license/virtuozzo/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoOrderableVersionsQueryKey = (params: GetLicenseVirtuozzoOrderableVersionsParams,) => {
    return [`/license/virtuozzo/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseVirtuozzoOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError = unknown>(params: GetLicenseVirtuozzoOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>> = ({ signal }) => getLicenseVirtuozzoOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>>
export type GetLicenseVirtuozzoOrderableVersionsQueryError = unknown


export function useGetLicenseVirtuozzoOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError = unknown>(
 params: GetLicenseVirtuozzoOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError = unknown>(
 params: GetLicenseVirtuozzoOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError = unknown>(
 params: GetLicenseVirtuozzoOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable Virtuozzo versions
 */

export function useGetLicenseVirtuozzoOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError = unknown>(
 params: GetLicenseVirtuozzoOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseVirtuozzoServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseVirtuozzoVirtuozzoWithIAMOVH>(
      {url: `/license/virtuozzo/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/virtuozzo/${serviceName}`] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>> = ({ signal }) => getLicenseVirtuozzoServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>>
export type GetLicenseVirtuozzoServiceNameQueryError = unknown


export function useGetLicenseVirtuozzoServiceName<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceName<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceName<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseVirtuozzoServiceName<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseVirtuozzoServiceName = (
    serviceName: string,
    licenseVirtuozzoVirtuozzoOVH: NonReadonly<LicenseVirtuozzoVirtuozzoOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/virtuozzo/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseVirtuozzoVirtuozzoOVH
    },
      options);
    }
  


export const getPutLicenseVirtuozzoServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseVirtuozzoVirtuozzoOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseVirtuozzoVirtuozzoOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceName>>, {serviceName: string;data: NonReadonly<LicenseVirtuozzoVirtuozzoOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseVirtuozzoServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseVirtuozzoServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceName>>>
    export type PutLicenseVirtuozzoServiceNameMutationBody = NonReadonly<LicenseVirtuozzoVirtuozzoOVH>
    export type PutLicenseVirtuozzoServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseVirtuozzoServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseVirtuozzoVirtuozzoOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseVirtuozzoServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseVirtuozzoVirtuozzoOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseVirtuozzoServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns an array of ips where the license can be moved to
 */
export const getLicenseVirtuozzoServiceNameAllowedDestinationIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/license/virtuozzo/${serviceName}/allowedDestinationIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameAllowedDestinationIpQueryKey = (serviceName: string,) => {
    return [`/license/virtuozzo/${serviceName}/allowedDestinationIp`] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameAllowedDestinationIpQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameAllowedDestinationIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>> = ({ signal }) => getLicenseVirtuozzoServiceNameAllowedDestinationIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameAllowedDestinationIpQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>>
export type GetLicenseVirtuozzoServiceNameAllowedDestinationIpQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns an array of ips where the license can be moved to
 */

export function useGetLicenseVirtuozzoServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameAllowedDestinationIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Will tell if the ip can accept the license
 */
export const getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo = (
    serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseChangeIpStatusOVH>(
      {url: `/license/virtuozzo/${serviceName}/canLicenseBeMovedTo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameCanLicenseBeMovedToQueryKey = (serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams,) => {
    return [`/license/virtuozzo/${serviceName}/canLicenseBeMovedTo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameCanLicenseBeMovedToQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError = unknown>(serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameCanLicenseBeMovedToQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>> = ({ signal }) => getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>>
export type GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Will tell if the ip can accept the license
 */

export function useGetLicenseVirtuozzoServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameCanLicenseBeMovedToQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move this license to another Ip
 */
export const postLicenseVirtuozzoServiceNameChangeIp = (
    serviceName: string,
    postLicenseVirtuozzoServiceNameChangeIpBody: PostLicenseVirtuozzoServiceNameChangeIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/virtuozzo/${serviceName}/changeIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseVirtuozzoServiceNameChangeIpBody, signal
    },
      options);
    }
  


export const getPostLicenseVirtuozzoServiceNameChangeIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseVirtuozzoServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseVirtuozzoServiceNameChangeIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameChangeIp>>, {serviceName: string;data: PostLicenseVirtuozzoServiceNameChangeIpBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseVirtuozzoServiceNameChangeIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseVirtuozzoServiceNameChangeIpMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameChangeIp>>>
    export type PostLicenseVirtuozzoServiceNameChangeIpMutationBody = PostLicenseVirtuozzoServiceNameChangeIpBody
    export type PostLicenseVirtuozzoServiceNameChangeIpMutationError = unknown

    /**
 * @summary Move this license to another Ip
 */
export const usePostLicenseVirtuozzoServiceNameChangeIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseVirtuozzoServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameChangeIp>>,
        TError,
        {serviceName: string;data: PostLicenseVirtuozzoServiceNameChangeIpBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseVirtuozzoServiceNameChangeIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseVirtuozzoServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseVirtuozzoServiceNameConfirmTerminationBody: PostLicenseVirtuozzoServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/virtuozzo/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseVirtuozzoServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseVirtuozzoServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseVirtuozzoServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseVirtuozzoServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseVirtuozzoServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseVirtuozzoServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseVirtuozzoServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameConfirmTermination>>>
    export type PostLicenseVirtuozzoServiceNameConfirmTerminationMutationBody = PostLicenseVirtuozzoServiceNameConfirmTerminationBody
    export type PostLicenseVirtuozzoServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseVirtuozzoServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseVirtuozzoServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseVirtuozzoServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseVirtuozzoServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Options linked to this license
 */
export const getLicenseVirtuozzoServiceNameOption = (
    serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameOptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOptionLabelOVH[]>(
      {url: `/license/virtuozzo/${serviceName}/option`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameOptionQueryKey = (serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameOptionParams,) => {
    return [`/license/virtuozzo/${serviceName}/option`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameOptionQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError = unknown>(serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameOptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameOptionQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>> = ({ signal }) => getLicenseVirtuozzoServiceNameOption(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>>
export type GetLicenseVirtuozzoServiceNameOptionQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseVirtuozzoServiceNameOptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameOptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameOptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Options linked to this license
 */

export function useGetLicenseVirtuozzoServiceNameOption<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameOptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameOptionQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary release this Option
 */
export const deleteLicenseVirtuozzoServiceNameOptionLabel = (
    serviceName: string,
    label: LicenseOptionLabelOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/virtuozzo/${serviceName}/option/${label}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLicenseVirtuozzoServiceNameOptionLabelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseVirtuozzoServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseVirtuozzoServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLicenseVirtuozzoServiceNameOptionLabel>>, {serviceName: string;label: LicenseOptionLabelOVH}> = (props) => {
          const {serviceName,label} = props ?? {};

          return  deleteLicenseVirtuozzoServiceNameOptionLabel(serviceName,label,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLicenseVirtuozzoServiceNameOptionLabelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLicenseVirtuozzoServiceNameOptionLabel>>>
    
    export type DeleteLicenseVirtuozzoServiceNameOptionLabelMutationError = unknown

    /**
 * @summary release this Option
 */
export const useDeleteLicenseVirtuozzoServiceNameOptionLabel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseVirtuozzoServiceNameOptionLabel>>, TError,{serviceName: string;label: LicenseOptionLabelOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLicenseVirtuozzoServiceNameOptionLabel>>,
        TError,
        {serviceName: string;label: LicenseOptionLabelOVH},
        TContext
      > => {

      const mutationOptions = getDeleteLicenseVirtuozzoServiceNameOptionLabelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getLicenseVirtuozzoServiceNameOptionLabel = (
    serviceName: string,
    label: LicenseOptionLabelOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOptionOVH>(
      {url: `/license/virtuozzo/${serviceName}/option/${label}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameOptionLabelQueryKey = (serviceName: string,
    label: LicenseOptionLabelOVH,) => {
    return [`/license/virtuozzo/${serviceName}/option/${label}`] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameOptionLabelQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError = unknown>(serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameOptionLabelQueryKey(serviceName,label);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>> = ({ signal }) => getLicenseVirtuozzoServiceNameOptionLabel(serviceName,label, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && label), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameOptionLabelQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>>
export type GetLicenseVirtuozzoServiceNameOptionLabelQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseVirtuozzoServiceNameOptionLabel<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError = unknown>(
 serviceName: string,
    label: LicenseOptionLabelOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameOptionLabel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameOptionLabelQueryOptions(serviceName,label,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getLicenseVirtuozzoServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/virtuozzo/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/virtuozzo/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>> = ({ signal }) => getLicenseVirtuozzoServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>>
export type GetLicenseVirtuozzoServiceNameServiceInfosQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseVirtuozzoServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseVirtuozzoServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/virtuozzo/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseVirtuozzoServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseVirtuozzoServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseVirtuozzoServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceNameServiceInfos>>>
    export type PutLicenseVirtuozzoServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseVirtuozzoServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseVirtuozzoServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseVirtuozzoServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseVirtuozzoServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseVirtuozzoServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary tasks linked to this license
 */
export const getLicenseVirtuozzoServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/virtuozzo/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameTasksParams,) => {
    return [`/license/virtuozzo/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>> = ({ signal }) => getLicenseVirtuozzoServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>>
export type GetLicenseVirtuozzoServiceNameTasksQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseVirtuozzoServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary tasks linked to this license
 */

export function useGetLicenseVirtuozzoServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseVirtuozzoServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseVirtuozzoServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/virtuozzo/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseVirtuozzoServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/virtuozzo/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseVirtuozzoServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseVirtuozzoServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>> = ({ signal }) => getLicenseVirtuozzoServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseVirtuozzoServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>>
export type GetLicenseVirtuozzoServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseVirtuozzoServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseVirtuozzoServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseVirtuozzoServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseVirtuozzoServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseVirtuozzoServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseVirtuozzoServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/virtuozzo/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseVirtuozzoServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseVirtuozzoServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseVirtuozzoServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameTerminate>>>
    
    export type PostLicenseVirtuozzoServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseVirtuozzoServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseVirtuozzoServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseVirtuozzoServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedInstallationTemplateHardwareRaidOVH,
  DedicatedInstallationTemplateTemplatePartitioningSchemesOVH,
  DedicatedInstallationTemplateTemplatePartitionsOVH,
  DedicatedInstallationTemplateTemplatesOVH,
  DedicatedTemplateOsInfoOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary OVH operating system installation templates
 */
export const getDedicatedInstallationTemplate = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/installationTemplate`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateQueryKey = () => {
    return [`/dedicated/installationTemplate`] as const;
    }

    
export const getGetDedicatedInstallationTemplateQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>> = ({ signal }) => getDedicatedInstallationTemplate(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>>
export type GetDedicatedInstallationTemplateQueryError = unknown


export function useGetDedicatedInstallationTemplate<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplate<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplate<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary OVH operating system installation templates
 */

export function useGetDedicatedInstallationTemplate<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details about available distributions for dedicated servers
 */
export const getDedicatedInstallationTemplateTemplateInfos = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedTemplateOsInfoOVH[]>(
      {url: `/dedicated/installationTemplate/templateInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateInfosQueryKey = () => {
    return [`/dedicated/installationTemplate/templateInfos`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateInfosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateInfos(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>>
export type GetDedicatedInstallationTemplateTemplateInfosQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateInfos<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateInfos<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateInfos<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about available distributions for dedicated servers
 */

export function useGetDedicatedInstallationTemplateTemplateInfos<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateInfosQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedInstallationTemplateTemplateName = (
    templateName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateTemplatesOVH>(
      {url: `/dedicated/installationTemplate/${templateName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNameQueryKey = (templateName: string,) => {
    return [`/dedicated/installationTemplate/${templateName}`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError = unknown>(templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNameQueryKey(templateName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateName(templateName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>>
export type GetDedicatedInstallationTemplateTemplateNameQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNameQueryOptions(templateName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Partitioning schemes available on this template
 */
export const getDedicatedInstallationTemplateTemplateNamePartitionScheme = (
    templateName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/installationTemplate/${templateName}/partitionScheme`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeQueryKey = (templateName: string,) => {
    return [`/dedicated/installationTemplate/${templateName}/partitionScheme`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeQueryKey(templateName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateNamePartitionScheme(templateName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>>
export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Partitioning schemes available on this template
 */

export function useGetDedicatedInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeQueryOptions(templateName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateTemplatePartitioningSchemesOVH>(
      {url: `/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryKey = (templateName: string,
    schemeName: string,) => {
    return [`/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryKey(templateName,schemeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName(templateName,schemeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>>
export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryOptions(templateName,schemeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Hardware RAIDs defined in this partitioning scheme
 */
export const getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryKey = (templateName: string,
    schemeName: string,) => {
    return [`/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryKey(templateName,schemeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid(templateName,schemeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>>
export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Hardware RAIDs defined in this partitioning scheme
 */

export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryOptions(templateName,schemeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName = (
    templateName: string,
    schemeName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateHardwareRaidOVH>(
      {url: `/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryKey = (templateName: string,
    schemeName: string,
    name: string,) => {
    return [`/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid/${name}`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryKey(templateName,schemeName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(templateName,schemeName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>>
export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryOptions(templateName,schemeName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Partitions defined in this partitioning scheme
 */
export const getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryKey = (templateName: string,
    schemeName: string,) => {
    return [`/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryKey(templateName,schemeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition(templateName,schemeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>>
export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Partitions defined in this partitioning scheme
 */

export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryOptions(templateName,schemeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint = (
    templateName: string,
    schemeName: string,
    mountpoint: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateTemplatePartitionsOVH>(
      {url: `/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition/${mountpoint}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryKey = (templateName: string,
    schemeName: string,
    mountpoint: string,) => {
    return [`/dedicated/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition/${mountpoint}`] as const;
    }

    
export const getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryKey(templateName,schemeName,mountpoint);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>> = ({ signal }) => getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(templateName,schemeName,mountpoint, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName && mountpoint), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>>
export type GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryError = unknown


export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryOptions(templateName,schemeName,mountpoint,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DbaasLogsAliasOVH,
  DbaasLogsArchiveOVH,
  DbaasLogsArchiveUrlOVH,
  DbaasLogsClusterOVH,
  DbaasLogsClusterRetentionOVH,
  DbaasLogsClusterUpdateOVH,
  DbaasLogsDashboardOVH,
  DbaasLogsEncryptionKeyOVH,
  DbaasLogsEngineOVH,
  DbaasLogsFlowggerConfigurationOVH,
  DbaasLogsHelperOVH,
  DbaasLogsIndexOVH,
  DbaasLogsInputActionOVH,
  DbaasLogsInputConfigurationFlowggerUpdateOVH,
  DbaasLogsInputConfigurationLogstashUpdateOVH,
  DbaasLogsInputCreationOVH,
  DbaasLogsInputOVH,
  DbaasLogsInputUpdateOVH,
  DbaasLogsLogSubscriptionOVH,
  DbaasLogsLogstashConfigurationOVH,
  DbaasLogsMemberOVH,
  DbaasLogsOperationOVH,
  DbaasLogsOsdCreationOVH,
  DbaasLogsOsdOVH,
  DbaasLogsOsdUpdateOVH,
  DbaasLogsOutputGraylogDashboardCreationOVH,
  DbaasLogsOutputGraylogDashboardDuplicateCreationOVH,
  DbaasLogsOutputGraylogDashboardUpdateOVH,
  DbaasLogsOutputGraylogStreamAlertCreationOVH,
  DbaasLogsOutputGraylogStreamAlertUpdateOVH,
  DbaasLogsOutputGraylogStreamCreationOVH,
  DbaasLogsOutputGraylogStreamRuleCreationOVH,
  DbaasLogsOutputGraylogStreamUpdateOVH,
  DbaasLogsOutputOpenSearchAliasCreationOVH,
  DbaasLogsOutputOpenSearchAliasIndexCreationOVH,
  DbaasLogsOutputOpenSearchAliasStreamCreationOVH,
  DbaasLogsOutputOpenSearchAliasUpdateOVH,
  DbaasLogsOutputOpenSearchIndexCreationOVH,
  DbaasLogsOutputOpenSearchIndexUpdateOVH,
  DbaasLogsPermissionOVH,
  DbaasLogsRoleCreationOVH,
  DbaasLogsRoleMemberCreationOVH,
  DbaasLogsRoleMemberUpdateOVH,
  DbaasLogsRoleOVH,
  DbaasLogsRolePermissionAliasCreationOVH,
  DbaasLogsRolePermissionDashboardCreationOVH,
  DbaasLogsRolePermissionIndexCreationOVH,
  DbaasLogsRolePermissionOsdCreationOVH,
  DbaasLogsRolePermissionStreamCreationOVH,
  DbaasLogsRoleUpdateOVH,
  DbaasLogsServiceMetricOVH,
  DbaasLogsServiceWithIAMOVH,
  DbaasLogsStreamAlertConditionOVH,
  DbaasLogsStreamOVH,
  DbaasLogsStreamRuleOVH,
  DbaasLogsTemporaryLogsLinkOVH,
  DbaasLogsTestResultOVH,
  DbaasLogsTokenCreationOVH,
  DbaasLogsTokenOVH,
  DbaasLogsUpdateOVH,
  DbaasLogsUrlOVH,
  DbaasLogsUserChangePasswordCreationOVH,
  DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403,
  DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404,
  DeleteDbaasLogsServiceNameInputInputId403,
  DeleteDbaasLogsServiceNameInputInputId404,
  DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId403,
  DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId403,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId404,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId403,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404,
  DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404,
  DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId403,
  DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
  DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId403,
  DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId404,
  DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId403,
  DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId404,
  DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId403,
  DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
  DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId403,
  DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
  DeleteDbaasLogsServiceNameRoleRoleId403,
  DeleteDbaasLogsServiceNameRoleRoleId404,
  DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername403,
  DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername404,
  DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId403,
  DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404,
  DeleteDbaasLogsServiceNameTokenTokenId403,
  DeleteDbaasLogsServiceNameTokenTokenId404,
  GetDbaasLogsParams,
  GetDbaasLogsServiceName404,
  GetDbaasLogsServiceNameCluster404,
  GetDbaasLogsServiceNameClusterClusterId404,
  GetDbaasLogsServiceNameClusterClusterIdRetention403,
  GetDbaasLogsServiceNameClusterClusterIdRetention404,
  GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403,
  GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404,
  GetDbaasLogsServiceNameClusterParams,
  GetDbaasLogsServiceNameEncryptionKey404,
  GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403,
  GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404,
  GetDbaasLogsServiceNameEncryptionKeyParams,
  GetDbaasLogsServiceNameInput404,
  GetDbaasLogsServiceNameInputEngineEngineId404,
  GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404,
  GetDbaasLogsServiceNameInputInputId404,
  GetDbaasLogsServiceNameInputInputIdAction404,
  GetDbaasLogsServiceNameInputInputIdConfigtestResult404,
  GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404,
  GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404,
  GetDbaasLogsServiceNameInputInputIdUrl404,
  GetDbaasLogsServiceNameInputParams,
  GetDbaasLogsServiceNameMetrics404,
  GetDbaasLogsServiceNameOperation404,
  GetDbaasLogsServiceNameOperationOperationId404,
  GetDbaasLogsServiceNameOutputGraylogDashboard404,
  GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
  GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404,
  GetDbaasLogsServiceNameOutputGraylogDashboardParams,
  GetDbaasLogsServiceNameOutputGraylogStream404,
  GetDbaasLogsServiceNameOutputGraylogStreamParams,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamId404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404,
  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404,
  GetDbaasLogsServiceNameOutputOpensearchAlias404,
  GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
  GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404,
  GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404,
  GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404,
  GetDbaasLogsServiceNameOutputOpensearchAliasParams,
  GetDbaasLogsServiceNameOutputOpensearchIndex404,
  GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
  GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404,
  GetDbaasLogsServiceNameOutputOpensearchIndexParams,
  GetDbaasLogsServiceNameOutputOpensearchOsd404,
  GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
  GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404,
  GetDbaasLogsServiceNameRole403,
  GetDbaasLogsServiceNameRole404,
  GetDbaasLogsServiceNameRoleParams,
  GetDbaasLogsServiceNameRoleRoleId403,
  GetDbaasLogsServiceNameRoleRoleId404,
  GetDbaasLogsServiceNameRoleRoleIdMember403,
  GetDbaasLogsServiceNameRoleRoleIdMember404,
  GetDbaasLogsServiceNameRoleRoleIdMemberUsername403,
  GetDbaasLogsServiceNameRoleRoleIdMemberUsername404,
  GetDbaasLogsServiceNameRoleRoleIdPermission404,
  GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404,
  GetDbaasLogsServiceNameToken403,
  GetDbaasLogsServiceNameToken404,
  GetDbaasLogsServiceNameTokenParams,
  GetDbaasLogsServiceNameTokenTokenId403,
  GetDbaasLogsServiceNameTokenTokenId404,
  GetDbaasLogsServiceNameUrl404,
  PostDbaasLogsServiceNameEncryptionKey403,
  PostDbaasLogsServiceNameEncryptionKey404,
  PostDbaasLogsServiceNameEncryptionKey409,
  PostDbaasLogsServiceNameInput403,
  PostDbaasLogsServiceNameInput404,
  PostDbaasLogsServiceNameInput409,
  PostDbaasLogsServiceNameInputInputIdConfigtest403,
  PostDbaasLogsServiceNameInputInputIdConfigtest404,
  PostDbaasLogsServiceNameInputInputIdEnd403,
  PostDbaasLogsServiceNameInputInputIdEnd404,
  PostDbaasLogsServiceNameInputInputIdLogsUrl403,
  PostDbaasLogsServiceNameInputInputIdLogsUrl404,
  PostDbaasLogsServiceNameInputInputIdRestart403,
  PostDbaasLogsServiceNameInputInputIdRestart404,
  PostDbaasLogsServiceNameInputInputIdStart403,
  PostDbaasLogsServiceNameInputInputIdStart404,
  PostDbaasLogsServiceNameOutputGraylogDashboard403,
  PostDbaasLogsServiceNameOutputGraylogDashboard404,
  PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate403,
  PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate404,
  PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate409,
  PostDbaasLogsServiceNameOutputGraylogStream403,
  PostDbaasLogsServiceNameOutputGraylogStream404,
  PostDbaasLogsServiceNameOutputGraylogStream409,
  PostDbaasLogsServiceNameOutputGraylogStream501,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert403,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert409,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl404,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule403,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404,
  PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule409,
  PostDbaasLogsServiceNameOutputOpensearchAlias403,
  PostDbaasLogsServiceNameOutputOpensearchAlias404,
  PostDbaasLogsServiceNameOutputOpensearchAlias409,
  PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex403,
  PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404,
  PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream403,
  PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404,
  PostDbaasLogsServiceNameOutputOpensearchIndex403,
  PostDbaasLogsServiceNameOutputOpensearchIndex404,
  PostDbaasLogsServiceNameOutputOpensearchIndex409,
  PostDbaasLogsServiceNameOutputOpensearchOsd403,
  PostDbaasLogsServiceNameOutputOpensearchOsd404,
  PostDbaasLogsServiceNameRole402,
  PostDbaasLogsServiceNameRole403,
  PostDbaasLogsServiceNameRole404,
  PostDbaasLogsServiceNameRole409,
  PostDbaasLogsServiceNameRoleRoleIdMember403,
  PostDbaasLogsServiceNameRoleRoleIdMember404,
  PostDbaasLogsServiceNameRoleRoleIdPermissionAlias403,
  PostDbaasLogsServiceNameRoleRoleIdPermissionAlias404,
  PostDbaasLogsServiceNameRoleRoleIdPermissionAlias409,
  PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard403,
  PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard404,
  PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard409,
  PostDbaasLogsServiceNameRoleRoleIdPermissionIndex403,
  PostDbaasLogsServiceNameRoleRoleIdPermissionIndex404,
  PostDbaasLogsServiceNameRoleRoleIdPermissionIndex409,
  PostDbaasLogsServiceNameRoleRoleIdPermissionOsd403,
  PostDbaasLogsServiceNameRoleRoleIdPermissionOsd404,
  PostDbaasLogsServiceNameRoleRoleIdPermissionOsd409,
  PostDbaasLogsServiceNameRoleRoleIdPermissionStream403,
  PostDbaasLogsServiceNameRoleRoleIdPermissionStream404,
  PostDbaasLogsServiceNameRoleRoleIdPermissionStream409,
  PostDbaasLogsServiceNameToken403,
  PostDbaasLogsServiceNameToken404,
  PostDbaasLogsServiceNameToken409,
  PostDbaasLogsServiceNameUserChangePassword403,
  PostDbaasLogsServiceNameUserChangePassword404,
  PutDbaasLogsServiceName403,
  PutDbaasLogsServiceName404,
  PutDbaasLogsServiceName409,
  PutDbaasLogsServiceNameClusterClusterId403,
  PutDbaasLogsServiceNameClusterClusterId404,
  PutDbaasLogsServiceNameInputInputId403,
  PutDbaasLogsServiceNameInputInputId404,
  PutDbaasLogsServiceNameInputInputId409,
  PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger403,
  PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger404,
  PutDbaasLogsServiceNameInputInputIdConfigurationLogstash403,
  PutDbaasLogsServiceNameInputInputIdConfigurationLogstash404,
  PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId403,
  PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
  PutDbaasLogsServiceNameOutputGraylogStreamStreamId403,
  PutDbaasLogsServiceNameOutputGraylogStreamStreamId404,
  PutDbaasLogsServiceNameOutputGraylogStreamStreamId409,
  PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403,
  PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404,
  PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId409,
  PutDbaasLogsServiceNameOutputOpensearchAliasAliasId402,
  PutDbaasLogsServiceNameOutputOpensearchAliasAliasId403,
  PutDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
  PutDbaasLogsServiceNameOutputOpensearchIndexIndexId403,
  PutDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
  PutDbaasLogsServiceNameOutputOpensearchOsdOsdId403,
  PutDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
  PutDbaasLogsServiceNameRoleRoleId403,
  PutDbaasLogsServiceNameRoleRoleId404,
  PutDbaasLogsServiceNameRoleRoleIdMemberUsername403,
  PutDbaasLogsServiceNameRoleRoleIdMemberUsername404,
  ServicesChangeContactOVH,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getDbaasLogs = (
    params?: GetDbaasLogsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsQueryKey = (params?: GetDbaasLogsParams,) => {
    return [`/dbaas/logs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogs>>, TError = unknown>(params?: GetDbaasLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogs>>> = ({ signal }) => getDbaasLogs(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogs>>>
export type GetDbaasLogsQueryError = unknown


export function useGetDbaasLogs<TData = Awaited<ReturnType<typeof getDbaasLogs>>, TError = unknown>(
 params: undefined |  GetDbaasLogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogs<TData = Awaited<ReturnType<typeof getDbaasLogs>>, TError = unknown>(
 params?: GetDbaasLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogs>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogs<TData = Awaited<ReturnType<typeof getDbaasLogs>>, TError = unknown>(
 params?: GetDbaasLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetDbaasLogs<TData = Awaited<ReturnType<typeof getDbaasLogs>>, TError = unknown>(
 params?: GetDbaasLogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the service object of connected identity.
 */
export const getDbaasLogsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsServiceWithIAMOVH>(
      {url: `/dbaas/logs/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}`] as const;
    }

    
export const getGetDbaasLogsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError = GetDbaasLogsServiceName404>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceName>>> = ({ signal }) => getDbaasLogsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceName>>>
export type GetDbaasLogsServiceNameQueryError = GetDbaasLogsServiceName404


export function useGetDbaasLogsServiceName<TData = Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError = GetDbaasLogsServiceName404>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceName<TData = Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError = GetDbaasLogsServiceName404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceName<TData = Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError = GetDbaasLogsServiceName404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the service object of connected identity.
 */

export function useGetDbaasLogsServiceName<TData = Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError = GetDbaasLogsServiceName404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the service properties
 */
export const putDbaasLogsServiceName = (
    serviceName: string,
    dbaasLogsUpdateOVH: DbaasLogsUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameMutationOptions = <TError = PutDbaasLogsServiceName403 | PutDbaasLogsServiceName404 | PutDbaasLogsServiceName409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceName>>, TError,{serviceName: string;data: DbaasLogsUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceName>>, TError,{serviceName: string;data: DbaasLogsUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceName>>, {serviceName: string;data: DbaasLogsUpdateOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDbaasLogsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceName>>>
    export type PutDbaasLogsServiceNameMutationBody = DbaasLogsUpdateOVH
    export type PutDbaasLogsServiceNameMutationError = PutDbaasLogsServiceName403 | PutDbaasLogsServiceName404 | PutDbaasLogsServiceName409

    /**
 * @summary Update the service properties
 */
export const usePutDbaasLogsServiceName = <TError = PutDbaasLogsServiceName403 | PutDbaasLogsServiceName404 | PutDbaasLogsServiceName409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceName>>, TError,{serviceName: string;data: DbaasLogsUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceName>>,
        TError,
        {serviceName: string;data: DbaasLogsUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postDbaasLogsServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dbaas/logs/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameChangeContact>>>
    export type PostDbaasLogsServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostDbaasLogsServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDbaasLogsServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of allowed cluster
 */
export const getDbaasLogsServiceNameCluster = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameClusterParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/cluster`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameClusterQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameClusterParams,) => {
    return [`/dbaas/logs/${serviceName}/cluster`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameClusterQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError = GetDbaasLogsServiceNameCluster404>(serviceName: string,
    params?: GetDbaasLogsServiceNameClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameClusterQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>> = ({ signal }) => getDbaasLogsServiceNameCluster(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameClusterQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>>
export type GetDbaasLogsServiceNameClusterQueryError = GetDbaasLogsServiceNameCluster404


export function useGetDbaasLogsServiceNameCluster<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError = GetDbaasLogsServiceNameCluster404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameClusterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameCluster<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError = GetDbaasLogsServiceNameCluster404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameCluster<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError = GetDbaasLogsServiceNameCluster404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of allowed cluster
 */

export function useGetDbaasLogsServiceNameCluster<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError = GetDbaasLogsServiceNameCluster404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameClusterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameCluster>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameClusterQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns details of an allowed cluster
 */
export const getDbaasLogsServiceNameClusterClusterId = (
    serviceName: string,
    clusterId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsClusterOVH>(
      {url: `/dbaas/logs/${serviceName}/cluster/${clusterId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameClusterClusterIdQueryKey = (serviceName: string,
    clusterId: string,) => {
    return [`/dbaas/logs/${serviceName}/cluster/${clusterId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameClusterClusterIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError = GetDbaasLogsServiceNameClusterClusterId404>(serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameClusterClusterIdQueryKey(serviceName,clusterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>> = ({ signal }) => getDbaasLogsServiceNameClusterClusterId(serviceName,clusterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && clusterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameClusterClusterIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>>
export type GetDbaasLogsServiceNameClusterClusterIdQueryError = GetDbaasLogsServiceNameClusterClusterId404


export function useGetDbaasLogsServiceNameClusterClusterId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError = GetDbaasLogsServiceNameClusterClusterId404>(
 serviceName: string,
    clusterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameClusterClusterId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError = GetDbaasLogsServiceNameClusterClusterId404>(
 serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameClusterClusterId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError = GetDbaasLogsServiceNameClusterClusterId404>(
 serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of an allowed cluster
 */

export function useGetDbaasLogsServiceNameClusterClusterId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError = GetDbaasLogsServiceNameClusterClusterId404>(
 serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameClusterClusterIdQueryOptions(serviceName,clusterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update details of an allowed cluster
 */
export const putDbaasLogsServiceNameClusterClusterId = (
    serviceName: string,
    clusterId: string,
    dbaasLogsClusterUpdateOVH: DbaasLogsClusterUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/cluster/${clusterId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsClusterUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameClusterClusterIdMutationOptions = <TError = PutDbaasLogsServiceNameClusterClusterId403 | PutDbaasLogsServiceNameClusterClusterId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameClusterClusterId>>, TError,{serviceName: string;clusterId: string;data: DbaasLogsClusterUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameClusterClusterId>>, TError,{serviceName: string;clusterId: string;data: DbaasLogsClusterUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameClusterClusterId>>, {serviceName: string;clusterId: string;data: DbaasLogsClusterUpdateOVH}> = (props) => {
          const {serviceName,clusterId,data} = props ?? {};

          return  putDbaasLogsServiceNameClusterClusterId(serviceName,clusterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameClusterClusterIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameClusterClusterId>>>
    export type PutDbaasLogsServiceNameClusterClusterIdMutationBody = DbaasLogsClusterUpdateOVH
    export type PutDbaasLogsServiceNameClusterClusterIdMutationError = PutDbaasLogsServiceNameClusterClusterId403 | PutDbaasLogsServiceNameClusterClusterId404

    /**
 * @summary Update details of an allowed cluster
 */
export const usePutDbaasLogsServiceNameClusterClusterId = <TError = PutDbaasLogsServiceNameClusterClusterId403 | PutDbaasLogsServiceNameClusterClusterId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameClusterClusterId>>, TError,{serviceName: string;clusterId: string;data: DbaasLogsClusterUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameClusterClusterId>>,
        TError,
        {serviceName: string;clusterId: string;data: DbaasLogsClusterUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameClusterClusterIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all the retention ID available for a given cluster
 */
export const getDbaasLogsServiceNameClusterClusterIdRetention = (
    serviceName: string,
    clusterId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/cluster/${clusterId}/retention`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameClusterClusterIdRetentionQueryKey = (serviceName: string,
    clusterId: string,) => {
    return [`/dbaas/logs/${serviceName}/cluster/${clusterId}/retention`] as const;
    }

    
export const getGetDbaasLogsServiceNameClusterClusterIdRetentionQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetention403 | GetDbaasLogsServiceNameClusterClusterIdRetention404>(serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameClusterClusterIdRetentionQueryKey(serviceName,clusterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>> = ({ signal }) => getDbaasLogsServiceNameClusterClusterIdRetention(serviceName,clusterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && clusterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameClusterClusterIdRetentionQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>>
export type GetDbaasLogsServiceNameClusterClusterIdRetentionQueryError = GetDbaasLogsServiceNameClusterClusterIdRetention403 | GetDbaasLogsServiceNameClusterClusterIdRetention404


export function useGetDbaasLogsServiceNameClusterClusterIdRetention<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetention403 | GetDbaasLogsServiceNameClusterClusterIdRetention404>(
 serviceName: string,
    clusterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameClusterClusterIdRetention<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetention403 | GetDbaasLogsServiceNameClusterClusterIdRetention404>(
 serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameClusterClusterIdRetention<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetention403 | GetDbaasLogsServiceNameClusterClusterIdRetention404>(
 serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all the retention ID available for a given cluster
 */

export function useGetDbaasLogsServiceNameClusterClusterIdRetention<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetention403 | GetDbaasLogsServiceNameClusterClusterIdRetention404>(
 serviceName: string,
    clusterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetention>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameClusterClusterIdRetentionQueryOptions(serviceName,clusterId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns details of a retention
 */
export const getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId = (
    serviceName: string,
    clusterId: string,
    retentionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsClusterRetentionOVH>(
      {url: `/dbaas/logs/${serviceName}/cluster/${clusterId}/retention/${retentionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdQueryKey = (serviceName: string,
    clusterId: string,
    retentionId: string,) => {
    return [`/dbaas/logs/${serviceName}/cluster/${clusterId}/retention/${retentionId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403 | GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404>(serviceName: string,
    clusterId: string,
    retentionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdQueryKey(serviceName,clusterId,retentionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>> = ({ signal }) => getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId(serviceName,clusterId,retentionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && clusterId && retentionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>>
export type GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdQueryError = GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403 | GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404


export function useGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403 | GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404>(
 serviceName: string,
    clusterId: string,
    retentionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403 | GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404>(
 serviceName: string,
    clusterId: string,
    retentionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403 | GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404>(
 serviceName: string,
    clusterId: string,
    retentionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of a retention
 */

export function useGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError = GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId403 | GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionId404>(
 serviceName: string,
    clusterId: string,
    retentionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameClusterClusterIdRetentionRetentionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdQueryOptions(serviceName,clusterId,retentionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return the list of registred encryption keys
 */
export const getDbaasLogsServiceNameEncryptionKey = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameEncryptionKeyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/encryptionKey`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameEncryptionKeyQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameEncryptionKeyParams,) => {
    return [`/dbaas/logs/${serviceName}/encryptionKey`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameEncryptionKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError = GetDbaasLogsServiceNameEncryptionKey404>(serviceName: string,
    params?: GetDbaasLogsServiceNameEncryptionKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameEncryptionKeyQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>> = ({ signal }) => getDbaasLogsServiceNameEncryptionKey(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameEncryptionKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>>
export type GetDbaasLogsServiceNameEncryptionKeyQueryError = GetDbaasLogsServiceNameEncryptionKey404


export function useGetDbaasLogsServiceNameEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError = GetDbaasLogsServiceNameEncryptionKey404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameEncryptionKeyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError = GetDbaasLogsServiceNameEncryptionKey404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameEncryptionKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError = GetDbaasLogsServiceNameEncryptionKey404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameEncryptionKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return the list of registred encryption keys
 */

export function useGetDbaasLogsServiceNameEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError = GetDbaasLogsServiceNameEncryptionKey404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameEncryptionKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameEncryptionKeyQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new encryption key
 */
export const postDbaasLogsServiceNameEncryptionKey = (
    serviceName: string,
    dbaasLogsEncryptionKeyOVH: NonReadonly<DbaasLogsEncryptionKeyOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/encryptionKey`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsEncryptionKeyOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameEncryptionKeyMutationOptions = <TError = PostDbaasLogsServiceNameEncryptionKey403 | PostDbaasLogsServiceNameEncryptionKey404 | PostDbaasLogsServiceNameEncryptionKey409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameEncryptionKey>>, TError,{serviceName: string;data: NonReadonly<DbaasLogsEncryptionKeyOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameEncryptionKey>>, TError,{serviceName: string;data: NonReadonly<DbaasLogsEncryptionKeyOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameEncryptionKey>>, {serviceName: string;data: NonReadonly<DbaasLogsEncryptionKeyOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameEncryptionKey(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameEncryptionKeyMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameEncryptionKey>>>
    export type PostDbaasLogsServiceNameEncryptionKeyMutationBody = NonReadonly<DbaasLogsEncryptionKeyOVH>
    export type PostDbaasLogsServiceNameEncryptionKeyMutationError = PostDbaasLogsServiceNameEncryptionKey403 | PostDbaasLogsServiceNameEncryptionKey404 | PostDbaasLogsServiceNameEncryptionKey409

    /**
 * @summary Add a new encryption key
 */
export const usePostDbaasLogsServiceNameEncryptionKey = <TError = PostDbaasLogsServiceNameEncryptionKey403 | PostDbaasLogsServiceNameEncryptionKey404 | PostDbaasLogsServiceNameEncryptionKey409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameEncryptionKey>>, TError,{serviceName: string;data: NonReadonly<DbaasLogsEncryptionKeyOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameEncryptionKey>>,
        TError,
        {serviceName: string;data: NonReadonly<DbaasLogsEncryptionKeyOVH>},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameEncryptionKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the specified encryption key
 */
export const deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId = (
    serviceName: string,
    encryptionKeyId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/encryptionKey/${encryptionKeyId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdMutationOptions = <TError = DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError,{serviceName: string;encryptionKeyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError,{serviceName: string;encryptionKeyId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, {serviceName: string;encryptionKeyId: string}> = (props) => {
          const {serviceName,encryptionKeyId} = props ?? {};

          return  deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId(serviceName,encryptionKeyId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>>
    
    export type DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdMutationError = DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404

    /**
 * @summary Delete the specified encryption key
 */
export const useDeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId = <TError = DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError,{serviceName: string;encryptionKeyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>,
        TError,
        {serviceName: string;encryptionKeyId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return details of an encryption key
 */
export const getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId = (
    serviceName: string,
    encryptionKeyId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsEncryptionKeyOVH>(
      {url: `/dbaas/logs/${serviceName}/encryptionKey/${encryptionKeyId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdQueryKey = (serviceName: string,
    encryptionKeyId: string,) => {
    return [`/dbaas/logs/${serviceName}/encryptionKey/${encryptionKeyId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError = GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404>(serviceName: string,
    encryptionKeyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdQueryKey(serviceName,encryptionKeyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>> = ({ signal }) => getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId(serviceName,encryptionKeyId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && encryptionKeyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>>
export type GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdQueryError = GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404


export function useGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError = GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404>(
 serviceName: string,
    encryptionKeyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError = GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404>(
 serviceName: string,
    encryptionKeyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError = GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404>(
 serviceName: string,
    encryptionKeyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return details of an encryption key
 */

export function useGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError = GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId403 | GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyId404>(
 serviceName: string,
    encryptionKeyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameEncryptionKeyEncryptionKeyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdQueryOptions(serviceName,encryptionKeyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of registered input attached to the logged user
 */
export const getDbaasLogsServiceNameInput = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameInputParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/input`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameInputParams,) => {
    return [`/dbaas/logs/${serviceName}/input`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameInputQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError = GetDbaasLogsServiceNameInput404>(serviceName: string,
    params?: GetDbaasLogsServiceNameInputParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>> = ({ signal }) => getDbaasLogsServiceNameInput(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>>
export type GetDbaasLogsServiceNameInputQueryError = GetDbaasLogsServiceNameInput404


export function useGetDbaasLogsServiceNameInput<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError = GetDbaasLogsServiceNameInput404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameInputParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInput<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError = GetDbaasLogsServiceNameInput404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameInputParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInput<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError = GetDbaasLogsServiceNameInput404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameInputParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of registered input attached to the logged user
 */

export function useGetDbaasLogsServiceNameInput<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError = GetDbaasLogsServiceNameInput404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameInputParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInput>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new input object
 */
export const postDbaasLogsServiceNameInput = (
    serviceName: string,
    dbaasLogsInputCreationOVH: DbaasLogsInputCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsInputCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameInputMutationOptions = <TError = PostDbaasLogsServiceNameInput403 | PostDbaasLogsServiceNameInput404 | PostDbaasLogsServiceNameInput409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInput>>, TError,{serviceName: string;data: DbaasLogsInputCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInput>>, TError,{serviceName: string;data: DbaasLogsInputCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameInput>>, {serviceName: string;data: DbaasLogsInputCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameInput(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameInputMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameInput>>>
    export type PostDbaasLogsServiceNameInputMutationBody = DbaasLogsInputCreationOVH
    export type PostDbaasLogsServiceNameInputMutationError = PostDbaasLogsServiceNameInput403 | PostDbaasLogsServiceNameInput404 | PostDbaasLogsServiceNameInput409

    /**
 * @summary Register a new input object
 */
export const usePostDbaasLogsServiceNameInput = <TError = PostDbaasLogsServiceNameInput403 | PostDbaasLogsServiceNameInput404 | PostDbaasLogsServiceNameInput409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInput>>, TError,{serviceName: string;data: DbaasLogsInputCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameInput>>,
        TError,
        {serviceName: string;data: DbaasLogsInputCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameInputMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of available input engines
 */
export const getDbaasLogsServiceNameInputEngine = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/input/engine`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputEngineQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}/input/engine`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputEngineQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputEngineQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>> = ({ signal }) => getDbaasLogsServiceNameInputEngine(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputEngineQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>>
export type GetDbaasLogsServiceNameInputEngineQueryError = unknown


export function useGetDbaasLogsServiceNameInputEngine<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngine<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngine<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of available input engines
 */

export function useGetDbaasLogsServiceNameInputEngine<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngine>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputEngineQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns details of specified input engine
 */
export const getDbaasLogsServiceNameInputEngineEngineId = (
    serviceName: string,
    engineId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsEngineOVH>(
      {url: `/dbaas/logs/${serviceName}/input/engine/${engineId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputEngineEngineIdQueryKey = (serviceName: string,
    engineId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/engine/${engineId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputEngineEngineIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError = GetDbaasLogsServiceNameInputEngineEngineId404>(serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputEngineEngineIdQueryKey(serviceName,engineId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>> = ({ signal }) => getDbaasLogsServiceNameInputEngineEngineId(serviceName,engineId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && engineId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputEngineEngineIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>>
export type GetDbaasLogsServiceNameInputEngineEngineIdQueryError = GetDbaasLogsServiceNameInputEngineEngineId404


export function useGetDbaasLogsServiceNameInputEngineEngineId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError = GetDbaasLogsServiceNameInputEngineEngineId404>(
 serviceName: string,
    engineId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngineEngineId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError = GetDbaasLogsServiceNameInputEngineEngineId404>(
 serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngineEngineId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError = GetDbaasLogsServiceNameInputEngineEngineId404>(
 serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified input engine
 */

export function useGetDbaasLogsServiceNameInputEngineEngineId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError = GetDbaasLogsServiceNameInputEngineEngineId404>(
 serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputEngineEngineIdQueryOptions(serviceName,engineId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return the list of available helpers for the given input engine
 */
export const getDbaasLogsServiceNameInputEngineEngineIdHelper = (
    serviceName: string,
    engineId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/input/engine/${engineId}/helper`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputEngineEngineIdHelperQueryKey = (serviceName: string,
    engineId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/engine/${engineId}/helper`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputEngineEngineIdHelperQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError = unknown>(serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputEngineEngineIdHelperQueryKey(serviceName,engineId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>> = ({ signal }) => getDbaasLogsServiceNameInputEngineEngineIdHelper(serviceName,engineId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && engineId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputEngineEngineIdHelperQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>>
export type GetDbaasLogsServiceNameInputEngineEngineIdHelperQueryError = unknown


export function useGetDbaasLogsServiceNameInputEngineEngineIdHelper<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError = unknown>(
 serviceName: string,
    engineId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngineEngineIdHelper<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError = unknown>(
 serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngineEngineIdHelper<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError = unknown>(
 serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return the list of available helpers for the given input engine
 */

export function useGetDbaasLogsServiceNameInputEngineEngineIdHelper<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError = unknown>(
 serviceName: string,
    engineId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelper>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputEngineEngineIdHelperQueryOptions(serviceName,engineId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns details of specified input engine helper
 */
export const getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId = (
    serviceName: string,
    engineId: string,
    helperId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsHelperOVH>(
      {url: `/dbaas/logs/${serviceName}/input/engine/${engineId}/helper/${helperId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdQueryKey = (serviceName: string,
    engineId: string,
    helperId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/engine/${engineId}/helper/${helperId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError = GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404>(serviceName: string,
    engineId: string,
    helperId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdQueryKey(serviceName,engineId,helperId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>> = ({ signal }) => getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId(serviceName,engineId,helperId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && engineId && helperId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>>
export type GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdQueryError = GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404


export function useGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError = GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404>(
 serviceName: string,
    engineId: string,
    helperId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError = GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404>(
 serviceName: string,
    engineId: string,
    helperId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError = GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404>(
 serviceName: string,
    engineId: string,
    helperId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified input engine helper
 */

export function useGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError = GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperId404>(
 serviceName: string,
    engineId: string,
    helperId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputEngineEngineIdHelperHelperId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdQueryOptions(serviceName,engineId,helperId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Remove the specified input object
 */
export const deleteDbaasLogsServiceNameInputInputId = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameInputInputIdMutationOptions = <TError = DeleteDbaasLogsServiceNameInputInputId403 | DeleteDbaasLogsServiceNameInputInputId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameInputInputId>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameInputInputId>>, TError,{serviceName: string;inputId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameInputInputId>>, {serviceName: string;inputId: string}> = (props) => {
          const {serviceName,inputId} = props ?? {};

          return  deleteDbaasLogsServiceNameInputInputId(serviceName,inputId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameInputInputIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameInputInputId>>>
    
    export type DeleteDbaasLogsServiceNameInputInputIdMutationError = DeleteDbaasLogsServiceNameInputInputId403 | DeleteDbaasLogsServiceNameInputInputId404

    /**
 * @summary Remove the specified input object
 */
export const useDeleteDbaasLogsServiceNameInputInputId = <TError = DeleteDbaasLogsServiceNameInputInputId403 | DeleteDbaasLogsServiceNameInputInputId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameInputInputId>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameInputInputId>>,
        TError,
        {serviceName: string;inputId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameInputInputIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified input
 */
export const getDbaasLogsServiceNameInputInputId = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsInputOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputInputIdQueryKey = (serviceName: string,
    inputId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/${inputId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputInputIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError = GetDbaasLogsServiceNameInputInputId404>(serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputInputIdQueryKey(serviceName,inputId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>> = ({ signal }) => getDbaasLogsServiceNameInputInputId(serviceName,inputId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inputId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputInputIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>>
export type GetDbaasLogsServiceNameInputInputIdQueryError = GetDbaasLogsServiceNameInputInputId404


export function useGetDbaasLogsServiceNameInputInputId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError = GetDbaasLogsServiceNameInputInputId404>(
 serviceName: string,
    inputId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError = GetDbaasLogsServiceNameInputInputId404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError = GetDbaasLogsServiceNameInputInputId404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified input
 */

export function useGetDbaasLogsServiceNameInputInputId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError = GetDbaasLogsServiceNameInputInputId404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputInputIdQueryOptions(serviceName,inputId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update information of specified input object
 */
export const putDbaasLogsServiceNameInputInputId = (
    serviceName: string,
    inputId: string,
    dbaasLogsInputUpdateOVH: DbaasLogsInputUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsInputUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameInputInputIdMutationOptions = <TError = PutDbaasLogsServiceNameInputInputId403 | PutDbaasLogsServiceNameInputInputId404 | PutDbaasLogsServiceNameInputInputId409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputId>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputId>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputId>>, {serviceName: string;inputId: string;data: DbaasLogsInputUpdateOVH}> = (props) => {
          const {serviceName,inputId,data} = props ?? {};

          return  putDbaasLogsServiceNameInputInputId(serviceName,inputId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameInputInputIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputId>>>
    export type PutDbaasLogsServiceNameInputInputIdMutationBody = DbaasLogsInputUpdateOVH
    export type PutDbaasLogsServiceNameInputInputIdMutationError = PutDbaasLogsServiceNameInputInputId403 | PutDbaasLogsServiceNameInputInputId404 | PutDbaasLogsServiceNameInputInputId409

    /**
 * @summary Update information of specified input object
 */
export const usePutDbaasLogsServiceNameInputInputId = <TError = PutDbaasLogsServiceNameInputInputId403 | PutDbaasLogsServiceNameInputInputId404 | PutDbaasLogsServiceNameInputInputId409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputId>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputId>>,
        TError,
        {serviceName: string;inputId: string;data: DbaasLogsInputUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameInputInputIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns actions of specified input
 */
export const getDbaasLogsServiceNameInputInputIdAction = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsInputActionOVH[]>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/action`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputInputIdActionQueryKey = (serviceName: string,
    inputId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/${inputId}/action`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputInputIdActionQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError = GetDbaasLogsServiceNameInputInputIdAction404>(serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputInputIdActionQueryKey(serviceName,inputId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>> = ({ signal }) => getDbaasLogsServiceNameInputInputIdAction(serviceName,inputId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inputId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputInputIdActionQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>>
export type GetDbaasLogsServiceNameInputInputIdActionQueryError = GetDbaasLogsServiceNameInputInputIdAction404


export function useGetDbaasLogsServiceNameInputInputIdAction<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError = GetDbaasLogsServiceNameInputInputIdAction404>(
 serviceName: string,
    inputId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdAction<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError = GetDbaasLogsServiceNameInputInputIdAction404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdAction<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError = GetDbaasLogsServiceNameInputInputIdAction404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns actions of specified input
 */

export function useGetDbaasLogsServiceNameInputInputIdAction<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError = GetDbaasLogsServiceNameInputInputIdAction404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputInputIdActionQueryOptions(serviceName,inputId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Validate configuration of specified input
 */
export const postDbaasLogsServiceNameInputInputIdConfigtest = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/configtest`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameInputInputIdConfigtestMutationOptions = <TError = PostDbaasLogsServiceNameInputInputIdConfigtest403 | PostDbaasLogsServiceNameInputInputIdConfigtest404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdConfigtest>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdConfigtest>>, TError,{serviceName: string;inputId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdConfigtest>>, {serviceName: string;inputId: string}> = (props) => {
          const {serviceName,inputId} = props ?? {};

          return  postDbaasLogsServiceNameInputInputIdConfigtest(serviceName,inputId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameInputInputIdConfigtestMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdConfigtest>>>
    
    export type PostDbaasLogsServiceNameInputInputIdConfigtestMutationError = PostDbaasLogsServiceNameInputInputIdConfigtest403 | PostDbaasLogsServiceNameInputInputIdConfigtest404

    /**
 * @summary Validate configuration of specified input
 */
export const usePostDbaasLogsServiceNameInputInputIdConfigtest = <TError = PostDbaasLogsServiceNameInputInputIdConfigtest403 | PostDbaasLogsServiceNameInputInputIdConfigtest404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdConfigtest>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdConfigtest>>,
        TError,
        {serviceName: string;inputId: string},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameInputInputIdConfigtestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the config test operation result
 */
export const getDbaasLogsServiceNameInputInputIdConfigtestResult = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTestResultOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/configtest/result`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputInputIdConfigtestResultQueryKey = (serviceName: string,
    inputId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/${inputId}/configtest/result`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputInputIdConfigtestResultQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError = GetDbaasLogsServiceNameInputInputIdConfigtestResult404>(serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputInputIdConfigtestResultQueryKey(serviceName,inputId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>> = ({ signal }) => getDbaasLogsServiceNameInputInputIdConfigtestResult(serviceName,inputId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inputId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputInputIdConfigtestResultQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>>
export type GetDbaasLogsServiceNameInputInputIdConfigtestResultQueryError = GetDbaasLogsServiceNameInputInputIdConfigtestResult404


export function useGetDbaasLogsServiceNameInputInputIdConfigtestResult<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError = GetDbaasLogsServiceNameInputInputIdConfigtestResult404>(
 serviceName: string,
    inputId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdConfigtestResult<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError = GetDbaasLogsServiceNameInputInputIdConfigtestResult404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdConfigtestResult<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError = GetDbaasLogsServiceNameInputInputIdConfigtestResult404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the config test operation result
 */

export function useGetDbaasLogsServiceNameInputInputIdConfigtestResult<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError = GetDbaasLogsServiceNameInputInputIdConfigtestResult404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigtestResult>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputInputIdConfigtestResultQueryOptions(serviceName,inputId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the flowgger configuration
 */
export const getDbaasLogsServiceNameInputInputIdConfigurationFlowgger = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsFlowggerConfigurationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/configuration/flowgger`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputInputIdConfigurationFlowggerQueryKey = (serviceName: string,
    inputId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/${inputId}/configuration/flowgger`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputInputIdConfigurationFlowggerQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404>(serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputInputIdConfigurationFlowggerQueryKey(serviceName,inputId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>> = ({ signal }) => getDbaasLogsServiceNameInputInputIdConfigurationFlowgger(serviceName,inputId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inputId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputInputIdConfigurationFlowggerQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>>
export type GetDbaasLogsServiceNameInputInputIdConfigurationFlowggerQueryError = GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404


export function useGetDbaasLogsServiceNameInputInputIdConfigurationFlowgger<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404>(
 serviceName: string,
    inputId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdConfigurationFlowgger<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdConfigurationFlowgger<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the flowgger configuration
 */

export function useGetDbaasLogsServiceNameInputInputIdConfigurationFlowgger<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationFlowgger404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputInputIdConfigurationFlowggerQueryOptions(serviceName,inputId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the flowgger configuration
 */
export const putDbaasLogsServiceNameInputInputIdConfigurationFlowgger = (
    serviceName: string,
    inputId: string,
    dbaasLogsInputConfigurationFlowggerUpdateOVH: DbaasLogsInputConfigurationFlowggerUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/configuration/flowgger`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsInputConfigurationFlowggerUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameInputInputIdConfigurationFlowggerMutationOptions = <TError = PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger403 | PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputConfigurationFlowggerUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputConfigurationFlowggerUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, {serviceName: string;inputId: string;data: DbaasLogsInputConfigurationFlowggerUpdateOVH}> = (props) => {
          const {serviceName,inputId,data} = props ?? {};

          return  putDbaasLogsServiceNameInputInputIdConfigurationFlowgger(serviceName,inputId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameInputInputIdConfigurationFlowggerMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>>
    export type PutDbaasLogsServiceNameInputInputIdConfigurationFlowggerMutationBody = DbaasLogsInputConfigurationFlowggerUpdateOVH
    export type PutDbaasLogsServiceNameInputInputIdConfigurationFlowggerMutationError = PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger403 | PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger404

    /**
 * @summary Update the flowgger configuration
 */
export const usePutDbaasLogsServiceNameInputInputIdConfigurationFlowgger = <TError = PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger403 | PutDbaasLogsServiceNameInputInputIdConfigurationFlowgger404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputConfigurationFlowggerUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationFlowgger>>,
        TError,
        {serviceName: string;inputId: string;data: DbaasLogsInputConfigurationFlowggerUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameInputInputIdConfigurationFlowggerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the logstash configuration
 */
export const getDbaasLogsServiceNameInputInputIdConfigurationLogstash = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogstashConfigurationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/configuration/logstash`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputInputIdConfigurationLogstashQueryKey = (serviceName: string,
    inputId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/${inputId}/configuration/logstash`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputInputIdConfigurationLogstashQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404>(serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputInputIdConfigurationLogstashQueryKey(serviceName,inputId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>> = ({ signal }) => getDbaasLogsServiceNameInputInputIdConfigurationLogstash(serviceName,inputId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inputId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputInputIdConfigurationLogstashQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>>
export type GetDbaasLogsServiceNameInputInputIdConfigurationLogstashQueryError = GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404


export function useGetDbaasLogsServiceNameInputInputIdConfigurationLogstash<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404>(
 serviceName: string,
    inputId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdConfigurationLogstash<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdConfigurationLogstash<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the logstash configuration
 */

export function useGetDbaasLogsServiceNameInputInputIdConfigurationLogstash<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError = GetDbaasLogsServiceNameInputInputIdConfigurationLogstash404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputInputIdConfigurationLogstashQueryOptions(serviceName,inputId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the logstash configuration
 */
export const putDbaasLogsServiceNameInputInputIdConfigurationLogstash = (
    serviceName: string,
    inputId: string,
    dbaasLogsInputConfigurationLogstashUpdateOVH: DbaasLogsInputConfigurationLogstashUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/configuration/logstash`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsInputConfigurationLogstashUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameInputInputIdConfigurationLogstashMutationOptions = <TError = PutDbaasLogsServiceNameInputInputIdConfigurationLogstash403 | PutDbaasLogsServiceNameInputInputIdConfigurationLogstash404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputConfigurationLogstashUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputConfigurationLogstashUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, {serviceName: string;inputId: string;data: DbaasLogsInputConfigurationLogstashUpdateOVH}> = (props) => {
          const {serviceName,inputId,data} = props ?? {};

          return  putDbaasLogsServiceNameInputInputIdConfigurationLogstash(serviceName,inputId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameInputInputIdConfigurationLogstashMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationLogstash>>>
    export type PutDbaasLogsServiceNameInputInputIdConfigurationLogstashMutationBody = DbaasLogsInputConfigurationLogstashUpdateOVH
    export type PutDbaasLogsServiceNameInputInputIdConfigurationLogstashMutationError = PutDbaasLogsServiceNameInputInputIdConfigurationLogstash403 | PutDbaasLogsServiceNameInputInputIdConfigurationLogstash404

    /**
 * @summary Update the logstash configuration
 */
export const usePutDbaasLogsServiceNameInputInputIdConfigurationLogstash = <TError = PutDbaasLogsServiceNameInputInputIdConfigurationLogstash403 | PutDbaasLogsServiceNameInputInputIdConfigurationLogstash404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationLogstash>>, TError,{serviceName: string;inputId: string;data: DbaasLogsInputConfigurationLogstashUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameInputInputIdConfigurationLogstash>>,
        TError,
        {serviceName: string;inputId: string;data: DbaasLogsInputConfigurationLogstashUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameInputInputIdConfigurationLogstashMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Schedule the end of specified input
 */
export const postDbaasLogsServiceNameInputInputIdEnd = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/end`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameInputInputIdEndMutationOptions = <TError = PostDbaasLogsServiceNameInputInputIdEnd403 | PostDbaasLogsServiceNameInputInputIdEnd404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdEnd>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdEnd>>, TError,{serviceName: string;inputId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdEnd>>, {serviceName: string;inputId: string}> = (props) => {
          const {serviceName,inputId} = props ?? {};

          return  postDbaasLogsServiceNameInputInputIdEnd(serviceName,inputId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameInputInputIdEndMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdEnd>>>
    
    export type PostDbaasLogsServiceNameInputInputIdEndMutationError = PostDbaasLogsServiceNameInputInputIdEnd403 | PostDbaasLogsServiceNameInputInputIdEnd404

    /**
 * @summary Schedule the end of specified input
 */
export const usePostDbaasLogsServiceNameInputInputIdEnd = <TError = PostDbaasLogsServiceNameInputInputIdEnd403 | PostDbaasLogsServiceNameInputInputIdEnd404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdEnd>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdEnd>>,
        TError,
        {serviceName: string;inputId: string},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameInputInputIdEndMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate a temporary url to retrieve input logs
 */
export const postDbaasLogsServiceNameInputInputIdLogsUrl = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/logs/url`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameInputInputIdLogsUrlMutationOptions = <TError = PostDbaasLogsServiceNameInputInputIdLogsUrl403 | PostDbaasLogsServiceNameInputInputIdLogsUrl404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdLogsUrl>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdLogsUrl>>, TError,{serviceName: string;inputId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdLogsUrl>>, {serviceName: string;inputId: string}> = (props) => {
          const {serviceName,inputId} = props ?? {};

          return  postDbaasLogsServiceNameInputInputIdLogsUrl(serviceName,inputId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameInputInputIdLogsUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdLogsUrl>>>
    
    export type PostDbaasLogsServiceNameInputInputIdLogsUrlMutationError = PostDbaasLogsServiceNameInputInputIdLogsUrl403 | PostDbaasLogsServiceNameInputInputIdLogsUrl404

    /**
 * @summary Generate a temporary url to retrieve input logs
 */
export const usePostDbaasLogsServiceNameInputInputIdLogsUrl = <TError = PostDbaasLogsServiceNameInputInputIdLogsUrl403 | PostDbaasLogsServiceNameInputInputIdLogsUrl404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdLogsUrl>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdLogsUrl>>,
        TError,
        {serviceName: string;inputId: string},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameInputInputIdLogsUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Schedule the restart of specified input
 */
export const postDbaasLogsServiceNameInputInputIdRestart = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/restart`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameInputInputIdRestartMutationOptions = <TError = PostDbaasLogsServiceNameInputInputIdRestart403 | PostDbaasLogsServiceNameInputInputIdRestart404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdRestart>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdRestart>>, TError,{serviceName: string;inputId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdRestart>>, {serviceName: string;inputId: string}> = (props) => {
          const {serviceName,inputId} = props ?? {};

          return  postDbaasLogsServiceNameInputInputIdRestart(serviceName,inputId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameInputInputIdRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdRestart>>>
    
    export type PostDbaasLogsServiceNameInputInputIdRestartMutationError = PostDbaasLogsServiceNameInputInputIdRestart403 | PostDbaasLogsServiceNameInputInputIdRestart404

    /**
 * @summary Schedule the restart of specified input
 */
export const usePostDbaasLogsServiceNameInputInputIdRestart = <TError = PostDbaasLogsServiceNameInputInputIdRestart403 | PostDbaasLogsServiceNameInputInputIdRestart404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdRestart>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdRestart>>,
        TError,
        {serviceName: string;inputId: string},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameInputInputIdRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Schedule the start of specified input
 */
export const postDbaasLogsServiceNameInputInputIdStart = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/start`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameInputInputIdStartMutationOptions = <TError = PostDbaasLogsServiceNameInputInputIdStart403 | PostDbaasLogsServiceNameInputInputIdStart404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdStart>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdStart>>, TError,{serviceName: string;inputId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdStart>>, {serviceName: string;inputId: string}> = (props) => {
          const {serviceName,inputId} = props ?? {};

          return  postDbaasLogsServiceNameInputInputIdStart(serviceName,inputId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameInputInputIdStartMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdStart>>>
    
    export type PostDbaasLogsServiceNameInputInputIdStartMutationError = PostDbaasLogsServiceNameInputInputIdStart403 | PostDbaasLogsServiceNameInputInputIdStart404

    /**
 * @summary Schedule the start of specified input
 */
export const usePostDbaasLogsServiceNameInputInputIdStart = <TError = PostDbaasLogsServiceNameInputInputIdStart403 | PostDbaasLogsServiceNameInputInputIdStart404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdStart>>, TError,{serviceName: string;inputId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameInputInputIdStart>>,
        TError,
        {serviceName: string;inputId: string},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameInputInputIdStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of urls of specified input
 */
export const getDbaasLogsServiceNameInputInputIdUrl = (
    serviceName: string,
    inputId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/input/${inputId}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameInputInputIdUrlQueryKey = (serviceName: string,
    inputId: string,) => {
    return [`/dbaas/logs/${serviceName}/input/${inputId}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameInputInputIdUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError = GetDbaasLogsServiceNameInputInputIdUrl404>(serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameInputInputIdUrlQueryKey(serviceName,inputId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>> = ({ signal }) => getDbaasLogsServiceNameInputInputIdUrl(serviceName,inputId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && inputId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameInputInputIdUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>>
export type GetDbaasLogsServiceNameInputInputIdUrlQueryError = GetDbaasLogsServiceNameInputInputIdUrl404


export function useGetDbaasLogsServiceNameInputInputIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError = GetDbaasLogsServiceNameInputInputIdUrl404>(
 serviceName: string,
    inputId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError = GetDbaasLogsServiceNameInputInputIdUrl404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameInputInputIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError = GetDbaasLogsServiceNameInputInputIdUrl404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of urls of specified input
 */

export function useGetDbaasLogsServiceNameInputInputIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError = GetDbaasLogsServiceNameInputInputIdUrl404>(
 serviceName: string,
    inputId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameInputInputIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameInputInputIdUrlQueryOptions(serviceName,inputId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns Metrics credentials
 */
export const getDbaasLogsServiceNameMetrics = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsServiceMetricOVH>(
      {url: `/dbaas/logs/${serviceName}/metrics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameMetricsQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}/metrics`] as const;
    }

    
export const getGetDbaasLogsServiceNameMetricsQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError = GetDbaasLogsServiceNameMetrics404>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameMetricsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>> = ({ signal }) => getDbaasLogsServiceNameMetrics(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>>
export type GetDbaasLogsServiceNameMetricsQueryError = GetDbaasLogsServiceNameMetrics404


export function useGetDbaasLogsServiceNameMetrics<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError = GetDbaasLogsServiceNameMetrics404>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameMetrics<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError = GetDbaasLogsServiceNameMetrics404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameMetrics<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError = GetDbaasLogsServiceNameMetrics404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns Metrics credentials
 */

export function useGetDbaasLogsServiceNameMetrics<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError = GetDbaasLogsServiceNameMetrics404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameMetrics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameMetricsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Latest operations
 */
export const getDbaasLogsServiceNameOperation = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/operation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOperationQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}/operation`] as const;
    }

    
export const getGetDbaasLogsServiceNameOperationQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError = GetDbaasLogsServiceNameOperation404>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOperationQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>> = ({ signal }) => getDbaasLogsServiceNameOperation(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>>
export type GetDbaasLogsServiceNameOperationQueryError = GetDbaasLogsServiceNameOperation404


export function useGetDbaasLogsServiceNameOperation<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError = GetDbaasLogsServiceNameOperation404>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOperation<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError = GetDbaasLogsServiceNameOperation404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOperation<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError = GetDbaasLogsServiceNameOperation404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Latest operations
 */

export function useGetDbaasLogsServiceNameOperation<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError = GetDbaasLogsServiceNameOperation404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOperationQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns details of specified operation
 */
export const getDbaasLogsServiceNameOperationOperationId = (
    serviceName: string,
    operationId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/operation/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOperationOperationIdQueryKey = (serviceName: string,
    operationId: string,) => {
    return [`/dbaas/logs/${serviceName}/operation/${operationId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOperationOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError = GetDbaasLogsServiceNameOperationOperationId404>(serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOperationOperationIdQueryKey(serviceName,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>> = ({ signal }) => getDbaasLogsServiceNameOperationOperationId(serviceName,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOperationOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>>
export type GetDbaasLogsServiceNameOperationOperationIdQueryError = GetDbaasLogsServiceNameOperationOperationId404


export function useGetDbaasLogsServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError = GetDbaasLogsServiceNameOperationOperationId404>(
 serviceName: string,
    operationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError = GetDbaasLogsServiceNameOperationOperationId404>(
 serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError = GetDbaasLogsServiceNameOperationOperationId404>(
 serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified operation
 */

export function useGetDbaasLogsServiceNameOperationOperationId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError = GetDbaasLogsServiceNameOperationOperationId404>(
 serviceName: string,
    operationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOperationOperationIdQueryOptions(serviceName,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of graylog dashboards
 */
export const getDbaasLogsServiceNameOutputGraylogDashboard = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogDashboardParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogDashboardQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogDashboardParams,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/dashboard`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogDashboardQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboard404>(serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogDashboardQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogDashboard(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>>
export type GetDbaasLogsServiceNameOutputGraylogDashboardQueryError = GetDbaasLogsServiceNameOutputGraylogDashboard404


export function useGetDbaasLogsServiceNameOutputGraylogDashboard<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboard404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameOutputGraylogDashboardParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogDashboard<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboard404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogDashboard<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboard404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of graylog dashboards
 */

export function useGetDbaasLogsServiceNameOutputGraylogDashboard<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboard404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboard>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogDashboardQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new graylog dashboard
 */
export const postDbaasLogsServiceNameOutputGraylogDashboard = (
    serviceName: string,
    dbaasLogsOutputGraylogDashboardCreationOVH: DbaasLogsOutputGraylogDashboardCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogDashboardCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputGraylogDashboardMutationOptions = <TError = PostDbaasLogsServiceNameOutputGraylogDashboard403 | PostDbaasLogsServiceNameOutputGraylogDashboard404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboard>>, TError,{serviceName: string;data: DbaasLogsOutputGraylogDashboardCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboard>>, TError,{serviceName: string;data: DbaasLogsOutputGraylogDashboardCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboard>>, {serviceName: string;data: DbaasLogsOutputGraylogDashboardCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputGraylogDashboard(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputGraylogDashboardMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboard>>>
    export type PostDbaasLogsServiceNameOutputGraylogDashboardMutationBody = DbaasLogsOutputGraylogDashboardCreationOVH
    export type PostDbaasLogsServiceNameOutputGraylogDashboardMutationError = PostDbaasLogsServiceNameOutputGraylogDashboard403 | PostDbaasLogsServiceNameOutputGraylogDashboard404

    /**
 * @summary Register a new graylog dashboard
 */
export const usePostDbaasLogsServiceNameOutputGraylogDashboard = <TError = PostDbaasLogsServiceNameOutputGraylogDashboard403 | PostDbaasLogsServiceNameOutputGraylogDashboard404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboard>>, TError,{serviceName: string;data: DbaasLogsOutputGraylogDashboardCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboard>>,
        TError,
        {serviceName: string;data: DbaasLogsOutputGraylogDashboardCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputGraylogDashboardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified graylog dashboard
 */
export const deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId = (
    serviceName: string,
    dashboardId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId403 | DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError,{serviceName: string;dashboardId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError,{serviceName: string;dashboardId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, {serviceName: string;dashboardId: string}> = (props) => {
          const {serviceName,dashboardId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId(serviceName,dashboardId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>>
    
    export type DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationError = DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId403 | DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId404

    /**
 * @summary Remove specified graylog dashboard
 */
export const useDeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId = <TError = DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId403 | DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError,{serviceName: string;dashboardId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>,
        TError,
        {serviceName: string;dashboardId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified graylog dashboard
 */
export const getDbaasLogsServiceNameOutputGraylogDashboardDashboardId = (
    serviceName: string,
    dashboardId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsDashboardOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdQueryKey = (serviceName: string,
    dashboardId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404>(serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdQueryKey(serviceName,dashboardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogDashboardDashboardId(serviceName,dashboardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && dashboardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>>
export type GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdQueryError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404


export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404>(
 serviceName: string,
    dashboardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404>(
 serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404>(
 serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified graylog dashboard
 */

export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardId404>(
 serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdQueryOptions(serviceName,dashboardId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update information of specified graylog dashboard
 */
export const putDbaasLogsServiceNameOutputGraylogDashboardDashboardId = (
    serviceName: string,
    dashboardId: string,
    dbaasLogsOutputGraylogDashboardUpdateOVH: DbaasLogsOutputGraylogDashboardUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogDashboardUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationOptions = <TError = PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId403 | PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError,{serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError,{serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, {serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardUpdateOVH}> = (props) => {
          const {serviceName,dashboardId,data} = props ?? {};

          return  putDbaasLogsServiceNameOutputGraylogDashboardDashboardId(serviceName,dashboardId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>>
    export type PutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationBody = DbaasLogsOutputGraylogDashboardUpdateOVH
    export type PutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationError = PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId403 | PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId404

    /**
 * @summary Update information of specified graylog dashboard
 */
export const usePutDbaasLogsServiceNameOutputGraylogDashboardDashboardId = <TError = PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId403 | PutDbaasLogsServiceNameOutputGraylogDashboardDashboardId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>, TError,{serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogDashboardDashboardId>>,
        TError,
        {serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Copy all widgets from specified dashboard to a new one
 */
export const postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate = (
    serviceName: string,
    dashboardId: string,
    dbaasLogsOutputGraylogDashboardDuplicateCreationOVH: DbaasLogsOutputGraylogDashboardDuplicateCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}/duplicate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogDashboardDuplicateCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateMutationOptions = <TError = PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate403 | PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate404 | PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate>>, TError,{serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardDuplicateCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate>>, TError,{serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardDuplicateCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate>>, {serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardDuplicateCreationOVH}> = (props) => {
          const {serviceName,dashboardId,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate(serviceName,dashboardId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate>>>
    export type PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateMutationBody = DbaasLogsOutputGraylogDashboardDuplicateCreationOVH
    export type PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateMutationError = PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate403 | PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate404 | PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate409

    /**
 * @summary Copy all widgets from specified dashboard to a new one
 */
export const usePostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate = <TError = PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate403 | PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate404 | PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate>>, TError,{serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardDuplicateCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicate>>,
        TError,
        {serviceName: string;dashboardId: string;data: DbaasLogsOutputGraylogDashboardDuplicateCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of urls of specified graylog dashboard
 */
export const getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl = (
    serviceName: string,
    dashboardId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlQueryKey = (serviceName: string,
    dashboardId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/dashboard/${dashboardId}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404>(serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlQueryKey(serviceName,dashboardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl(serviceName,dashboardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && dashboardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>>
export type GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlQueryError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404


export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404>(
 serviceName: string,
    dashboardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404>(
 serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404>(
 serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of urls of specified graylog dashboard
 */

export function useGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl404>(
 serviceName: string,
    dashboardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlQueryOptions(serviceName,dashboardId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of graylog streams
 */
export const getDbaasLogsServiceNameOutputGraylogStream = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamParams,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError = GetDbaasLogsServiceNameOutputGraylogStream404>(serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStream(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamQueryError = GetDbaasLogsServiceNameOutputGraylogStream404


export function useGetDbaasLogsServiceNameOutputGraylogStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError = GetDbaasLogsServiceNameOutputGraylogStream404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameOutputGraylogStreamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError = GetDbaasLogsServiceNameOutputGraylogStream404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError = GetDbaasLogsServiceNameOutputGraylogStream404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of graylog streams
 */

export function useGetDbaasLogsServiceNameOutputGraylogStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError = GetDbaasLogsServiceNameOutputGraylogStream404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStream>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new graylog stream
 */
export const postDbaasLogsServiceNameOutputGraylogStream = (
    serviceName: string,
    dbaasLogsOutputGraylogStreamCreationOVH: DbaasLogsOutputGraylogStreamCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogStreamCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputGraylogStreamMutationOptions = <TError = PostDbaasLogsServiceNameOutputGraylogStream403 | PostDbaasLogsServiceNameOutputGraylogStream404 | PostDbaasLogsServiceNameOutputGraylogStream409 | PostDbaasLogsServiceNameOutputGraylogStream501,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStream>>, TError,{serviceName: string;data: DbaasLogsOutputGraylogStreamCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStream>>, TError,{serviceName: string;data: DbaasLogsOutputGraylogStreamCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStream>>, {serviceName: string;data: DbaasLogsOutputGraylogStreamCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputGraylogStream(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputGraylogStreamMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStream>>>
    export type PostDbaasLogsServiceNameOutputGraylogStreamMutationBody = DbaasLogsOutputGraylogStreamCreationOVH
    export type PostDbaasLogsServiceNameOutputGraylogStreamMutationError = PostDbaasLogsServiceNameOutputGraylogStream403 | PostDbaasLogsServiceNameOutputGraylogStream404 | PostDbaasLogsServiceNameOutputGraylogStream409 | PostDbaasLogsServiceNameOutputGraylogStream501

    /**
 * @summary Register a new graylog stream
 */
export const usePostDbaasLogsServiceNameOutputGraylogStream = <TError = PostDbaasLogsServiceNameOutputGraylogStream403 | PostDbaasLogsServiceNameOutputGraylogStream404 | PostDbaasLogsServiceNameOutputGraylogStream409 | PostDbaasLogsServiceNameOutputGraylogStream501,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStream>>, TError,{serviceName: string;data: DbaasLogsOutputGraylogStreamCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStream>>,
        TError,
        {serviceName: string;data: DbaasLogsOutputGraylogStreamCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputGraylogStreamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified graylog stream
 */
export const deleteDbaasLogsServiceNameOutputGraylogStreamStreamId = (
    serviceName: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError,{serviceName: string;streamId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError,{serviceName: string;streamId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamId>>, {serviceName: string;streamId: string}> = (props) => {
          const {serviceName,streamId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputGraylogStreamStreamId(serviceName,streamId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamId>>>
    
    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId404

    /**
 * @summary Remove specified graylog stream
 */
export const useDeleteDbaasLogsServiceNameOutputGraylogStreamStreamId = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError,{serviceName: string;streamId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamId>>,
        TError,
        {serviceName: string;streamId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified graylog stream
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamId = (
    serviceName: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsStreamOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdQueryKey = (serviceName: string,
    streamId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamId404>(serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdQueryKey(serviceName,streamId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamId(serviceName,streamId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamId404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamId404>(
 serviceName: string,
    streamId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamId404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamId404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified graylog stream
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamId404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdQueryOptions(serviceName,streamId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update information of specified graylog stream
 */
export const putDbaasLogsServiceNameOutputGraylogStreamStreamId = (
    serviceName: string,
    streamId: string,
    dbaasLogsOutputGraylogStreamUpdateOVH: DbaasLogsOutputGraylogStreamUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogStreamUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationOptions = <TError = PutDbaasLogsServiceNameOutputGraylogStreamStreamId403 | PutDbaasLogsServiceNameOutputGraylogStreamStreamId404 | PutDbaasLogsServiceNameOutputGraylogStreamStreamId409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamId>>, {serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamUpdateOVH}> = (props) => {
          const {serviceName,streamId,data} = props ?? {};

          return  putDbaasLogsServiceNameOutputGraylogStreamStreamId(serviceName,streamId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamId>>>
    export type PutDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationBody = DbaasLogsOutputGraylogStreamUpdateOVH
    export type PutDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationError = PutDbaasLogsServiceNameOutputGraylogStreamStreamId403 | PutDbaasLogsServiceNameOutputGraylogStreamStreamId404 | PutDbaasLogsServiceNameOutputGraylogStreamStreamId409

    /**
 * @summary Update information of specified graylog stream
 */
export const usePutDbaasLogsServiceNameOutputGraylogStreamStreamId = <TError = PutDbaasLogsServiceNameOutputGraylogStreamStreamId403 | PutDbaasLogsServiceNameOutputGraylogStreamStreamId404 | PutDbaasLogsServiceNameOutputGraylogStreamStreamId409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamId>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamId>>,
        TError,
        {serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameOutputGraylogStreamStreamIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of configured alerts of specified graylog stream
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert = (
    serviceName: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertQueryKey = (serviceName: string,
    streamId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404>(serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertQueryKey(serviceName,streamId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert(serviceName,streamId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404>(
 serviceName: string,
    streamId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of configured alerts of specified graylog stream
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertQueryOptions(serviceName,streamId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new alert on specified graylog stream
 */
export const postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert = (
    serviceName: string,
    streamId: string,
    dbaasLogsOutputGraylogStreamAlertCreationOVH: DbaasLogsOutputGraylogStreamAlertCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogStreamAlertCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertMutationOptions = <TError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert403 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamAlertCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamAlertCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, {serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamAlertCreationOVH}> = (props) => {
          const {serviceName,streamId,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert(serviceName,streamId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>>
    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertMutationBody = DbaasLogsOutputGraylogStreamAlertCreationOVH
    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertMutationError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert403 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert409

    /**
 * @summary Register a new alert on specified graylog stream
 */
export const usePostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert = <TError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert403 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert404 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamAlertCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdAlert>>,
        TError,
        {serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamAlertCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove alert from specified graylog stream
 */
export const deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId = (
    serviceName: string,
    streamId: string,
    alertId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert/${alertId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError,{serviceName: string;streamId: string;alertId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError,{serviceName: string;streamId: string;alertId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, {serviceName: string;streamId: string;alertId: string}> = (props) => {
          const {serviceName,streamId,alertId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId(serviceName,streamId,alertId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>>
    
    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404

    /**
 * @summary Remove alert from specified graylog stream
 */
export const useDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError,{serviceName: string;streamId: string;alertId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>,
        TError,
        {serviceName: string;streamId: string;alertId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified graylog stream alert
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId = (
    serviceName: string,
    streamId: string,
    alertId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsStreamAlertConditionOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert/${alertId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdQueryKey = (serviceName: string,
    streamId: string,
    alertId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert/${alertId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404>(serviceName: string,
    streamId: string,
    alertId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdQueryKey(serviceName,streamId,alertId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId(serviceName,streamId,alertId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId && alertId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404>(
 serviceName: string,
    streamId: string,
    alertId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404>(
 serviceName: string,
    streamId: string,
    alertId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404>(
 serviceName: string,
    streamId: string,
    alertId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified graylog stream alert
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404>(
 serviceName: string,
    streamId: string,
    alertId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdQueryOptions(serviceName,streamId,alertId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update alert information of specified graylog stream
 */
export const putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId = (
    serviceName: string,
    streamId: string,
    alertId: string,
    dbaasLogsOutputGraylogStreamAlertUpdateOVH: DbaasLogsOutputGraylogStreamAlertUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/alert/${alertId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogStreamAlertUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationOptions = <TError = PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403 | PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404 | PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError,{serviceName: string;streamId: string;alertId: string;data: DbaasLogsOutputGraylogStreamAlertUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError,{serviceName: string;streamId: string;alertId: string;data: DbaasLogsOutputGraylogStreamAlertUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, {serviceName: string;streamId: string;alertId: string;data: DbaasLogsOutputGraylogStreamAlertUpdateOVH}> = (props) => {
          const {serviceName,streamId,alertId,data} = props ?? {};

          return  putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId(serviceName,streamId,alertId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>>
    export type PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationBody = DbaasLogsOutputGraylogStreamAlertUpdateOVH
    export type PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationError = PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403 | PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404 | PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId409

    /**
 * @summary Update alert information of specified graylog stream
 */
export const usePutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId = <TError = PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId403 | PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId404 | PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>, TError,{serviceName: string;streamId: string;alertId: string;data: DbaasLogsOutputGraylogStreamAlertUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertId>>,
        TError,
        {serviceName: string;streamId: string;alertId: string;data: DbaasLogsOutputGraylogStreamAlertUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of archives
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive = (
    serviceName: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveQueryKey = (serviceName: string,
    streamId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404>(serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveQueryKey(serviceName,streamId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive(serviceName,streamId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404>(
 serviceName: string,
    streamId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of archives
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchive>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveQueryOptions(serviceName,streamId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns details of specified archive
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId = (
    serviceName: string,
    streamId: string,
    archiveId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsArchiveOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive/${archiveId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdQueryKey = (serviceName: string,
    streamId: string,
    archiveId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive/${archiveId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404>(serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdQueryKey(serviceName,streamId,archiveId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId(serviceName,streamId,archiveId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId && archiveId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified archive
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdQueryOptions(serviceName,streamId,archiveId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the list of encryption keys used to encrypt the archive
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey = (
    serviceName: string,
    streamId: string,
    archiveId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive/${archiveId}/encryptionKey`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyQueryKey = (serviceName: string,
    streamId: string,
    archiveId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive/${archiveId}/encryptionKey`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404>(serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyQueryKey(serviceName,streamId,archiveId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey(serviceName,streamId,archiveId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId && archiveId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of encryption keys used to encrypt the archive
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey404>(
 serviceName: string,
    streamId: string,
    archiveId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyQueryOptions(serviceName,streamId,archiveId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a public temporary URL to access the archive
 */
export const postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl = (
    serviceName: string,
    streamId: string,
    archiveId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsArchiveUrlOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/archive/${archiveId}/url`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlMutationOptions = <TError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl>>, TError,{serviceName: string;streamId: string;archiveId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl>>, TError,{serviceName: string;streamId: string;archiveId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl>>, {serviceName: string;streamId: string;archiveId: string}> = (props) => {
          const {serviceName,streamId,archiveId} = props ?? {};

          return  postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl(serviceName,streamId,archiveId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl>>>
    
    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlMutationError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl404

    /**
 * @summary Get a public temporary URL to access the archive
 */
export const usePostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl = <TError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl>>, TError,{serviceName: string;streamId: string;archiveId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrl>>,
        TError,
        {serviceName: string;streamId: string;archiveId: string},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of rules of specified graylog stream
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule = (
    serviceName: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/rule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleQueryKey = (serviceName: string,
    streamId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/rule`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404>(serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleQueryKey(serviceName,streamId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule(serviceName,streamId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404>(
 serviceName: string,
    streamId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of rules of specified graylog stream
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleQueryOptions(serviceName,streamId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new rule on specified graylog stream
 */
export const postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule = (
    serviceName: string,
    streamId: string,
    dbaasLogsOutputGraylogStreamRuleCreationOVH: DbaasLogsOutputGraylogStreamRuleCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputGraylogStreamRuleCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleMutationOptions = <TError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule403 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamRuleCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamRuleCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, {serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamRuleCreationOVH}> = (props) => {
          const {serviceName,streamId,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule(serviceName,streamId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>>
    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleMutationBody = DbaasLogsOutputGraylogStreamRuleCreationOVH
    export type PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleMutationError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule403 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule409

    /**
 * @summary Register a new rule on specified graylog stream
 */
export const usePostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule = <TError = PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule403 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule404 | PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRule409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>, TError,{serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamRuleCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputGraylogStreamStreamIdRule>>,
        TError,
        {serviceName: string;streamId: string;data: DbaasLogsOutputGraylogStreamRuleCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified graylog stream rule
 */
export const deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId = (
    serviceName: string,
    streamId: string,
    ruleId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/rule/${ruleId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError,{serviceName: string;streamId: string;ruleId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError,{serviceName: string;streamId: string;ruleId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, {serviceName: string;streamId: string;ruleId: string}> = (props) => {
          const {serviceName,streamId,ruleId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId(serviceName,streamId,ruleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>>
    
    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdMutationError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404

    /**
 * @summary Remove specified graylog stream rule
 */
export const useDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId403 | DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError,{serviceName: string;streamId: string;ruleId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>,
        TError,
        {serviceName: string;streamId: string;ruleId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified graylog stream rule
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId = (
    serviceName: string,
    streamId: string,
    ruleId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsStreamRuleOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/rule/${ruleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdQueryKey = (serviceName: string,
    streamId: string,
    ruleId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/rule/${ruleId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404>(serviceName: string,
    streamId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdQueryKey(serviceName,streamId,ruleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId(serviceName,streamId,ruleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId && ruleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404>(
 serviceName: string,
    streamId: string,
    ruleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404>(
 serviceName: string,
    streamId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404>(
 serviceName: string,
    streamId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified graylog stream rule
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId404>(
 serviceName: string,
    streamId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdQueryOptions(serviceName,streamId,ruleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of subscriptions targeting a specified graylog stream
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription = (
    serviceName: string,
    streamId: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionQueryKey = (serviceName: string,
    streamId: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404>(serviceName: string,
    streamId: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionQueryKey(serviceName,streamId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription(serviceName,streamId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404>(
 serviceName: string,
    streamId: string,
    params: undefined |  GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404>(
 serviceName: string,
    streamId: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404>(
 serviceName: string,
    streamId: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of subscriptions targeting a specified graylog stream
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription404>(
 serviceName: string,
    streamId: string,
    params?: GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionQueryOptions(serviceName,streamId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete a specified subscription targeting a specified graylog stream
 */
export const deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId = (
    serviceName: string,
    streamId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError,{serviceName: string;streamId: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError,{serviceName: string;streamId: string;subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, {serviceName: string;streamId: string;subscriptionId: string}> = (props) => {
          const {serviceName,streamId,subscriptionId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId(serviceName,streamId,subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>>
    
    export type DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdMutationError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404

    /**
 * @summary Delete a specified subscription targeting a specified graylog stream
 */
export const useDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId = <TError = DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError,{serviceName: string;streamId: string;subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>,
        TError,
        {serviceName: string;streamId: string;subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified graylog stream subscription
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId = (
    serviceName: string,
    streamId: string,
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionOVH>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdQueryKey = (serviceName: string,
    streamId: string,
    subscriptionId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/subscription/${subscriptionId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404>(serviceName: string,
    streamId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdQueryKey(serviceName,streamId,subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId(serviceName,streamId,subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId && subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404>(
 serviceName: string,
    streamId: string,
    subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404>(
 serviceName: string,
    streamId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404>(
 serviceName: string,
    streamId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified graylog stream subscription
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId404>(
 serviceName: string,
    streamId: string,
    subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdQueryOptions(serviceName,streamId,subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of urls of specified graylog stream
 */
export const getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl = (
    serviceName: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlQueryKey = (serviceName: string,
    streamId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/graylog/stream/${streamId}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404>(serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlQueryKey(serviceName,streamId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>> = ({ signal }) => getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl(serviceName,streamId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && streamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>>
export type GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlQueryError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404


export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404>(
 serviceName: string,
    streamId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of urls of specified graylog stream
 */

export function useGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError = GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl404>(
 serviceName: string,
    streamId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputGraylogStreamStreamIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlQueryOptions(serviceName,streamId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of alias for connected user
 */
export const getDbaasLogsServiceNameOutputOpensearchAlias = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchAliasParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchAliasQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchAliasParams,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/alias`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchAliasQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError = GetDbaasLogsServiceNameOutputOpensearchAlias404>(serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchAliasQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchAlias(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>>
export type GetDbaasLogsServiceNameOutputOpensearchAliasQueryError = GetDbaasLogsServiceNameOutputOpensearchAlias404


export function useGetDbaasLogsServiceNameOutputOpensearchAlias<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError = GetDbaasLogsServiceNameOutputOpensearchAlias404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameOutputOpensearchAliasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAlias<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError = GetDbaasLogsServiceNameOutputOpensearchAlias404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAlias<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError = GetDbaasLogsServiceNameOutputOpensearchAlias404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of alias for connected user
 */

export function useGetDbaasLogsServiceNameOutputOpensearchAlias<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError = GetDbaasLogsServiceNameOutputOpensearchAlias404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchAliasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAlias>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchAliasQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new OpenSearch alias
 */
export const postDbaasLogsServiceNameOutputOpensearchAlias = (
    serviceName: string,
    dbaasLogsOutputOpenSearchAliasCreationOVH: DbaasLogsOutputOpenSearchAliasCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputOpenSearchAliasCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputOpensearchAliasMutationOptions = <TError = PostDbaasLogsServiceNameOutputOpensearchAlias403 | PostDbaasLogsServiceNameOutputOpensearchAlias404 | PostDbaasLogsServiceNameOutputOpensearchAlias409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAlias>>, TError,{serviceName: string;data: DbaasLogsOutputOpenSearchAliasCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAlias>>, TError,{serviceName: string;data: DbaasLogsOutputOpenSearchAliasCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAlias>>, {serviceName: string;data: DbaasLogsOutputOpenSearchAliasCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputOpensearchAlias(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputOpensearchAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAlias>>>
    export type PostDbaasLogsServiceNameOutputOpensearchAliasMutationBody = DbaasLogsOutputOpenSearchAliasCreationOVH
    export type PostDbaasLogsServiceNameOutputOpensearchAliasMutationError = PostDbaasLogsServiceNameOutputOpensearchAlias403 | PostDbaasLogsServiceNameOutputOpensearchAlias404 | PostDbaasLogsServiceNameOutputOpensearchAlias409

    /**
 * @summary Register a new OpenSearch alias
 */
export const usePostDbaasLogsServiceNameOutputOpensearchAlias = <TError = PostDbaasLogsServiceNameOutputOpensearchAlias403 | PostDbaasLogsServiceNameOutputOpensearchAlias404 | PostDbaasLogsServiceNameOutputOpensearchAlias409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAlias>>, TError,{serviceName: string;data: DbaasLogsOutputOpenSearchAliasCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAlias>>,
        TError,
        {serviceName: string;data: DbaasLogsOutputOpenSearchAliasCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputOpensearchAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified OpenSearch alias
 */
export const deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId = (
    serviceName: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError,{serviceName: string;aliasId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError,{serviceName: string;aliasId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, {serviceName: string;aliasId: string}> = (props) => {
          const {serviceName,aliasId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId(serviceName,aliasId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId>>>
    
    export type DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId404

    /**
 * @summary Remove specified OpenSearch alias
 */
export const useDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId = <TError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError,{serviceName: string;aliasId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasId>>,
        TError,
        {serviceName: string;aliasId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns specified OpenSearch alias
 */
export const getDbaasLogsServiceNameOutputOpensearchAliasAliasId = (
    serviceName: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsAliasOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdQueryKey = (serviceName: string,
    aliasId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404>(serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdQueryKey(serviceName,aliasId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchAliasAliasId(serviceName,aliasId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && aliasId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>>
export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdQueryError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404


export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404>(
 serviceName: string,
    aliasId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns specified OpenSearch alias
 */

export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasId404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdQueryOptions(serviceName,aliasId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update specified OpenSearch alias
 */
export const putDbaasLogsServiceNameOutputOpensearchAliasAliasId = (
    serviceName: string,
    aliasId: string,
    dbaasLogsOutputOpenSearchAliasUpdateOVH: DbaasLogsOutputOpenSearchAliasUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputOpenSearchAliasUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationOptions = <TError = PutDbaasLogsServiceNameOutputOpensearchAliasAliasId402 | PutDbaasLogsServiceNameOutputOpensearchAliasAliasId403 | PutDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, {serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasUpdateOVH}> = (props) => {
          const {serviceName,aliasId,data} = props ?? {};

          return  putDbaasLogsServiceNameOutputOpensearchAliasAliasId(serviceName,aliasId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchAliasAliasId>>>
    export type PutDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationBody = DbaasLogsOutputOpenSearchAliasUpdateOVH
    export type PutDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationError = PutDbaasLogsServiceNameOutputOpensearchAliasAliasId402 | PutDbaasLogsServiceNameOutputOpensearchAliasAliasId403 | PutDbaasLogsServiceNameOutputOpensearchAliasAliasId404

    /**
 * @summary Update specified OpenSearch alias
 */
export const usePutDbaasLogsServiceNameOutputOpensearchAliasAliasId = <TError = PutDbaasLogsServiceNameOutputOpensearchAliasAliasId402 | PutDbaasLogsServiceNameOutputOpensearchAliasAliasId403 | PutDbaasLogsServiceNameOutputOpensearchAliasAliasId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchAliasAliasId>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchAliasAliasId>>,
        TError,
        {serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameOutputOpensearchAliasAliasIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of OpenSearch indexes attached to specified OpenSearch alias
 */
export const getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex = (
    serviceName: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/index`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexQueryKey = (serviceName: string,
    aliasId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/index`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404>(serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexQueryKey(serviceName,aliasId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex(serviceName,aliasId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && aliasId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>>
export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexQueryError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404


export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404>(
 serviceName: string,
    aliasId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of OpenSearch indexes attached to specified OpenSearch alias
 */

export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexQueryOptions(serviceName,aliasId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Attach a OpenSearch index to specified OpenSearch alias
 */
export const postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex = (
    serviceName: string,
    aliasId: string,
    dbaasLogsOutputOpenSearchAliasIndexCreationOVH: DbaasLogsOutputOpenSearchAliasIndexCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/index`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputOpenSearchAliasIndexCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexMutationOptions = <TError = PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex403 | PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasIndexCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasIndexCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, {serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasIndexCreationOVH}> = (props) => {
          const {serviceName,aliasId,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex(serviceName,aliasId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>>
    export type PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexMutationBody = DbaasLogsOutputOpenSearchAliasIndexCreationOVH
    export type PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexMutationError = PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex403 | PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404

    /**
 * @summary Attach a OpenSearch index to specified OpenSearch alias
 */
export const usePostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex = <TError = PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex403 | PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasIndexCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndex>>,
        TError,
        {serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasIndexCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Detach a OpenSearch index from specified OpenSearch alias
 */
export const deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId = (
    serviceName: string,
    aliasId: string,
    indexId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/index/${indexId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId>>, TError,{serviceName: string;aliasId: string;indexId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId>>, TError,{serviceName: string;aliasId: string;indexId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId>>, {serviceName: string;aliasId: string;indexId: string}> = (props) => {
          const {serviceName,aliasId,indexId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId(serviceName,aliasId,indexId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId>>>
    
    export type DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdMutationError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId404

    /**
 * @summary Detach a OpenSearch index from specified OpenSearch alias
 */
export const useDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId = <TError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId>>, TError,{serviceName: string;aliasId: string;indexId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexId>>,
        TError,
        {serviceName: string;aliasId: string;indexId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of Graylog streams attached to specified OpenSearch alias
 */
export const getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream = (
    serviceName: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/stream`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamQueryKey = (serviceName: string,
    aliasId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/stream`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404>(serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamQueryKey(serviceName,aliasId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream(serviceName,aliasId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && aliasId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>>
export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamQueryError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404


export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404>(
 serviceName: string,
    aliasId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of Graylog streams attached to specified OpenSearch alias
 */

export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamQueryOptions(serviceName,aliasId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Attach a Graylog stream to specified OpenSearch alias
 */
export const postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream = (
    serviceName: string,
    aliasId: string,
    dbaasLogsOutputOpenSearchAliasStreamCreationOVH: DbaasLogsOutputOpenSearchAliasStreamCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/stream`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputOpenSearchAliasStreamCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamMutationOptions = <TError = PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream403 | PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasStreamCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasStreamCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, {serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasStreamCreationOVH}> = (props) => {
          const {serviceName,aliasId,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream(serviceName,aliasId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>>
    export type PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamMutationBody = DbaasLogsOutputOpenSearchAliasStreamCreationOVH
    export type PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamMutationError = PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream403 | PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404

    /**
 * @summary Attach a Graylog stream to specified OpenSearch alias
 */
export const usePostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream = <TError = PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream403 | PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>, TError,{serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasStreamCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchAliasAliasIdStream>>,
        TError,
        {serviceName: string;aliasId: string;data: DbaasLogsOutputOpenSearchAliasStreamCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Detach a Graylog stream from specified OpenSearch alias
 */
export const deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId = (
    serviceName: string,
    aliasId: string,
    streamId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/stream/${streamId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId>>, TError,{serviceName: string;aliasId: string;streamId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId>>, TError,{serviceName: string;aliasId: string;streamId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId>>, {serviceName: string;aliasId: string;streamId: string}> = (props) => {
          const {serviceName,aliasId,streamId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId(serviceName,aliasId,streamId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId>>>
    
    export type DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdMutationError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId404

    /**
 * @summary Detach a Graylog stream from specified OpenSearch alias
 */
export const useDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId = <TError = DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId403 | DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId>>, TError,{serviceName: string;aliasId: string;streamId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamId>>,
        TError,
        {serviceName: string;aliasId: string;streamId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of urls of specified alias
 */
export const getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl = (
    serviceName: string,
    aliasId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlQueryKey = (serviceName: string,
    aliasId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/alias/${aliasId}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404>(serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlQueryKey(serviceName,aliasId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl(serviceName,aliasId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && aliasId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>>
export type GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlQueryError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404


export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404>(
 serviceName: string,
    aliasId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of urls of specified alias
 */

export function useGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl404>(
 serviceName: string,
    aliasId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlQueryOptions(serviceName,aliasId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of OpenSearch indexes
 */
export const getDbaasLogsServiceNameOutputOpensearchIndex = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchIndexParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/index`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchIndexQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchIndexParams,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/index`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchIndexQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndex404>(serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchIndexParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchIndexQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchIndex(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchIndexQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>>
export type GetDbaasLogsServiceNameOutputOpensearchIndexQueryError = GetDbaasLogsServiceNameOutputOpensearchIndex404


export function useGetDbaasLogsServiceNameOutputOpensearchIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndex404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameOutputOpensearchIndexParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndex404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchIndexParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndex404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchIndexParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of OpenSearch indexes
 */

export function useGetDbaasLogsServiceNameOutputOpensearchIndex<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndex404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameOutputOpensearchIndexParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndex>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchIndexQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new OpenSearch index
 */
export const postDbaasLogsServiceNameOutputOpensearchIndex = (
    serviceName: string,
    dbaasLogsOutputOpenSearchIndexCreationOVH: DbaasLogsOutputOpenSearchIndexCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/index`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputOpenSearchIndexCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputOpensearchIndexMutationOptions = <TError = PostDbaasLogsServiceNameOutputOpensearchIndex403 | PostDbaasLogsServiceNameOutputOpensearchIndex404 | PostDbaasLogsServiceNameOutputOpensearchIndex409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchIndex>>, TError,{serviceName: string;data: DbaasLogsOutputOpenSearchIndexCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchIndex>>, TError,{serviceName: string;data: DbaasLogsOutputOpenSearchIndexCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchIndex>>, {serviceName: string;data: DbaasLogsOutputOpenSearchIndexCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputOpensearchIndex(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputOpensearchIndexMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchIndex>>>
    export type PostDbaasLogsServiceNameOutputOpensearchIndexMutationBody = DbaasLogsOutputOpenSearchIndexCreationOVH
    export type PostDbaasLogsServiceNameOutputOpensearchIndexMutationError = PostDbaasLogsServiceNameOutputOpensearchIndex403 | PostDbaasLogsServiceNameOutputOpensearchIndex404 | PostDbaasLogsServiceNameOutputOpensearchIndex409

    /**
 * @summary Register a new OpenSearch index
 */
export const usePostDbaasLogsServiceNameOutputOpensearchIndex = <TError = PostDbaasLogsServiceNameOutputOpensearchIndex403 | PostDbaasLogsServiceNameOutputOpensearchIndex404 | PostDbaasLogsServiceNameOutputOpensearchIndex409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchIndex>>, TError,{serviceName: string;data: DbaasLogsOutputOpenSearchIndexCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchIndex>>,
        TError,
        {serviceName: string;data: DbaasLogsOutputOpenSearchIndexCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputOpensearchIndexMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified OpenSearch index
 */
export const deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId = (
    serviceName: string,
    indexId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/index/${indexId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId403 | DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError,{serviceName: string;indexId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError,{serviceName: string;indexId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, {serviceName: string;indexId: string}> = (props) => {
          const {serviceName,indexId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId(serviceName,indexId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId>>>
    
    export type DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationError = DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId403 | DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId404

    /**
 * @summary Remove specified OpenSearch index
 */
export const useDeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId = <TError = DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId403 | DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError,{serviceName: string;indexId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchIndexIndexId>>,
        TError,
        {serviceName: string;indexId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns specified OpenSearch index
 */
export const getDbaasLogsServiceNameOutputOpensearchIndexIndexId = (
    serviceName: string,
    indexId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsIndexOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/index/${indexId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdQueryKey = (serviceName: string,
    indexId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/index/${indexId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404>(serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdQueryKey(serviceName,indexId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchIndexIndexId(serviceName,indexId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && indexId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>>
export type GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdQueryError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404


export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404>(
 serviceName: string,
    indexId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404>(
 serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404>(
 serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns specified OpenSearch index
 */

export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexId404>(
 serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdQueryOptions(serviceName,indexId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update specified OpenSearch index
 */
export const putDbaasLogsServiceNameOutputOpensearchIndexIndexId = (
    serviceName: string,
    indexId: string,
    dbaasLogsOutputOpenSearchIndexUpdateOVH: DbaasLogsOutputOpenSearchIndexUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/index/${indexId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOutputOpenSearchIndexUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationOptions = <TError = PutDbaasLogsServiceNameOutputOpensearchIndexIndexId403 | PutDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError,{serviceName: string;indexId: string;data: DbaasLogsOutputOpenSearchIndexUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError,{serviceName: string;indexId: string;data: DbaasLogsOutputOpenSearchIndexUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, {serviceName: string;indexId: string;data: DbaasLogsOutputOpenSearchIndexUpdateOVH}> = (props) => {
          const {serviceName,indexId,data} = props ?? {};

          return  putDbaasLogsServiceNameOutputOpensearchIndexIndexId(serviceName,indexId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchIndexIndexId>>>
    export type PutDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationBody = DbaasLogsOutputOpenSearchIndexUpdateOVH
    export type PutDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationError = PutDbaasLogsServiceNameOutputOpensearchIndexIndexId403 | PutDbaasLogsServiceNameOutputOpensearchIndexIndexId404

    /**
 * @summary Update specified OpenSearch index
 */
export const usePutDbaasLogsServiceNameOutputOpensearchIndexIndexId = <TError = PutDbaasLogsServiceNameOutputOpensearchIndexIndexId403 | PutDbaasLogsServiceNameOutputOpensearchIndexIndexId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchIndexIndexId>>, TError,{serviceName: string;indexId: string;data: DbaasLogsOutputOpenSearchIndexUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchIndexIndexId>>,
        TError,
        {serviceName: string;indexId: string;data: DbaasLogsOutputOpenSearchIndexUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameOutputOpensearchIndexIndexIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of urls of specified index
 */
export const getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl = (
    serviceName: string,
    indexId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/index/${indexId}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlQueryKey = (serviceName: string,
    indexId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/index/${indexId}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404>(serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlQueryKey(serviceName,indexId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl(serviceName,indexId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && indexId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>>
export type GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlQueryError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404


export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404>(
 serviceName: string,
    indexId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404>(
 serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404>(
 serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of urls of specified index
 */

export function useGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl404>(
 serviceName: string,
    indexId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlQueryOptions(serviceName,indexId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of OpenSearch Dashboards instances
 */
export const getDbaasLogsServiceNameOutputOpensearchOsd = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/osd`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchOsdQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/osd`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchOsdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsd404>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchOsdQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchOsd(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchOsdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>>
export type GetDbaasLogsServiceNameOutputOpensearchOsdQueryError = GetDbaasLogsServiceNameOutputOpensearchOsd404


export function useGetDbaasLogsServiceNameOutputOpensearchOsd<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsd404>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchOsd<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsd404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchOsd<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsd404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of OpenSearch Dashboards instances
 */

export function useGetDbaasLogsServiceNameOutputOpensearchOsd<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsd404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsd>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchOsdQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new OpenSearch Dashboards instance
 */
export const postDbaasLogsServiceNameOutputOpensearchOsd = (
    serviceName: string,
    dbaasLogsOsdCreationOVH: DbaasLogsOsdCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/osd`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOsdCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameOutputOpensearchOsdMutationOptions = <TError = PostDbaasLogsServiceNameOutputOpensearchOsd403 | PostDbaasLogsServiceNameOutputOpensearchOsd404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchOsd>>, TError,{serviceName: string;data: DbaasLogsOsdCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchOsd>>, TError,{serviceName: string;data: DbaasLogsOsdCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchOsd>>, {serviceName: string;data: DbaasLogsOsdCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameOutputOpensearchOsd(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameOutputOpensearchOsdMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchOsd>>>
    export type PostDbaasLogsServiceNameOutputOpensearchOsdMutationBody = DbaasLogsOsdCreationOVH
    export type PostDbaasLogsServiceNameOutputOpensearchOsdMutationError = PostDbaasLogsServiceNameOutputOpensearchOsd403 | PostDbaasLogsServiceNameOutputOpensearchOsd404

    /**
 * @summary Register a new OpenSearch Dashboards instance
 */
export const usePostDbaasLogsServiceNameOutputOpensearchOsd = <TError = PostDbaasLogsServiceNameOutputOpensearchOsd403 | PostDbaasLogsServiceNameOutputOpensearchOsd404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchOsd>>, TError,{serviceName: string;data: DbaasLogsOsdCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameOutputOpensearchOsd>>,
        TError,
        {serviceName: string;data: DbaasLogsOsdCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameOutputOpensearchOsdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified OpenSearch Dashboards instance
 */
export const deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId = (
    serviceName: string,
    osdId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/osd/${osdId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationOptions = <TError = DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId403 | DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError,{serviceName: string;osdId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError,{serviceName: string;osdId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, {serviceName: string;osdId: string}> = (props) => {
          const {serviceName,osdId} = props ?? {};

          return  deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId(serviceName,osdId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId>>>
    
    export type DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationError = DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId403 | DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId404

    /**
 * @summary Remove specified OpenSearch Dashboards instance
 */
export const useDeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId = <TError = DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId403 | DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError,{serviceName: string;osdId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameOutputOpensearchOsdOsdId>>,
        TError,
        {serviceName: string;osdId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns specified OpenSearch Dashboards instance
 */
export const getDbaasLogsServiceNameOutputOpensearchOsdOsdId = (
    serviceName: string,
    osdId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOsdOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/osd/${osdId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdQueryKey = (serviceName: string,
    osdId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/osd/${osdId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404>(serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdQueryKey(serviceName,osdId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchOsdOsdId(serviceName,osdId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && osdId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>>
export type GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdQueryError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404


export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404>(
 serviceName: string,
    osdId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404>(
 serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404>(
 serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns specified OpenSearch Dashboards instance
 */

export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdId404>(
 serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdQueryOptions(serviceName,osdId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update specified OpenSearch Dashboards instance
 */
export const putDbaasLogsServiceNameOutputOpensearchOsdOsdId = (
    serviceName: string,
    osdId: string,
    dbaasLogsOsdUpdateOVH: DbaasLogsOsdUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/osd/${osdId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsOsdUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationOptions = <TError = PutDbaasLogsServiceNameOutputOpensearchOsdOsdId403 | PutDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError,{serviceName: string;osdId: string;data: DbaasLogsOsdUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError,{serviceName: string;osdId: string;data: DbaasLogsOsdUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, {serviceName: string;osdId: string;data: DbaasLogsOsdUpdateOVH}> = (props) => {
          const {serviceName,osdId,data} = props ?? {};

          return  putDbaasLogsServiceNameOutputOpensearchOsdOsdId(serviceName,osdId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchOsdOsdId>>>
    export type PutDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationBody = DbaasLogsOsdUpdateOVH
    export type PutDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationError = PutDbaasLogsServiceNameOutputOpensearchOsdOsdId403 | PutDbaasLogsServiceNameOutputOpensearchOsdOsdId404

    /**
 * @summary Update specified OpenSearch Dashboards instance
 */
export const usePutDbaasLogsServiceNameOutputOpensearchOsdOsdId = <TError = PutDbaasLogsServiceNameOutputOpensearchOsdOsdId403 | PutDbaasLogsServiceNameOutputOpensearchOsdOsdId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchOsdOsdId>>, TError,{serviceName: string;osdId: string;data: DbaasLogsOsdUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameOutputOpensearchOsdOsdId>>,
        TError,
        {serviceName: string;osdId: string;data: DbaasLogsOsdUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameOutputOpensearchOsdOsdIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of urls of specified OpenSearch Dashboards
 */
export const getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl = (
    serviceName: string,
    osdId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/output/opensearch/osd/${osdId}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlQueryKey = (serviceName: string,
    osdId: string,) => {
    return [`/dbaas/logs/${serviceName}/output/opensearch/osd/${osdId}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404>(serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlQueryKey(serviceName,osdId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>> = ({ signal }) => getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl(serviceName,osdId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && osdId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>>
export type GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlQueryError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404


export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404>(
 serviceName: string,
    osdId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404>(
 serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404>(
 serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of urls of specified OpenSearch Dashboards
 */

export function useGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError = GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl404>(
 serviceName: string,
    osdId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlQueryOptions(serviceName,osdId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the list of roles
 */
export const getDbaasLogsServiceNameRole = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameRoleParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/role`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameRoleQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameRoleParams,) => {
    return [`/dbaas/logs/${serviceName}/role`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameRoleQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError = GetDbaasLogsServiceNameRole403 | GetDbaasLogsServiceNameRole404>(serviceName: string,
    params?: GetDbaasLogsServiceNameRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameRoleQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>> = ({ signal }) => getDbaasLogsServiceNameRole(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>>
export type GetDbaasLogsServiceNameRoleQueryError = GetDbaasLogsServiceNameRole403 | GetDbaasLogsServiceNameRole404


export function useGetDbaasLogsServiceNameRole<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError = GetDbaasLogsServiceNameRole403 | GetDbaasLogsServiceNameRole404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameRoleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRole<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError = GetDbaasLogsServiceNameRole403 | GetDbaasLogsServiceNameRole404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRole<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError = GetDbaasLogsServiceNameRole403 | GetDbaasLogsServiceNameRole404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of roles
 */

export function useGetDbaasLogsServiceNameRole<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError = GetDbaasLogsServiceNameRole403 | GetDbaasLogsServiceNameRole404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameRoleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRole>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameRoleQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new role
 */
export const postDbaasLogsServiceNameRole = (
    serviceName: string,
    dbaasLogsRoleCreationOVH: DbaasLogsRoleCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRoleCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleMutationOptions = <TError = PostDbaasLogsServiceNameRole402 | PostDbaasLogsServiceNameRole403 | PostDbaasLogsServiceNameRole404 | PostDbaasLogsServiceNameRole409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRole>>, TError,{serviceName: string;data: DbaasLogsRoleCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRole>>, TError,{serviceName: string;data: DbaasLogsRoleCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRole>>, {serviceName: string;data: DbaasLogsRoleCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameRole(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRole>>>
    export type PostDbaasLogsServiceNameRoleMutationBody = DbaasLogsRoleCreationOVH
    export type PostDbaasLogsServiceNameRoleMutationError = PostDbaasLogsServiceNameRole402 | PostDbaasLogsServiceNameRole403 | PostDbaasLogsServiceNameRole404 | PostDbaasLogsServiceNameRole409

    /**
 * @summary Register a new role
 */
export const usePostDbaasLogsServiceNameRole = <TError = PostDbaasLogsServiceNameRole402 | PostDbaasLogsServiceNameRole403 | PostDbaasLogsServiceNameRole404 | PostDbaasLogsServiceNameRole409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRole>>, TError,{serviceName: string;data: DbaasLogsRoleCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRole>>,
        TError,
        {serviceName: string;data: DbaasLogsRoleCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified role
 */
export const deleteDbaasLogsServiceNameRoleRoleId = (
    serviceName: string,
    roleId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameRoleRoleIdMutationOptions = <TError = DeleteDbaasLogsServiceNameRoleRoleId403 | DeleteDbaasLogsServiceNameRoleRoleId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleId>>, TError,{serviceName: string;roleId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleId>>, TError,{serviceName: string;roleId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleId>>, {serviceName: string;roleId: string}> = (props) => {
          const {serviceName,roleId} = props ?? {};

          return  deleteDbaasLogsServiceNameRoleRoleId(serviceName,roleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameRoleRoleIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleId>>>
    
    export type DeleteDbaasLogsServiceNameRoleRoleIdMutationError = DeleteDbaasLogsServiceNameRoleRoleId403 | DeleteDbaasLogsServiceNameRoleRoleId404

    /**
 * @summary Remove specified role
 */
export const useDeleteDbaasLogsServiceNameRoleRoleId = <TError = DeleteDbaasLogsServiceNameRoleRoleId403 | DeleteDbaasLogsServiceNameRoleRoleId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleId>>, TError,{serviceName: string;roleId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleId>>,
        TError,
        {serviceName: string;roleId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameRoleRoleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified role
 */
export const getDbaasLogsServiceNameRoleRoleId = (
    serviceName: string,
    roleId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsRoleOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameRoleRoleIdQueryKey = (serviceName: string,
    roleId: string,) => {
    return [`/dbaas/logs/${serviceName}/role/${roleId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameRoleRoleIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError = GetDbaasLogsServiceNameRoleRoleId403 | GetDbaasLogsServiceNameRoleRoleId404>(serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameRoleRoleIdQueryKey(serviceName,roleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>> = ({ signal }) => getDbaasLogsServiceNameRoleRoleId(serviceName,roleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && roleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameRoleRoleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>>
export type GetDbaasLogsServiceNameRoleRoleIdQueryError = GetDbaasLogsServiceNameRoleRoleId403 | GetDbaasLogsServiceNameRoleRoleId404


export function useGetDbaasLogsServiceNameRoleRoleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError = GetDbaasLogsServiceNameRoleRoleId403 | GetDbaasLogsServiceNameRoleRoleId404>(
 serviceName: string,
    roleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError = GetDbaasLogsServiceNameRoleRoleId403 | GetDbaasLogsServiceNameRoleRoleId404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError = GetDbaasLogsServiceNameRoleRoleId403 | GetDbaasLogsServiceNameRoleRoleId404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified role
 */

export function useGetDbaasLogsServiceNameRoleRoleId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError = GetDbaasLogsServiceNameRoleRoleId403 | GetDbaasLogsServiceNameRoleRoleId404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameRoleRoleIdQueryOptions(serviceName,roleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update information of specified role
 */
export const putDbaasLogsServiceNameRoleRoleId = (
    serviceName: string,
    roleId: string,
    dbaasLogsRoleUpdateOVH: DbaasLogsRoleUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRoleUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameRoleRoleIdMutationOptions = <TError = PutDbaasLogsServiceNameRoleRoleId403 | PutDbaasLogsServiceNameRoleRoleId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleId>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRoleUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleId>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRoleUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleId>>, {serviceName: string;roleId: string;data: DbaasLogsRoleUpdateOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  putDbaasLogsServiceNameRoleRoleId(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameRoleRoleIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleId>>>
    export type PutDbaasLogsServiceNameRoleRoleIdMutationBody = DbaasLogsRoleUpdateOVH
    export type PutDbaasLogsServiceNameRoleRoleIdMutationError = PutDbaasLogsServiceNameRoleRoleId403 | PutDbaasLogsServiceNameRoleRoleId404

    /**
 * @summary Update information of specified role
 */
export const usePutDbaasLogsServiceNameRoleRoleId = <TError = PutDbaasLogsServiceNameRoleRoleId403 | PutDbaasLogsServiceNameRoleRoleId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleId>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRoleUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleId>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRoleUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameRoleRoleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the member list of specified role
 */
export const getDbaasLogsServiceNameRoleRoleIdMember = (
    serviceName: string,
    roleId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/member`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameRoleRoleIdMemberQueryKey = (serviceName: string,
    roleId: string,) => {
    return [`/dbaas/logs/${serviceName}/role/${roleId}/member`] as const;
    }

    
export const getGetDbaasLogsServiceNameRoleRoleIdMemberQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError = GetDbaasLogsServiceNameRoleRoleIdMember403 | GetDbaasLogsServiceNameRoleRoleIdMember404>(serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameRoleRoleIdMemberQueryKey(serviceName,roleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>> = ({ signal }) => getDbaasLogsServiceNameRoleRoleIdMember(serviceName,roleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && roleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameRoleRoleIdMemberQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>>
export type GetDbaasLogsServiceNameRoleRoleIdMemberQueryError = GetDbaasLogsServiceNameRoleRoleIdMember403 | GetDbaasLogsServiceNameRoleRoleIdMember404


export function useGetDbaasLogsServiceNameRoleRoleIdMember<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError = GetDbaasLogsServiceNameRoleRoleIdMember403 | GetDbaasLogsServiceNameRoleRoleIdMember404>(
 serviceName: string,
    roleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdMember<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError = GetDbaasLogsServiceNameRoleRoleIdMember403 | GetDbaasLogsServiceNameRoleRoleIdMember404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdMember<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError = GetDbaasLogsServiceNameRoleRoleIdMember403 | GetDbaasLogsServiceNameRoleRoleIdMember404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the member list of specified role
 */

export function useGetDbaasLogsServiceNameRoleRoleIdMember<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError = GetDbaasLogsServiceNameRoleRoleIdMember403 | GetDbaasLogsServiceNameRoleRoleIdMember404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMember>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameRoleRoleIdMemberQueryOptions(serviceName,roleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Append user into the member list of specified role
 */
export const postDbaasLogsServiceNameRoleRoleIdMember = (
    serviceName: string,
    roleId: string,
    dbaasLogsRoleMemberCreationOVH: DbaasLogsRoleMemberCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/member`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRoleMemberCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleRoleIdMemberMutationOptions = <TError = PostDbaasLogsServiceNameRoleRoleIdMember403 | PostDbaasLogsServiceNameRoleRoleIdMember404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdMember>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRoleMemberCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdMember>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRoleMemberCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdMember>>, {serviceName: string;roleId: string;data: DbaasLogsRoleMemberCreationOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  postDbaasLogsServiceNameRoleRoleIdMember(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleRoleIdMemberMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdMember>>>
    export type PostDbaasLogsServiceNameRoleRoleIdMemberMutationBody = DbaasLogsRoleMemberCreationOVH
    export type PostDbaasLogsServiceNameRoleRoleIdMemberMutationError = PostDbaasLogsServiceNameRoleRoleIdMember403 | PostDbaasLogsServiceNameRoleRoleIdMember404

    /**
 * @summary Append user into the member list of specified role
 */
export const usePostDbaasLogsServiceNameRoleRoleIdMember = <TError = PostDbaasLogsServiceNameRoleRoleIdMember403 | PostDbaasLogsServiceNameRoleRoleIdMember404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdMember>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRoleMemberCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdMember>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRoleMemberCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleRoleIdMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove user from the member list of specified role
 */
export const deleteDbaasLogsServiceNameRoleRoleIdMemberUsername = (
    serviceName: string,
    roleId: string,
    username: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/member/${username}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationOptions = <TError = DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername403 | DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError,{serviceName: string;roleId: string;username: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError,{serviceName: string;roleId: string;username: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdMemberUsername>>, {serviceName: string;roleId: string;username: string}> = (props) => {
          const {serviceName,roleId,username} = props ?? {};

          return  deleteDbaasLogsServiceNameRoleRoleIdMemberUsername(serviceName,roleId,username,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdMemberUsername>>>
    
    export type DeleteDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationError = DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername403 | DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername404

    /**
 * @summary Remove user from the member list of specified role
 */
export const useDeleteDbaasLogsServiceNameRoleRoleIdMemberUsername = <TError = DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername403 | DeleteDbaasLogsServiceNameRoleRoleIdMemberUsername404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError,{serviceName: string;roleId: string;username: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdMemberUsername>>,
        TError,
        {serviceName: string;roleId: string;username: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the member metadata
 */
export const getDbaasLogsServiceNameRoleRoleIdMemberUsername = (
    serviceName: string,
    roleId: string,
    username: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsMemberOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/member/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameRoleRoleIdMemberUsernameQueryKey = (serviceName: string,
    roleId: string,
    username: string,) => {
    return [`/dbaas/logs/${serviceName}/role/${roleId}/member/${username}`] as const;
    }

    
export const getGetDbaasLogsServiceNameRoleRoleIdMemberUsernameQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError = GetDbaasLogsServiceNameRoleRoleIdMemberUsername403 | GetDbaasLogsServiceNameRoleRoleIdMemberUsername404>(serviceName: string,
    roleId: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameRoleRoleIdMemberUsernameQueryKey(serviceName,roleId,username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>> = ({ signal }) => getDbaasLogsServiceNameRoleRoleIdMemberUsername(serviceName,roleId,username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && roleId && username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameRoleRoleIdMemberUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>>
export type GetDbaasLogsServiceNameRoleRoleIdMemberUsernameQueryError = GetDbaasLogsServiceNameRoleRoleIdMemberUsername403 | GetDbaasLogsServiceNameRoleRoleIdMemberUsername404


export function useGetDbaasLogsServiceNameRoleRoleIdMemberUsername<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError = GetDbaasLogsServiceNameRoleRoleIdMemberUsername403 | GetDbaasLogsServiceNameRoleRoleIdMemberUsername404>(
 serviceName: string,
    roleId: string,
    username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdMemberUsername<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError = GetDbaasLogsServiceNameRoleRoleIdMemberUsername403 | GetDbaasLogsServiceNameRoleRoleIdMemberUsername404>(
 serviceName: string,
    roleId: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdMemberUsername<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError = GetDbaasLogsServiceNameRoleRoleIdMemberUsername403 | GetDbaasLogsServiceNameRoleRoleIdMemberUsername404>(
 serviceName: string,
    roleId: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the member metadata
 */

export function useGetDbaasLogsServiceNameRoleRoleIdMemberUsername<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError = GetDbaasLogsServiceNameRoleRoleIdMemberUsername403 | GetDbaasLogsServiceNameRoleRoleIdMemberUsername404>(
 serviceName: string,
    roleId: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameRoleRoleIdMemberUsernameQueryOptions(serviceName,roleId,username,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the member metadata
 */
export const putDbaasLogsServiceNameRoleRoleIdMemberUsername = (
    serviceName: string,
    roleId: string,
    username: string,
    dbaasLogsRoleMemberUpdateOVH: DbaasLogsRoleMemberUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/member/${username}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRoleMemberUpdateOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationOptions = <TError = PutDbaasLogsServiceNameRoleRoleIdMemberUsername403 | PutDbaasLogsServiceNameRoleRoleIdMemberUsername404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError,{serviceName: string;roleId: string;username: string;data: DbaasLogsRoleMemberUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError,{serviceName: string;roleId: string;username: string;data: DbaasLogsRoleMemberUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleIdMemberUsername>>, {serviceName: string;roleId: string;username: string;data: DbaasLogsRoleMemberUpdateOVH}> = (props) => {
          const {serviceName,roleId,username,data} = props ?? {};

          return  putDbaasLogsServiceNameRoleRoleIdMemberUsername(serviceName,roleId,username,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleIdMemberUsername>>>
    export type PutDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationBody = DbaasLogsRoleMemberUpdateOVH
    export type PutDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationError = PutDbaasLogsServiceNameRoleRoleIdMemberUsername403 | PutDbaasLogsServiceNameRoleRoleIdMemberUsername404

    /**
 * @summary Update the member metadata
 */
export const usePutDbaasLogsServiceNameRoleRoleIdMemberUsername = <TError = PutDbaasLogsServiceNameRoleRoleIdMemberUsername403 | PutDbaasLogsServiceNameRoleRoleIdMemberUsername404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleIdMemberUsername>>, TError,{serviceName: string;roleId: string;username: string;data: DbaasLogsRoleMemberUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameRoleRoleIdMemberUsername>>,
        TError,
        {serviceName: string;roleId: string;username: string;data: DbaasLogsRoleMemberUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameRoleRoleIdMemberUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of permissions of specified role
 */
export const getDbaasLogsServiceNameRoleRoleIdPermission = (
    serviceName: string,
    roleId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameRoleRoleIdPermissionQueryKey = (serviceName: string,
    roleId: string,) => {
    return [`/dbaas/logs/${serviceName}/role/${roleId}/permission`] as const;
    }

    
export const getGetDbaasLogsServiceNameRoleRoleIdPermissionQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermission404>(serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameRoleRoleIdPermissionQueryKey(serviceName,roleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>> = ({ signal }) => getDbaasLogsServiceNameRoleRoleIdPermission(serviceName,roleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && roleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameRoleRoleIdPermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>>
export type GetDbaasLogsServiceNameRoleRoleIdPermissionQueryError = GetDbaasLogsServiceNameRoleRoleIdPermission404


export function useGetDbaasLogsServiceNameRoleRoleIdPermission<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermission404>(
 serviceName: string,
    roleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdPermission<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermission404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdPermission<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermission404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of permissions of specified role
 */

export function useGetDbaasLogsServiceNameRoleRoleIdPermission<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermission404>(
 serviceName: string,
    roleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermission>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameRoleRoleIdPermissionQueryOptions(serviceName,roleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Append a elasticsearch alias permission to role
 */
export const postDbaasLogsServiceNameRoleRoleIdPermissionAlias = (
    serviceName: string,
    roleId: string,
    dbaasLogsRolePermissionAliasCreationOVH: DbaasLogsRolePermissionAliasCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/alias`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRolePermissionAliasCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleRoleIdPermissionAliasMutationOptions = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionAlias403 | PostDbaasLogsServiceNameRoleRoleIdPermissionAlias404 | PostDbaasLogsServiceNameRoleRoleIdPermissionAlias409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionAlias>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionAliasCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionAlias>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionAliasCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionAlias>>, {serviceName: string;roleId: string;data: DbaasLogsRolePermissionAliasCreationOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  postDbaasLogsServiceNameRoleRoleIdPermissionAlias(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleRoleIdPermissionAliasMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionAlias>>>
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionAliasMutationBody = DbaasLogsRolePermissionAliasCreationOVH
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionAliasMutationError = PostDbaasLogsServiceNameRoleRoleIdPermissionAlias403 | PostDbaasLogsServiceNameRoleRoleIdPermissionAlias404 | PostDbaasLogsServiceNameRoleRoleIdPermissionAlias409

    /**
 * @summary Append a elasticsearch alias permission to role
 */
export const usePostDbaasLogsServiceNameRoleRoleIdPermissionAlias = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionAlias403 | PostDbaasLogsServiceNameRoleRoleIdPermissionAlias404 | PostDbaasLogsServiceNameRoleRoleIdPermissionAlias409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionAlias>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionAliasCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionAlias>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRolePermissionAliasCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleRoleIdPermissionAliasMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Append a graylog dashboard permission to role
 */
export const postDbaasLogsServiceNameRoleRoleIdPermissionDashboard = (
    serviceName: string,
    roleId: string,
    dbaasLogsRolePermissionDashboardCreationOVH: DbaasLogsRolePermissionDashboardCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/dashboard`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRolePermissionDashboardCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleRoleIdPermissionDashboardMutationOptions = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard403 | PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard404 | PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionDashboard>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionDashboardCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionDashboard>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionDashboardCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionDashboard>>, {serviceName: string;roleId: string;data: DbaasLogsRolePermissionDashboardCreationOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  postDbaasLogsServiceNameRoleRoleIdPermissionDashboard(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleRoleIdPermissionDashboardMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionDashboard>>>
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionDashboardMutationBody = DbaasLogsRolePermissionDashboardCreationOVH
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionDashboardMutationError = PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard403 | PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard404 | PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard409

    /**
 * @summary Append a graylog dashboard permission to role
 */
export const usePostDbaasLogsServiceNameRoleRoleIdPermissionDashboard = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard403 | PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard404 | PostDbaasLogsServiceNameRoleRoleIdPermissionDashboard409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionDashboard>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionDashboardCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionDashboard>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRolePermissionDashboardCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleRoleIdPermissionDashboardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Append a elasticsearch index permission to role
 */
export const postDbaasLogsServiceNameRoleRoleIdPermissionIndex = (
    serviceName: string,
    roleId: string,
    dbaasLogsRolePermissionIndexCreationOVH: DbaasLogsRolePermissionIndexCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/index`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRolePermissionIndexCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleRoleIdPermissionIndexMutationOptions = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionIndex403 | PostDbaasLogsServiceNameRoleRoleIdPermissionIndex404 | PostDbaasLogsServiceNameRoleRoleIdPermissionIndex409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionIndex>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionIndexCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionIndex>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionIndexCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionIndex>>, {serviceName: string;roleId: string;data: DbaasLogsRolePermissionIndexCreationOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  postDbaasLogsServiceNameRoleRoleIdPermissionIndex(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleRoleIdPermissionIndexMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionIndex>>>
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionIndexMutationBody = DbaasLogsRolePermissionIndexCreationOVH
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionIndexMutationError = PostDbaasLogsServiceNameRoleRoleIdPermissionIndex403 | PostDbaasLogsServiceNameRoleRoleIdPermissionIndex404 | PostDbaasLogsServiceNameRoleRoleIdPermissionIndex409

    /**
 * @summary Append a elasticsearch index permission to role
 */
export const usePostDbaasLogsServiceNameRoleRoleIdPermissionIndex = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionIndex403 | PostDbaasLogsServiceNameRoleRoleIdPermissionIndex404 | PostDbaasLogsServiceNameRoleRoleIdPermissionIndex409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionIndex>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionIndexCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionIndex>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRolePermissionIndexCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleRoleIdPermissionIndexMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Append a OpenSearch Dashboards permission to role
 */
export const postDbaasLogsServiceNameRoleRoleIdPermissionOsd = (
    serviceName: string,
    roleId: string,
    dbaasLogsRolePermissionOsdCreationOVH: DbaasLogsRolePermissionOsdCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/osd`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRolePermissionOsdCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleRoleIdPermissionOsdMutationOptions = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionOsd403 | PostDbaasLogsServiceNameRoleRoleIdPermissionOsd404 | PostDbaasLogsServiceNameRoleRoleIdPermissionOsd409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionOsd>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionOsdCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionOsd>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionOsdCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionOsd>>, {serviceName: string;roleId: string;data: DbaasLogsRolePermissionOsdCreationOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  postDbaasLogsServiceNameRoleRoleIdPermissionOsd(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleRoleIdPermissionOsdMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionOsd>>>
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionOsdMutationBody = DbaasLogsRolePermissionOsdCreationOVH
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionOsdMutationError = PostDbaasLogsServiceNameRoleRoleIdPermissionOsd403 | PostDbaasLogsServiceNameRoleRoleIdPermissionOsd404 | PostDbaasLogsServiceNameRoleRoleIdPermissionOsd409

    /**
 * @summary Append a OpenSearch Dashboards permission to role
 */
export const usePostDbaasLogsServiceNameRoleRoleIdPermissionOsd = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionOsd403 | PostDbaasLogsServiceNameRoleRoleIdPermissionOsd404 | PostDbaasLogsServiceNameRoleRoleIdPermissionOsd409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionOsd>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionOsdCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionOsd>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRolePermissionOsdCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleRoleIdPermissionOsdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Append a graylog stream permission to role
 */
export const postDbaasLogsServiceNameRoleRoleIdPermissionStream = (
    serviceName: string,
    roleId: string,
    dbaasLogsRolePermissionStreamCreationOVH: DbaasLogsRolePermissionStreamCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/stream`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsRolePermissionStreamCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameRoleRoleIdPermissionStreamMutationOptions = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionStream403 | PostDbaasLogsServiceNameRoleRoleIdPermissionStream404 | PostDbaasLogsServiceNameRoleRoleIdPermissionStream409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionStream>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionStreamCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionStream>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionStreamCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionStream>>, {serviceName: string;roleId: string;data: DbaasLogsRolePermissionStreamCreationOVH}> = (props) => {
          const {serviceName,roleId,data} = props ?? {};

          return  postDbaasLogsServiceNameRoleRoleIdPermissionStream(serviceName,roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameRoleRoleIdPermissionStreamMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionStream>>>
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionStreamMutationBody = DbaasLogsRolePermissionStreamCreationOVH
    export type PostDbaasLogsServiceNameRoleRoleIdPermissionStreamMutationError = PostDbaasLogsServiceNameRoleRoleIdPermissionStream403 | PostDbaasLogsServiceNameRoleRoleIdPermissionStream404 | PostDbaasLogsServiceNameRoleRoleIdPermissionStream409

    /**
 * @summary Append a graylog stream permission to role
 */
export const usePostDbaasLogsServiceNameRoleRoleIdPermissionStream = <TError = PostDbaasLogsServiceNameRoleRoleIdPermissionStream403 | PostDbaasLogsServiceNameRoleRoleIdPermissionStream404 | PostDbaasLogsServiceNameRoleRoleIdPermissionStream409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionStream>>, TError,{serviceName: string;roleId: string;data: DbaasLogsRolePermissionStreamCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameRoleRoleIdPermissionStream>>,
        TError,
        {serviceName: string;roleId: string;data: DbaasLogsRolePermissionStreamCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameRoleRoleIdPermissionStreamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove specified permission
 */
export const deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId = (
    serviceName: string,
    roleId: string,
    permissionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/${permissionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdMutationOptions = <TError = DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId403 | DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError,{serviceName: string;roleId: string;permissionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError,{serviceName: string;roleId: string;permissionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, {serviceName: string;roleId: string;permissionId: string}> = (props) => {
          const {serviceName,roleId,permissionId} = props ?? {};

          return  deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId(serviceName,roleId,permissionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>>
    
    export type DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdMutationError = DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId403 | DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404

    /**
 * @summary Remove specified permission
 */
export const useDeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId = <TError = DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId403 | DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError,{serviceName: string;roleId: string;permissionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>,
        TError,
        {serviceName: string;roleId: string;permissionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns details of specified permission
 */
export const getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId = (
    serviceName: string,
    roleId: string,
    permissionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsPermissionOVH>(
      {url: `/dbaas/logs/${serviceName}/role/${roleId}/permission/${permissionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdQueryKey = (serviceName: string,
    roleId: string,
    permissionId: string,) => {
    return [`/dbaas/logs/${serviceName}/role/${roleId}/permission/${permissionId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404>(serviceName: string,
    roleId: string,
    permissionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdQueryKey(serviceName,roleId,permissionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>> = ({ signal }) => getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId(serviceName,roleId,permissionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && roleId && permissionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>>
export type GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdQueryError = GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404


export function useGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404>(
 serviceName: string,
    roleId: string,
    permissionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404>(
 serviceName: string,
    roleId: string,
    permissionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404>(
 serviceName: string,
    roleId: string,
    permissionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns details of specified permission
 */

export function useGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError = GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionId404>(
 serviceName: string,
    roleId: string,
    permissionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameRoleRoleIdPermissionPermissionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdQueryOptions(serviceName,roleId,permissionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getDbaasLogsServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dbaas/logs/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDbaasLogsServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>> = ({ signal }) => getDbaasLogsServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>>
export type GetDbaasLogsServiceNameServiceInfosQueryError = unknown


export function useGetDbaasLogsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDbaasLogsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDbaasLogsServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dbaas/logs/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDbaasLogsServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDbaasLogsServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDbaasLogsServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDbaasLogsServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDbaasLogsServiceNameServiceInfos>>>
    export type PutDbaasLogsServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDbaasLogsServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDbaasLogsServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDbaasLogsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDbaasLogsServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDbaasLogsServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the list of service tokens
 */
export const getDbaasLogsServiceNameToken = (
    serviceName: string,
    params?: GetDbaasLogsServiceNameTokenParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dbaas/logs/${serviceName}/token`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameTokenQueryKey = (serviceName: string,
    params?: GetDbaasLogsServiceNameTokenParams,) => {
    return [`/dbaas/logs/${serviceName}/token`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDbaasLogsServiceNameTokenQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError = GetDbaasLogsServiceNameToken403 | GetDbaasLogsServiceNameToken404>(serviceName: string,
    params?: GetDbaasLogsServiceNameTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameTokenQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>> = ({ signal }) => getDbaasLogsServiceNameToken(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>>
export type GetDbaasLogsServiceNameTokenQueryError = GetDbaasLogsServiceNameToken403 | GetDbaasLogsServiceNameToken404


export function useGetDbaasLogsServiceNameToken<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError = GetDbaasLogsServiceNameToken403 | GetDbaasLogsServiceNameToken404>(
 serviceName: string,
    params: undefined |  GetDbaasLogsServiceNameTokenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameToken<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError = GetDbaasLogsServiceNameToken403 | GetDbaasLogsServiceNameToken404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameToken<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError = GetDbaasLogsServiceNameToken403 | GetDbaasLogsServiceNameToken404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the list of service tokens
 */

export function useGetDbaasLogsServiceNameToken<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError = GetDbaasLogsServiceNameToken403 | GetDbaasLogsServiceNameToken404>(
 serviceName: string,
    params?: GetDbaasLogsServiceNameTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameTokenQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new token
 */
export const postDbaasLogsServiceNameToken = (
    serviceName: string,
    dbaasLogsTokenCreationOVH: DbaasLogsTokenCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsTokenCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameTokenMutationOptions = <TError = PostDbaasLogsServiceNameToken403 | PostDbaasLogsServiceNameToken404 | PostDbaasLogsServiceNameToken409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameToken>>, TError,{serviceName: string;data: DbaasLogsTokenCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameToken>>, TError,{serviceName: string;data: DbaasLogsTokenCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameToken>>, {serviceName: string;data: DbaasLogsTokenCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameToken(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameToken>>>
    export type PostDbaasLogsServiceNameTokenMutationBody = DbaasLogsTokenCreationOVH
    export type PostDbaasLogsServiceNameTokenMutationError = PostDbaasLogsServiceNameToken403 | PostDbaasLogsServiceNameToken404 | PostDbaasLogsServiceNameToken409

    /**
 * @summary Add a new token
 */
export const usePostDbaasLogsServiceNameToken = <TError = PostDbaasLogsServiceNameToken403 | PostDbaasLogsServiceNameToken404 | PostDbaasLogsServiceNameToken409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameToken>>, TError,{serviceName: string;data: DbaasLogsTokenCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameToken>>,
        TError,
        {serviceName: string;data: DbaasLogsTokenCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the specified token
 */
export const deleteDbaasLogsServiceNameTokenTokenId = (
    serviceName: string,
    tokenId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/token/${tokenId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbaasLogsServiceNameTokenTokenIdMutationOptions = <TError = DeleteDbaasLogsServiceNameTokenTokenId403 | DeleteDbaasLogsServiceNameTokenTokenId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameTokenTokenId>>, TError,{serviceName: string;tokenId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameTokenTokenId>>, TError,{serviceName: string;tokenId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameTokenTokenId>>, {serviceName: string;tokenId: string}> = (props) => {
          const {serviceName,tokenId} = props ?? {};

          return  deleteDbaasLogsServiceNameTokenTokenId(serviceName,tokenId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbaasLogsServiceNameTokenTokenIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameTokenTokenId>>>
    
    export type DeleteDbaasLogsServiceNameTokenTokenIdMutationError = DeleteDbaasLogsServiceNameTokenTokenId403 | DeleteDbaasLogsServiceNameTokenTokenId404

    /**
 * @summary Delete the specified token
 */
export const useDeleteDbaasLogsServiceNameTokenTokenId = <TError = DeleteDbaasLogsServiceNameTokenTokenId403 | DeleteDbaasLogsServiceNameTokenTokenId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbaasLogsServiceNameTokenTokenId>>, TError,{serviceName: string;tokenId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbaasLogsServiceNameTokenTokenId>>,
        TError,
        {serviceName: string;tokenId: string},
        TContext
      > => {

      const mutationOptions = getDeleteDbaasLogsServiceNameTokenTokenIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns the specified token
 */
export const getDbaasLogsServiceNameTokenTokenId = (
    serviceName: string,
    tokenId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTokenOVH>(
      {url: `/dbaas/logs/${serviceName}/token/${tokenId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameTokenTokenIdQueryKey = (serviceName: string,
    tokenId: string,) => {
    return [`/dbaas/logs/${serviceName}/token/${tokenId}`] as const;
    }

    
export const getGetDbaasLogsServiceNameTokenTokenIdQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError = GetDbaasLogsServiceNameTokenTokenId403 | GetDbaasLogsServiceNameTokenTokenId404>(serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameTokenTokenIdQueryKey(serviceName,tokenId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>> = ({ signal }) => getDbaasLogsServiceNameTokenTokenId(serviceName,tokenId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && tokenId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameTokenTokenIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>>
export type GetDbaasLogsServiceNameTokenTokenIdQueryError = GetDbaasLogsServiceNameTokenTokenId403 | GetDbaasLogsServiceNameTokenTokenId404


export function useGetDbaasLogsServiceNameTokenTokenId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError = GetDbaasLogsServiceNameTokenTokenId403 | GetDbaasLogsServiceNameTokenTokenId404>(
 serviceName: string,
    tokenId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameTokenTokenId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError = GetDbaasLogsServiceNameTokenTokenId403 | GetDbaasLogsServiceNameTokenTokenId404>(
 serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameTokenTokenId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError = GetDbaasLogsServiceNameTokenTokenId403 | GetDbaasLogsServiceNameTokenTokenId404>(
 serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns the specified token
 */

export function useGetDbaasLogsServiceNameTokenTokenId<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError = GetDbaasLogsServiceNameTokenTokenId403 | GetDbaasLogsServiceNameTokenTokenId404>(
 serviceName: string,
    tokenId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameTokenTokenId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameTokenTokenIdQueryOptions(serviceName,tokenId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns platform useful urls
 */
export const getDbaasLogsServiceNameUrl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsUrlOVH[]>(
      {url: `/dbaas/logs/${serviceName}/url`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbaasLogsServiceNameUrlQueryKey = (serviceName: string,) => {
    return [`/dbaas/logs/${serviceName}/url`] as const;
    }

    
export const getGetDbaasLogsServiceNameUrlQueryOptions = <TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError = GetDbaasLogsServiceNameUrl404>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbaasLogsServiceNameUrlQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>> = ({ signal }) => getDbaasLogsServiceNameUrl(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDbaasLogsServiceNameUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>>
export type GetDbaasLogsServiceNameUrlQueryError = GetDbaasLogsServiceNameUrl404


export function useGetDbaasLogsServiceNameUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError = GetDbaasLogsServiceNameUrl404>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError = GetDbaasLogsServiceNameUrl404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDbaasLogsServiceNameUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError = GetDbaasLogsServiceNameUrl404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns platform useful urls
 */

export function useGetDbaasLogsServiceNameUrl<TData = Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError = GetDbaasLogsServiceNameUrl404>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDbaasLogsServiceNameUrl>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDbaasLogsServiceNameUrlQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Initiate a password change procedure.
 */
export const postDbaasLogsServiceNameUserChangePassword = (
    serviceName: string,
    dbaasLogsUserChangePasswordCreationOVH: DbaasLogsUserChangePasswordCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsOperationOVH>(
      {url: `/dbaas/logs/${serviceName}/user/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsUserChangePasswordCreationOVH, signal
    },
      options);
    }
  


export const getPostDbaasLogsServiceNameUserChangePasswordMutationOptions = <TError = PostDbaasLogsServiceNameUserChangePassword403 | PostDbaasLogsServiceNameUserChangePassword404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameUserChangePassword>>, TError,{serviceName: string;data: DbaasLogsUserChangePasswordCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameUserChangePassword>>, TError,{serviceName: string;data: DbaasLogsUserChangePasswordCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDbaasLogsServiceNameUserChangePassword>>, {serviceName: string;data: DbaasLogsUserChangePasswordCreationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDbaasLogsServiceNameUserChangePassword(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDbaasLogsServiceNameUserChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postDbaasLogsServiceNameUserChangePassword>>>
    export type PostDbaasLogsServiceNameUserChangePasswordMutationBody = DbaasLogsUserChangePasswordCreationOVH
    export type PostDbaasLogsServiceNameUserChangePasswordMutationError = PostDbaasLogsServiceNameUserChangePassword403 | PostDbaasLogsServiceNameUserChangePassword404

    /**
 * @summary Initiate a password change procedure.
 */
export const usePostDbaasLogsServiceNameUserChangePassword = <TError = PostDbaasLogsServiceNameUserChangePassword403 | PostDbaasLogsServiceNameUserChangePassword404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDbaasLogsServiceNameUserChangePassword>>, TError,{serviceName: string;data: DbaasLogsUserChangePasswordCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDbaasLogsServiceNameUserChangePassword>>,
        TError,
        {serviceName: string;data: DbaasLogsUserChangePasswordCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostDbaasLogsServiceNameUserChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseRedhatParams,
  GetLicenseRedhatServiceNameTasksParams,
  LicenseRedhatRedHatOVH,
  LicenseRedhatRedHatWithIAMOVH,
  LicenseTaskOVH,
  PostLicenseRedhatServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseRedhat = (
    params?: GetLicenseRedhatParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/redhat`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseRedhatQueryKey = (params?: GetLicenseRedhatParams,) => {
    return [`/license/redhat`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseRedhatQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseRedhat>>, TError = unknown>(params?: GetLicenseRedhatParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhat>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseRedhatQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseRedhat>>> = ({ signal }) => getLicenseRedhat(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhat>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseRedhatQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseRedhat>>>
export type GetLicenseRedhatQueryError = unknown


export function useGetLicenseRedhat<TData = Awaited<ReturnType<typeof getLicenseRedhat>>, TError = unknown>(
 params: undefined |  GetLicenseRedhatParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhat>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhat>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhat<TData = Awaited<ReturnType<typeof getLicenseRedhat>>, TError = unknown>(
 params?: GetLicenseRedhatParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhat>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhat>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhat<TData = Awaited<ReturnType<typeof getLicenseRedhat>>, TError = unknown>(
 params?: GetLicenseRedhatParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhat>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseRedhat<TData = Awaited<ReturnType<typeof getLicenseRedhat>>, TError = unknown>(
 params?: GetLicenseRedhatParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhat>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseRedhatQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseRedhatServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseRedhatRedHatWithIAMOVH>(
      {url: `/license/redhat/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseRedhatServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/redhat/${serviceName}`] as const;
    }

    
export const getGetLicenseRedhatServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseRedhatServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>> = ({ signal }) => getLicenseRedhatServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseRedhatServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>>
export type GetLicenseRedhatServiceNameQueryError = unknown


export function useGetLicenseRedhatServiceName<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceName<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceName<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseRedhatServiceName<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseRedhatServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseRedhatServiceName = (
    serviceName: string,
    licenseRedhatRedHatOVH: NonReadonly<LicenseRedhatRedHatOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/redhat/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseRedhatRedHatOVH
    },
      options);
    }
  


export const getPutLicenseRedhatServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseRedhatServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseRedhatRedHatOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseRedhatServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseRedhatRedHatOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseRedhatServiceName>>, {serviceName: string;data: NonReadonly<LicenseRedhatRedHatOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseRedhatServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseRedhatServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseRedhatServiceName>>>
    export type PutLicenseRedhatServiceNameMutationBody = NonReadonly<LicenseRedhatRedHatOVH>
    export type PutLicenseRedhatServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseRedhatServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseRedhatServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseRedhatRedHatOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseRedhatServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseRedhatRedHatOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseRedhatServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseRedhatServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseRedhatServiceNameConfirmTerminationBody: PostLicenseRedhatServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/redhat/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseRedhatServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseRedhatServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseRedhatServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseRedhatServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseRedhatServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseRedhatServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseRedhatServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseRedhatServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseRedhatServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseRedhatServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseRedhatServiceNameConfirmTermination>>>
    export type PostLicenseRedhatServiceNameConfirmTerminationMutationBody = PostLicenseRedhatServiceNameConfirmTerminationBody
    export type PostLicenseRedhatServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseRedhatServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseRedhatServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseRedhatServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseRedhatServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseRedhatServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseRedhatServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseRedhatServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/redhat/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseRedhatServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/redhat/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseRedhatServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseRedhatServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>> = ({ signal }) => getLicenseRedhatServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseRedhatServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>>
export type GetLicenseRedhatServiceNameServiceInfosQueryError = unknown


export function useGetLicenseRedhatServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseRedhatServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseRedhatServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseRedhatServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/redhat/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseRedhatServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseRedhatServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseRedhatServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseRedhatServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseRedhatServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseRedhatServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseRedhatServiceNameServiceInfos>>>
    export type PutLicenseRedhatServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseRedhatServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseRedhatServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseRedhatServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseRedhatServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseRedhatServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary tasks linked to this license
 */
export const getLicenseRedhatServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseRedhatServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/redhat/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseRedhatServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseRedhatServiceNameTasksParams,) => {
    return [`/license/redhat/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseRedhatServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseRedhatServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseRedhatServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>> = ({ signal }) => getLicenseRedhatServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseRedhatServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>>
export type GetLicenseRedhatServiceNameTasksQueryError = unknown


export function useGetLicenseRedhatServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseRedhatServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseRedhatServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseRedhatServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary tasks linked to this license
 */

export function useGetLicenseRedhatServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseRedhatServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseRedhatServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseRedhatServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/redhat/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseRedhatServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/redhat/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseRedhatServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseRedhatServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>> = ({ signal }) => getLicenseRedhatServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseRedhatServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>>
export type GetLicenseRedhatServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseRedhatServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseRedhatServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseRedhatServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseRedhatServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseRedhatServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseRedhatServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/redhat/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseRedhatServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseRedhatServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseRedhatServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseRedhatServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseRedhatServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseRedhatServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseRedhatServiceNameTerminate>>>
    
    export type PostLicenseRedhatServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseRedhatServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseRedhatServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseRedhatServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseRedhatServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

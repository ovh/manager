/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody = {
  /** Shared passphrase to create the Active Directory trust */
  passphrase: string;
  /** Password of the horizonUI service account */
  serviceAccountPassword: string;
};

export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody = {
  /** Name of your Domain (example : domain.local) */
  domain: string;
  /** Password of the user */
  password: string;
  /** Name of the User who is going to add the Desktop in your Active Directory */
  username: string;
};

export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody = {
  /** Name of your Domain Controller (example : domain.local) */
  domain: string;
  /** IP of your Domain Controller */
  domainControllerIp: IpOVH;
};

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody = {
  /** IP of your Active Directory */
  activeDirectoryIP: Ipv4OVH;
  /** Name of your private domain */
  domain: string;
  /** Shared passphrase to create the Active Directory trust */
  passphrase: string;
  /** Password of the horizonUI service account */
  serviceAccountPassword: string;
};

export type PostHorizonViewServiceNameDomainTrustBody = {
  /** IP of your Active Directory */
  activeDirectoryIP: IpOVH;
  /** IP of your first DNS */
  dns1?: IpOVH;
  /** IP of your second DNS */
  dns2?: IpOVH;
  /** Domain of your active directory (for example domain.local) */
  domain: string;
};

export type PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody = {
  /** Change email of your admin user */
  email?: string;
};

export type PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody = {
  /** New password for this Horizon View user. It must fits your HaaS password policy. If this field is empty, a random password will be generated and sent to you by email. */
  password?: string;
};

export type GetHorizonViewServiceNameDedicatedHorizonTaskParams = {
/**
 * Filter the value of state property (=)
 */
state?: HorizonViewTaskStateEnumOVH;
};

export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody = {
  /** New password for this Horizon View user. It must fits your HaaS password policy. If this field is empty, a random password will be generated and sent to you by email. */
  password?: string;
};

export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody = {
  /** Email for your new user in Active diRectory. */
  email?: string;
  /** New password for this Horizon View user. It must fits your HaaS password policy. If this field is empty, a random password will be generated and sent to your  email. */
  password?: string;
  /** Username for your new user in Active Directory. */
  username: string;
};

export type PostHorizonViewServiceNameCustomerNetworkBody = {
  /** Name your network */
  name: string;
  /** The private network you want to reach. */
  network: IpBlockOVH;
};

export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody = {
  /** Enable windows Username option on a single Unified Access Gateway (only for hybrid Pool) */
  onSingleAP?: HorizonViewAccessPointTypeEnumOVH;
};

export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody = {
  /** Enable the 2FA on a single Access Point (only for hybrid Pool) */
  onSingleAP?: HorizonViewAccessPointTypeEnumOVH;
  /** The server radius IP */
  radiusIp: Ipv4OVH;
  /** The secret password for the two factor authentication */
  secret: string;
};

export type PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody = {
  /** Disable windows Username option on a single Unified Access Gateway (only for hybrid Pool) */
  onSingleAP?: HorizonViewAccessPointTypeEnumOVH;
};

export type PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody = {
  /** The private network you want to reach. */
  network: IpBlockOVH;
};

export type PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody = {
  /** Timeout (in hour) */
  expiration: number;
  /** Update timeout session on a single Unified Access Gateway (only for hybrid Pool) */
  onSingleAP?: HorizonViewAccessPointTypeEnumOVH;
};

export type PostHorizonViewServiceNameAccessPointBody = {
  /** The type of pool you want to deploy.  */
  poolType: HorizonViewPoolTypeOVH;
  /** You can customize your pool by choosing the private network (Ex : 10.0.0.0/16) */
  privateBlock?: IpBlockOVH;
  /** You can customize your pool by choosing its private Vlan ID. (smaller than 4095)  */
  privateVlan?: number;
  /** You need to use a public Ip if you want to deploy a public pool.  */
  vrouterPoolPublicIp?: IpOVH;
};

export type GetHorizonViewParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * All reasons you can provide for a service termination
 */
export type ServiceTerminationReasonEnumOVH = typeof ServiceTerminationReasonEnumOVH[keyof typeof ServiceTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationReasonEnumOVH = {
  FEATURES_DONT_SUIT_ME: 'FEATURES_DONT_SUIT_ME',
  LACK_OF_PERFORMANCES: 'LACK_OF_PERFORMANCES',
  MIGRATED_TO_ANOTHER_OVH_PRODUCT: 'MIGRATED_TO_ANOTHER_OVH_PRODUCT',
  MIGRATED_TO_COMPETITOR: 'MIGRATED_TO_COMPETITOR',
  NOT_ENOUGH_RECOGNITION: 'NOT_ENOUGH_RECOGNITION',
  NOT_NEEDED_ANYMORE: 'NOT_NEEDED_ANYMORE',
  NOT_RELIABLE: 'NOT_RELIABLE',
  NO_ANSWER: 'NO_ANSWER',
  OTHER: 'OTHER',
  PRODUCT_DIMENSION_DONT_SUIT_ME: 'PRODUCT_DIMENSION_DONT_SUIT_ME',
  PRODUCT_TOOLS_DONT_SUIT_ME: 'PRODUCT_TOOLS_DONT_SUIT_ME',
  TOO_EXPENSIVE: 'TOO_EXPENSIVE',
  TOO_HARD_TO_USE: 'TOO_HARD_TO_USE',
  UNSATIFIED_BY_CUSTOMER_SUPPORT: 'UNSATIFIED_BY_CUSTOMER_SUPPORT',
} as const;

/**
 * All future uses you can provide for a service termination
 */
export type ServiceTerminationFutureUseEnumOVH = typeof ServiceTerminationFutureUseEnumOVH[keyof typeof ServiceTerminationFutureUseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationFutureUseEnumOVH = {
  NOT_REPLACING_SERVICE: 'NOT_REPLACING_SERVICE',
  OTHER: 'OTHER',
  SUBSCRIBE_AN_OTHER_SERVICE: 'SUBSCRIBE_AN_OTHER_SERVICE',
  SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR',
  SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR',
} as const;

export type PostHorizonViewServiceNameConfirmTerminationBody = {
  /** Commentary about your termination request */
  commentary?: string;
  /** What next after your termination request */
  futureUse?: ServiceTerminationFutureUseEnumOVH;
  /** Reason of your termination request */
  reason?: ServiceTerminationReasonEnumOVH;
  /** The termination token sent by email to the admin contact */
  token: string;
};

export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  automaticV2024: 'automaticV2024',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * All zones a Cloud Desktop Infrastructure can be in
 */
export type HorizonViewZoneOVH = typeof HorizonViewZoneOVH[keyof typeof HorizonViewZoneOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HorizonViewZoneOVH = {
  Beauharnois: 'Beauharnois',
  Roubaix: 'Roubaix',
  Strasbourg: 'Strasbourg',
} as const;

/**
 * Horizon As A Service User
 */
export interface HorizonViewUserOVH {
  /** Username of your HaaS User */
  readonly username?: string;
}

/**
 * All states a Horizon View  Task can be in
 */
export type HorizonViewTaskStateEnumOVH = typeof HorizonViewTaskStateEnumOVH[keyof typeof HorizonViewTaskStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HorizonViewTaskStateEnumOVH = {
  canceled: 'canceled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  fixing: 'fixing',
  toCancel: 'toCancel',
  toCreate: 'toCreate',
  todo: 'todo',
  unknown: 'unknown',
  waitingForChilds: 'waitingForChilds',
  waitingTodo: 'waitingTodo',
} as const;

/**
 * Operation on a Horizon View component
 */
export interface HorizonViewTaskOVH {
  /**
   * Current progress description
   * @nullable
   */
  readonly description?: string | null;
  /**
   * Task last modification date
   * @nullable
   */
  readonly lastModificationDate?: string | null;
  /** Task name */
  readonly name?: string;
  /** Current progress */
  readonly progress?: number;
  /** Current Task state */
  readonly state?: HorizonViewTaskStateEnumOVH;
  /** Task id */
  readonly taskId?: number;
}

/**
 * All states a dedicated horizon  can be in
 */
export type HorizonViewStateEnumOVH = typeof HorizonViewStateEnumOVH[keyof typeof HorizonViewStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HorizonViewStateEnumOVH = {
  available: 'available',
  creating: 'creating',
  delivered: 'delivered',
  disabled: 'disabled',
  error: 'error',
  reserved: 'reserved',
} as const;

/**
 * Pool type the customer can deploy
 */
export type HorizonViewPoolTypeOVH = typeof HorizonViewPoolTypeOVH[keyof typeof HorizonViewPoolTypeOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HorizonViewPoolTypeOVH = {
  hybridPool: 'hybridPool',
  privatePool: 'privatePool',
  publicPool: 'publicPool',
} as const;

/**
 * Next hop IP to reach virtual desktops network for private Access Point
 * @nullable
 */
export type HorizonViewPoolOVHIntercoPrivateNextHop = IpOVH | null;

/**
 * Next hop IP to reach virtual desktops network for public Access Point
 * @nullable
 */
export type HorizonViewPoolOVHIntercoNextHop = IpOVH | null;

/**
 * All informations about access point
 */
export interface HorizonViewPoolOVH {
  /** Pool id */
  readonly accessPointId?: number;
  /** DHCP netmask in this port group */
  readonly dhcpNetmask?: IpOVH;
  /** DHCP network in this port group */
  readonly dhcpNetwork?: IpOVH;
  /** External url of your access point */
  readonly externalUrl?: string;
  /**
   * Next hop IP to reach virtual desktops network for public Access Point
   * @nullable
   */
  readonly intercoNextHop?: HorizonViewPoolOVHIntercoNextHop;
  /**
   * Next hop IP to reach virtual desktops network for private Access Point
   * @nullable
   */
  readonly intercoPrivateNextHop?: HorizonViewPoolOVHIntercoPrivateNextHop;
  /** Port group id */
  readonly portGroupId?: string;
  /** Network state */
  readonly state?: HorizonViewStateEnumOVH;
  /** Two factor authentication */
  readonly twoFA?: boolean;
  /** Pool type */
  readonly type?: HorizonViewPoolTypeOVH;
}

/**
 * IP of your second DNS
 * @nullable
 */
export type HorizonViewDomainTrustOVHDns2 = IpOVH | null;

/**
 * IP of your first DNS
 * @nullable
 */
export type HorizonViewDomainTrustOVHDns1 = IpOVH | null;

/**
 * List all Active Directories linked to your CDI Active Directory
 */
export interface HorizonViewDomainTrustOVH {
  /** IP of your Active Directory */
  readonly activeDirectoryIP?: IpOVH;
  /**
   * IP of your first DNS
   * @nullable
   */
  readonly dns1?: HorizonViewDomainTrustOVHDns1;
  /**
   * IP of your second DNS
   * @nullable
   */
  readonly dns2?: HorizonViewDomainTrustOVHDns2;
  /** Name of your private domain */
  readonly domain?: string;
  /** Domain trust id */
  readonly domainTrustId?: number;
}

/**
 * Horizon View as a Service
 */
export interface HorizonViewDedicatedHorizonOVH {
  /** The location of your administration servers in our datacenter */
  readonly masterZone?: HorizonViewZoneOVH;
  /** Your Horizon Dedicated Cloud  */
  readonly privateCloudName?: string;
  /** The location of your datacenter */
  readonly privateCloudZone?: HorizonViewZoneOVH;
  /** Url of your Dedicated Horizon */
  readonly publicUrl?: string;
  /** Current state of your Dedicated Horizon */
  readonly state?: HorizonViewStateEnumOVH;
  /** View Storage Accelerator for Vcenter */
  readonly storageAccelerator?: boolean;
  /** Version of your Dedicated Horizon */
  readonly version?: string;
}

/**
 * IAM resource metadata
 * @nullable
 */
export type HorizonViewDatacenterWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * Cloud Desktop Infrastructure Datacenter
 */
export interface HorizonViewDatacenterWithIAMOVH {
  /** IP of the VDI Active Directory */
  readonly activeDirectoryIP?: IpOVH;
  /** Domain of the admin infrastructure */
  readonly adminDomain?: string;
  /** Next hop to contact the private admin network */
  readonly adminNetworkNextHop?: string;
  /** Private network of the admin infrastructure */
  readonly adminPrivateNetwork?: IpBlockOVH;
  /** Customer interco IP allows you to communicate between your private infrastructure and your CDI infrastructure throw the vrack. */
  readonly customerIntercoIP?: IpOVH;
  /** Customer interco netmask allows you to communicate between your private infrastructure and your CDI infrastructure throw the vrack. */
  readonly customerIntercoMask?: IpOVH;
  /** Customer interco vlan allows you to communicate between your private infrastructure and your CDI infrastructure throw the vrack. */
  readonly customerIntercoVlanId?: number;
  /** Datacenter ids */
  readonly datacenterId?: number;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: HorizonViewDatacenterWithIAMOVHIam;
  /** Name of the datacenter */
  readonly name?: string;
  /** Domain of your Horizon */
  readonly serviceName?: string;
}

/**
 * Cloud Desktop Infrastructure Datacenter
 */
export interface HorizonViewDatacenterOVH {
  /** IP of the VDI Active Directory */
  readonly activeDirectoryIP?: IpOVH;
  /** Domain of the admin infrastructure */
  readonly adminDomain?: string;
  /** Next hop to contact the private admin network */
  readonly adminNetworkNextHop?: string;
  /** Private network of the admin infrastructure */
  readonly adminPrivateNetwork?: IpBlockOVH;
  /** Customer interco IP allows you to communicate between your private infrastructure and your CDI infrastructure throw the vrack. */
  readonly customerIntercoIP?: IpOVH;
  /** Customer interco netmask allows you to communicate between your private infrastructure and your CDI infrastructure throw the vrack. */
  readonly customerIntercoMask?: IpOVH;
  /** Customer interco vlan allows you to communicate between your private infrastructure and your CDI infrastructure throw the vrack. */
  readonly customerIntercoVlanId?: number;
  /** Datacenter ids */
  readonly datacenterId?: number;
  /** Name of the datacenter */
  readonly name?: string;
  /** Domain of your Horizon */
  readonly serviceName?: string;
}

/**
 * Horizon As A Service Customer  User
 */
export interface HorizonViewCustomerUserOVH {
  /**
   * Email of your HaaS User
   * @nullable
   */
  readonly email?: string | null;
  /** Customer id */
  readonly id?: number;
  /** Customer username of your HaaS User */
  readonly username?: string;
}

/**
 * You can reach from your virtual desktops, your customer network 
 */
export interface HorizonViewCustomerNetworkPoolOVH {
  /** Customer Network id */
  readonly customerNetworkId?: number;
  /** Name of your network */
  readonly name?: string;
  /** Customer network */
  readonly network?: string;
}

/**
 * You can reach from your virtual desktops, your customer network 
 */
export interface HorizonViewCustomerNetworkOVH {
  /** Customer Network id */
  readonly customerNetworkId?: number;
  /** Name of your network */
  readonly name?: string;
  /** Customer network */
  readonly network?: string;
}

/**
 * Access Point type the customer can deploy
 */
export type HorizonViewAccessPointTypeEnumOVH = typeof HorizonViewAccessPointTypeEnumOVH[keyof typeof HorizonViewAccessPointTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HorizonViewAccessPointTypeEnumOVH = {
  privateAccessPoint: 'privateAccessPoint',
  publicAccessPoint: 'publicAccessPoint',
} as const;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


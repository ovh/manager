/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetHorizonViewParams,
  GetHorizonViewServiceNameDedicatedHorizonTaskParams,
  HorizonViewCustomerNetworkOVH,
  HorizonViewCustomerNetworkPoolOVH,
  HorizonViewCustomerUserOVH,
  HorizonViewDatacenterWithIAMOVH,
  HorizonViewDedicatedHorizonOVH,
  HorizonViewDomainTrustOVH,
  HorizonViewPoolOVH,
  HorizonViewTaskOVH,
  HorizonViewUserOVH,
  PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody,
  PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody,
  PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody,
  PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody,
  PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody,
  PostHorizonViewServiceNameAccessPointBody,
  PostHorizonViewServiceNameConfirmTerminationBody,
  PostHorizonViewServiceNameCustomerNetworkBody,
  PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody,
  PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody,
  PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody,
  PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody,
  PostHorizonViewServiceNameDomainTrustBody,
  PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody,
  PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody,
  PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody,
  PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Horizon View as a Service
 */
export const getHorizonView = (
    params?: GetHorizonViewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/horizonView`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHorizonViewQueryKey = (params?: GetHorizonViewParams,) => {
    return [`/horizonView`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHorizonViewQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonView>>, TError = unknown>(params?: GetHorizonViewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonView>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonView>>> = ({ signal }) => getHorizonView(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonView>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonView>>>
export type GetHorizonViewQueryError = unknown


export function useGetHorizonView<TData = Awaited<ReturnType<typeof getHorizonView>>, TError = unknown>(
 params: undefined |  GetHorizonViewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonView>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonView>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonView<TData = Awaited<ReturnType<typeof getHorizonView>>, TError = unknown>(
 params?: GetHorizonViewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonView>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonView>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonView<TData = Awaited<ReturnType<typeof getHorizonView>>, TError = unknown>(
 params?: GetHorizonViewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonView>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Horizon View as a Service
 */

export function useGetHorizonView<TData = Awaited<ReturnType<typeof getHorizonView>>, TError = unknown>(
 params?: GetHorizonViewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonView>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewDatacenterWithIAMOVH>(
      {url: `/horizonView/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}`] as const;
    }

    
export const getGetHorizonViewServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceName>>> = ({ signal }) => getHorizonViewServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceName>>>
export type GetHorizonViewServiceNameQueryError = unknown


export function useGetHorizonViewServiceName<TData = Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceName<TData = Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceName<TData = Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceName<TData = Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pool associated with this Datacenter
 */
export const getHorizonViewServiceNameAccessPoint = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/horizonView/${serviceName}/accessPoint`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameAccessPointQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/accessPoint`] as const;
    }

    
export const getGetHorizonViewServiceNameAccessPointQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameAccessPointQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>> = ({ signal }) => getHorizonViewServiceNameAccessPoint(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameAccessPointQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>>
export type GetHorizonViewServiceNameAccessPointQueryError = unknown


export function useGetHorizonViewServiceNameAccessPoint<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPoint<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPoint<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Pool associated with this Datacenter
 */

export function useGetHorizonViewServiceNameAccessPoint<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameAccessPointQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add new access point to create a new network
 */
export const postHorizonViewServiceNameAccessPoint = (
    serviceName: string,
    postHorizonViewServiceNameAccessPointBody: PostHorizonViewServiceNameAccessPointBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/accessPoint`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameAccessPointBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPoint>>, TError,{serviceName: string;data: PostHorizonViewServiceNameAccessPointBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPoint>>, TError,{serviceName: string;data: PostHorizonViewServiceNameAccessPointBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPoint>>, {serviceName: string;data: PostHorizonViewServiceNameAccessPointBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameAccessPoint(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPoint>>>
    export type PostHorizonViewServiceNameAccessPointMutationBody = PostHorizonViewServiceNameAccessPointBody
    export type PostHorizonViewServiceNameAccessPointMutationError = unknown

    /**
 * @summary Add new access point to create a new network
 */
export const usePostHorizonViewServiceNameAccessPoint = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPoint>>, TError,{serviceName: string;data: PostHorizonViewServiceNameAccessPointBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPoint>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameAccessPointBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this access point 
 */
export const deleteHorizonViewServiceNameAccessPointAccessPointId = (
    serviceName: string,
    accessPointId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHorizonViewServiceNameAccessPointAccessPointIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointId>>, TError,{serviceName: string;accessPointId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointId>>, TError,{serviceName: string;accessPointId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointId>>, {serviceName: string;accessPointId: number}> = (props) => {
          const {serviceName,accessPointId} = props ?? {};

          return  deleteHorizonViewServiceNameAccessPointAccessPointId(serviceName,accessPointId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHorizonViewServiceNameAccessPointAccessPointIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointId>>>
    
    export type DeleteHorizonViewServiceNameAccessPointAccessPointIdMutationError = unknown

    /**
 * @summary Delete this access point 
 */
export const useDeleteHorizonViewServiceNameAccessPointAccessPointId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointId>>, TError,{serviceName: string;accessPointId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointId>>,
        TError,
        {serviceName: string;accessPointId: number},
        TContext
      > => {

      const mutationOptions = getDeleteHorizonViewServiceNameAccessPointAccessPointIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameAccessPointAccessPointId = (
    serviceName: string,
    accessPointId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewPoolOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameAccessPointAccessPointIdQueryKey = (serviceName: string,
    accessPointId: number,) => {
    return [`/horizonView/${serviceName}/accessPoint/${accessPointId}`] as const;
    }

    
export const getGetHorizonViewServiceNameAccessPointAccessPointIdQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError = unknown>(serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameAccessPointAccessPointIdQueryKey(serviceName,accessPointId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>> = ({ signal }) => getHorizonViewServiceNameAccessPointAccessPointId(serviceName,accessPointId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && accessPointId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameAccessPointAccessPointIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>>
export type GetHorizonViewServiceNameAccessPointAccessPointIdQueryError = unknown


export function useGetHorizonViewServiceNameAccessPointAccessPointId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPointAccessPointId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPointAccessPointId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameAccessPointAccessPointId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameAccessPointAccessPointIdQueryOptions(serviceName,accessPointId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Manage your session Timeout on Unified Access Gateway
 */
export const postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout = (
    serviceName: string,
    accessPointId: number,
    postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody: PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/changeSessionTimeout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout>>, {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody}> = (props) => {
          const {serviceName,accessPointId,data} = props ?? {};

          return  postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout(serviceName,accessPointId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout>>>
    export type PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutMutationBody = PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody
    export type PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutMutationError = unknown

    /**
 * @summary Manage your session Timeout on Unified Access Gateway
 */
export const usePostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeout>>,
        TError,
        {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary You can reach from the Desktops your private network
 */
export const getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork = (
    serviceName: string,
    accessPointId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/customerNetwork`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkQueryKey = (serviceName: string,
    accessPointId: number,) => {
    return [`/horizonView/${serviceName}/accessPoint/${accessPointId}/customerNetwork`] as const;
    }

    
export const getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError = unknown>(serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkQueryKey(serviceName,accessPointId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>> = ({ signal }) => getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork(serviceName,accessPointId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && accessPointId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>>
export type GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkQueryError = unknown


export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary You can reach from the Desktops your private network
 */

export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError = unknown>(
 serviceName: string,
    accessPointId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkQueryOptions(serviceName,accessPointId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new network 
 */
export const postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork = (
    serviceName: string,
    accessPointId: number,
    postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody: PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/customerNetwork`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody}> = (props) => {
          const {serviceName,accessPointId,data} = props ?? {};

          return  postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork(serviceName,accessPointId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>>
    export type PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkMutationBody = PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody
    export type PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkMutationError = unknown

    /**
 * @summary Add a new network 
 */
export const usePostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdCustomerNetwork>>,
        TError,
        {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Customer Network
 */
export const deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId = (
    serviceName: string,
    accessPointId: number,
    customerNetworkId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/customerNetwork/${customerNetworkId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError,{serviceName: string;accessPointId: number;customerNetworkId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError,{serviceName: string;accessPointId: number;customerNetworkId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, {serviceName: string;accessPointId: number;customerNetworkId: number}> = (props) => {
          const {serviceName,accessPointId,customerNetworkId} = props ?? {};

          return  deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId(serviceName,accessPointId,customerNetworkId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>>
    
    export type DeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdMutationError = unknown

    /**
 * @summary Delete this Customer Network
 */
export const useDeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError,{serviceName: string;accessPointId: number;customerNetworkId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>,
        TError,
        {serviceName: string;accessPointId: number;customerNetworkId: number},
        TContext
      > => {

      const mutationOptions = getDeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId = (
    serviceName: string,
    accessPointId: number,
    customerNetworkId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewCustomerNetworkPoolOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/customerNetwork/${customerNetworkId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdQueryKey = (serviceName: string,
    accessPointId: number,
    customerNetworkId: number,) => {
    return [`/horizonView/${serviceName}/accessPoint/${accessPointId}/customerNetwork/${customerNetworkId}`] as const;
    }

    
export const getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError = unknown>(serviceName: string,
    accessPointId: number,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdQueryKey(serviceName,accessPointId,customerNetworkId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>> = ({ signal }) => getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId(serviceName,accessPointId,customerNetworkId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && accessPointId && customerNetworkId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>>
export type GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdQueryError = unknown


export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number,
    customerNetworkId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    accessPointId: number,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdQueryOptions(serviceName,accessPointId,customerNetworkId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disable two factor authentication on your pool
 */
export const postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA = (
    serviceName: string,
    accessPointId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/disableTwoFA`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA>>, TError,{serviceName: string;accessPointId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA>>, TError,{serviceName: string;accessPointId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA>>, {serviceName: string;accessPointId: number}> = (props) => {
          const {serviceName,accessPointId} = props ?? {};

          return  postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA(serviceName,accessPointId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA>>>
    
    export type PostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAMutationError = unknown

    /**
 * @summary Disable two factor authentication on your pool
 */
export const usePostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA>>, TError,{serviceName: string;accessPointId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFA>>,
        TError,
        {serviceName: string;accessPointId: number},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable windows Username option on Unified Access Gateway
 */
export const postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption = (
    serviceName: string,
    accessPointId: number,
    postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody: PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/disableWindowsUsernameOption`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption>>, {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody}> = (props) => {
          const {serviceName,accessPointId,data} = props ?? {};

          return  postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption(serviceName,accessPointId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption>>>
    export type PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionMutationBody = PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody
    export type PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionMutationError = unknown

    /**
 * @summary Disable windows Username option on Unified Access Gateway
 */
export const usePostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOption>>,
        TError,
        {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable two factor authentication on your pool
 */
export const postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA = (
    serviceName: string,
    accessPointId: number,
    postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody: PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/enableTwoFA`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA>>, {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody}> = (props) => {
          const {serviceName,accessPointId,data} = props ?? {};

          return  postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA(serviceName,accessPointId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA>>>
    export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAMutationBody = PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody
    export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAMutationError = unknown

    /**
 * @summary Enable two factor authentication on your pool
 */
export const usePostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFA>>,
        TError,
        {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFABody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable windows Username option on Unified Access Gateway
 */
export const postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption = (
    serviceName: string,
    accessPointId: number,
    postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody: PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/accessPoint/${accessPointId}/enableWindowsUsernameOption`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption>>, {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody}> = (props) => {
          const {serviceName,accessPointId,data} = props ?? {};

          return  postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption(serviceName,accessPointId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption>>>
    export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionMutationBody = PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody
    export type PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionMutationError = unknown

    /**
 * @summary Enable windows Username option on Unified Access Gateway
 */
export const usePostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption>>, TError,{serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOption>>,
        TError,
        {serviceName: string;accessPointId: number;data: PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postHorizonViewServiceNameConfirmTermination = (
    serviceName: string,
    postHorizonViewServiceNameConfirmTerminationBody: PostHorizonViewServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/horizonView/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostHorizonViewServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostHorizonViewServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameConfirmTermination>>, {serviceName: string;data: PostHorizonViewServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameConfirmTermination>>>
    export type PostHorizonViewServiceNameConfirmTerminationMutationBody = PostHorizonViewServiceNameConfirmTerminationBody
    export type PostHorizonViewServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostHorizonViewServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostHorizonViewServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary You can reach from the Desktops your private network
 */
export const getHorizonViewServiceNameCustomerNetwork = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/horizonView/${serviceName}/customerNetwork`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameCustomerNetworkQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/customerNetwork`] as const;
    }

    
export const getGetHorizonViewServiceNameCustomerNetworkQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameCustomerNetworkQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>> = ({ signal }) => getHorizonViewServiceNameCustomerNetwork(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameCustomerNetworkQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>>
export type GetHorizonViewServiceNameCustomerNetworkQueryError = unknown


export function useGetHorizonViewServiceNameCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary You can reach from the Desktops your private network
 */

export function useGetHorizonViewServiceNameCustomerNetwork<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetwork>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameCustomerNetworkQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new network 
 */
export const postHorizonViewServiceNameCustomerNetwork = (
    serviceName: string,
    postHorizonViewServiceNameCustomerNetworkBody: PostHorizonViewServiceNameCustomerNetworkBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/customerNetwork`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameCustomerNetworkBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameCustomerNetworkMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameCustomerNetwork>>, TError,{serviceName: string;data: PostHorizonViewServiceNameCustomerNetworkBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameCustomerNetwork>>, TError,{serviceName: string;data: PostHorizonViewServiceNameCustomerNetworkBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameCustomerNetwork>>, {serviceName: string;data: PostHorizonViewServiceNameCustomerNetworkBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameCustomerNetwork(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameCustomerNetworkMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameCustomerNetwork>>>
    export type PostHorizonViewServiceNameCustomerNetworkMutationBody = PostHorizonViewServiceNameCustomerNetworkBody
    export type PostHorizonViewServiceNameCustomerNetworkMutationError = unknown

    /**
 * @summary Add a new network 
 */
export const usePostHorizonViewServiceNameCustomerNetwork = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameCustomerNetwork>>, TError,{serviceName: string;data: PostHorizonViewServiceNameCustomerNetworkBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameCustomerNetwork>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameCustomerNetworkBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameCustomerNetworkMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Customer Network
 */
export const deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId = (
    serviceName: string,
    customerNetworkId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/customerNetwork/${customerNetworkId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError,{serviceName: string;customerNetworkId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError,{serviceName: string;customerNetworkId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, {serviceName: string;customerNetworkId: number}> = (props) => {
          const {serviceName,customerNetworkId} = props ?? {};

          return  deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId(serviceName,customerNetworkId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>>
    
    export type DeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkIdMutationError = unknown

    /**
 * @summary Delete this Customer Network
 */
export const useDeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError,{serviceName: string;customerNetworkId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>,
        TError,
        {serviceName: string;customerNetworkId: number},
        TContext
      > => {

      const mutationOptions = getDeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameCustomerNetworkCustomerNetworkId = (
    serviceName: string,
    customerNetworkId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewCustomerNetworkOVH>(
      {url: `/horizonView/${serviceName}/customerNetwork/${customerNetworkId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdQueryKey = (serviceName: string,
    customerNetworkId: number,) => {
    return [`/horizonView/${serviceName}/customerNetwork/${customerNetworkId}`] as const;
    }

    
export const getGetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError = unknown>(serviceName: string,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdQueryKey(serviceName,customerNetworkId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>> = ({ signal }) => getHorizonViewServiceNameCustomerNetworkCustomerNetworkId(serviceName,customerNetworkId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && customerNetworkId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>>
export type GetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdQueryError = unknown


export function useGetHorizonViewServiceNameCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    customerNetworkId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameCustomerNetworkCustomerNetworkId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError = unknown>(
 serviceName: string,
    customerNetworkId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameCustomerNetworkCustomerNetworkId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdQueryOptions(serviceName,customerNetworkId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameDedicatedHorizon = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewDedicatedHorizonOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDedicatedHorizonQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/dedicatedHorizon`] as const;
    }

    
export const getGetHorizonViewServiceNameDedicatedHorizonQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDedicatedHorizonQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>> = ({ signal }) => getHorizonViewServiceNameDedicatedHorizon(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDedicatedHorizonQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>>
export type GetHorizonViewServiceNameDedicatedHorizonQueryError = unknown


export function useGetHorizonViewServiceNameDedicatedHorizon<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizon<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizon<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameDedicatedHorizon<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizon>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDedicatedHorizonQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Account to access to your pool
 */
export const getHorizonViewServiceNameDedicatedHorizonCustomerUser = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/customerUser`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDedicatedHorizonCustomerUserQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/dedicatedHorizon/customerUser`] as const;
    }

    
export const getGetHorizonViewServiceNameDedicatedHorizonCustomerUserQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDedicatedHorizonCustomerUserQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>> = ({ signal }) => getHorizonViewServiceNameDedicatedHorizonCustomerUser(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDedicatedHorizonCustomerUserQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>>
export type GetHorizonViewServiceNameDedicatedHorizonCustomerUserQueryError = unknown


export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Account to access to your pool
 */

export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDedicatedHorizonCustomerUserQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new customer user 
 */
export const postHorizonViewServiceNameDedicatedHorizonCustomerUser = (
    serviceName: string,
    postHorizonViewServiceNameDedicatedHorizonCustomerUserBody: PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/customerUser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDedicatedHorizonCustomerUserBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDedicatedHorizonCustomerUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUser>>, {serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameDedicatedHorizonCustomerUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUser>>>
    export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserMutationBody = PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody
    export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserMutationError = unknown

    /**
 * @summary Create a new customer user 
 */
export const usePostHorizonViewServiceNameDedicatedHorizonCustomerUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUser>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUser>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDedicatedHorizonCustomerUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Customer User
 */
export const deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername = (
    serviceName: string,
    username: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/customerUser/${username}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError,{serviceName: string;username: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError,{serviceName: string;username: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, {serviceName: string;username: string}> = (props) => {
          const {serviceName,username} = props ?? {};

          return  deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername(serviceName,username,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>>
    
    export type DeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameMutationError = unknown

    /**
 * @summary Delete this Customer User
 */
export const useDeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError,{serviceName: string;username: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>,
        TError,
        {serviceName: string;username: string},
        TContext
      > => {

      const mutationOptions = getDeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername = (
    serviceName: string,
    username: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewCustomerUserOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/customerUser/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameQueryKey = (serviceName: string,
    username: string,) => {
    return [`/horizonView/${serviceName}/dedicatedHorizon/customerUser/${username}`] as const;
    }

    
export const getGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError = unknown>(serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameQueryKey(serviceName,username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>> = ({ signal }) => getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername(serviceName,username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>>
export type GetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameQueryError = unknown


export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsername<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsername<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsername<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsername<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError = unknown>(
 serviceName: string,
    username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonCustomerUserUsername>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameQueryOptions(serviceName,username,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change Horizon View Customer  user password
 */
export const postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword = (
    serviceName: string,
    username: string,
    postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody: PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/customerUser/${username}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword>>, TError,{serviceName: string;username: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword>>, TError,{serviceName: string;username: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword>>, {serviceName: string;username: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody}> = (props) => {
          const {serviceName,username,data} = props ?? {};

          return  postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword(serviceName,username,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword>>>
    export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordMutationBody = PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody
    export type PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordMutationError = unknown

    /**
 * @summary Change Horizon View Customer  user password
 */
export const usePostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword>>, TError,{serviceName: string;username: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePassword>>,
        TError,
        {serviceName: string;username: string;data: PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable the View Storage Accelerator option on VCenter
 */
export const postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/disableStorageAccelerator`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator>>>
    
    export type PostHorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorMutationError = unknown

    /**
 * @summary Disable the View Storage Accelerator option on VCenter
 */
export const usePostHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonDisableStorageAccelerator>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable the View Storage Accelerator option on VCenter
 */
export const postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/enableStorageAccelerator`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator>>>
    
    export type PostHorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorMutationError = unknown

    /**
 * @summary Enable the View Storage Accelerator option on VCenter
 */
export const usePostHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonEnableStorageAccelerator>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tasks associated with this Dedicated Horizon
 */
export const getHorizonViewServiceNameDedicatedHorizonTask = (
    serviceName: string,
    params?: GetHorizonViewServiceNameDedicatedHorizonTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDedicatedHorizonTaskQueryKey = (serviceName: string,
    params?: GetHorizonViewServiceNameDedicatedHorizonTaskParams,) => {
    return [`/horizonView/${serviceName}/dedicatedHorizon/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHorizonViewServiceNameDedicatedHorizonTaskQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError = unknown>(serviceName: string,
    params?: GetHorizonViewServiceNameDedicatedHorizonTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDedicatedHorizonTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>> = ({ signal }) => getHorizonViewServiceNameDedicatedHorizonTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDedicatedHorizonTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>>
export type GetHorizonViewServiceNameDedicatedHorizonTaskQueryError = unknown


export function useGetHorizonViewServiceNameDedicatedHorizonTask<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetHorizonViewServiceNameDedicatedHorizonTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonTask<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError = unknown>(
 serviceName: string,
    params?: GetHorizonViewServiceNameDedicatedHorizonTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonTask<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError = unknown>(
 serviceName: string,
    params?: GetHorizonViewServiceNameDedicatedHorizonTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks associated with this Dedicated Horizon
 */

export function useGetHorizonViewServiceNameDedicatedHorizonTask<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError = unknown>(
 serviceName: string,
    params?: GetHorizonViewServiceNameDedicatedHorizonTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDedicatedHorizonTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameDedicatedHorizonTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDedicatedHorizonTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/horizonView/${serviceName}/dedicatedHorizon/task/${taskId}`] as const;
    }

    
export const getGetHorizonViewServiceNameDedicatedHorizonTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDedicatedHorizonTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>> = ({ signal }) => getHorizonViewServiceNameDedicatedHorizonTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDedicatedHorizonTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>>
export type GetHorizonViewServiceNameDedicatedHorizonTaskTaskIdQueryError = unknown


export function useGetHorizonViewServiceNameDedicatedHorizonTaskTaskId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonTaskTaskId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonTaskTaskId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameDedicatedHorizonTaskTaskId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDedicatedHorizonTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameDedicatedHorizonUser = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewUserOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDedicatedHorizonUserQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/dedicatedHorizon/user`] as const;
    }

    
export const getGetHorizonViewServiceNameDedicatedHorizonUserQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDedicatedHorizonUserQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>> = ({ signal }) => getHorizonViewServiceNameDedicatedHorizonUser(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDedicatedHorizonUserQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>>
export type GetHorizonViewServiceNameDedicatedHorizonUserQueryError = unknown


export function useGetHorizonViewServiceNameDedicatedHorizonUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDedicatedHorizonUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameDedicatedHorizonUser<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDedicatedHorizonUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDedicatedHorizonUserQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change Horizon View user password
 */
export const postHorizonViewServiceNameDedicatedHorizonUserChangePassword = (
    serviceName: string,
    postHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody: PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/user/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDedicatedHorizonUserChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangePassword>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangePassword>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangePassword>>, {serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameDedicatedHorizonUserChangePassword(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangePassword>>>
    export type PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordMutationBody = PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody
    export type PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordMutationError = unknown

    /**
 * @summary Change Horizon View user password
 */
export const usePostHorizonViewServiceNameDedicatedHorizonUserChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangePassword>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangePassword>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDedicatedHorizonUserChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change horizon view user properties
 */
export const postHorizonViewServiceNameDedicatedHorizonUserChangeProperties = (
    serviceName: string,
    postHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody: PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/dedicatedHorizon/user/changeProperties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangeProperties>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangeProperties>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangeProperties>>, {serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameDedicatedHorizonUserChangeProperties(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangeProperties>>>
    export type PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesMutationBody = PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody
    export type PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesMutationError = unknown

    /**
 * @summary Change horizon view user properties
 */
export const usePostHorizonViewServiceNameDedicatedHorizonUserChangeProperties = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangeProperties>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDedicatedHorizonUserChangeProperties>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all Active Directories linked to your CDI Active Directory
 */
export const getHorizonViewServiceNameDomainTrust = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/horizonView/${serviceName}/domainTrust`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDomainTrustQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/domainTrust`] as const;
    }

    
export const getGetHorizonViewServiceNameDomainTrustQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDomainTrustQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>> = ({ signal }) => getHorizonViewServiceNameDomainTrust(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDomainTrustQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>>
export type GetHorizonViewServiceNameDomainTrustQueryError = unknown


export function useGetHorizonViewServiceNameDomainTrust<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDomainTrust<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDomainTrust<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all Active Directories linked to your CDI Active Directory
 */

export function useGetHorizonViewServiceNameDomainTrust<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrust>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDomainTrustQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Link your Active Directory to your CDI Active Directory
 */
export const postHorizonViewServiceNameDomainTrust = (
    serviceName: string,
    postHorizonViewServiceNameDomainTrustBody: PostHorizonViewServiceNameDomainTrustBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH[]>(
      {url: `/horizonView/${serviceName}/domainTrust`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDomainTrustBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDomainTrustMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrust>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDomainTrustBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrust>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDomainTrustBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrust>>, {serviceName: string;data: PostHorizonViewServiceNameDomainTrustBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postHorizonViewServiceNameDomainTrust(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDomainTrustMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrust>>>
    export type PostHorizonViewServiceNameDomainTrustMutationBody = PostHorizonViewServiceNameDomainTrustBody
    export type PostHorizonViewServiceNameDomainTrustMutationError = unknown

    /**
 * @summary Link your Active Directory to your CDI Active Directory
 */
export const usePostHorizonViewServiceNameDomainTrust = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrust>>, TError,{serviceName: string;data: PostHorizonViewServiceNameDomainTrustBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrust>>,
        TError,
        {serviceName: string;data: PostHorizonViewServiceNameDomainTrustBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDomainTrustMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getHorizonViewServiceNameDomainTrustDomainTrustId = (
    serviceName: string,
    domainTrustId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewDomainTrustOVH>(
      {url: `/horizonView/${serviceName}/domainTrust/${domainTrustId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameDomainTrustDomainTrustIdQueryKey = (serviceName: string,
    domainTrustId: number,) => {
    return [`/horizonView/${serviceName}/domainTrust/${domainTrustId}`] as const;
    }

    
export const getGetHorizonViewServiceNameDomainTrustDomainTrustIdQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError = unknown>(serviceName: string,
    domainTrustId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameDomainTrustDomainTrustIdQueryKey(serviceName,domainTrustId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>> = ({ signal }) => getHorizonViewServiceNameDomainTrustDomainTrustId(serviceName,domainTrustId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domainTrustId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameDomainTrustDomainTrustIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>>
export type GetHorizonViewServiceNameDomainTrustDomainTrustIdQueryError = unknown


export function useGetHorizonViewServiceNameDomainTrustDomainTrustId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError = unknown>(
 serviceName: string,
    domainTrustId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDomainTrustDomainTrustId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError = unknown>(
 serviceName: string,
    domainTrustId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameDomainTrustDomainTrustId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError = unknown>(
 serviceName: string,
    domainTrustId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetHorizonViewServiceNameDomainTrustDomainTrustId<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError = unknown>(
 serviceName: string,
    domainTrustId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameDomainTrustDomainTrustId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameDomainTrustDomainTrustIdQueryOptions(serviceName,domainTrustId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a child domain for this domain.
 */
export const postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain = (
    serviceName: string,
    domainTrustId: number,
    postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/domainTrust/${domainTrustId}/addChildDomain`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain>>, {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody}> = (props) => {
          const {serviceName,domainTrustId,data} = props ?? {};

          return  postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain(serviceName,domainTrustId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain>>>
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainMutationBody = PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainMutationError = unknown

    /**
 * @summary Add a child domain for this domain.
 */
export const usePostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomain>>,
        TError,
        {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add a Domain Controller for this domain.
 */
export const postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController = (
    serviceName: string,
    domainTrustId: number,
    postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/domainTrust/${domainTrustId}/addDomainController`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController>>, {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody}> = (props) => {
          const {serviceName,domainTrustId,data} = props ?? {};

          return  postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController(serviceName,domainTrustId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController>>>
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerMutationBody = PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerMutationError = unknown

    /**
 * @summary Add a Domain Controller for this domain.
 */
export const usePostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainController>>,
        TError,
        {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add a domain user to add your desktop in your Active Directory
 */
export const postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer = (
    serviceName: string,
    domainTrustId: number,
    postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/domainTrust/${domainTrustId}/addDomainUserOnComposer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer>>, {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody}> = (props) => {
          const {serviceName,domainTrustId,data} = props ?? {};

          return  postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer(serviceName,domainTrustId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer>>>
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerMutationBody = PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerMutationError = unknown

    /**
 * @summary Add a domain user to add your desktop in your Active Directory
 */
export const usePostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposer>>,
        TError,
        {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change Horizon View user password
 */
export const postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust = (
    serviceName: string,
    domainTrustId: number,
    postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody: PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<HorizonViewTaskOVH>(
      {url: `/horizonView/${serviceName}/domainTrust/${domainTrustId}/createTrust`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody, signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust>>, {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody}> = (props) => {
          const {serviceName,domainTrustId,data} = props ?? {};

          return  postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust(serviceName,domainTrustId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust>>>
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustMutationBody = PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody
    export type PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustMutationError = unknown

    /**
 * @summary Change Horizon View user password
 */
export const usePostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust>>, TError,{serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrust>>,
        TError,
        {serviceName: string;domainTrustId: number;data: PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustBody},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getHorizonViewServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/horizonView/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHorizonViewServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/horizonView/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetHorizonViewServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHorizonViewServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>> = ({ signal }) => getHorizonViewServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHorizonViewServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>>
export type GetHorizonViewServiceNameServiceInfosQueryError = unknown


export function useGetHorizonViewServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHorizonViewServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetHorizonViewServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHorizonViewServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetHorizonViewServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putHorizonViewServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/horizonView/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutHorizonViewServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHorizonViewServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putHorizonViewServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putHorizonViewServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putHorizonViewServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutHorizonViewServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putHorizonViewServiceNameServiceInfos>>>
    export type PutHorizonViewServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutHorizonViewServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutHorizonViewServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putHorizonViewServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putHorizonViewServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutHorizonViewServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postHorizonViewServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/horizonView/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostHorizonViewServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postHorizonViewServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postHorizonViewServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostHorizonViewServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postHorizonViewServiceNameTerminate>>>
    
    export type PostHorizonViewServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostHorizonViewServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postHorizonViewServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postHorizonViewServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostHorizonViewServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

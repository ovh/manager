/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ComplexTypeUnitAndValueDoubleOVH,
  DedicatedNasTaskTaskOVH,
  DedicatedNashaAccessOVH,
  DedicatedNashaCustomSnapOVH,
  DedicatedNashaOptionsOVH,
  DedicatedNashaPartitionOVH,
  DedicatedNashaQuotaOVH,
  DedicatedNashaSnapshotOVH,
  DedicatedNashaStorageOVH,
  DedicatedNashaStorageWithIAMOVH,
  DedicatedStorageMetricsTokenResultOVH,
  DedicatedStorageSnapshotEnumOVH,
  GetDedicatedNashaParams,
  GetDedicatedNashaServiceNamePartitionPartitionNameUseParams,
  GetDedicatedNashaServiceNameTaskParams,
  GetDedicatedNashaServiceNameUseParams,
  IpBlockOVH,
  IpOVH,
  PostDedicatedNashaServiceNameChangeContactBody,
  PostDedicatedNashaServiceNameConfirmTerminationBody,
  PostDedicatedNashaServiceNamePartitionBody,
  PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody,
  PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody,
  PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody,
  PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody,
  PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getDedicatedNasha = (
    params?: GetDedicatedNashaParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/nasha`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedNashaQueryKey = (params?: GetDedicatedNashaParams,) => {
    return [`/dedicated/nasha`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedNashaQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNasha>>, TError = unknown>(params?: GetDedicatedNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNasha>>> = ({ signal }) => getDedicatedNasha(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNasha>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNasha>>>
export type GetDedicatedNashaQueryError = unknown


export function useGetDedicatedNasha<TData = Awaited<ReturnType<typeof getDedicatedNasha>>, TError = unknown>(
 params: undefined |  GetDedicatedNashaParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNasha>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNasha>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNasha<TData = Awaited<ReturnType<typeof getDedicatedNasha>>, TError = unknown>(
 params?: GetDedicatedNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNasha>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNasha>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNasha<TData = Awaited<ReturnType<typeof getDedicatedNasha>>, TError = unknown>(
 params?: GetDedicatedNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetDedicatedNasha<TData = Awaited<ReturnType<typeof getDedicatedNasha>>, TError = unknown>(
 params?: GetDedicatedNashaParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNasha>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaStorageWithIAMOVH>(
      {url: `/dedicated/nasha/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicated/nasha/${serviceName}`] as const;
    }

    
export const getGetDedicatedNashaServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>> = ({ signal }) => getDedicatedNashaServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>>
export type GetDedicatedNashaServiceNameQueryError = unknown


export function useGetDedicatedNashaServiceName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedNashaServiceName = (
    serviceName: string,
    dedicatedNashaStorageOVH: NonReadonly<DedicatedNashaStorageOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/nasha/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedNashaStorageOVH
    },
      options);
    }
  


export const getPutDedicatedNashaServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceName>>, TError,{serviceName: string;data: NonReadonly<DedicatedNashaStorageOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceName>>, TError,{serviceName: string;data: NonReadonly<DedicatedNashaStorageOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedNashaServiceName>>, {serviceName: string;data: NonReadonly<DedicatedNashaStorageOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedNashaServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedNashaServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedNashaServiceName>>>
    export type PutDedicatedNashaServiceNameMutationBody = NonReadonly<DedicatedNashaStorageOVH>
    export type PutDedicatedNashaServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedNashaServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceName>>, TError,{serviceName: string;data: NonReadonly<DedicatedNashaStorageOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedNashaServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<DedicatedNashaStorageOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedNashaServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postDedicatedNashaServiceNameChangeContact = (
    serviceName: string,
    postDedicatedNashaServiceNameChangeContactBody: PostDedicatedNashaServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/nasha/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNameChangeContact>>, {serviceName: string;data: PostDedicatedNashaServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNashaServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNameChangeContact>>>
    export type PostDedicatedNashaServiceNameChangeContactMutationBody = PostDedicatedNashaServiceNameChangeContactBody
    export type PostDedicatedNashaServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDedicatedNashaServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostDedicatedNashaServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postDedicatedNashaServiceNameConfirmTermination = (
    serviceName: string,
    postDedicatedNashaServiceNameConfirmTerminationBody: PostDedicatedNashaServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/nasha/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNameConfirmTermination>>, {serviceName: string;data: PostDedicatedNashaServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNashaServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNameConfirmTermination>>>
    export type PostDedicatedNashaServiceNameConfirmTerminationMutationBody = PostDedicatedNashaServiceNameConfirmTerminationBody
    export type PostDedicatedNashaServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostDedicatedNashaServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostDedicatedNashaServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return a read token for manager mimir metrics
 */
export const getDedicatedNashaServiceNameMetricsToken = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedStorageMetricsTokenResultOVH>(
      {url: `/dedicated/nasha/${serviceName}/metricsToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNameMetricsTokenQueryKey = (serviceName: string,) => {
    return [`/dedicated/nasha/${serviceName}/metricsToken`] as const;
    }

    
export const getGetDedicatedNashaServiceNameMetricsTokenQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNameMetricsTokenQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>> = ({ signal }) => getDedicatedNashaServiceNameMetricsToken(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNameMetricsTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>>
export type GetDedicatedNashaServiceNameMetricsTokenQueryError = unknown


export function useGetDedicatedNashaServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return a read token for manager mimir metrics
 */

export function useGetDedicatedNashaServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNameMetricsTokenQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get partition list
 */
export const getDedicatedNashaServiceNamePartition = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/nasha/${serviceName}/partition`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionQueryKey = (serviceName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>> = ({ signal }) => getDedicatedNashaServiceNamePartition(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>>
export type GetDedicatedNashaServiceNamePartitionQueryError = unknown


export function useGetDedicatedNashaServiceNamePartition<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartition<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartition<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get partition list
 */

export function useGetDedicatedNashaServiceNamePartition<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new partition
 */
export const postDedicatedNashaServiceNamePartition = (
    serviceName: string,
    postDedicatedNashaServiceNamePartitionBody: PostDedicatedNashaServiceNamePartitionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNamePartitionBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNamePartitionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartition>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNamePartitionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartition>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNamePartitionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartition>>, {serviceName: string;data: PostDedicatedNashaServiceNamePartitionBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNashaServiceNamePartition(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNamePartitionMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartition>>>
    export type PostDedicatedNashaServiceNamePartitionMutationBody = PostDedicatedNashaServiceNamePartitionBody
    export type PostDedicatedNashaServiceNamePartitionMutationError = unknown

    /**
 * @summary Create a new partition
 */
export const usePostDedicatedNashaServiceNamePartition = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartition>>, TError,{serviceName: string;data: PostDedicatedNashaServiceNamePartitionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartition>>,
        TError,
        {serviceName: string;data: PostDedicatedNashaServiceNamePartitionBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNamePartitionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this partition
 */
export const deleteDedicatedNashaServiceNamePartitionPartitionName = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedNashaServiceNamePartitionPartitionNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionName>>, TError,{serviceName: string;partitionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionName>>, TError,{serviceName: string;partitionName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionName>>, {serviceName: string;partitionName: string}> = (props) => {
          const {serviceName,partitionName} = props ?? {};

          return  deleteDedicatedNashaServiceNamePartitionPartitionName(serviceName,partitionName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionName>>>
    
    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameMutationError = unknown

    /**
 * @summary Delete this partition
 */
export const useDeleteDedicatedNashaServiceNamePartitionPartitionName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionName>>, TError,{serviceName: string;partitionName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionName>>,
        TError,
        {serviceName: string;partitionName: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedNashaServiceNamePartitionPartitionNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNamePartitionPartitionName = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaPartitionOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionName(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putDedicatedNashaServiceNamePartitionPartitionName = (
    serviceName: string,
    partitionName: string,
    dedicatedNashaPartitionOVH: NonReadonly<DedicatedNashaPartitionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedNashaPartitionOVH
    },
      options);
    }
  


export const getPutDedicatedNashaServiceNamePartitionPartitionNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceNamePartitionPartitionName>>, TError,{serviceName: string;partitionName: string;data: NonReadonly<DedicatedNashaPartitionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceNamePartitionPartitionName>>, TError,{serviceName: string;partitionName: string;data: NonReadonly<DedicatedNashaPartitionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedNashaServiceNamePartitionPartitionName>>, {serviceName: string;partitionName: string;data: NonReadonly<DedicatedNashaPartitionOVH>}> = (props) => {
          const {serviceName,partitionName,data} = props ?? {};

          return  putDedicatedNashaServiceNamePartitionPartitionName(serviceName,partitionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedNashaServiceNamePartitionPartitionNameMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedNashaServiceNamePartitionPartitionName>>>
    export type PutDedicatedNashaServiceNamePartitionPartitionNameMutationBody = NonReadonly<DedicatedNashaPartitionOVH>
    export type PutDedicatedNashaServiceNamePartitionPartitionNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutDedicatedNashaServiceNamePartitionPartitionName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceNamePartitionPartitionName>>, TError,{serviceName: string;partitionName: string;data: NonReadonly<DedicatedNashaPartitionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedNashaServiceNamePartitionPartitionName>>,
        TError,
        {serviceName: string;partitionName: string;data: NonReadonly<DedicatedNashaPartitionOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedNashaServiceNamePartitionPartitionNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary get ACL for this partition
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameAccess = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/access`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameAccessQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/access`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameAccessQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameAccessQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameAccess(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameAccessQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary get ACL for this partition
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameAccessQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new ACL entry
 */
export const postDedicatedNashaServiceNamePartitionPartitionNameAccess = (
    serviceName: string,
    partitionName: string,
    postDedicatedNashaServiceNamePartitionPartitionNameAccessBody: PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNamePartitionPartitionNameAccessBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNamePartitionPartitionNameAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameAccess>>, {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody}> = (props) => {
          const {serviceName,partitionName,data} = props ?? {};

          return  postDedicatedNashaServiceNamePartitionPartitionNameAccess(serviceName,partitionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNamePartitionPartitionNameAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameAccess>>>
    export type PostDedicatedNashaServiceNamePartitionPartitionNameAccessMutationBody = PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody
    export type PostDedicatedNashaServiceNamePartitionPartitionNameAccessMutationError = unknown

    /**
 * @summary Add a new ACL entry
 */
export const usePostDedicatedNashaServiceNamePartitionPartitionNameAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameAccess>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameAccess>>,
        TError,
        {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameAccessBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNamePartitionPartitionNameAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an ACL entry
 */
export const deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp = (
    serviceName: string,
    partitionName: string,
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/access/${ip}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError,{serviceName: string;partitionName: string;ip: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError,{serviceName: string;partitionName: string;ip: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, {serviceName: string;partitionName: string;ip: IpBlockOVH}> = (props) => {
          const {serviceName,partitionName,ip} = props ?? {};

          return  deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp(serviceName,partitionName,ip,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIpMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>>
    
    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIpMutationError = unknown

    /**
 * @summary Delete an ACL entry
 */
export const useDeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError,{serviceName: string;partitionName: string;ip: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>,
        TError,
        {serviceName: string;partitionName: string;ip: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameAccessIp = (
    serviceName: string,
    partitionName: string,
    ip: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaAccessOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/access/${ip}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameAccessIpQueryKey = (serviceName: string,
    partitionName: string,
    ip: IpBlockOVH,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/access/${ip}`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameAccessIpQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError = unknown>(serviceName: string,
    partitionName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameAccessIpQueryKey(serviceName,partitionName,ip);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameAccessIp(serviceName,partitionName,ip, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName && ip), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameAccessIpQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameAccessIpQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccessIp<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    ip: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccessIp<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccessIp<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameAccessIp<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    ip: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAccessIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameAccessIpQueryOptions(serviceName,partitionName,ip,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all RIPE/ARIN blocks that can be used in the ACL
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/authorizableBlocks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/authorizableBlocks`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all RIPE/ARIN blocks that can be used in the ACL
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all IPs that can be used in the ACL
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/authorizableIps`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/authorizableIps`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all IPs that can be used in the ACL
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get custom snapshots for this partition
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/customSnapshot`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/customSnapshot`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get custom snapshots for this partition
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new snapshot
 */
export const postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot = (
    serviceName: string,
    partitionName: string,
    postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody: PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/customSnapshot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody}> = (props) => {
          const {serviceName,partitionName,data} = props ?? {};

          return  postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot(serviceName,partitionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>>
    export type PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotMutationBody = PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody
    export type PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotMutationError = unknown

    /**
 * @summary Create a new snapshot
 */
export const usePostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshot>>,
        TError,
        {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a given snapshot
 */
export const deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName = (
    serviceName: string,
    partitionName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/customSnapshot/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError,{serviceName: string;partitionName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError,{serviceName: string;partitionName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, {serviceName: string;partitionName: string;name: string}> = (props) => {
          const {serviceName,partitionName,name} = props ?? {};

          return  deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName(serviceName,partitionName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>>
    
    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameMutationError = unknown

    /**
 * @summary Delete a given snapshot
 */
export const useDeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError,{serviceName: string;partitionName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>,
        TError,
        {serviceName: string;partitionName: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName = (
    serviceName: string,
    partitionName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaCustomSnapOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/customSnapshot/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameQueryKey = (serviceName: string,
    partitionName: string,
    name: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/customSnapshot/${name}`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError = unknown>(serviceName: string,
    partitionName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameQueryKey(serviceName,partitionName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName(serviceName,partitionName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameQueryOptions(serviceName,partitionName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameOptions = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaOptionsOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/options`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameOptionsQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/options`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameOptionsQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameOptions(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameOptionsQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameOptions<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameOptions<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameOptions<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameOptions<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameOptionsQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Setup options
 */
export const postDedicatedNashaServiceNamePartitionPartitionNameOptions = (
    serviceName: string,
    partitionName: string,
    postDedicatedNashaServiceNamePartitionPartitionNameOptionsBody: PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNamePartitionPartitionNameOptionsBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNamePartitionPartitionNameOptionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameOptions>>, {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody}> = (props) => {
          const {serviceName,partitionName,data} = props ?? {};

          return  postDedicatedNashaServiceNamePartitionPartitionNameOptions(serviceName,partitionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNamePartitionPartitionNameOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameOptions>>>
    export type PostDedicatedNashaServiceNamePartitionPartitionNameOptionsMutationBody = PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody
    export type PostDedicatedNashaServiceNamePartitionPartitionNameOptionsMutationError = unknown

    /**
 * @summary Setup options
 */
export const usePostDedicatedNashaServiceNamePartitionPartitionNameOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameOptions>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameOptions>>,
        TError,
        {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameOptionsBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNamePartitionPartitionNameOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get quota for this partition
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameQuota = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/quota`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/quota`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameQuota(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameQuotaQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameQuotaQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuota<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuota<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuota<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get quota for this partition
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuota<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Set a new quota
 */
export const postDedicatedNashaServiceNamePartitionPartitionNameQuota = (
    serviceName: string,
    partitionName: string,
    postDedicatedNashaServiceNamePartitionPartitionNameQuotaBody: PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/quota`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNamePartitionPartitionNameQuotaBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNamePartitionPartitionNameQuotaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameQuota>>, {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody}> = (props) => {
          const {serviceName,partitionName,data} = props ?? {};

          return  postDedicatedNashaServiceNamePartitionPartitionNameQuota(serviceName,partitionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNamePartitionPartitionNameQuotaMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameQuota>>>
    export type PostDedicatedNashaServiceNamePartitionPartitionNameQuotaMutationBody = PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody
    export type PostDedicatedNashaServiceNamePartitionPartitionNameQuotaMutationError = unknown

    /**
 * @summary Set a new quota
 */
export const usePostDedicatedNashaServiceNamePartitionPartitionNameQuota = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameQuota>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameQuota>>,
        TError,
        {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameQuotaBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNamePartitionPartitionNameQuotaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a given quota
 */
export const deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid = (
    serviceName: string,
    partitionName: string,
    uid: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/quota/${uid}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError,{serviceName: string;partitionName: string;uid: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError,{serviceName: string;partitionName: string;uid: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, {serviceName: string;partitionName: string;uid: number}> = (props) => {
          const {serviceName,partitionName,uid} = props ?? {};

          return  deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid(serviceName,partitionName,uid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>>
    
    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUidMutationError = unknown

    /**
 * @summary Delete a given quota
 */
export const useDeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError,{serviceName: string;partitionName: string;uid: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>,
        TError,
        {serviceName: string;partitionName: string;uid: number},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid = (
    serviceName: string,
    partitionName: string,
    uid: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaQuotaOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/quota/${uid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidQueryKey = (serviceName: string,
    partitionName: string,
    uid: number,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/quota/${uid}`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError = unknown>(serviceName: string,
    partitionName: string,
    uid: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidQueryKey(serviceName,partitionName,uid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid(serviceName,partitionName,uid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName && uid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUid<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    uid: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUid<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    uid: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUid<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    uid: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUid<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    uid: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameQuotaUid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidQueryOptions(serviceName,partitionName,uid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get scheduled snapshot types for this partition
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameSnapshot = (
    serviceName: string,
    partitionName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedStorageSnapshotEnumOVH[]>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/snapshot`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotQueryKey = (serviceName: string,
    partitionName: string,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/snapshot`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError = unknown>(serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotQueryKey(serviceName,partitionName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameSnapshot(serviceName,partitionName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get scheduled snapshot types for this partition
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshot<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError = unknown>(
 serviceName: string,
    partitionName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotQueryOptions(serviceName,partitionName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Schedule a new snapshot type
 */
export const postDedicatedNashaServiceNamePartitionPartitionNameSnapshot = (
    serviceName: string,
    partitionName: string,
    postDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody: PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/snapshot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody, signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNamePartitionPartitionNameSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody}> = (props) => {
          const {serviceName,partitionName,data} = props ?? {};

          return  postDedicatedNashaServiceNamePartitionPartitionNameSnapshot(serviceName,partitionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>>
    export type PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotMutationBody = PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody
    export type PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotMutationError = unknown

    /**
 * @summary Schedule a new snapshot type
 */
export const usePostDedicatedNashaServiceNamePartitionPartitionNameSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>, TError,{serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNamePartitionPartitionNameSnapshot>>,
        TError,
        {serviceName: string;partitionName: string;data: PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNamePartitionPartitionNameSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a given snapshot
 */
export const deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType = (
    serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/snapshot/${snapshotType}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError,{serviceName: string;partitionName: string;snapshotType: DedicatedStorageSnapshotEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError,{serviceName: string;partitionName: string;snapshotType: DedicatedStorageSnapshotEnumOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, {serviceName: string;partitionName: string;snapshotType: DedicatedStorageSnapshotEnumOVH}> = (props) => {
          const {serviceName,partitionName,snapshotType} = props ?? {};

          return  deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType(serviceName,partitionName,snapshotType,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>>
    
    export type DeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeMutationError = unknown

    /**
 * @summary Delete a given snapshot
 */
export const useDeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError,{serviceName: string;partitionName: string;snapshotType: DedicatedStorageSnapshotEnumOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>,
        TError,
        {serviceName: string;partitionName: string;snapshotType: DedicatedStorageSnapshotEnumOVH},
        TContext
      > => {

      const mutationOptions = getDeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType = (
    serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNashaSnapshotOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/snapshot/${snapshotType}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeQueryKey = (serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/snapshot/${snapshotType}`] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError = unknown>(serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeQueryKey(serviceName,partitionName,snapshotType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType(serviceName,partitionName,snapshotType, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName && snapshotType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    snapshotType: DedicatedStorageSnapshotEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeQueryOptions(serviceName,partitionName,snapshotType,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return statistics about the partition
 */
export const getDedicatedNashaServiceNamePartitionPartitionNameUse = (
    serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeUnitAndValueDoubleOVH>(
      {url: `/dedicated/nasha/${serviceName}/partition/${partitionName}/use`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNamePartitionPartitionNameUseQueryKey = (serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams,) => {
    return [`/dedicated/nasha/${serviceName}/partition/${partitionName}/use`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedNashaServiceNamePartitionPartitionNameUseQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError = unknown>(serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNamePartitionPartitionNameUseQueryKey(serviceName,partitionName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>> = ({ signal }) => getDedicatedNashaServiceNamePartitionPartitionNameUse(serviceName,partitionName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && partitionName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNamePartitionPartitionNameUseQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>>
export type GetDedicatedNashaServiceNamePartitionPartitionNameUseQueryError = unknown


export function useGetDedicatedNashaServiceNamePartitionPartitionNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNamePartitionPartitionNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return statistics about the partition
 */

export function useGetDedicatedNashaServiceNamePartitionPartitionNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError = unknown>(
 serviceName: string,
    partitionName: string,
    params: GetDedicatedNashaServiceNamePartitionPartitionNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNamePartitionPartitionNameUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNamePartitionPartitionNameUseQueryOptions(serviceName,partitionName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getDedicatedNashaServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicated/nasha/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicated/nasha/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedNashaServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>> = ({ signal }) => getDedicatedNashaServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>>
export type GetDedicatedNashaServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedNashaServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedNashaServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedNashaServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/nasha/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedNashaServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedNashaServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedNashaServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedNashaServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedNashaServiceNameServiceInfos>>>
    export type PutDedicatedNashaServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedNashaServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedNashaServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNashaServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedNashaServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedNashaServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary View task list
 */
export const getDedicatedNashaServiceNameTask = (
    serviceName: string,
    params?: GetDedicatedNashaServiceNameTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/nasha/${serviceName}/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNameTaskQueryKey = (serviceName: string,
    params?: GetDedicatedNashaServiceNameTaskParams,) => {
    return [`/dedicated/nasha/${serviceName}/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedNashaServiceNameTaskQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError = unknown>(serviceName: string,
    params?: GetDedicatedNashaServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNameTaskQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>> = ({ signal }) => getDedicatedNashaServiceNameTask(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNameTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>>
export type GetDedicatedNashaServiceNameTaskQueryError = unknown


export function useGetDedicatedNashaServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetDedicatedNashaServiceNameTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedNashaServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedNashaServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary View task list
 */

export function useGetDedicatedNashaServiceNameTask<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError = unknown>(
 serviceName: string,
    params?: GetDedicatedNashaServiceNameTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNameTaskQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getDedicatedNashaServiceNameTaskTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNasTaskTaskOVH>(
      {url: `/dedicated/nasha/${serviceName}/task/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNameTaskTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/dedicated/nasha/${serviceName}/task/${taskId}`] as const;
    }

    
export const getGetDedicatedNashaServiceNameTaskTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNameTaskTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>> = ({ signal }) => getDedicatedNashaServiceNameTaskTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNameTaskTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>>
export type GetDedicatedNashaServiceNameTaskTaskIdQueryError = unknown


export function useGetDedicatedNashaServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetDedicatedNashaServiceNameTaskTaskId<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameTaskTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNameTaskTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postDedicatedNashaServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/nasha/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedNashaServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNashaServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedNashaServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNashaServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNashaServiceNameTerminate>>>
    
    export type PostDedicatedNashaServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostDedicatedNashaServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNashaServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNashaServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNashaServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return statistics about the nas
 */
export const getDedicatedNashaServiceNameUse = (
    serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeUnitAndValueDoubleOVH>(
      {url: `/dedicated/nasha/${serviceName}/use`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedNashaServiceNameUseQueryKey = (serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams,) => {
    return [`/dedicated/nasha/${serviceName}/use`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedNashaServiceNameUseQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError = unknown>(serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNashaServiceNameUseQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>> = ({ signal }) => getDedicatedNashaServiceNameUse(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNashaServiceNameUseQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>>
export type GetDedicatedNashaServiceNameUseQueryError = unknown


export function useGetDedicatedNashaServiceNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNashaServiceNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return statistics about the nas
 */

export function useGetDedicatedNashaServiceNameUse<TData = Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError = unknown>(
 serviceName: string,
    params: GetDedicatedNashaServiceNameUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNashaServiceNameUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNashaServiceNameUseQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





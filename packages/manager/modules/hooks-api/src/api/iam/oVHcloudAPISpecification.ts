/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DbaasLogsLogKindOVH,
  DbaasLogsLogSubscriptionCreationOVH,
  DbaasLogsLogSubscriptionOVH,
  DbaasLogsLogSubscriptionResponseOVH,
  DbaasLogsLogUrlCreationOVH,
  DbaasLogsTemporaryLogsLinkOVH,
  GetIamLogSubscriptionParams,
  GetIamPolicyParams,
  GetIamPolicyPolicyIdParams,
  GetIamReferenceActionParams,
  GetIamResourceGroupGroupIdParams,
  GetIamResourceGroupParams,
  GetIamResourceParams,
  IamAuthorizeBatchRequestOVH,
  IamAuthorizeBatchResponseOVH,
  IamAuthorizeRequestOVH,
  IamAuthorizeResponseOVH,
  IamGroupCreationOVH,
  IamGroupResponseOVH,
  IamGroupUpdateOVH,
  IamPermissionsGroupOVH,
  IamPolicyCreationOVH,
  IamPolicyResponseOVH,
  IamPolicyUpdateOVH,
  IamReferenceActionOVH,
  IamResourceAddTagOVH,
  IamResourceResourceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Validate your authorizations on given resources
 */
export const postIamAuthorizationCheck = (
    iamAuthorizeBatchRequestOVH: IamAuthorizeBatchRequestOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamAuthorizeBatchResponseOVH[]>(
      {url: `/iam/authorization/check`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iamAuthorizeBatchRequestOVH, signal
    },
      options);
    }
  


export const getPostIamAuthorizationCheckMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamAuthorizationCheck>>, TError,{data: IamAuthorizeBatchRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamAuthorizationCheck>>, TError,{data: IamAuthorizeBatchRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamAuthorizationCheck>>, {data: IamAuthorizeBatchRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postIamAuthorizationCheck(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamAuthorizationCheckMutationResult = NonNullable<Awaited<ReturnType<typeof postIamAuthorizationCheck>>>
    export type PostIamAuthorizationCheckMutationBody = IamAuthorizeBatchRequestOVH
    export type PostIamAuthorizationCheckMutationError = unknown

    /**
 * @summary Validate your authorizations on given resources
 */
export const usePostIamAuthorizationCheck = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamAuthorizationCheck>>, TError,{data: IamAuthorizeBatchRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamAuthorizationCheck>>,
        TError,
        {data: IamAuthorizeBatchRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostIamAuthorizationCheckMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available log kinds
 */
export const getIamLogKind = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<string[]>(
      {url: `/iam/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamLogKindQueryKey = () => {
    return [`/iam/log/kind`] as const;
    }

    
export const getGetIamLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getIamLogKind>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamLogKindQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamLogKind>>> = ({ signal }) => getIamLogKind(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getIamLogKind>>>
export type GetIamLogKindQueryError = unknown


export function useGetIamLogKind<TData = Awaited<ReturnType<typeof getIamLogKind>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogKind<TData = Awaited<ReturnType<typeof getIamLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogKind<TData = Awaited<ReturnType<typeof getIamLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available log kinds
 */

export function useGetIamLogKind<TData = Awaited<ReturnType<typeof getIamLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamLogKindQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a log kind
 */
export const getIamLogKindName = (
    name: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogKindOVH>(
      {url: `/iam/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamLogKindNameQueryKey = (name: string,) => {
    return [`/iam/log/kind/${name}`] as const;
    }

    
export const getGetIamLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getIamLogKindName>>, TError = unknown>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamLogKindNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamLogKindName>>> = ({ signal }) => getIamLogKindName(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getIamLogKindName>>>
export type GetIamLogKindNameQueryError = unknown


export function useGetIamLogKindName<TData = Awaited<ReturnType<typeof getIamLogKindName>>, TError = unknown>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogKindName<TData = Awaited<ReturnType<typeof getIamLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogKindName<TData = Awaited<ReturnType<typeof getIamLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a log kind
 */

export function useGetIamLogKindName<TData = Awaited<ReturnType<typeof getIamLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamLogKindNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscription IDs for a cluster
 */
export const getIamLogSubscription = (
    params?: GetIamLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<string[]>(
      {url: `/iam/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamLogSubscriptionQueryKey = (params?: GetIamLogSubscriptionParams,) => {
    return [`/iam/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getIamLogSubscription>>, TError = unknown>(params?: GetIamLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamLogSubscriptionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamLogSubscription>>> = ({ signal }) => getIamLogSubscription(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getIamLogSubscription>>>
export type GetIamLogSubscriptionQueryError = unknown


export function useGetIamLogSubscription<TData = Awaited<ReturnType<typeof getIamLogSubscription>>, TError = unknown>(
 params: undefined |  GetIamLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogSubscription<TData = Awaited<ReturnType<typeof getIamLogSubscription>>, TError = unknown>(
 params?: GetIamLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogSubscription<TData = Awaited<ReturnType<typeof getIamLogSubscription>>, TError = unknown>(
 params?: GetIamLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscription IDs for a cluster
 */

export function useGetIamLogSubscription<TData = Awaited<ReturnType<typeof getIamLogSubscription>>, TError = unknown>(
 params?: GetIamLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamLogSubscriptionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const postIamLogSubscription = (
    dbaasLogsLogSubscriptionCreationOVH: DbaasLogsLogSubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/iam/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogSubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostIamLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamLogSubscription>>, {data: DbaasLogsLogSubscriptionCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postIamLogSubscription(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postIamLogSubscription>>>
    export type PostIamLogSubscriptionMutationBody = DbaasLogsLogSubscriptionCreationOVH
    export type PostIamLogSubscriptionMutationError = unknown

    /**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const usePostIamLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamLogSubscription>>,
        TError,
        {data: DbaasLogsLogSubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostIamLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription
 */
export const deleteIamLogSubscriptionSubscriptionId = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/iam/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIamLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIamLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIamLogSubscriptionSubscriptionId>>, {subscriptionId: string}> = (props) => {
          const {subscriptionId} = props ?? {};

          return  deleteIamLogSubscriptionSubscriptionId(subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIamLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIamLogSubscriptionSubscriptionId>>>
    
    export type DeleteIamLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription
 */
export const useDeleteIamLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIamLogSubscriptionSubscriptionId>>,
        TError,
        {subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteIamLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get subscription details
 */
export const getIamLogSubscriptionSubscriptionId = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsLogSubscriptionOVH>(
      {url: `/iam/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamLogSubscriptionSubscriptionIdQueryKey = (subscriptionId: string,) => {
    return [`/iam/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetIamLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError = unknown>(subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamLogSubscriptionSubscriptionIdQueryKey(subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>> = ({ signal }) => getIamLogSubscriptionSubscriptionId(subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>>
export type GetIamLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetIamLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get subscription details
 */

export function useGetIamLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamLogSubscriptionSubscriptionIdQueryOptions(subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary URL to retrieve logs
 */
export const postIamLogUrl = (
    dbaasLogsLogUrlCreationOVH: DbaasLogsLogUrlCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/iam/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogUrlCreationOVH, signal
    },
      options);
    }
  


export const getPostIamLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamLogUrl>>, {data: DbaasLogsLogUrlCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postIamLogUrl(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postIamLogUrl>>>
    export type PostIamLogUrlMutationBody = DbaasLogsLogUrlCreationOVH
    export type PostIamLogUrlMutationError = unknown

    /**
 * @summary Generate a temporary URL to retrieve logs
 */
export const usePostIamLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamLogUrl>>,
        TError,
        {data: DbaasLogsLogUrlCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostIamLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all permissions groups
 */
export const getIamPermissionsGroup = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamPermissionsGroupOVH[]>(
      {url: `/iam/permissionsGroup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamPermissionsGroupQueryKey = () => {
    return [`/iam/permissionsGroup`] as const;
    }

    
export const getGetIamPermissionsGroupQueryOptions = <TData = Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamPermissionsGroupQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamPermissionsGroup>>> = ({ signal }) => getIamPermissionsGroup(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamPermissionsGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getIamPermissionsGroup>>>
export type GetIamPermissionsGroupQueryError = unknown


export function useGetIamPermissionsGroup<TData = Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPermissionsGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPermissionsGroup<TData = Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPermissionsGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPermissionsGroup<TData = Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all permissions groups
 */

export function useGetIamPermissionsGroup<TData = Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamPermissionsGroupQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a permissions group
 */
export const postIamPermissionsGroup = (
    iamPermissionsGroupOVH: NonReadonly<IamPermissionsGroupOVH>,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamPermissionsGroupOVH>(
      {url: `/iam/permissionsGroup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iamPermissionsGroupOVH, signal
    },
      options);
    }
  


export const getPostIamPermissionsGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamPermissionsGroup>>, TError,{data: NonReadonly<IamPermissionsGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamPermissionsGroup>>, TError,{data: NonReadonly<IamPermissionsGroupOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamPermissionsGroup>>, {data: NonReadonly<IamPermissionsGroupOVH>}> = (props) => {
          const {data} = props ?? {};

          return  postIamPermissionsGroup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamPermissionsGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postIamPermissionsGroup>>>
    export type PostIamPermissionsGroupMutationBody = NonReadonly<IamPermissionsGroupOVH>
    export type PostIamPermissionsGroupMutationError = unknown

    /**
 * @summary Create a permissions group
 */
export const usePostIamPermissionsGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamPermissionsGroup>>, TError,{data: NonReadonly<IamPermissionsGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamPermissionsGroup>>,
        TError,
        {data: NonReadonly<IamPermissionsGroupOVH>},
        TContext
      > => {

      const mutationOptions = getPostIamPermissionsGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given permissions group
 */
export const deleteIamPermissionsGroupPermissionsGroupURN = (
    permissionsGroupURN: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/iam/permissionsGroup/${permissionsGroupURN}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIamPermissionsGroupPermissionsGroupURNMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamPermissionsGroupPermissionsGroupURN>>, TError,{permissionsGroupURN: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIamPermissionsGroupPermissionsGroupURN>>, TError,{permissionsGroupURN: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIamPermissionsGroupPermissionsGroupURN>>, {permissionsGroupURN: string}> = (props) => {
          const {permissionsGroupURN} = props ?? {};

          return  deleteIamPermissionsGroupPermissionsGroupURN(permissionsGroupURN,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIamPermissionsGroupPermissionsGroupURNMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIamPermissionsGroupPermissionsGroupURN>>>
    
    export type DeleteIamPermissionsGroupPermissionsGroupURNMutationError = unknown

    /**
 * @summary Delete the given permissions group
 */
export const useDeleteIamPermissionsGroupPermissionsGroupURN = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamPermissionsGroupPermissionsGroupURN>>, TError,{permissionsGroupURN: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIamPermissionsGroupPermissionsGroupURN>>,
        TError,
        {permissionsGroupURN: string},
        TContext
      > => {

      const mutationOptions = getDeleteIamPermissionsGroupPermissionsGroupURNMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve the given permissions group
 */
export const getIamPermissionsGroupPermissionsGroupURN = (
    permissionsGroupURN: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamPermissionsGroupOVH>(
      {url: `/iam/permissionsGroup/${permissionsGroupURN}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamPermissionsGroupPermissionsGroupURNQueryKey = (permissionsGroupURN: string,) => {
    return [`/iam/permissionsGroup/${permissionsGroupURN}`] as const;
    }

    
export const getGetIamPermissionsGroupPermissionsGroupURNQueryOptions = <TData = Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError = unknown>(permissionsGroupURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamPermissionsGroupPermissionsGroupURNQueryKey(permissionsGroupURN);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>> = ({ signal }) => getIamPermissionsGroupPermissionsGroupURN(permissionsGroupURN, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(permissionsGroupURN), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamPermissionsGroupPermissionsGroupURNQueryResult = NonNullable<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>>
export type GetIamPermissionsGroupPermissionsGroupURNQueryError = unknown


export function useGetIamPermissionsGroupPermissionsGroupURN<TData = Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError = unknown>(
 permissionsGroupURN: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPermissionsGroupPermissionsGroupURN<TData = Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError = unknown>(
 permissionsGroupURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPermissionsGroupPermissionsGroupURN<TData = Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError = unknown>(
 permissionsGroupURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve the given permissions group
 */

export function useGetIamPermissionsGroupPermissionsGroupURN<TData = Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError = unknown>(
 permissionsGroupURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPermissionsGroupPermissionsGroupURN>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamPermissionsGroupPermissionsGroupURNQueryOptions(permissionsGroupURN,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a permissions group
 */
export const putIamPermissionsGroupPermissionsGroupURN = (
    permissionsGroupURN: string,
    iamPermissionsGroupOVH: NonReadonly<IamPermissionsGroupOVH>,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<IamPermissionsGroupOVH>(
      {url: `/iam/permissionsGroup/${permissionsGroupURN}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: iamPermissionsGroupOVH
    },
      options);
    }
  


export const getPutIamPermissionsGroupPermissionsGroupURNMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamPermissionsGroupPermissionsGroupURN>>, TError,{permissionsGroupURN: string;data: NonReadonly<IamPermissionsGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putIamPermissionsGroupPermissionsGroupURN>>, TError,{permissionsGroupURN: string;data: NonReadonly<IamPermissionsGroupOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIamPermissionsGroupPermissionsGroupURN>>, {permissionsGroupURN: string;data: NonReadonly<IamPermissionsGroupOVH>}> = (props) => {
          const {permissionsGroupURN,data} = props ?? {};

          return  putIamPermissionsGroupPermissionsGroupURN(permissionsGroupURN,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIamPermissionsGroupPermissionsGroupURNMutationResult = NonNullable<Awaited<ReturnType<typeof putIamPermissionsGroupPermissionsGroupURN>>>
    export type PutIamPermissionsGroupPermissionsGroupURNMutationBody = NonReadonly<IamPermissionsGroupOVH>
    export type PutIamPermissionsGroupPermissionsGroupURNMutationError = unknown

    /**
 * @summary Update a permissions group
 */
export const usePutIamPermissionsGroupPermissionsGroupURN = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamPermissionsGroupPermissionsGroupURN>>, TError,{permissionsGroupURN: string;data: NonReadonly<IamPermissionsGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIamPermissionsGroupPermissionsGroupURN>>,
        TError,
        {permissionsGroupURN: string;data: NonReadonly<IamPermissionsGroupOVH>},
        TContext
      > => {

      const mutationOptions = getPutIamPermissionsGroupPermissionsGroupURNMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all policies
 */
export const getIamPolicy = (
    params?: GetIamPolicyParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamPolicyResponseOVH[]>(
      {url: `/iam/policy`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamPolicyQueryKey = (params?: GetIamPolicyParams,) => {
    return [`/iam/policy`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getIamPolicy>>, TError = unknown>(params?: GetIamPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamPolicyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamPolicy>>> = ({ signal }) => getIamPolicy(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getIamPolicy>>>
export type GetIamPolicyQueryError = unknown


export function useGetIamPolicy<TData = Awaited<ReturnType<typeof getIamPolicy>>, TError = unknown>(
 params: undefined |  GetIamPolicyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPolicy<TData = Awaited<ReturnType<typeof getIamPolicy>>, TError = unknown>(
 params?: GetIamPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPolicy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPolicy<TData = Awaited<ReturnType<typeof getIamPolicy>>, TError = unknown>(
 params?: GetIamPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all policies
 */

export function useGetIamPolicy<TData = Awaited<ReturnType<typeof getIamPolicy>>, TError = unknown>(
 params?: GetIamPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamPolicyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new policy
 */
export const postIamPolicy = (
    iamPolicyCreationOVH: IamPolicyCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamPolicyResponseOVH>(
      {url: `/iam/policy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iamPolicyCreationOVH, signal
    },
      options);
    }
  


export const getPostIamPolicyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamPolicy>>, TError,{data: IamPolicyCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamPolicy>>, TError,{data: IamPolicyCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamPolicy>>, {data: IamPolicyCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postIamPolicy(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamPolicyMutationResult = NonNullable<Awaited<ReturnType<typeof postIamPolicy>>>
    export type PostIamPolicyMutationBody = IamPolicyCreationOVH
    export type PostIamPolicyMutationError = unknown

    /**
 * @summary Create a new policy
 */
export const usePostIamPolicy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamPolicy>>, TError,{data: IamPolicyCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamPolicy>>,
        TError,
        {data: IamPolicyCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostIamPolicyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given policy
 */
export const deleteIamPolicyPolicyId = (
    policyId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/iam/policy/${policyId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIamPolicyPolicyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamPolicyPolicyId>>, TError,{policyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIamPolicyPolicyId>>, TError,{policyId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIamPolicyPolicyId>>, {policyId: string}> = (props) => {
          const {policyId} = props ?? {};

          return  deleteIamPolicyPolicyId(policyId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIamPolicyPolicyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIamPolicyPolicyId>>>
    
    export type DeleteIamPolicyPolicyIdMutationError = unknown

    /**
 * @summary Delete the given policy
 */
export const useDeleteIamPolicyPolicyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamPolicyPolicyId>>, TError,{policyId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIamPolicyPolicyId>>,
        TError,
        {policyId: string},
        TContext
      > => {

      const mutationOptions = getDeleteIamPolicyPolicyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve the given policy
 */
export const getIamPolicyPolicyId = (
    policyId: string,
    params?: GetIamPolicyPolicyIdParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamPolicyResponseOVH>(
      {url: `/iam/policy/${policyId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamPolicyPolicyIdQueryKey = (policyId: string,
    params?: GetIamPolicyPolicyIdParams,) => {
    return [`/iam/policy/${policyId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamPolicyPolicyIdQueryOptions = <TData = Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError = unknown>(policyId: string,
    params?: GetIamPolicyPolicyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamPolicyPolicyIdQueryKey(policyId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamPolicyPolicyId>>> = ({ signal }) => getIamPolicyPolicyId(policyId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamPolicyPolicyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIamPolicyPolicyId>>>
export type GetIamPolicyPolicyIdQueryError = unknown


export function useGetIamPolicyPolicyId<TData = Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError = unknown>(
 policyId: string,
    params: undefined |  GetIamPolicyPolicyIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPolicyPolicyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPolicyPolicyId<TData = Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError = unknown>(
 policyId: string,
    params?: GetIamPolicyPolicyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamPolicyPolicyId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamPolicyPolicyId<TData = Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError = unknown>(
 policyId: string,
    params?: GetIamPolicyPolicyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve the given policy
 */

export function useGetIamPolicyPolicyId<TData = Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError = unknown>(
 policyId: string,
    params?: GetIamPolicyPolicyIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamPolicyPolicyId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamPolicyPolicyIdQueryOptions(policyId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing policy
 */
export const putIamPolicyPolicyId = (
    policyId: string,
    iamPolicyUpdateOVH: IamPolicyUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<IamPolicyResponseOVH>(
      {url: `/iam/policy/${policyId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: iamPolicyUpdateOVH
    },
      options);
    }
  


export const getPutIamPolicyPolicyIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamPolicyPolicyId>>, TError,{policyId: string;data: IamPolicyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putIamPolicyPolicyId>>, TError,{policyId: string;data: IamPolicyUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIamPolicyPolicyId>>, {policyId: string;data: IamPolicyUpdateOVH}> = (props) => {
          const {policyId,data} = props ?? {};

          return  putIamPolicyPolicyId(policyId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIamPolicyPolicyIdMutationResult = NonNullable<Awaited<ReturnType<typeof putIamPolicyPolicyId>>>
    export type PutIamPolicyPolicyIdMutationBody = IamPolicyUpdateOVH
    export type PutIamPolicyPolicyIdMutationError = unknown

    /**
 * @summary Update an existing policy
 */
export const usePutIamPolicyPolicyId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamPolicyPolicyId>>, TError,{policyId: string;data: IamPolicyUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIamPolicyPolicyId>>,
        TError,
        {policyId: string;data: IamPolicyUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutIamPolicyPolicyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all actions
 */
export const getIamReferenceAction = (
    params?: GetIamReferenceActionParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamReferenceActionOVH[]>(
      {url: `/iam/reference/action`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamReferenceActionQueryKey = (params?: GetIamReferenceActionParams,) => {
    return [`/iam/reference/action`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamReferenceActionQueryOptions = <TData = Awaited<ReturnType<typeof getIamReferenceAction>>, TError = unknown>(params?: GetIamReferenceActionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamReferenceActionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamReferenceAction>>> = ({ signal }) => getIamReferenceAction(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceAction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamReferenceActionQueryResult = NonNullable<Awaited<ReturnType<typeof getIamReferenceAction>>>
export type GetIamReferenceActionQueryError = unknown


export function useGetIamReferenceAction<TData = Awaited<ReturnType<typeof getIamReferenceAction>>, TError = unknown>(
 params: undefined |  GetIamReferenceActionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceAction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamReferenceAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamReferenceAction<TData = Awaited<ReturnType<typeof getIamReferenceAction>>, TError = unknown>(
 params?: GetIamReferenceActionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceAction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamReferenceAction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamReferenceAction<TData = Awaited<ReturnType<typeof getIamReferenceAction>>, TError = unknown>(
 params?: GetIamReferenceActionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all actions
 */

export function useGetIamReferenceAction<TData = Awaited<ReturnType<typeof getIamReferenceAction>>, TError = unknown>(
 params?: GetIamReferenceActionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceAction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamReferenceActionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all resource types
 */
export const getIamReferenceResourceType = (
    
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<string[]>(
      {url: `/iam/reference/resource/type`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamReferenceResourceTypeQueryKey = () => {
    return [`/iam/reference/resource/type`] as const;
    }

    
export const getGetIamReferenceResourceTypeQueryOptions = <TData = Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamReferenceResourceTypeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamReferenceResourceType>>> = ({ signal }) => getIamReferenceResourceType(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamReferenceResourceTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getIamReferenceResourceType>>>
export type GetIamReferenceResourceTypeQueryError = unknown


export function useGetIamReferenceResourceType<TData = Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamReferenceResourceType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamReferenceResourceType<TData = Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamReferenceResourceType>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamReferenceResourceType<TData = Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all resource types
 */

export function useGetIamReferenceResourceType<TData = Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamReferenceResourceType>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamReferenceResourceTypeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all resources
 */
export const getIamResource = (
    params?: GetIamResourceParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamResourceResourceOVH[]>(
      {url: `/iam/resource`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamResourceQueryKey = (params?: GetIamResourceParams,) => {
    return [`/iam/resource`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamResourceQueryOptions = <TData = Awaited<ReturnType<typeof getIamResource>>, TError = unknown>(params?: GetIamResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamResourceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamResource>>> = ({ signal }) => getIamResource(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamResource>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamResourceQueryResult = NonNullable<Awaited<ReturnType<typeof getIamResource>>>
export type GetIamResourceQueryError = unknown


export function useGetIamResource<TData = Awaited<ReturnType<typeof getIamResource>>, TError = unknown>(
 params: undefined |  GetIamResourceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResource>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResource<TData = Awaited<ReturnType<typeof getIamResource>>, TError = unknown>(
 params?: GetIamResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResource>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResource>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResource<TData = Awaited<ReturnType<typeof getIamResource>>, TError = unknown>(
 params?: GetIamResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all resources
 */

export function useGetIamResource<TData = Awaited<ReturnType<typeof getIamResource>>, TError = unknown>(
 params?: GetIamResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResource>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamResourceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a resource
 */
export const getIamResourceResourceURN = (
    resourceURN: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamResourceResourceOVH>(
      {url: `/iam/resource/${resourceURN}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIamResourceResourceURNQueryKey = (resourceURN: string,) => {
    return [`/iam/resource/${resourceURN}`] as const;
    }

    
export const getGetIamResourceResourceURNQueryOptions = <TData = Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError = unknown>(resourceURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamResourceResourceURNQueryKey(resourceURN);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamResourceResourceURN>>> = ({ signal }) => getIamResourceResourceURN(resourceURN, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(resourceURN), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamResourceResourceURNQueryResult = NonNullable<Awaited<ReturnType<typeof getIamResourceResourceURN>>>
export type GetIamResourceResourceURNQueryError = unknown


export function useGetIamResourceResourceURN<TData = Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError = unknown>(
 resourceURN: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResourceResourceURN>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResourceResourceURN<TData = Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError = unknown>(
 resourceURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResourceResourceURN>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResourceResourceURN<TData = Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError = unknown>(
 resourceURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a resource
 */

export function useGetIamResourceResourceURN<TData = Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError = unknown>(
 resourceURN: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceResourceURN>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamResourceResourceURNQueryOptions(resourceURN,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing resource\
Depending on the update, you will require specific grants on this resource:
- Adding tag(s) requires action '$resourceType:apiovh:iam/resource/tag/add'
- Removing tag(s) requires action '$resourceType:apiovh:iam/resource/tag/remove'

(with $resourceType the type of the updated resource)
 * @summary Update an existing resource
 */
export const putIamResourceResourceURN = (
    resourceURN: string,
    iamResourceResourceOVH: NonReadonly<IamResourceResourceOVH>,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<IamResourceResourceOVH>(
      {url: `/iam/resource/${resourceURN}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: iamResourceResourceOVH
    },
      options);
    }
  


export const getPutIamResourceResourceURNMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamResourceResourceURN>>, TError,{resourceURN: string;data: NonReadonly<IamResourceResourceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putIamResourceResourceURN>>, TError,{resourceURN: string;data: NonReadonly<IamResourceResourceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIamResourceResourceURN>>, {resourceURN: string;data: NonReadonly<IamResourceResourceOVH>}> = (props) => {
          const {resourceURN,data} = props ?? {};

          return  putIamResourceResourceURN(resourceURN,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIamResourceResourceURNMutationResult = NonNullable<Awaited<ReturnType<typeof putIamResourceResourceURN>>>
    export type PutIamResourceResourceURNMutationBody = NonReadonly<IamResourceResourceOVH>
    export type PutIamResourceResourceURNMutationError = unknown

    /**
 * @summary Update an existing resource
 */
export const usePutIamResourceResourceURN = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamResourceResourceURN>>, TError,{resourceURN: string;data: NonReadonly<IamResourceResourceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIamResourceResourceURN>>,
        TError,
        {resourceURN: string;data: NonReadonly<IamResourceResourceOVH>},
        TContext
      > => {

      const mutationOptions = getPutIamResourceResourceURNMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate authorizations on a given resource
 */
export const postIamResourceResourceURNAuthorizationCheck = (
    resourceURN: string,
    iamAuthorizeRequestOVH: IamAuthorizeRequestOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamAuthorizeResponseOVH>(
      {url: `/iam/resource/${resourceURN}/authorization/check`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iamAuthorizeRequestOVH, signal
    },
      options);
    }
  


export const getPostIamResourceResourceURNAuthorizationCheckMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamResourceResourceURNAuthorizationCheck>>, TError,{resourceURN: string;data: IamAuthorizeRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamResourceResourceURNAuthorizationCheck>>, TError,{resourceURN: string;data: IamAuthorizeRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamResourceResourceURNAuthorizationCheck>>, {resourceURN: string;data: IamAuthorizeRequestOVH}> = (props) => {
          const {resourceURN,data} = props ?? {};

          return  postIamResourceResourceURNAuthorizationCheck(resourceURN,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamResourceResourceURNAuthorizationCheckMutationResult = NonNullable<Awaited<ReturnType<typeof postIamResourceResourceURNAuthorizationCheck>>>
    export type PostIamResourceResourceURNAuthorizationCheckMutationBody = IamAuthorizeRequestOVH
    export type PostIamResourceResourceURNAuthorizationCheckMutationError = unknown

    /**
 * @summary Validate authorizations on a given resource
 */
export const usePostIamResourceResourceURNAuthorizationCheck = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamResourceResourceURNAuthorizationCheck>>, TError,{resourceURN: string;data: IamAuthorizeRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamResourceResourceURNAuthorizationCheck>>,
        TError,
        {resourceURN: string;data: IamAuthorizeRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostIamResourceResourceURNAuthorizationCheckMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Add a tag to a resource\
This action requires to be granted on action '$resourceType:apiovh:iam/resource/tag/add' (with $resourceType the type of the updated resource)
 * @summary Add a tag to a resource
 */
export const postIamResourceResourceURNTag = (
    resourceURN: string,
    iamResourceAddTagOVH: IamResourceAddTagOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<void>(
      {url: `/iam/resource/${resourceURN}/tag`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iamResourceAddTagOVH, signal
    },
      options);
    }
  


export const getPostIamResourceResourceURNTagMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamResourceResourceURNTag>>, TError,{resourceURN: string;data: IamResourceAddTagOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamResourceResourceURNTag>>, TError,{resourceURN: string;data: IamResourceAddTagOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamResourceResourceURNTag>>, {resourceURN: string;data: IamResourceAddTagOVH}> = (props) => {
          const {resourceURN,data} = props ?? {};

          return  postIamResourceResourceURNTag(resourceURN,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamResourceResourceURNTagMutationResult = NonNullable<Awaited<ReturnType<typeof postIamResourceResourceURNTag>>>
    export type PostIamResourceResourceURNTagMutationBody = IamResourceAddTagOVH
    export type PostIamResourceResourceURNTagMutationError = unknown

    /**
 * @summary Add a tag to a resource
 */
export const usePostIamResourceResourceURNTag = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamResourceResourceURNTag>>, TError,{resourceURN: string;data: IamResourceAddTagOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamResourceResourceURNTag>>,
        TError,
        {resourceURN: string;data: IamResourceAddTagOVH},
        TContext
      > => {

      const mutationOptions = getPostIamResourceResourceURNTagMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Remove a tag from a resource\
This action requires to be granted on action '$resourceType:apiovh:iam/resource/tag/remove' (with $resourceType the type of the updated resource)
 * @summary Remove a tag from a resource
 */
export const deleteIamResourceResourceURNTagKey = (
    resourceURN: string,
    key: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/iam/resource/${resourceURN}/tag/${key}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIamResourceResourceURNTagKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamResourceResourceURNTagKey>>, TError,{resourceURN: string;key: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIamResourceResourceURNTagKey>>, TError,{resourceURN: string;key: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIamResourceResourceURNTagKey>>, {resourceURN: string;key: string}> = (props) => {
          const {resourceURN,key} = props ?? {};

          return  deleteIamResourceResourceURNTagKey(resourceURN,key,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIamResourceResourceURNTagKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIamResourceResourceURNTagKey>>>
    
    export type DeleteIamResourceResourceURNTagKeyMutationError = unknown

    /**
 * @summary Remove a tag from a resource
 */
export const useDeleteIamResourceResourceURNTagKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamResourceResourceURNTagKey>>, TError,{resourceURN: string;key: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIamResourceResourceURNTagKey>>,
        TError,
        {resourceURN: string;key: string},
        TContext
      > => {

      const mutationOptions = getDeleteIamResourceResourceURNTagKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all resource groups
 */
export const getIamResourceGroup = (
    params?: GetIamResourceGroupParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamGroupResponseOVH[]>(
      {url: `/iam/resourceGroup`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamResourceGroupQueryKey = (params?: GetIamResourceGroupParams,) => {
    return [`/iam/resourceGroup`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamResourceGroupQueryOptions = <TData = Awaited<ReturnType<typeof getIamResourceGroup>>, TError = unknown>(params?: GetIamResourceGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamResourceGroupQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamResourceGroup>>> = ({ signal }) => getIamResourceGroup(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamResourceGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getIamResourceGroup>>>
export type GetIamResourceGroupQueryError = unknown


export function useGetIamResourceGroup<TData = Awaited<ReturnType<typeof getIamResourceGroup>>, TError = unknown>(
 params: undefined |  GetIamResourceGroupParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResourceGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResourceGroup<TData = Awaited<ReturnType<typeof getIamResourceGroup>>, TError = unknown>(
 params?: GetIamResourceGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResourceGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResourceGroup<TData = Awaited<ReturnType<typeof getIamResourceGroup>>, TError = unknown>(
 params?: GetIamResourceGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all resource groups
 */

export function useGetIamResourceGroup<TData = Awaited<ReturnType<typeof getIamResourceGroup>>, TError = unknown>(
 params?: GetIamResourceGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamResourceGroupQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new resource group
 */
export const postIamResourceGroup = (
    iamGroupCreationOVH: IamGroupCreationOVH,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamGroupResponseOVH>(
      {url: `/iam/resourceGroup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iamGroupCreationOVH, signal
    },
      options);
    }
  


export const getPostIamResourceGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamResourceGroup>>, TError,{data: IamGroupCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof postIamResourceGroup>>, TError,{data: IamGroupCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIamResourceGroup>>, {data: IamGroupCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postIamResourceGroup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostIamResourceGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postIamResourceGroup>>>
    export type PostIamResourceGroupMutationBody = IamGroupCreationOVH
    export type PostIamResourceGroupMutationError = unknown

    /**
 * @summary Create a new resource group
 */
export const usePostIamResourceGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postIamResourceGroup>>, TError,{data: IamGroupCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof postIamResourceGroup>>,
        TError,
        {data: IamGroupCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostIamResourceGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete the given resource group
 */
export const deleteIamResourceGroupGroupId = (
    groupId: string,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<void>(
      {url: `/iam/resourceGroup/${groupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteIamResourceGroupGroupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamResourceGroupGroupId>>, TError,{groupId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteIamResourceGroupGroupId>>, TError,{groupId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIamResourceGroupGroupId>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteIamResourceGroupGroupId(groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIamResourceGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIamResourceGroupGroupId>>>
    
    export type DeleteIamResourceGroupGroupIdMutationError = unknown

    /**
 * @summary Delete the given resource group
 */
export const useDeleteIamResourceGroupGroupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIamResourceGroupGroupId>>, TError,{groupId: string}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteIamResourceGroupGroupId>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteIamResourceGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve the given resource group
 */
export const getIamResourceGroupGroupId = (
    groupId: string,
    params?: GetIamResourceGroupGroupIdParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<IamGroupResponseOVH>(
      {url: `/iam/resourceGroup/${groupId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetIamResourceGroupGroupIdQueryKey = (groupId: string,
    params?: GetIamResourceGroupGroupIdParams,) => {
    return [`/iam/resourceGroup/${groupId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetIamResourceGroupGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError = unknown>(groupId: string,
    params?: GetIamResourceGroupGroupIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIamResourceGroupGroupIdQueryKey(groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>> = ({ signal }) => getIamResourceGroupGroupId(groupId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetIamResourceGroupGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>>
export type GetIamResourceGroupGroupIdQueryError = unknown


export function useGetIamResourceGroupGroupId<TData = Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError = unknown>(
 groupId: string,
    params: undefined |  GetIamResourceGroupGroupIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResourceGroupGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResourceGroupGroupId<TData = Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError = unknown>(
 groupId: string,
    params?: GetIamResourceGroupGroupIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIamResourceGroupGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetIamResourceGroupGroupId<TData = Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError = unknown>(
 groupId: string,
    params?: GetIamResourceGroupGroupIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve the given resource group
 */

export function useGetIamResourceGroupGroupId<TData = Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError = unknown>(
 groupId: string,
    params?: GetIamResourceGroupGroupIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIamResourceGroupGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetIamResourceGroupGroupIdQueryOptions(groupId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing resource group
 */
export const putIamResourceGroupGroupId = (
    groupId: string,
    iamGroupUpdateOVH: IamGroupUpdateOVH,
 options?: SecondParameter<typeof customInstanceV2>,) => {
      
      
      return customInstanceV2<IamGroupResponseOVH>(
      {url: `/iam/resourceGroup/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: iamGroupUpdateOVH
    },
      options);
    }
  


export const getPutIamResourceGroupGroupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamResourceGroupGroupId>>, TError,{groupId: string;data: IamGroupUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationOptions<Awaited<ReturnType<typeof putIamResourceGroupGroupId>>, TError,{groupId: string;data: IamGroupUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putIamResourceGroupGroupId>>, {groupId: string;data: IamGroupUpdateOVH}> = (props) => {
          const {groupId,data} = props ?? {};

          return  putIamResourceGroupGroupId(groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIamResourceGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putIamResourceGroupGroupId>>>
    export type PutIamResourceGroupGroupIdMutationBody = IamGroupUpdateOVH
    export type PutIamResourceGroupGroupIdMutationError = unknown

    /**
 * @summary Update an existing resource group
 */
export const usePutIamResourceGroupGroupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putIamResourceGroupGroupId>>, TError,{groupId: string;data: IamGroupUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV2>}
): UseMutationResult<
        Awaited<ReturnType<typeof putIamResourceGroupGroupId>>,
        TError,
        {groupId: string;data: IamGroupUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutIamResourceGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseCpanelOrderableVersionsParams,
  GetLicenseCpanelParams,
  GetLicenseCpanelServiceNameCanLicenseBeMovedToParams,
  GetLicenseCpanelServiceNameTasksParams,
  IpBlockOVH,
  LicenseChangeIpStatusOVH,
  LicenseCpanelCpanelOVH,
  LicenseCpanelCpanelWithIAMOVH,
  LicenseCpanelOrderConfigurationOVH,
  LicenseTaskOVH,
  PostLicenseCpanelServiceNameChangeIpBody,
  PostLicenseCpanelServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseCpanel = (
    params?: GetLicenseCpanelParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/cpanel`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCpanelQueryKey = (params?: GetLicenseCpanelParams,) => {
    return [`/license/cpanel`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCpanelQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanel>>, TError = unknown>(params?: GetLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanel>>> = ({ signal }) => getLicenseCpanel(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanel>>>
export type GetLicenseCpanelQueryError = unknown


export function useGetLicenseCpanel<TData = Awaited<ReturnType<typeof getLicenseCpanel>>, TError = unknown>(
 params: undefined |  GetLicenseCpanelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanel<TData = Awaited<ReturnType<typeof getLicenseCpanel>>, TError = unknown>(
 params?: GetLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanel<TData = Awaited<ReturnType<typeof getLicenseCpanel>>, TError = unknown>(
 params?: GetLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseCpanel<TData = Awaited<ReturnType<typeof getLicenseCpanel>>, TError = unknown>(
 params?: GetLicenseCpanelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the orderable CPanel versions
 */
export const getLicenseCpanelOrderableVersions = (
    params: GetLicenseCpanelOrderableVersionsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseCpanelOrderConfigurationOVH[]>(
      {url: `/license/cpanel/orderableVersions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCpanelOrderableVersionsQueryKey = (params: GetLicenseCpanelOrderableVersionsParams,) => {
    return [`/license/cpanel/orderableVersions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCpanelOrderableVersionsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError = unknown>(params: GetLicenseCpanelOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelOrderableVersionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>> = ({ signal }) => getLicenseCpanelOrderableVersions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelOrderableVersionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>>
export type GetLicenseCpanelOrderableVersionsQueryError = unknown


export function useGetLicenseCpanelOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError = unknown>(
 params: GetLicenseCpanelOrderableVersionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError = unknown>(
 params: GetLicenseCpanelOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError = unknown>(
 params: GetLicenseCpanelOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the orderable CPanel versions
 */

export function useGetLicenseCpanelOrderableVersions<TData = Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError = unknown>(
 params: GetLicenseCpanelOrderableVersionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelOrderableVersions>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelOrderableVersionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseCpanelServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseCpanelCpanelWithIAMOVH>(
      {url: `/license/cpanel/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCpanelServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/cpanel/${serviceName}`] as const;
    }

    
export const getGetLicenseCpanelServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>> = ({ signal }) => getLicenseCpanelServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>>
export type GetLicenseCpanelServiceNameQueryError = unknown


export function useGetLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseCpanelServiceName<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putLicenseCpanelServiceName = (
    serviceName: string,
    licenseCpanelCpanelOVH: NonReadonly<LicenseCpanelCpanelOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/cpanel/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseCpanelCpanelOVH
    },
      options);
    }
  


export const getPutLicenseCpanelServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseCpanelServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseCpanelCpanelOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseCpanelServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseCpanelCpanelOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseCpanelServiceName>>, {serviceName: string;data: NonReadonly<LicenseCpanelCpanelOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseCpanelServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseCpanelServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseCpanelServiceName>>>
    export type PutLicenseCpanelServiceNameMutationBody = NonReadonly<LicenseCpanelCpanelOVH>
    export type PutLicenseCpanelServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutLicenseCpanelServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseCpanelServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseCpanelCpanelOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseCpanelServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseCpanelCpanelOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseCpanelServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Returns an array of ips where the license can be moved to
 */
export const getLicenseCpanelServiceNameAllowedDestinationIp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/license/cpanel/${serviceName}/allowedDestinationIp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCpanelServiceNameAllowedDestinationIpQueryKey = (serviceName: string,) => {
    return [`/license/cpanel/${serviceName}/allowedDestinationIp`] as const;
    }

    
export const getGetLicenseCpanelServiceNameAllowedDestinationIpQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelServiceNameAllowedDestinationIpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>> = ({ signal }) => getLicenseCpanelServiceNameAllowedDestinationIp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelServiceNameAllowedDestinationIpQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>>
export type GetLicenseCpanelServiceNameAllowedDestinationIpQueryError = unknown


export function useGetLicenseCpanelServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Returns an array of ips where the license can be moved to
 */

export function useGetLicenseCpanelServiceNameAllowedDestinationIp<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameAllowedDestinationIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelServiceNameAllowedDestinationIpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Will tell if the ip can accept the license
 */
export const getLicenseCpanelServiceNameCanLicenseBeMovedTo = (
    serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseChangeIpStatusOVH>(
      {url: `/license/cpanel/${serviceName}/canLicenseBeMovedTo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCpanelServiceNameCanLicenseBeMovedToQueryKey = (serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams,) => {
    return [`/license/cpanel/${serviceName}/canLicenseBeMovedTo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCpanelServiceNameCanLicenseBeMovedToQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError = unknown>(serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelServiceNameCanLicenseBeMovedToQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>> = ({ signal }) => getLicenseCpanelServiceNameCanLicenseBeMovedTo(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelServiceNameCanLicenseBeMovedToQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>>
export type GetLicenseCpanelServiceNameCanLicenseBeMovedToQueryError = unknown


export function useGetLicenseCpanelServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Will tell if the ip can accept the license
 */

export function useGetLicenseCpanelServiceNameCanLicenseBeMovedTo<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError = unknown>(
 serviceName: string,
    params: GetLicenseCpanelServiceNameCanLicenseBeMovedToParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameCanLicenseBeMovedTo>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelServiceNameCanLicenseBeMovedToQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Move this license to another Ip
 */
export const postLicenseCpanelServiceNameChangeIp = (
    serviceName: string,
    postLicenseCpanelServiceNameChangeIpBody: PostLicenseCpanelServiceNameChangeIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/cpanel/${serviceName}/changeIp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseCpanelServiceNameChangeIpBody, signal
    },
      options);
    }
  


export const getPostLicenseCpanelServiceNameChangeIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseCpanelServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseCpanelServiceNameChangeIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseCpanelServiceNameChangeIp>>, {serviceName: string;data: PostLicenseCpanelServiceNameChangeIpBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseCpanelServiceNameChangeIp(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseCpanelServiceNameChangeIpMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseCpanelServiceNameChangeIp>>>
    export type PostLicenseCpanelServiceNameChangeIpMutationBody = PostLicenseCpanelServiceNameChangeIpBody
    export type PostLicenseCpanelServiceNameChangeIpMutationError = unknown

    /**
 * @summary Move this license to another Ip
 */
export const usePostLicenseCpanelServiceNameChangeIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameChangeIp>>, TError,{serviceName: string;data: PostLicenseCpanelServiceNameChangeIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseCpanelServiceNameChangeIp>>,
        TError,
        {serviceName: string;data: PostLicenseCpanelServiceNameChangeIpBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseCpanelServiceNameChangeIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postLicenseCpanelServiceNameConfirmTermination = (
    serviceName: string,
    postLicenseCpanelServiceNameConfirmTerminationBody: PostLicenseCpanelServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/cpanel/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseCpanelServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostLicenseCpanelServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseCpanelServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseCpanelServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseCpanelServiceNameConfirmTermination>>, {serviceName: string;data: PostLicenseCpanelServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseCpanelServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseCpanelServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseCpanelServiceNameConfirmTermination>>>
    export type PostLicenseCpanelServiceNameConfirmTerminationMutationBody = PostLicenseCpanelServiceNameConfirmTerminationBody
    export type PostLicenseCpanelServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostLicenseCpanelServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostLicenseCpanelServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseCpanelServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostLicenseCpanelServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseCpanelServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getLicenseCpanelServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/cpanel/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCpanelServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/cpanel/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseCpanelServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>> = ({ signal }) => getLicenseCpanelServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>>
export type GetLicenseCpanelServiceNameServiceInfosQueryError = unknown


export function useGetLicenseCpanelServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseCpanelServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseCpanelServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/cpanel/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseCpanelServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseCpanelServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseCpanelServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseCpanelServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseCpanelServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseCpanelServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseCpanelServiceNameServiceInfos>>>
    export type PutLicenseCpanelServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseCpanelServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseCpanelServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseCpanelServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseCpanelServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseCpanelServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary tasks linked to this license
 */
export const getLicenseCpanelServiceNameTasks = (
    serviceName: string,
    params?: GetLicenseCpanelServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/cpanel/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseCpanelServiceNameTasksQueryKey = (serviceName: string,
    params?: GetLicenseCpanelServiceNameTasksParams,) => {
    return [`/license/cpanel/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseCpanelServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetLicenseCpanelServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>> = ({ signal }) => getLicenseCpanelServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>>
export type GetLicenseCpanelServiceNameTasksQueryError = unknown


export function useGetLicenseCpanelServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseCpanelServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseCpanelServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseCpanelServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary tasks linked to this license
 */

export function useGetLicenseCpanelServiceNameTasks<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseCpanelServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseCpanelServiceNameTasksTaskId = (
    serviceName: string,
    taskId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseTaskOVH>(
      {url: `/license/cpanel/${serviceName}/tasks/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseCpanelServiceNameTasksTaskIdQueryKey = (serviceName: string,
    taskId: number,) => {
    return [`/license/cpanel/${serviceName}/tasks/${taskId}`] as const;
    }

    
export const getGetLicenseCpanelServiceNameTasksTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError = unknown>(serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseCpanelServiceNameTasksTaskIdQueryKey(serviceName,taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>> = ({ signal }) => getLicenseCpanelServiceNameTasksTaskId(serviceName,taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseCpanelServiceNameTasksTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>>
export type GetLicenseCpanelServiceNameTasksTaskIdQueryError = unknown


export function useGetLicenseCpanelServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseCpanelServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseCpanelServiceNameTasksTaskId<TData = Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError = unknown>(
 serviceName: string,
    taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseCpanelServiceNameTasksTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseCpanelServiceNameTasksTaskIdQueryOptions(serviceName,taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postLicenseCpanelServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/license/cpanel/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostLicenseCpanelServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseCpanelServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postLicenseCpanelServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseCpanelServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseCpanelServiceNameTerminate>>>
    
    export type PostLicenseCpanelServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostLicenseCpanelServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseCpanelServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseCpanelServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostLicenseCpanelServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

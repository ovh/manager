/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type PostSupplyMondialRelayBody = {
  /** Address */
  address?: string;
  /** City */
  city?: string;
  /** ISO country code */
  country: CoreTypesCountryEnumOVH;
  /** Zip Code */
  zipcode?: string;
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Request status
 */
export type SupplyStatusOVH = typeof SupplyStatusOVH[keyof typeof SupplyStatusOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SupplyStatusOVH = {
  error: 'error',
  ok: 'ok',
  pending: 'pending',
} as const;

/**
 * Status and Mondial Relay Point Details
 */
export interface SupplyMondialRelayResultOVH {
  /** Reference address for finding RelayPoints */
  referenceAddress?: string;
  /** Array of relay points */
  relayPoints?: SupplyMondialRelayOVH[];
}

/**
 * Relay points list and reference address
 * @nullable
 */
export type SupplyMondialRelayReturnOVHResult = SupplyMondialRelayResultOVH | null;

/**
 * Status and Mondial Relay Point Details
 */
export interface SupplyMondialRelayReturnOVH {
  /**
   * Error
   * @nullable
   */
  error?: string | null;
  /**
   * Relay points list and reference address
   * @nullable
   */
  result?: SupplyMondialRelayReturnOVHResult;
  /** Request status */
  status?: SupplyStatusOVH;
}

/**
 * Opening range for mondial relay point
 */
export interface SupplyMondialRelayDayPeriodOVH {
  /** Ending time (00:00 format) */
  end?: string;
  /** Starting time (00:00 format) */
  start?: string;
}

/**
 * Day with schedule for mondial relay point opening
 */
export interface SupplyMondialRelayOpeningOVH {
  /**
   * Opening range
   * @nullable
   */
  friday?: SupplyMondialRelayDayPeriodOVH[] | null;
  /**
   * Opening range
   * @nullable
   */
  monday?: SupplyMondialRelayDayPeriodOVH[] | null;
  /**
   * Opening range
   * @nullable
   */
  saturday?: SupplyMondialRelayDayPeriodOVH[] | null;
  /**
   * Opening range
   * @nullable
   */
  sunday?: SupplyMondialRelayDayPeriodOVH[] | null;
  /**
   * Opening range
   * @nullable
   */
  thursday?: SupplyMondialRelayDayPeriodOVH[] | null;
  /**
   * Opening range
   * @nullable
   */
  tuesday?: SupplyMondialRelayDayPeriodOVH[] | null;
  /**
   * Opening range
   * @nullable
   */
  wednesday?: SupplyMondialRelayDayPeriodOVH[] | null;
}

/**
 * Closing period for mondial relay point
 */
export interface SupplyMondialRelayClosingPeriodOVH {
  /** Ending of closing period */
  end?: string;
  /** Beginning of closing period */
  start?: string;
}

/**
 * Mondial Relay Point Details
 */
export interface SupplyMondialRelayOVH {
  /** Relay point address */
  address?: string;
  /** City */
  city?: string;
  /**
   * Relay point closing dates
   * @nullable
   */
  closing?: SupplyMondialRelayClosingPeriodOVH[] | null;
  /** Relay country */
  country?: CoreTypesCountryEnumOVH;
  /**
   * Distance between address and relay point
   * @nullable
   */
  distance?: number | null;
  /** Mondial Relay point ID */
  id?: string;
  /** Relay point latitude */
  lat?: number;
  /** Relay point longitude */
  lng?: number;
  /**
   * URL of short map
   * @nullable
   */
  mapUrl?: string | null;
  /** Relay point name */
  name?: string;
  /** Relay point opening hours */
  opening?: SupplyMondialRelayOpeningOVH;
  /**
   * Relay point picture\s URL
   * @nullable
   */
  pictureUrl?: string | null;
  /** Zipcode */
  zipcode?: string;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * ISO country codes
 */
export type CoreTypesCountryEnumOVH = typeof CoreTypesCountryEnumOVH[keyof typeof CoreTypesCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;


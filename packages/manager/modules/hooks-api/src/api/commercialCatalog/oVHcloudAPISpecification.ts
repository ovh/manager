/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CommercialCatalogOfferOVH,
  GetCommercialCatalogOffersParams
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List all offers
 */
export const getCommercialCatalogOffers = (
    params?: GetCommercialCatalogOffersParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommercialCatalogOfferOVH[]>(
      {url: `/commercialCatalog/offers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCommercialCatalogOffersQueryKey = (params?: GetCommercialCatalogOffersParams,) => {
    return [`/commercialCatalog/offers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCommercialCatalogOffersQueryOptions = <TData = Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError = unknown>(params?: GetCommercialCatalogOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommercialCatalogOffersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommercialCatalogOffers>>> = ({ signal }) => getCommercialCatalogOffers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCommercialCatalogOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getCommercialCatalogOffers>>>
export type GetCommercialCatalogOffersQueryError = unknown


export function useGetCommercialCatalogOffers<TData = Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError = unknown>(
 params: undefined |  GetCommercialCatalogOffersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommercialCatalogOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommercialCatalogOffers<TData = Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError = unknown>(
 params?: GetCommercialCatalogOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommercialCatalogOffers>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommercialCatalogOffers<TData = Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError = unknown>(
 params?: GetCommercialCatalogOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all offers
 */

export function useGetCommercialCatalogOffers<TData = Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError = unknown>(
 params?: GetCommercialCatalogOffersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffers>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCommercialCatalogOffersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details of an offer
 */
export const getCommercialCatalogOffersId = (
    id: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<CommercialCatalogOfferOVH>(
      {url: `/commercialCatalog/offers/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCommercialCatalogOffersIdQueryKey = (id: string,) => {
    return [`/commercialCatalog/offers/${id}`] as const;
    }

    
export const getGetCommercialCatalogOffersIdQueryOptions = <TData = Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommercialCatalogOffersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>> = ({ signal }) => getCommercialCatalogOffersId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCommercialCatalogOffersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>>
export type GetCommercialCatalogOffersIdQueryError = unknown


export function useGetCommercialCatalogOffersId<TData = Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommercialCatalogOffersId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommercialCatalogOffersId<TData = Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommercialCatalogOffersId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommercialCatalogOffersId<TData = Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details of an offer
 */

export function useGetCommercialCatalogOffersId<TData = Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommercialCatalogOffersId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCommercialCatalogOffersIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





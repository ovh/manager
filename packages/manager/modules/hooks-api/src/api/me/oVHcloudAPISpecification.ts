/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AgreementsContractAgreementOVH,
  AgreementsContractOVH,
  ApiLogOVH,
  AuditLogOVH,
  AuthApiApplicationOVH,
  AuthApiCredentialOVH,
  AuthGroupOVH,
  AuthGroupRequestOVH,
  AuthProviderOVH,
  AuthProviderRequestOVH,
  AuthUserOVH,
  AuthUserRequestOVH,
  BillingAutomaticPaymentMeanOVH,
  BillingBillDetailOVH,
  BillingBillOVH,
  BillingCreditBalanceOVH,
  BillingDepositDetailOVH,
  BillingDepositOVH,
  BillingFidelityAccountOVH,
  BillingFidelityMovementOVH,
  BillingInvoiceDepositRequestOVH,
  BillingItemDetailOVH,
  BillingManualDomainPaymentStatusOVH,
  BillingMovementOVH,
  BillingOrderAssociatedObjectOVH,
  BillingOrderAvailablePaymentMeanOVH,
  BillingOrderAvailablePaymentMethodOVH,
  BillingOrderConsumptionDetailsOVH,
  BillingOrderDetailOVH,
  BillingOrderFollowUpOVH,
  BillingOrderOVH,
  BillingOrderOrderCapacitiesOVH,
  BillingOrderOrderStatusEnumOVH,
  BillingOrderOrderVoucherOVH,
  BillingOrderPaymentMeansOVH,
  BillingOrderPaymentMethodsOVH,
  BillingOrderRegisteredPaymentMeanOVH,
  BillingOrderUseVoucherOVH,
  BillingOvhAccountOVH,
  BillingPaymentOVH,
  BillingRefundDetailOVH,
  BillingRefundOVH,
  BillingReversableBillDetailOVH,
  BillingReverseBillOVH,
  BillingSlaOperationOVH,
  BillingSlaOperationServiceOVH,
  BillingVoucherAccountOVH,
  BillingVoucherMovementOVH,
  BillingWithdrawalDetailOVH,
  BillingWithdrawalOVH,
  CarbonCalculatorCalculationRequestOVH,
  CarbonCalculatorCalculationResponseOVH,
  CarbonCalculatorHasInvoiceResponseOVH,
  CarbonCalculatorTaskOVH,
  DbaasLogsLogKindOVH,
  DbaasLogsLogSubscriptionCreationOVH,
  DbaasLogsLogSubscriptionOVH,
  DbaasLogsLogSubscriptionResponseOVH,
  DbaasLogsLogUrlCreationOVH,
  DbaasLogsTemporaryLogsLinkOVH,
  DebtBalanceOVH,
  DebtDebtOVH,
  DebtEntryAssociatedObjectOVH,
  DebtOperationOVH,
  DedicatedInstallationTemplateHardwareRaidOVH,
  DedicatedInstallationTemplateTemplatePartitioningSchemesOVH,
  DedicatedInstallationTemplateTemplatePartitionsOVH,
  DedicatedInstallationTemplateTemplatesOVH,
  DomainTaskOVH,
  GetCertificatesParams,
  GetMeAgreementsParams,
  GetMeApiCredentialParams,
  GetMeApiLogSubscriptionParams,
  GetMeBillBillIdDebtOperationParams,
  GetMeBillBillIdDownloadParams,
  GetMeBillParams,
  GetMeBillingGroupParams,
  GetMeBillingPurchaseOrderParams,
  GetMeBillingTaskParams,
  GetMeBringYourOwnIpTokenParams,
  GetMeCarbonCalculatorHasInvoiceParams,
  GetMeConsumptionUsageHistoryParams,
  GetMeCreditBalanceParams,
  GetMeDebtAccountDebtDebtIdOperationParams,
  GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams,
  GetMeDepositDepositIdPaidBillsBillIdDownloadParams,
  GetMeDepositParams,
  GetMeDepositRequestParams,
  GetMeFidelityAccountMovementsParams,
  GetMeLogsAuditLogSubscriptionParams,
  GetMeNotificationSmsParams,
  GetMeOrderOrderIdConsumptionDetailsParams,
  GetMeOrderOrderIdDebtOperationParams,
  GetMeOrderParams,
  GetMeOvhAccountOvhAccountIdMovementsParams,
  GetMePaymentMethodParams,
  GetMePaymentTransactionParams,
  GetMeProcedure2FA500,
  GetMeRecommendationsParams,
  GetMeRefundParams,
  GetMeRefundRefundIdDownloadParams,
  GetMeReverseBillParams,
  GetMeSuggestCompanyParams,
  GetMeSvaCdrParams,
  GetMeTaskContactChangeParams,
  GetMeTaskDnsParams,
  GetMeTaskDomainParams,
  GetMeTaskEmailChangeParams,
  GetMeVoucherAccountVoucherAccountIdMovementsParams,
  GetMeWithdrawalParams,
  MeAbuseAbuseOVH,
  MeAgreementsContractAgreementOVH,
  MeBillingGroupBillingGroupOVH,
  MeBillingGroupServiceCreateOVH,
  MeBillingGroupServiceOVH,
  MeBillingPurchaseOrderCreationOVH,
  MeBillingPurchaseOrderPurchaseOrderOVH,
  MeBillingPurchaseOrderUpdateOVH,
  MeBillingReportConsumptionCreationRequestOVH,
  MeBillingReportConsumptionCreationResponseOVH,
  MeBillingReportConsumptionOVH,
  MeBillingTasksTaskOVH,
  MeConsentCampaignOVH,
  MeConsentConsentOVH,
  MeConsentDecisionOVH,
  MeConsumptionTransactionOVH,
  MeContactContactOVH,
  MeContactFieldInformationOVH,
  MeCreditBalanceMovementOVH,
  MeCreditBalanceOVH,
  MeCreditCodeRedeemOVH,
  MeDnsTaskOVH,
  MeGeolocationContinentCountryLocationOVH,
  MeIncidentMigrateServicesOVH,
  MeIncidentOrderOVH,
  MeIncidentServiceMigrationOVH,
  MeInsightAccessOVH,
  MeMarketingConsentOVH,
  MeMigrationContractOVH,
  MeMigrationOVH,
  MePartnerLevelLevelOVH,
  MePaymentAvailablePaymentMethodOVH,
  MePaymentMeanDeferredOVH,
  MePaymentMethodChallengeOVH,
  MePaymentMethodCreationOVH,
  MePaymentMethodDetailsOVH,
  MePaymentMethodFinalizeOVH,
  MePaymentMethodOneclickCreationOVH,
  MePaymentMethodOneclickResponseOVH,
  MePaymentMethodValidationOVH,
  MePaymentPaymentMethodOVH,
  MePaymentTransactionOVH,
  MeProcedure2FACreateOVH,
  MeProcedure2FACreateResponseOVH,
  MeProcedure2FAStatusOVH,
  MeProcedureFraudCreateOVH,
  MeProcedureFraudCreateResponseOVH,
  MeProcedureFraudStatusOVH,
  MeProcedureGDPRCreateOVH,
  MeProcedureGDPRCreateResponseOVH,
  MeProcedureGDPRFinalizeOVH,
  MeProcedureIdentityCreateOVH,
  MeProcedureIdentityCreateResponseOVH,
  MeProcedureIdentityStatusOVH,
  MeRepricingServiceOVH,
  MeSupportLevelLevelOVH,
  MeSvaBankAccountCreationOVH,
  MeSvaBankAccountOVH,
  MeSvaCashoutAttachmentOVH,
  MeSvaCashoutOVH,
  MeSvaCdrOVH,
  MeSvaDocumentCreationOVH,
  MeSvaDocumentOVH,
  MeSvaWalletCreationOVH,
  MeSvaWalletOVH,
  MeSvaWalletUpdateOVH,
  MeTagAvailableTagOVH,
  MeTagCreationOVH,
  MeTagTagOVH,
  NichandleAccessRestrictionSOTPAccountOVH,
  NichandleAccessRestrictionSOTPSecretOVH,
  NichandleAccessRestrictionSOTPValidateOVH,
  NichandleAccessRestrictionSmsAccountOVH,
  NichandleAccessRestrictionSmsCodeOVH,
  NichandleAccessRestrictionSmsSecretOVH,
  NichandleAccessRestrictionTOTPAccountOVH,
  NichandleAccessRestrictionTOTPSecretOVH,
  NichandleAccessRestrictionU2FAccountOVH,
  NichandleAccessRestrictionU2FRegisterChallengeOVH,
  NichandleBillingCapacitiesOVH,
  NichandleContactChangeTaskOVH,
  NichandleDeveloperModeRestrictionOVH,
  NichandleDocumentDocumentOVH,
  NichandleDomainTaskArgumentOVH,
  NichandleDomainTaskProgressBarOVH,
  NichandleEmailChangeTaskOVH,
  NichandleEmailNotificationOVH,
  NichandleIpRestrictionDefaultRuleOVH,
  NichandleIpRestrictionOVH,
  NichandleIpv4OrgOVH,
  NichandleManagerPreferenceOVH,
  NichandleNicAutorenewInfosOVH,
  NichandleNichandleOVH,
  NichandleNichandleSmsNotificationOVH,
  NichandleSshKeyOVH,
  NichandleSubAccountConsumerKeyOVH,
  NichandleSubAccountOVH,
  NichandleVipStatusOVH,
  NichandleVoucherStatusOVH,
  NotificationGdprDataAccuracyOVH,
  Oauth2ClientOVH,
  Oauth2ClientRequestOVH,
  Oauth2ClientSecretOVH,
  PostMeAccessRestrictionBackupCodeDisableBody,
  PostMeAccessRestrictionBackupCodeEnableBody,
  PostMeAccessRestrictionBackupCodeValidateBody,
  PostMeAccessRestrictionIpBody,
  PostMeAccessRestrictionSmsBody,
  PostMeAccessRestrictionSmsIdDisableBody,
  PostMeAccessRestrictionSmsIdEnableBody,
  PostMeAccessRestrictionSmsIdValidateBody,
  PostMeAccessRestrictionTotpIdDisableBody,
  PostMeAccessRestrictionTotpIdEnableBody,
  PostMeAccessRestrictionTotpIdValidateBody,
  PostMeAccessRestrictionU2fIdValidateBody,
  PostMeAutorenewBody,
  PostMeBillExportBody,
  PostMeBillingInvoicesByPostalMailBody,
  PostMeChangeEmailBody,
  PostMeDocumentBody,
  PostMeDocumentCorsBody,
  PostMeFaxCustomDomainsBody,
  PostMeFeedbackBody,
  PostMeFidelityAccountCreditOrderBody,
  PostMeInstallationTemplateBody,
  PostMeInstallationTemplateTemplateNamePartitionSchemeBody,
  PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody,
  PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody,
  PostMeIpOrganisationBody,
  PostMeMailingListSubscribeBody,
  PostMeNotificationSmsBody,
  PostMeNotificationSmsPhoneNumberValidateBody,
  PostMeOrderOrderIdBalanceBody,
  PostMeOrderOrderIdPayBody,
  PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody,
  PostMeOrderOrderIdRetractionBody,
  PostMeOvhAccountOvhAccountIdCreditOrderBody,
  PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody,
  PostMeOvhAccountOvhAccountIdRetrieveMoneyBody,
  PostMePasswordRecoverBody,
  PostMePreferencesManagerBody,
  PostMeProcedure2FA400,
  PostMeProcedure2FA500,
  PostMeProcedureFraud400,
  PostMeProcedureFraud500,
  PostMeProcedureGdpr400,
  PostMeProcedureGdpr500,
  PostMeProcedureIdentity400,
  PostMeProcedureIdentity500,
  PostMeRefundExportBody,
  PostMeSshKeyBody,
  PostMeSubAccountBody,
  PostMeTaskContactChangeIdAcceptBody,
  PostMeTaskContactChangeIdRefuseBody,
  PostMeTaskEmailChangeIdAcceptBody,
  PostMeTaskEmailChangeIdRefuseBody,
  PostMeTelephonyDefaultIpRestrictionBody,
  PostMeTelephonySettingsBody,
  PostMeVoucherCheckValidityBody,
  PostMeXdslSettingBody,
  RecommendationsRecommendationsOVH,
  ServiceOperationOVH,
  SuggestCompanyOVH,
  TelephonyDefaultIpRestrictionOVH,
  TelephonyMailDomain2ServiceOVH,
  TelephonySettingsOVH,
  XdslSettingOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get details about your nichandle
 */
export const getMe = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleNichandleOVH>(
      {url: `/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeQueryKey = () => {
    return [`/me`] as const;
    }

    
export const getGetMeQueryOptions = <TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({ signal }) => getMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>
export type GetMeQueryError = unknown


export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about your nichandle
 */

export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update details of your nichandle
 */
export const putMe = (
    nichandleNichandleOVH: NonReadonly<NichandleNichandleOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleNichandleOVH
    },
      options);
    }
  


export const getPutMeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMe>>, TError,{data: NonReadonly<NichandleNichandleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMe>>, TError,{data: NonReadonly<NichandleNichandleOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMe>>, {data: NonReadonly<NichandleNichandleOVH>}> = (props) => {
          const {data} = props ?? {};

          return  putMe(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeMutationResult = NonNullable<Awaited<ReturnType<typeof putMe>>>
    export type PutMeMutationBody = NonReadonly<NichandleNichandleOVH>
    export type PutMeMutationError = unknown

    /**
 * @summary Update details of your nichandle
 */
export const usePutMe = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMe>>, TError,{data: NonReadonly<NichandleNichandleOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMe>>,
        TError,
        {data: NonReadonly<NichandleNichandleOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve abuse cases list
 */
export const getMeAbuse = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/abuse`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAbuseQueryKey = () => {
    return [`/me/abuse`] as const;
    }

    
export const getGetMeAbuseQueryOptions = <TData = Awaited<ReturnType<typeof getMeAbuse>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAbuseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAbuse>>> = ({ signal }) => getMeAbuse(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAbuse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAbuseQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAbuse>>>
export type GetMeAbuseQueryError = unknown


export function useGetMeAbuse<TData = Awaited<ReturnType<typeof getMeAbuse>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAbuse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAbuse<TData = Awaited<ReturnType<typeof getMeAbuse>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAbuse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAbuse<TData = Awaited<ReturnType<typeof getMeAbuse>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve abuse cases list
 */

export function useGetMeAbuse<TData = Awaited<ReturnType<typeof getMeAbuse>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAbuseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Check specific abuse case
 */
export const getMeAbuseId = (
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeAbuseAbuseOVH>(
      {url: `/me/abuse/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAbuseIdQueryKey = (id: string,) => {
    return [`/me/abuse/${id}`] as const;
    }

    
export const getGetMeAbuseIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeAbuseId>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuseId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAbuseIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAbuseId>>> = ({ signal }) => getMeAbuseId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAbuseId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAbuseIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAbuseId>>>
export type GetMeAbuseIdQueryError = unknown


export function useGetMeAbuseId<TData = Awaited<ReturnType<typeof getMeAbuseId>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuseId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAbuseId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAbuseId<TData = Awaited<ReturnType<typeof getMeAbuseId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuseId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAbuseId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAbuseId<TData = Awaited<ReturnType<typeof getMeAbuseId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuseId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check specific abuse case
 */

export function useGetMeAbuseId<TData = Awaited<ReturnType<typeof getMeAbuseId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAbuseId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAbuseIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete this Two-Factor
 */
export const deleteMeAccessRestrictionBackupCode = (
    
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/backupCode`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeAccessRestrictionBackupCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionBackupCode>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionBackupCode>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeAccessRestrictionBackupCode>>, void> = () => {
          

          return  deleteMeAccessRestrictionBackupCode(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeAccessRestrictionBackupCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeAccessRestrictionBackupCode>>>
    
    export type DeleteMeAccessRestrictionBackupCodeMutationError = unknown

    /**
 * @summary Delete this Two-Factor
 */
export const useDeleteMeAccessRestrictionBackupCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionBackupCode>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeAccessRestrictionBackupCode>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteMeAccessRestrictionBackupCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionBackupCode = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionSOTPAccountOVH>(
      {url: `/me/accessRestriction/backupCode`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionBackupCodeQueryKey = () => {
    return [`/me/accessRestriction/backupCode`] as const;
    }

    
export const getGetMeAccessRestrictionBackupCodeQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionBackupCodeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>> = ({ signal }) => getMeAccessRestrictionBackupCode(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionBackupCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>>
export type GetMeAccessRestrictionBackupCodeQueryError = unknown


export function useGetMeAccessRestrictionBackupCode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionBackupCode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionBackupCode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionBackupCode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionBackupCode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionBackupCodeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a SOTP access restriction
 */
export const postMeAccessRestrictionBackupCode = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionSOTPSecretOVH>(
      {url: `/me/accessRestriction/backupCode`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionBackupCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCode>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCode>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCode>>, void> = () => {
          

          return  postMeAccessRestrictionBackupCode(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionBackupCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCode>>>
    
    export type PostMeAccessRestrictionBackupCodeMutationError = unknown

    /**
 * @summary Add a SOTP access restriction
 */
export const usePostMeAccessRestrictionBackupCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCode>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionBackupCode>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionBackupCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable this SOTP account
 */
export const postMeAccessRestrictionBackupCodeDisable = (
    postMeAccessRestrictionBackupCodeDisableBody: PostMeAccessRestrictionBackupCodeDisableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/backupCode/disable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionBackupCodeDisableBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionBackupCodeDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeDisable>>, TError,{data: PostMeAccessRestrictionBackupCodeDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeDisable>>, TError,{data: PostMeAccessRestrictionBackupCodeDisableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeDisable>>, {data: PostMeAccessRestrictionBackupCodeDisableBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeAccessRestrictionBackupCodeDisable(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionBackupCodeDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeDisable>>>
    export type PostMeAccessRestrictionBackupCodeDisableMutationBody = PostMeAccessRestrictionBackupCodeDisableBody
    export type PostMeAccessRestrictionBackupCodeDisableMutationError = unknown

    /**
 * @summary Disable this SOTP account
 */
export const usePostMeAccessRestrictionBackupCodeDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeDisable>>, TError,{data: PostMeAccessRestrictionBackupCodeDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeDisable>>,
        TError,
        {data: PostMeAccessRestrictionBackupCodeDisableBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionBackupCodeDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable this SOTP account
 */
export const postMeAccessRestrictionBackupCodeEnable = (
    postMeAccessRestrictionBackupCodeEnableBody: PostMeAccessRestrictionBackupCodeEnableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/backupCode/enable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionBackupCodeEnableBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionBackupCodeEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeEnable>>, TError,{data: PostMeAccessRestrictionBackupCodeEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeEnable>>, TError,{data: PostMeAccessRestrictionBackupCodeEnableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeEnable>>, {data: PostMeAccessRestrictionBackupCodeEnableBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeAccessRestrictionBackupCodeEnable(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionBackupCodeEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeEnable>>>
    export type PostMeAccessRestrictionBackupCodeEnableMutationBody = PostMeAccessRestrictionBackupCodeEnableBody
    export type PostMeAccessRestrictionBackupCodeEnableMutationError = unknown

    /**
 * @summary Enable this SOTP account
 */
export const usePostMeAccessRestrictionBackupCodeEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeEnable>>, TError,{data: PostMeAccessRestrictionBackupCodeEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeEnable>>,
        TError,
        {data: PostMeAccessRestrictionBackupCodeEnableBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionBackupCodeEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate your SOTP account
 */
export const postMeAccessRestrictionBackupCodeValidate = (
    postMeAccessRestrictionBackupCodeValidateBody: PostMeAccessRestrictionBackupCodeValidateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionSOTPValidateOVH>(
      {url: `/me/accessRestriction/backupCode/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionBackupCodeValidateBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionBackupCodeValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeValidate>>, TError,{data: PostMeAccessRestrictionBackupCodeValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeValidate>>, TError,{data: PostMeAccessRestrictionBackupCodeValidateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeValidate>>, {data: PostMeAccessRestrictionBackupCodeValidateBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeAccessRestrictionBackupCodeValidate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionBackupCodeValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeValidate>>>
    export type PostMeAccessRestrictionBackupCodeValidateMutationBody = PostMeAccessRestrictionBackupCodeValidateBody
    export type PostMeAccessRestrictionBackupCodeValidateMutationError = unknown

    /**
 * @summary Validate your SOTP account
 */
export const usePostMeAccessRestrictionBackupCodeValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeValidate>>, TError,{data: PostMeAccessRestrictionBackupCodeValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionBackupCodeValidate>>,
        TError,
        {data: PostMeAccessRestrictionBackupCodeValidateBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionBackupCodeValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionDeveloperMode = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleDeveloperModeRestrictionOVH>(
      {url: `/me/accessRestriction/developerMode`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionDeveloperModeQueryKey = () => {
    return [`/me/accessRestriction/developerMode`] as const;
    }

    
export const getGetMeAccessRestrictionDeveloperModeQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionDeveloperModeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>> = ({ signal }) => getMeAccessRestrictionDeveloperMode(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionDeveloperModeQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>>
export type GetMeAccessRestrictionDeveloperModeQueryError = unknown


export function useGetMeAccessRestrictionDeveloperMode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionDeveloperMode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionDeveloperMode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionDeveloperMode<TData = Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionDeveloperMode>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionDeveloperModeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeAccessRestrictionDeveloperMode = (
    nichandleDeveloperModeRestrictionOVH: NichandleDeveloperModeRestrictionOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/developerMode`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleDeveloperModeRestrictionOVH
    },
      options);
    }
  


export const getPutMeAccessRestrictionDeveloperModeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionDeveloperMode>>, TError,{data: NichandleDeveloperModeRestrictionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionDeveloperMode>>, TError,{data: NichandleDeveloperModeRestrictionOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAccessRestrictionDeveloperMode>>, {data: NichandleDeveloperModeRestrictionOVH}> = (props) => {
          const {data} = props ?? {};

          return  putMeAccessRestrictionDeveloperMode(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAccessRestrictionDeveloperModeMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAccessRestrictionDeveloperMode>>>
    export type PutMeAccessRestrictionDeveloperModeMutationBody = NichandleDeveloperModeRestrictionOVH
    export type PutMeAccessRestrictionDeveloperModeMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAccessRestrictionDeveloperMode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionDeveloperMode>>, TError,{data: NichandleDeveloperModeRestrictionOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAccessRestrictionDeveloperMode>>,
        TError,
        {data: NichandleDeveloperModeRestrictionOVH},
        TContext
      > => {

      const mutationOptions = getPutMeAccessRestrictionDeveloperModeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of IP restrictions
 */
export const getMeAccessRestrictionIp = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/accessRestriction/ip`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionIpQueryKey = () => {
    return [`/me/accessRestriction/ip`] as const;
    }

    
export const getGetMeAccessRestrictionIpQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionIpQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>> = ({ signal }) => getMeAccessRestrictionIp(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionIpQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>>
export type GetMeAccessRestrictionIpQueryError = unknown


export function useGetMeAccessRestrictionIp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionIp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionIp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionIp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of IP restrictions
 */

export function useGetMeAccessRestrictionIp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionIpQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an IP access restriction
 */
export const postMeAccessRestrictionIp = (
    postMeAccessRestrictionIpBody: PostMeAccessRestrictionIpBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/ip`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionIpBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionIpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionIp>>, TError,{data: PostMeAccessRestrictionIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionIp>>, TError,{data: PostMeAccessRestrictionIpBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionIp>>, {data: PostMeAccessRestrictionIpBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeAccessRestrictionIp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionIpMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionIp>>>
    export type PostMeAccessRestrictionIpMutationBody = PostMeAccessRestrictionIpBody
    export type PostMeAccessRestrictionIpMutationError = unknown

    /**
 * @summary Add an IP access restriction
 */
export const usePostMeAccessRestrictionIp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionIp>>, TError,{data: PostMeAccessRestrictionIpBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionIp>>,
        TError,
        {data: PostMeAccessRestrictionIpBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionIpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this restriction rule
 */
export const deleteMeAccessRestrictionIpId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/ip/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeAccessRestrictionIpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionIpId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionIpId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeAccessRestrictionIpId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeAccessRestrictionIpId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeAccessRestrictionIpIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeAccessRestrictionIpId>>>
    
    export type DeleteMeAccessRestrictionIpIdMutationError = unknown

    /**
 * @summary Delete this restriction rule
 */
export const useDeleteMeAccessRestrictionIpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionIpId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeAccessRestrictionIpId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeAccessRestrictionIpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionIpId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleIpRestrictionOVH>(
      {url: `/me/accessRestriction/ip/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionIpIdQueryKey = (id: number,) => {
    return [`/me/accessRestriction/ip/${id}`] as const;
    }

    
export const getGetMeAccessRestrictionIpIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionIpIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>> = ({ signal }) => getMeAccessRestrictionIpId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionIpIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>>
export type GetMeAccessRestrictionIpIdQueryError = unknown


export function useGetMeAccessRestrictionIpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionIpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionIpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionIpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionIpIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeAccessRestrictionIpId = (
    id: number,
    nichandleIpRestrictionOVH: NonReadonly<NichandleIpRestrictionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/ip/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleIpRestrictionOVH
    },
      options);
    }
  


export const getPutMeAccessRestrictionIpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionIpId>>, TError,{id: number;data: NonReadonly<NichandleIpRestrictionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionIpId>>, TError,{id: number;data: NonReadonly<NichandleIpRestrictionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAccessRestrictionIpId>>, {id: number;data: NonReadonly<NichandleIpRestrictionOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeAccessRestrictionIpId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAccessRestrictionIpIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAccessRestrictionIpId>>>
    export type PutMeAccessRestrictionIpIdMutationBody = NonReadonly<NichandleIpRestrictionOVH>
    export type PutMeAccessRestrictionIpIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAccessRestrictionIpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionIpId>>, TError,{id: number;data: NonReadonly<NichandleIpRestrictionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAccessRestrictionIpId>>,
        TError,
        {id: number;data: NonReadonly<NichandleIpRestrictionOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeAccessRestrictionIpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionIpDefaultRule = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleIpRestrictionDefaultRuleOVH>(
      {url: `/me/accessRestriction/ipDefaultRule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionIpDefaultRuleQueryKey = () => {
    return [`/me/accessRestriction/ipDefaultRule`] as const;
    }

    
export const getGetMeAccessRestrictionIpDefaultRuleQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionIpDefaultRuleQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>> = ({ signal }) => getMeAccessRestrictionIpDefaultRule(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionIpDefaultRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>>
export type GetMeAccessRestrictionIpDefaultRuleQueryError = unknown


export function useGetMeAccessRestrictionIpDefaultRule<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionIpDefaultRule<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionIpDefaultRule<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionIpDefaultRule<TData = Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionIpDefaultRule>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionIpDefaultRuleQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeAccessRestrictionIpDefaultRule = (
    nichandleIpRestrictionDefaultRuleOVH: NichandleIpRestrictionDefaultRuleOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/ipDefaultRule`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleIpRestrictionDefaultRuleOVH
    },
      options);
    }
  


export const getPutMeAccessRestrictionIpDefaultRuleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionIpDefaultRule>>, TError,{data: NichandleIpRestrictionDefaultRuleOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionIpDefaultRule>>, TError,{data: NichandleIpRestrictionDefaultRuleOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAccessRestrictionIpDefaultRule>>, {data: NichandleIpRestrictionDefaultRuleOVH}> = (props) => {
          const {data} = props ?? {};

          return  putMeAccessRestrictionIpDefaultRule(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAccessRestrictionIpDefaultRuleMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAccessRestrictionIpDefaultRule>>>
    export type PutMeAccessRestrictionIpDefaultRuleMutationBody = NichandleIpRestrictionDefaultRuleOVH
    export type PutMeAccessRestrictionIpDefaultRuleMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAccessRestrictionIpDefaultRule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionIpDefaultRule>>, TError,{data: NichandleIpRestrictionDefaultRuleOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAccessRestrictionIpDefaultRule>>,
        TError,
        {data: NichandleIpRestrictionDefaultRuleOVH},
        TContext
      > => {

      const mutationOptions = getPutMeAccessRestrictionIpDefaultRuleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of Sms accounts
 */
export const getMeAccessRestrictionSms = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/accessRestriction/sms`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionSmsQueryKey = () => {
    return [`/me/accessRestriction/sms`] as const;
    }

    
export const getGetMeAccessRestrictionSmsQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionSmsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>> = ({ signal }) => getMeAccessRestrictionSms(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionSmsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>>
export type GetMeAccessRestrictionSmsQueryError = unknown


export function useGetMeAccessRestrictionSms<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionSms<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionSms<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of Sms accounts
 */

export function useGetMeAccessRestrictionSms<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionSmsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a SMS access restriction
 */
export const postMeAccessRestrictionSms = (
    postMeAccessRestrictionSmsBody: PostMeAccessRestrictionSmsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionSmsSecretOVH>(
      {url: `/me/accessRestriction/sms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionSmsBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionSmsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSms>>, TError,{data: PostMeAccessRestrictionSmsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSms>>, TError,{data: PostMeAccessRestrictionSmsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionSms>>, {data: PostMeAccessRestrictionSmsBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeAccessRestrictionSms(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionSmsMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionSms>>>
    export type PostMeAccessRestrictionSmsMutationBody = PostMeAccessRestrictionSmsBody
    export type PostMeAccessRestrictionSmsMutationError = unknown

    /**
 * @summary Add a SMS access restriction
 */
export const usePostMeAccessRestrictionSms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSms>>, TError,{data: PostMeAccessRestrictionSmsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionSms>>,
        TError,
        {data: PostMeAccessRestrictionSmsBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionSmsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Two-Factor
 */
export const deleteMeAccessRestrictionSmsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/sms/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeAccessRestrictionSmsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionSmsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionSmsId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeAccessRestrictionSmsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeAccessRestrictionSmsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeAccessRestrictionSmsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeAccessRestrictionSmsId>>>
    
    export type DeleteMeAccessRestrictionSmsIdMutationError = unknown

    /**
 * @summary Delete this Two-Factor
 */
export const useDeleteMeAccessRestrictionSmsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionSmsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeAccessRestrictionSmsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeAccessRestrictionSmsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionSmsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionSmsAccountOVH>(
      {url: `/me/accessRestriction/sms/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionSmsIdQueryKey = (id: number,) => {
    return [`/me/accessRestriction/sms/${id}`] as const;
    }

    
export const getGetMeAccessRestrictionSmsIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionSmsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>> = ({ signal }) => getMeAccessRestrictionSmsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionSmsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>>
export type GetMeAccessRestrictionSmsIdQueryError = unknown


export function useGetMeAccessRestrictionSmsId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionSmsId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionSmsId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionSmsId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionSmsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionSmsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeAccessRestrictionSmsId = (
    id: number,
    nichandleAccessRestrictionSmsAccountOVH: NonReadonly<NichandleAccessRestrictionSmsAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/sms/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleAccessRestrictionSmsAccountOVH
    },
      options);
    }
  


export const getPutMeAccessRestrictionSmsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionSmsId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionSmsAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionSmsId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionSmsAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAccessRestrictionSmsId>>, {id: number;data: NonReadonly<NichandleAccessRestrictionSmsAccountOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeAccessRestrictionSmsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAccessRestrictionSmsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAccessRestrictionSmsId>>>
    export type PutMeAccessRestrictionSmsIdMutationBody = NonReadonly<NichandleAccessRestrictionSmsAccountOVH>
    export type PutMeAccessRestrictionSmsIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAccessRestrictionSmsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionSmsId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionSmsAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAccessRestrictionSmsId>>,
        TError,
        {id: number;data: NonReadonly<NichandleAccessRestrictionSmsAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeAccessRestrictionSmsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable this SMS account
 */
export const postMeAccessRestrictionSmsIdDisable = (
    id: number,
    postMeAccessRestrictionSmsIdDisableBody: PostMeAccessRestrictionSmsIdDisableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/sms/${id}/disable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionSmsIdDisableBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionSmsIdDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdDisable>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdDisable>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdDisableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdDisable>>, {id: number;data: PostMeAccessRestrictionSmsIdDisableBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionSmsIdDisable(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionSmsIdDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdDisable>>>
    export type PostMeAccessRestrictionSmsIdDisableMutationBody = PostMeAccessRestrictionSmsIdDisableBody
    export type PostMeAccessRestrictionSmsIdDisableMutationError = unknown

    /**
 * @summary Disable this SMS account
 */
export const usePostMeAccessRestrictionSmsIdDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdDisable>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdDisable>>,
        TError,
        {id: number;data: PostMeAccessRestrictionSmsIdDisableBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionSmsIdDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable this SMS account
 */
export const postMeAccessRestrictionSmsIdEnable = (
    id: number,
    postMeAccessRestrictionSmsIdEnableBody: PostMeAccessRestrictionSmsIdEnableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/sms/${id}/enable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionSmsIdEnableBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionSmsIdEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdEnable>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdEnable>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdEnableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdEnable>>, {id: number;data: PostMeAccessRestrictionSmsIdEnableBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionSmsIdEnable(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionSmsIdEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdEnable>>>
    export type PostMeAccessRestrictionSmsIdEnableMutationBody = PostMeAccessRestrictionSmsIdEnableBody
    export type PostMeAccessRestrictionSmsIdEnableMutationError = unknown

    /**
 * @summary Enable this SMS account
 */
export const usePostMeAccessRestrictionSmsIdEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdEnable>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdEnable>>,
        TError,
        {id: number;data: PostMeAccessRestrictionSmsIdEnableBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionSmsIdEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Send a SMS to this account
 */
export const postMeAccessRestrictionSmsIdSendCode = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionSmsCodeOVH>(
      {url: `/me/accessRestriction/sms/${id}/sendCode`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionSmsIdSendCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdSendCode>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdSendCode>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdSendCode>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeAccessRestrictionSmsIdSendCode(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionSmsIdSendCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdSendCode>>>
    
    export type PostMeAccessRestrictionSmsIdSendCodeMutationError = unknown

    /**
 * @summary Send a SMS to this account
 */
export const usePostMeAccessRestrictionSmsIdSendCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdSendCode>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdSendCode>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionSmsIdSendCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate your SMS account
 */
export const postMeAccessRestrictionSmsIdValidate = (
    id: number,
    postMeAccessRestrictionSmsIdValidateBody: PostMeAccessRestrictionSmsIdValidateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/sms/${id}/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionSmsIdValidateBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionSmsIdValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdValidateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdValidate>>, {id: number;data: PostMeAccessRestrictionSmsIdValidateBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionSmsIdValidate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionSmsIdValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdValidate>>>
    export type PostMeAccessRestrictionSmsIdValidateMutationBody = PostMeAccessRestrictionSmsIdValidateBody
    export type PostMeAccessRestrictionSmsIdValidateMutationError = unknown

    /**
 * @summary Validate your SMS account
 */
export const usePostMeAccessRestrictionSmsIdValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionSmsIdValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionSmsIdValidate>>,
        TError,
        {id: number;data: PostMeAccessRestrictionSmsIdValidateBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionSmsIdValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of TOTP accounts
 */
export const getMeAccessRestrictionTotp = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/accessRestriction/totp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionTotpQueryKey = () => {
    return [`/me/accessRestriction/totp`] as const;
    }

    
export const getGetMeAccessRestrictionTotpQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionTotpQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>> = ({ signal }) => getMeAccessRestrictionTotp(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionTotpQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>>
export type GetMeAccessRestrictionTotpQueryError = unknown


export function useGetMeAccessRestrictionTotp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionTotp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionTotp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of TOTP accounts
 */

export function useGetMeAccessRestrictionTotp<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionTotpQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a TOTP access restriction
 */
export const postMeAccessRestrictionTotp = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionTOTPSecretOVH>(
      {url: `/me/accessRestriction/totp`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionTotpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotp>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotp>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionTotp>>, void> = () => {
          

          return  postMeAccessRestrictionTotp(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionTotpMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionTotp>>>
    
    export type PostMeAccessRestrictionTotpMutationError = unknown

    /**
 * @summary Add a TOTP access restriction
 */
export const usePostMeAccessRestrictionTotp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotp>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionTotp>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionTotpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Two-Factor
 */
export const deleteMeAccessRestrictionTotpId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/totp/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeAccessRestrictionTotpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionTotpId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionTotpId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeAccessRestrictionTotpId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeAccessRestrictionTotpId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeAccessRestrictionTotpIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeAccessRestrictionTotpId>>>
    
    export type DeleteMeAccessRestrictionTotpIdMutationError = unknown

    /**
 * @summary Delete this Two-Factor
 */
export const useDeleteMeAccessRestrictionTotpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionTotpId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeAccessRestrictionTotpId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeAccessRestrictionTotpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionTotpId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionTOTPAccountOVH>(
      {url: `/me/accessRestriction/totp/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionTotpIdQueryKey = (id: number,) => {
    return [`/me/accessRestriction/totp/${id}`] as const;
    }

    
export const getGetMeAccessRestrictionTotpIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionTotpIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>> = ({ signal }) => getMeAccessRestrictionTotpId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionTotpIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>>
export type GetMeAccessRestrictionTotpIdQueryError = unknown


export function useGetMeAccessRestrictionTotpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionTotpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionTotpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionTotpId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionTotpId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionTotpIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeAccessRestrictionTotpId = (
    id: number,
    nichandleAccessRestrictionTOTPAccountOVH: NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/totp/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleAccessRestrictionTOTPAccountOVH
    },
      options);
    }
  


export const getPutMeAccessRestrictionTotpIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionTotpId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionTotpId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAccessRestrictionTotpId>>, {id: number;data: NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeAccessRestrictionTotpId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAccessRestrictionTotpIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAccessRestrictionTotpId>>>
    export type PutMeAccessRestrictionTotpIdMutationBody = NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>
    export type PutMeAccessRestrictionTotpIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAccessRestrictionTotpId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionTotpId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAccessRestrictionTotpId>>,
        TError,
        {id: number;data: NonReadonly<NichandleAccessRestrictionTOTPAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeAccessRestrictionTotpIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable this TOTP account
 */
export const postMeAccessRestrictionTotpIdDisable = (
    id: number,
    postMeAccessRestrictionTotpIdDisableBody: PostMeAccessRestrictionTotpIdDisableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/totp/${id}/disable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionTotpIdDisableBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionTotpIdDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdDisable>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdDisable>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdDisableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdDisable>>, {id: number;data: PostMeAccessRestrictionTotpIdDisableBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionTotpIdDisable(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionTotpIdDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdDisable>>>
    export type PostMeAccessRestrictionTotpIdDisableMutationBody = PostMeAccessRestrictionTotpIdDisableBody
    export type PostMeAccessRestrictionTotpIdDisableMutationError = unknown

    /**
 * @summary Disable this TOTP account
 */
export const usePostMeAccessRestrictionTotpIdDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdDisable>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdDisableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdDisable>>,
        TError,
        {id: number;data: PostMeAccessRestrictionTotpIdDisableBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionTotpIdDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable this TOTP account
 */
export const postMeAccessRestrictionTotpIdEnable = (
    id: number,
    postMeAccessRestrictionTotpIdEnableBody: PostMeAccessRestrictionTotpIdEnableBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/totp/${id}/enable`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionTotpIdEnableBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionTotpIdEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdEnable>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdEnable>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdEnableBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdEnable>>, {id: number;data: PostMeAccessRestrictionTotpIdEnableBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionTotpIdEnable(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionTotpIdEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdEnable>>>
    export type PostMeAccessRestrictionTotpIdEnableMutationBody = PostMeAccessRestrictionTotpIdEnableBody
    export type PostMeAccessRestrictionTotpIdEnableMutationError = unknown

    /**
 * @summary Enable this TOTP account
 */
export const usePostMeAccessRestrictionTotpIdEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdEnable>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdEnableBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdEnable>>,
        TError,
        {id: number;data: PostMeAccessRestrictionTotpIdEnableBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionTotpIdEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate your TOTP account
 */
export const postMeAccessRestrictionTotpIdValidate = (
    id: number,
    postMeAccessRestrictionTotpIdValidateBody: PostMeAccessRestrictionTotpIdValidateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/totp/${id}/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionTotpIdValidateBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionTotpIdValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdValidateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdValidate>>, {id: number;data: PostMeAccessRestrictionTotpIdValidateBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionTotpIdValidate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionTotpIdValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdValidate>>>
    export type PostMeAccessRestrictionTotpIdValidateMutationBody = PostMeAccessRestrictionTotpIdValidateBody
    export type PostMeAccessRestrictionTotpIdValidateMutationError = unknown

    /**
 * @summary Validate your TOTP account
 */
export const usePostMeAccessRestrictionTotpIdValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionTotpIdValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionTotpIdValidate>>,
        TError,
        {id: number;data: PostMeAccessRestrictionTotpIdValidateBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionTotpIdValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of U2F accounts
 */
export const getMeAccessRestrictionU2f = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/accessRestriction/u2f`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionU2fQueryKey = () => {
    return [`/me/accessRestriction/u2f`] as const;
    }

    
export const getGetMeAccessRestrictionU2fQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionU2fQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>> = ({ signal }) => getMeAccessRestrictionU2f(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionU2fQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>>
export type GetMeAccessRestrictionU2fQueryError = unknown


export function useGetMeAccessRestrictionU2f<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionU2f<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionU2f<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of U2F accounts
 */

export function useGetMeAccessRestrictionU2f<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2f>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionU2fQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a U2F access restriction
 */
export const postMeAccessRestrictionU2f = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionU2FRegisterChallengeOVH>(
      {url: `/me/accessRestriction/u2f`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionU2fMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2f>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2f>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionU2f>>, void> = () => {
          

          return  postMeAccessRestrictionU2f(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionU2fMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionU2f>>>
    
    export type PostMeAccessRestrictionU2fMutationError = unknown

    /**
 * @summary Add a U2F access restriction
 */
export const usePostMeAccessRestrictionU2f = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2f>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionU2f>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionU2fMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this Two-Factor
 */
export const deleteMeAccessRestrictionU2fId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/u2f/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeAccessRestrictionU2fIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionU2fId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionU2fId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeAccessRestrictionU2fId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeAccessRestrictionU2fId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeAccessRestrictionU2fIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeAccessRestrictionU2fId>>>
    
    export type DeleteMeAccessRestrictionU2fIdMutationError = unknown

    /**
 * @summary Delete this Two-Factor
 */
export const useDeleteMeAccessRestrictionU2fId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeAccessRestrictionU2fId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeAccessRestrictionU2fId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeAccessRestrictionU2fIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAccessRestrictionU2fId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleAccessRestrictionU2FAccountOVH>(
      {url: `/me/accessRestriction/u2f/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAccessRestrictionU2fIdQueryKey = (id: number,) => {
    return [`/me/accessRestriction/u2f/${id}`] as const;
    }

    
export const getGetMeAccessRestrictionU2fIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAccessRestrictionU2fIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>> = ({ signal }) => getMeAccessRestrictionU2fId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAccessRestrictionU2fIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>>
export type GetMeAccessRestrictionU2fIdQueryError = unknown


export function useGetMeAccessRestrictionU2fId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionU2fId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAccessRestrictionU2fId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAccessRestrictionU2fId<TData = Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAccessRestrictionU2fId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAccessRestrictionU2fIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeAccessRestrictionU2fId = (
    id: number,
    nichandleAccessRestrictionU2FAccountOVH: NonReadonly<NichandleAccessRestrictionU2FAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/u2f/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleAccessRestrictionU2FAccountOVH
    },
      options);
    }
  


export const getPutMeAccessRestrictionU2fIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionU2fId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionU2FAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionU2fId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionU2FAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAccessRestrictionU2fId>>, {id: number;data: NonReadonly<NichandleAccessRestrictionU2FAccountOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeAccessRestrictionU2fId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAccessRestrictionU2fIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAccessRestrictionU2fId>>>
    export type PutMeAccessRestrictionU2fIdMutationBody = NonReadonly<NichandleAccessRestrictionU2FAccountOVH>
    export type PutMeAccessRestrictionU2fIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAccessRestrictionU2fId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAccessRestrictionU2fId>>, TError,{id: number;data: NonReadonly<NichandleAccessRestrictionU2FAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAccessRestrictionU2fId>>,
        TError,
        {id: number;data: NonReadonly<NichandleAccessRestrictionU2FAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeAccessRestrictionU2fIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable this U2F account
 */
export const postMeAccessRestrictionU2fIdDisable = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/u2f/${id}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionU2fIdDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdDisable>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdDisable>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdDisable>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeAccessRestrictionU2fIdDisable(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionU2fIdDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdDisable>>>
    
    export type PostMeAccessRestrictionU2fIdDisableMutationError = unknown

    /**
 * @summary Disable this U2F account
 */
export const usePostMeAccessRestrictionU2fIdDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdDisable>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdDisable>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionU2fIdDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable this U2F account
 */
export const postMeAccessRestrictionU2fIdEnable = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/u2f/${id}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionU2fIdEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdEnable>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdEnable>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdEnable>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeAccessRestrictionU2fIdEnable(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionU2fIdEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdEnable>>>
    
    export type PostMeAccessRestrictionU2fIdEnableMutationError = unknown

    /**
 * @summary Enable this U2F account
 */
export const usePostMeAccessRestrictionU2fIdEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdEnable>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdEnable>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionU2fIdEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate your U2F account
 */
export const postMeAccessRestrictionU2fIdValidate = (
    id: number,
    postMeAccessRestrictionU2fIdValidateBody: PostMeAccessRestrictionU2fIdValidateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/accessRestriction/u2f/${id}/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAccessRestrictionU2fIdValidateBody, signal
    },
      options);
    }
  


export const getPostMeAccessRestrictionU2fIdValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionU2fIdValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionU2fIdValidateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdValidate>>, {id: number;data: PostMeAccessRestrictionU2fIdValidateBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeAccessRestrictionU2fIdValidate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAccessRestrictionU2fIdValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdValidate>>>
    export type PostMeAccessRestrictionU2fIdValidateMutationBody = PostMeAccessRestrictionU2fIdValidateBody
    export type PostMeAccessRestrictionU2fIdValidateMutationError = unknown

    /**
 * @summary Validate your U2F account
 */
export const usePostMeAccessRestrictionU2fIdValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdValidate>>, TError,{id: number;data: PostMeAccessRestrictionU2fIdValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAccessRestrictionU2fIdValidate>>,
        TError,
        {id: number;data: PostMeAccessRestrictionU2fIdValidateBody},
        TContext
      > => {

      const mutationOptions = getPostMeAccessRestrictionU2fIdValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of contracts signed between you and OVH
 */
export const getMeAgreements = (
    params?: GetMeAgreementsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/agreements`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeAgreementsQueryKey = (params?: GetMeAgreementsParams,) => {
    return [`/me/agreements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeAgreementsQueryOptions = <TData = Awaited<ReturnType<typeof getMeAgreements>>, TError = unknown>(params?: GetMeAgreementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAgreementsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAgreements>>> = ({ signal }) => getMeAgreements(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAgreements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAgreementsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAgreements>>>
export type GetMeAgreementsQueryError = unknown


export function useGetMeAgreements<TData = Awaited<ReturnType<typeof getMeAgreements>>, TError = unknown>(
 params: undefined |  GetMeAgreementsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAgreements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAgreements<TData = Awaited<ReturnType<typeof getMeAgreements>>, TError = unknown>(
 params?: GetMeAgreementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAgreements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAgreements<TData = Awaited<ReturnType<typeof getMeAgreements>>, TError = unknown>(
 params?: GetMeAgreementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of contracts signed between you and OVH
 */

export function useGetMeAgreements<TData = Awaited<ReturnType<typeof getMeAgreements>>, TError = unknown>(
 params?: GetMeAgreementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAgreementsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeAgreementsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AgreementsContractAgreementOVH>(
      {url: `/me/agreements/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAgreementsIdQueryKey = (id: number,) => {
    return [`/me/agreements/${id}`] as const;
    }

    
export const getGetMeAgreementsIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeAgreementsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAgreementsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAgreementsId>>> = ({ signal }) => getMeAgreementsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAgreementsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAgreementsId>>>
export type GetMeAgreementsIdQueryError = unknown


export function useGetMeAgreementsId<TData = Awaited<ReturnType<typeof getMeAgreementsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAgreementsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAgreementsId<TData = Awaited<ReturnType<typeof getMeAgreementsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAgreementsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAgreementsId<TData = Awaited<ReturnType<typeof getMeAgreementsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAgreementsId<TData = Awaited<ReturnType<typeof getMeAgreementsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAgreementsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accept this contract
 */
export const postMeAgreementsIdAccept = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/agreements/${id}/accept`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeAgreementsIdAcceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAgreementsIdAccept>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAgreementsIdAccept>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAgreementsIdAccept>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeAgreementsIdAccept(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAgreementsIdAcceptMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAgreementsIdAccept>>>
    
    export type PostMeAgreementsIdAcceptMutationError = unknown

    /**
 * @summary Accept this contract
 */
export const usePostMeAgreementsIdAccept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAgreementsIdAccept>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAgreementsIdAccept>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeAgreementsIdAcceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAgreementsIdContract = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AgreementsContractOVH>(
      {url: `/me/agreements/${id}/contract`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAgreementsIdContractQueryKey = (id: number,) => {
    return [`/me/agreements/${id}/contract`] as const;
    }

    
export const getGetMeAgreementsIdContractQueryOptions = <TData = Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAgreementsIdContractQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAgreementsIdContract>>> = ({ signal }) => getMeAgreementsIdContract(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAgreementsIdContractQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAgreementsIdContract>>>
export type GetMeAgreementsIdContractQueryError = unknown


export function useGetMeAgreementsIdContract<TData = Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAgreementsIdContract>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAgreementsIdContract<TData = Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAgreementsIdContract>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAgreementsIdContract<TData = Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAgreementsIdContract<TData = Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAgreementsIdContract>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAgreementsIdContractQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all applications
 */
export const getMeApiApplication = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/api/application`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiApplicationQueryKey = () => {
    return [`/me/api/application`] as const;
    }

    
export const getGetMeApiApplicationQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiApplication>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplication>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiApplicationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiApplication>>> = ({ signal }) => getMeApiApplication(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiApplication>>>
export type GetMeApiApplicationQueryError = unknown


export function useGetMeApiApplication<TData = Awaited<ReturnType<typeof getMeApiApplication>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiApplication>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiApplication<TData = Awaited<ReturnType<typeof getMeApiApplication>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiApplication>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiApplication<TData = Awaited<ReturnType<typeof getMeApiApplication>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplication>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all applications
 */

export function useGetMeApiApplication<TData = Awaited<ReturnType<typeof getMeApiApplication>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplication>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiApplicationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete an application. It will revoke all credential belonging to this application
 */
export const deleteMeApiApplicationApplicationId = (
    applicationId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/api/application/${applicationId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeApiApplicationApplicationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiApplicationApplicationId>>, TError,{applicationId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiApplicationApplicationId>>, TError,{applicationId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeApiApplicationApplicationId>>, {applicationId: number}> = (props) => {
          const {applicationId} = props ?? {};

          return  deleteMeApiApplicationApplicationId(applicationId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeApiApplicationApplicationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeApiApplicationApplicationId>>>
    
    export type DeleteMeApiApplicationApplicationIdMutationError = unknown

    /**
 * @summary Delete an application. It will revoke all credential belonging to this application
 */
export const useDeleteMeApiApplicationApplicationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiApplicationApplicationId>>, TError,{applicationId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeApiApplicationApplicationId>>,
        TError,
        {applicationId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeApiApplicationApplicationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about an application
 */
export const getMeApiApplicationApplicationId = (
    applicationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthApiApplicationOVH>(
      {url: `/me/api/application/${applicationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiApplicationApplicationIdQueryKey = (applicationId: number,) => {
    return [`/me/api/application/${applicationId}`] as const;
    }

    
export const getGetMeApiApplicationApplicationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError = unknown>(applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiApplicationApplicationIdQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>> = ({ signal }) => getMeApiApplicationApplicationId(applicationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiApplicationApplicationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>>
export type GetMeApiApplicationApplicationIdQueryError = unknown


export function useGetMeApiApplicationApplicationId<TData = Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError = unknown>(
 applicationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiApplicationApplicationId<TData = Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiApplicationApplicationId<TData = Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about an application
 */

export function useGetMeApiApplicationApplicationId<TData = Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError = unknown>(
 applicationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiApplicationApplicationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiApplicationApplicationIdQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all credentials
 */
export const getMeApiCredential = (
    params?: GetMeApiCredentialParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/api/credential`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeApiCredentialQueryKey = (params?: GetMeApiCredentialParams,) => {
    return [`/me/api/credential`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeApiCredentialQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiCredential>>, TError = unknown>(params?: GetMeApiCredentialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiCredentialQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiCredential>>> = ({ signal }) => getMeApiCredential(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredential>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiCredentialQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiCredential>>>
export type GetMeApiCredentialQueryError = unknown


export function useGetMeApiCredential<TData = Awaited<ReturnType<typeof getMeApiCredential>>, TError = unknown>(
 params: undefined |  GetMeApiCredentialParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredential>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiCredential>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiCredential<TData = Awaited<ReturnType<typeof getMeApiCredential>>, TError = unknown>(
 params?: GetMeApiCredentialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredential>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiCredential>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiCredential<TData = Awaited<ReturnType<typeof getMeApiCredential>>, TError = unknown>(
 params?: GetMeApiCredentialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all credentials
 */

export function useGetMeApiCredential<TData = Awaited<ReturnType<typeof getMeApiCredential>>, TError = unknown>(
 params?: GetMeApiCredentialParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredential>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiCredentialQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete a credential
 */
export const deleteMeApiCredentialCredentialId = (
    credentialId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/api/credential/${credentialId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeApiCredentialCredentialIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiCredentialCredentialId>>, TError,{credentialId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiCredentialCredentialId>>, TError,{credentialId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeApiCredentialCredentialId>>, {credentialId: number}> = (props) => {
          const {credentialId} = props ?? {};

          return  deleteMeApiCredentialCredentialId(credentialId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeApiCredentialCredentialIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeApiCredentialCredentialId>>>
    
    export type DeleteMeApiCredentialCredentialIdMutationError = unknown

    /**
 * @summary Delete a credential
 */
export const useDeleteMeApiCredentialCredentialId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiCredentialCredentialId>>, TError,{credentialId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeApiCredentialCredentialId>>,
        TError,
        {credentialId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeApiCredentialCredentialIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a credential
 */
export const getMeApiCredentialCredentialId = (
    credentialId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthApiCredentialOVH>(
      {url: `/me/api/credential/${credentialId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiCredentialCredentialIdQueryKey = (credentialId: number,) => {
    return [`/me/api/credential/${credentialId}`] as const;
    }

    
export const getGetMeApiCredentialCredentialIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError = unknown>(credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiCredentialCredentialIdQueryKey(credentialId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>> = ({ signal }) => getMeApiCredentialCredentialId(credentialId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(credentialId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiCredentialCredentialIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>>
export type GetMeApiCredentialCredentialIdQueryError = unknown


export function useGetMeApiCredentialCredentialId<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError = unknown>(
 credentialId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiCredentialCredentialId<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError = unknown>(
 credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiCredentialCredentialId<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError = unknown>(
 credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a credential
 */

export function useGetMeApiCredentialCredentialId<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError = unknown>(
 credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiCredentialCredentialIdQueryOptions(credentialId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit a credential
 */
export const putMeApiCredentialCredentialId = (
    credentialId: number,
    authApiCredentialOVH: NonReadonly<AuthApiCredentialOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/api/credential/${credentialId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authApiCredentialOVH
    },
      options);
    }
  


export const getPutMeApiCredentialCredentialIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeApiCredentialCredentialId>>, TError,{credentialId: number;data: NonReadonly<AuthApiCredentialOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeApiCredentialCredentialId>>, TError,{credentialId: number;data: NonReadonly<AuthApiCredentialOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeApiCredentialCredentialId>>, {credentialId: number;data: NonReadonly<AuthApiCredentialOVH>}> = (props) => {
          const {credentialId,data} = props ?? {};

          return  putMeApiCredentialCredentialId(credentialId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeApiCredentialCredentialIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeApiCredentialCredentialId>>>
    export type PutMeApiCredentialCredentialIdMutationBody = NonReadonly<AuthApiCredentialOVH>
    export type PutMeApiCredentialCredentialIdMutationError = unknown

    /**
 * @summary Edit a credential
 */
export const usePutMeApiCredentialCredentialId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeApiCredentialCredentialId>>, TError,{credentialId: number;data: NonReadonly<AuthApiCredentialOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeApiCredentialCredentialId>>,
        TError,
        {credentialId: number;data: NonReadonly<AuthApiCredentialOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeApiCredentialCredentialIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get associated application
 */
export const getMeApiCredentialCredentialIdApplication = (
    credentialId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthApiApplicationOVH>(
      {url: `/me/api/credential/${credentialId}/application`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiCredentialCredentialIdApplicationQueryKey = (credentialId: number,) => {
    return [`/me/api/credential/${credentialId}/application`] as const;
    }

    
export const getGetMeApiCredentialCredentialIdApplicationQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError = unknown>(credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiCredentialCredentialIdApplicationQueryKey(credentialId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>> = ({ signal }) => getMeApiCredentialCredentialIdApplication(credentialId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(credentialId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiCredentialCredentialIdApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>>
export type GetMeApiCredentialCredentialIdApplicationQueryError = unknown


export function useGetMeApiCredentialCredentialIdApplication<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError = unknown>(
 credentialId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiCredentialCredentialIdApplication<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError = unknown>(
 credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiCredentialCredentialIdApplication<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError = unknown>(
 credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get associated application
 */

export function useGetMeApiCredentialCredentialIdApplication<TData = Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError = unknown>(
 credentialId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiCredentialCredentialIdApplication>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiCredentialCredentialIdApplicationQueryOptions(credentialId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available log kinds
 */
export const getMeApiLogKind = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/api/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogKindQueryKey = () => {
    return [`/me/api/log/kind`] as const;
    }

    
export const getGetMeApiLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogKind>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogKindQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogKind>>> = ({ signal }) => getMeApiLogKind(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogKind>>>
export type GetMeApiLogKindQueryError = unknown


export function useGetMeApiLogKind<TData = Awaited<ReturnType<typeof getMeApiLogKind>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogKind<TData = Awaited<ReturnType<typeof getMeApiLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogKind<TData = Awaited<ReturnType<typeof getMeApiLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available log kinds
 */

export function useGetMeApiLogKind<TData = Awaited<ReturnType<typeof getMeApiLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogKindQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a log kind
 */
export const getMeApiLogKindName = (
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogKindOVH>(
      {url: `/me/api/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogKindNameQueryKey = (name: string,) => {
    return [`/me/api/log/kind/${name}`] as const;
    }

    
export const getGetMeApiLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogKindName>>, TError = unknown>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogKindNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogKindName>>> = ({ signal }) => getMeApiLogKindName(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogKindName>>>
export type GetMeApiLogKindNameQueryError = unknown


export function useGetMeApiLogKindName<TData = Awaited<ReturnType<typeof getMeApiLogKindName>>, TError = unknown>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogKindName<TData = Awaited<ReturnType<typeof getMeApiLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogKindName<TData = Awaited<ReturnType<typeof getMeApiLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a log kind
 */

export function useGetMeApiLogKindName<TData = Awaited<ReturnType<typeof getMeApiLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogKindNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscription IDs for a cluster
 */
export const getMeApiLogSubscription = (
    params?: GetMeApiLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/api/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeApiLogSubscriptionQueryKey = (params?: GetMeApiLogSubscriptionParams,) => {
    return [`/me/api/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeApiLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError = unknown>(params?: GetMeApiLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogSubscriptionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogSubscription>>> = ({ signal }) => getMeApiLogSubscription(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogSubscription>>>
export type GetMeApiLogSubscriptionQueryError = unknown


export function useGetMeApiLogSubscription<TData = Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError = unknown>(
 params: undefined |  GetMeApiLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogSubscription<TData = Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError = unknown>(
 params?: GetMeApiLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogSubscription<TData = Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError = unknown>(
 params?: GetMeApiLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscription IDs for a cluster
 */

export function useGetMeApiLogSubscription<TData = Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError = unknown>(
 params?: GetMeApiLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogSubscriptionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const postMeApiLogSubscription = (
    dbaasLogsLogSubscriptionCreationOVH: DbaasLogsLogSubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/me/api/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogSubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostMeApiLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeApiLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeApiLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeApiLogSubscription>>, {data: DbaasLogsLogSubscriptionCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeApiLogSubscription(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeApiLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeApiLogSubscription>>>
    export type PostMeApiLogSubscriptionMutationBody = DbaasLogsLogSubscriptionCreationOVH
    export type PostMeApiLogSubscriptionMutationError = unknown

    /**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const usePostMeApiLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeApiLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeApiLogSubscription>>,
        TError,
        {data: DbaasLogsLogSubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeApiLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription
 */
export const deleteMeApiLogSubscriptionSubscriptionId = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/me/api/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeApiLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeApiLogSubscriptionSubscriptionId>>, {subscriptionId: string}> = (props) => {
          const {subscriptionId} = props ?? {};

          return  deleteMeApiLogSubscriptionSubscriptionId(subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeApiLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeApiLogSubscriptionSubscriptionId>>>
    
    export type DeleteMeApiLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription
 */
export const useDeleteMeApiLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeApiLogSubscriptionSubscriptionId>>,
        TError,
        {subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeApiLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get subscription details
 */
export const getMeApiLogSubscriptionSubscriptionId = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionOVH>(
      {url: `/me/api/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogSubscriptionSubscriptionIdQueryKey = (subscriptionId: string,) => {
    return [`/me/api/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetMeApiLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError = unknown>(subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogSubscriptionSubscriptionIdQueryKey(subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>> = ({ signal }) => getMeApiLogSubscriptionSubscriptionId(subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>>
export type GetMeApiLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetMeApiLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get subscription details
 */

export function useGetMeApiLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogSubscriptionSubscriptionIdQueryOptions(subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary URL to retrieve logs
 */
export const postMeApiLogUrl = (
    dbaasLogsLogUrlCreationOVH: DbaasLogsLogUrlCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/me/api/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogUrlCreationOVH, signal
    },
      options);
    }
  


export const getPostMeApiLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeApiLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeApiLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeApiLogUrl>>, {data: DbaasLogsLogUrlCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeApiLogUrl(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeApiLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postMeApiLogUrl>>>
    export type PostMeApiLogUrlMutationBody = DbaasLogsLogUrlCreationOVH
    export type PostMeApiLogUrlMutationError = unknown

    /**
 * @summary Generate a temporary URL to retrieve logs
 */
export const usePostMeApiLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeApiLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeApiLogUrl>>,
        TError,
        {data: DbaasLogsLogUrlCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeApiLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of Api calls done with your account
 */
export const getMeApiLogsSelf = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/api/logs/self`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogsSelfQueryKey = () => {
    return [`/me/api/logs/self`] as const;
    }

    
export const getGetMeApiLogsSelfQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogsSelfQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogsSelf>>> = ({ signal }) => getMeApiLogsSelf(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogsSelfQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogsSelf>>>
export type GetMeApiLogsSelfQueryError = unknown


export function useGetMeApiLogsSelf<TData = Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsSelf>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsSelf<TData = Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsSelf>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsSelf<TData = Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of Api calls done with your account
 */

export function useGetMeApiLogsSelf<TData = Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelf>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogsSelfQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeApiLogsSelfLogId = (
    logId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ApiLogOVH>(
      {url: `/me/api/logs/self/${logId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogsSelfLogIdQueryKey = (logId: number,) => {
    return [`/me/api/logs/self/${logId}`] as const;
    }

    
export const getGetMeApiLogsSelfLogIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError = unknown>(logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogsSelfLogIdQueryKey(logId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>> = ({ signal }) => getMeApiLogsSelfLogId(logId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(logId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogsSelfLogIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>>
export type GetMeApiLogsSelfLogIdQueryError = unknown


export function useGetMeApiLogsSelfLogId<TData = Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError = unknown>(
 logId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsSelfLogId<TData = Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError = unknown>(
 logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsSelfLogId<TData = Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError = unknown>(
 logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeApiLogsSelfLogId<TData = Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError = unknown>(
 logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsSelfLogId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogsSelfLogIdQueryOptions(logId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of Api calls done on services you have access to
 */
export const getMeApiLogsServices = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/api/logs/services`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogsServicesQueryKey = () => {
    return [`/me/api/logs/services`] as const;
    }

    
export const getGetMeApiLogsServicesQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogsServices>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogsServicesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogsServices>>> = ({ signal }) => getMeApiLogsServices(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogsServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogsServices>>>
export type GetMeApiLogsServicesQueryError = unknown


export function useGetMeApiLogsServices<TData = Awaited<ReturnType<typeof getMeApiLogsServices>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsServices<TData = Awaited<ReturnType<typeof getMeApiLogsServices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsServices<TData = Awaited<ReturnType<typeof getMeApiLogsServices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of Api calls done on services you have access to
 */

export function useGetMeApiLogsServices<TData = Awaited<ReturnType<typeof getMeApiLogsServices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogsServicesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeApiLogsServicesLogId = (
    logId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ApiLogOVH>(
      {url: `/me/api/logs/services/${logId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiLogsServicesLogIdQueryKey = (logId: number,) => {
    return [`/me/api/logs/services/${logId}`] as const;
    }

    
export const getGetMeApiLogsServicesLogIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError = unknown>(logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiLogsServicesLogIdQueryKey(logId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>> = ({ signal }) => getMeApiLogsServicesLogId(logId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(logId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiLogsServicesLogIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>>
export type GetMeApiLogsServicesLogIdQueryError = unknown


export function useGetMeApiLogsServicesLogId<TData = Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError = unknown>(
 logId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsServicesLogId<TData = Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError = unknown>(
 logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiLogsServicesLogId<TData = Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError = unknown>(
 logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeApiLogsServicesLogId<TData = Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError = unknown>(
 logId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiLogsServicesLogId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiLogsServicesLogIdQueryOptions(logId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List oAuth2 clients
 */
export const getMeApiOauth2Client = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/api/oauth2/client`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiOauth2ClientQueryKey = () => {
    return [`/me/api/oauth2/client`] as const;
    }

    
export const getGetMeApiOauth2ClientQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiOauth2ClientQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiOauth2Client>>> = ({ signal }) => getMeApiOauth2Client(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiOauth2ClientQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiOauth2Client>>>
export type GetMeApiOauth2ClientQueryError = unknown


export function useGetMeApiOauth2Client<TData = Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiOauth2Client>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiOauth2Client<TData = Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiOauth2Client>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiOauth2Client<TData = Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List oAuth2 clients
 */

export function useGetMeApiOauth2Client<TData = Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2Client>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiOauth2ClientQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new oauth2 client
 */
export const postMeApiOauth2Client = (
    oauth2ClientRequestOVH: Oauth2ClientRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Oauth2ClientSecretOVH>(
      {url: `/me/api/oauth2/client`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: oauth2ClientRequestOVH, signal
    },
      options);
    }
  


export const getPostMeApiOauth2ClientMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeApiOauth2Client>>, TError,{data: Oauth2ClientRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeApiOauth2Client>>, TError,{data: Oauth2ClientRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeApiOauth2Client>>, {data: Oauth2ClientRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeApiOauth2Client(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeApiOauth2ClientMutationResult = NonNullable<Awaited<ReturnType<typeof postMeApiOauth2Client>>>
    export type PostMeApiOauth2ClientMutationBody = Oauth2ClientRequestOVH
    export type PostMeApiOauth2ClientMutationError = unknown

    /**
 * @summary Create a new oauth2 client
 */
export const usePostMeApiOauth2Client = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeApiOauth2Client>>, TError,{data: Oauth2ClientRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeApiOauth2Client>>,
        TError,
        {data: Oauth2ClientRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostMeApiOauth2ClientMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an oAuth2 client
 */
export const deleteMeApiOauth2ClientClientId = (
    clientId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/api/oauth2/client/${clientId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeApiOauth2ClientClientIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiOauth2ClientClientId>>, TError,{clientId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiOauth2ClientClientId>>, TError,{clientId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeApiOauth2ClientClientId>>, {clientId: string}> = (props) => {
          const {clientId} = props ?? {};

          return  deleteMeApiOauth2ClientClientId(clientId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeApiOauth2ClientClientIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeApiOauth2ClientClientId>>>
    
    export type DeleteMeApiOauth2ClientClientIdMutationError = unknown

    /**
 * @summary Delete an oAuth2 client
 */
export const useDeleteMeApiOauth2ClientClientId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeApiOauth2ClientClientId>>, TError,{clientId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeApiOauth2ClientClientId>>,
        TError,
        {clientId: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeApiOauth2ClientClientIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getMeApiOauth2ClientClientId = (
    clientId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<Oauth2ClientOVH>(
      {url: `/me/api/oauth2/client/${clientId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeApiOauth2ClientClientIdQueryKey = (clientId: string,) => {
    return [`/me/api/oauth2/client/${clientId}`] as const;
    }

    
export const getGetMeApiOauth2ClientClientIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError = unknown>(clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeApiOauth2ClientClientIdQueryKey(clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>> = ({ signal }) => getMeApiOauth2ClientClientId(clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(clientId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeApiOauth2ClientClientIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>>
export type GetMeApiOauth2ClientClientIdQueryError = unknown


export function useGetMeApiOauth2ClientClientId<TData = Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError = unknown>(
 clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiOauth2ClientClientId<TData = Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeApiOauth2ClientClientId<TData = Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetMeApiOauth2ClientClientId<TData = Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeApiOauth2ClientClientId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeApiOauth2ClientClientIdQueryOptions(clientId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putMeApiOauth2ClientClientId = (
    clientId: string,
    oauth2ClientOVH: NonReadonly<Oauth2ClientOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/api/oauth2/client/${clientId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: oauth2ClientOVH
    },
      options);
    }
  


export const getPutMeApiOauth2ClientClientIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeApiOauth2ClientClientId>>, TError,{clientId: string;data: NonReadonly<Oauth2ClientOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeApiOauth2ClientClientId>>, TError,{clientId: string;data: NonReadonly<Oauth2ClientOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeApiOauth2ClientClientId>>, {clientId: string;data: NonReadonly<Oauth2ClientOVH>}> = (props) => {
          const {clientId,data} = props ?? {};

          return  putMeApiOauth2ClientClientId(clientId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeApiOauth2ClientClientIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeApiOauth2ClientClientId>>>
    export type PutMeApiOauth2ClientClientIdMutationBody = NonReadonly<Oauth2ClientOVH>
    export type PutMeApiOauth2ClientClientIdMutationError = unknown

    export const usePutMeApiOauth2ClientClientId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeApiOauth2ClientClientId>>, TError,{clientId: string;data: NonReadonly<Oauth2ClientOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeApiOauth2ClientClientId>>,
        TError,
        {clientId: string;data: NonReadonly<Oauth2ClientOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeApiOauth2ClientClientIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeAutorenew = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleNicAutorenewInfosOVH>(
      {url: `/me/autorenew`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAutorenewQueryKey = () => {
    return [`/me/autorenew`] as const;
    }

    
export const getGetMeAutorenewQueryOptions = <TData = Awaited<ReturnType<typeof getMeAutorenew>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAutorenew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAutorenewQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAutorenew>>> = ({ signal }) => getMeAutorenew(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAutorenew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAutorenewQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAutorenew>>>
export type GetMeAutorenewQueryError = unknown


export function useGetMeAutorenew<TData = Awaited<ReturnType<typeof getMeAutorenew>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAutorenew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAutorenew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAutorenew<TData = Awaited<ReturnType<typeof getMeAutorenew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAutorenew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAutorenew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAutorenew<TData = Awaited<ReturnType<typeof getMeAutorenew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAutorenew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeAutorenew<TData = Awaited<ReturnType<typeof getMeAutorenew>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAutorenew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAutorenewQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Activate auto renew for this nic
 */
export const postMeAutorenew = (
    postMeAutorenewBody: PostMeAutorenewBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/autorenew`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeAutorenewBody, signal
    },
      options);
    }
  


export const getPostMeAutorenewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAutorenew>>, TError,{data: PostMeAutorenewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeAutorenew>>, TError,{data: PostMeAutorenewBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeAutorenew>>, {data: PostMeAutorenewBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeAutorenew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeAutorenewMutationResult = NonNullable<Awaited<ReturnType<typeof postMeAutorenew>>>
    export type PostMeAutorenewMutationBody = PostMeAutorenewBody
    export type PostMeAutorenewMutationError = unknown

    /**
 * @summary Activate auto renew for this nic
 */
export const usePostMeAutorenew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeAutorenew>>, TError,{data: PostMeAutorenewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeAutorenew>>,
        TError,
        {data: PostMeAutorenewBody},
        TContext
      > => {

      const mutationOptions = getPostMeAutorenewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter this object properties
 */
export const putMeAutorenew = (
    nichandleNicAutorenewInfosOVH: NonReadonly<NichandleNicAutorenewInfosOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/autorenew`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleNicAutorenewInfosOVH
    },
      options);
    }
  


export const getPutMeAutorenewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAutorenew>>, TError,{data: NonReadonly<NichandleNicAutorenewInfosOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeAutorenew>>, TError,{data: NonReadonly<NichandleNicAutorenewInfosOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeAutorenew>>, {data: NonReadonly<NichandleNicAutorenewInfosOVH>}> = (props) => {
          const {data} = props ?? {};

          return  putMeAutorenew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeAutorenewMutationResult = NonNullable<Awaited<ReturnType<typeof putMeAutorenew>>>
    export type PutMeAutorenewMutationBody = NonReadonly<NichandleNicAutorenewInfosOVH>
    export type PutMeAutorenewMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeAutorenew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeAutorenew>>, TError,{data: NonReadonly<NichandleNicAutorenewInfosOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeAutorenew>>,
        TError,
        {data: NonReadonly<NichandleNicAutorenewInfosOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeAutorenewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List available payment methods in this Nic's country
 */
export const getMeAvailableAutomaticPaymentMeans = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingAutomaticPaymentMeanOVH>(
      {url: `/me/availableAutomaticPaymentMeans`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeAvailableAutomaticPaymentMeansQueryKey = () => {
    return [`/me/availableAutomaticPaymentMeans`] as const;
    }

    
export const getGetMeAvailableAutomaticPaymentMeansQueryOptions = <TData = Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeAvailableAutomaticPaymentMeansQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>> = ({ signal }) => getMeAvailableAutomaticPaymentMeans(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeAvailableAutomaticPaymentMeansQueryResult = NonNullable<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>>
export type GetMeAvailableAutomaticPaymentMeansQueryError = unknown


export function useGetMeAvailableAutomaticPaymentMeans<TData = Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAvailableAutomaticPaymentMeans<TData = Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeAvailableAutomaticPaymentMeans<TData = Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available payment methods in this Nic's country
 */

export function useGetMeAvailableAutomaticPaymentMeans<TData = Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeAvailableAutomaticPaymentMeans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeAvailableAutomaticPaymentMeansQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of all the bills the logged account has
 */
export const getMeBill = (
    params?: GetMeBillParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/bill`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBillQueryKey = (params?: GetMeBillParams,) => {
    return [`/me/bill`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBillQueryOptions = <TData = Awaited<ReturnType<typeof getMeBill>>, TError = unknown>(params?: GetMeBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBill>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBill>>> = ({ signal }) => getMeBill(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBill>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBill>>>
export type GetMeBillQueryError = unknown


export function useGetMeBill<TData = Awaited<ReturnType<typeof getMeBill>>, TError = unknown>(
 params: undefined |  GetMeBillParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBill>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBill>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBill<TData = Awaited<ReturnType<typeof getMeBill>>, TError = unknown>(
 params?: GetMeBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBill>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBill>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBill<TData = Awaited<ReturnType<typeof getMeBill>>, TError = unknown>(
 params?: GetMeBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBill>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of all the bills the logged account has
 */

export function useGetMeBill<TData = Awaited<ReturnType<typeof getMeBill>>, TError = unknown>(
 params?: GetMeBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBill>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Exports a bundle of invoices
 */
export const postMeBillExport = (
    postMeBillExportBody: PostMeBillExportBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/bill/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeBillExportBody, signal
    },
      options);
    }
  


export const getPostMeBillExportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillExport>>, TError,{data: PostMeBillExportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillExport>>, TError,{data: PostMeBillExportBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillExport>>, {data: PostMeBillExportBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeBillExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillExportMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillExport>>>
    export type PostMeBillExportMutationBody = PostMeBillExportBody
    export type PostMeBillExportMutationError = unknown

    /**
 * @summary Exports a bundle of invoices
 */
export const usePostMeBillExport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillExport>>, TError,{data: PostMeBillExportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillExport>>,
        TError,
        {data: PostMeBillExportBody},
        TContext
      > => {

      const mutationOptions = getPostMeBillExportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeBillBillId = (
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingBillOVH>(
      {url: `/me/bill/${billId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdQueryKey = (billId: string,) => {
    return [`/me/bill/${billId}`] as const;
    }

    
export const getGetMeBillBillIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillId>>, TError = unknown>(billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdQueryKey(billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillId>>> = ({ signal }) => getMeBillBillId(billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillId>>>
export type GetMeBillBillIdQueryError = unknown


export function useGetMeBillBillId<TData = Awaited<ReturnType<typeof getMeBillBillId>>, TError = unknown>(
 billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillId<TData = Awaited<ReturnType<typeof getMeBillBillId>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillId<TData = Awaited<ReturnType<typeof getMeBillBillId>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeBillBillId<TData = Awaited<ReturnType<typeof getMeBillBillId>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdQueryOptions(billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeBillBillIdDebt = (
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtDebtOVH>(
      {url: `/me/bill/${billId}/debt`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdDebtQueryKey = (billId: string,) => {
    return [`/me/bill/${billId}/debt`] as const;
    }

    
export const getGetMeBillBillIdDebtQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError = unknown>(billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDebtQueryKey(billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDebt>>> = ({ signal }) => getMeBillBillIdDebt(billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDebtQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDebt>>>
export type GetMeBillBillIdDebtQueryError = unknown


export function useGetMeBillBillIdDebt<TData = Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError = unknown>(
 billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebt<TData = Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebt<TData = Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeBillBillIdDebt<TData = Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDebtQueryOptions(billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All operations related to these debts
 */
export const getMeBillBillIdDebtOperation = (
    billId: string,
    params?: GetMeBillBillIdDebtOperationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/bill/${billId}/debt/operation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBillBillIdDebtOperationQueryKey = (billId: string,
    params?: GetMeBillBillIdDebtOperationParams,) => {
    return [`/me/bill/${billId}/debt/operation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBillBillIdDebtOperationQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError = unknown>(billId: string,
    params?: GetMeBillBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDebtOperationQueryKey(billId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>> = ({ signal }) => getMeBillBillIdDebtOperation(billId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDebtOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>>
export type GetMeBillBillIdDebtOperationQueryError = unknown


export function useGetMeBillBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError = unknown>(
 billId: string,
    params: undefined |  GetMeBillBillIdDebtOperationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError = unknown>(
 billId: string,
    params?: GetMeBillBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError = unknown>(
 billId: string,
    params?: GetMeBillBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All operations related to these debts
 */

export function useGetMeBillBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError = unknown>(
 billId: string,
    params?: GetMeBillBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDebtOperationQueryOptions(billId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeBillBillIdDebtOperationOperationId = (
    billId: string,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtOperationOVH>(
      {url: `/me/bill/${billId}/debt/operation/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdDebtOperationOperationIdQueryKey = (billId: string,
    operationId: number,) => {
    return [`/me/bill/${billId}/debt/operation/${operationId}`] as const;
    }

    
export const getGetMeBillBillIdDebtOperationOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError = unknown>(billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDebtOperationOperationIdQueryKey(billId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>> = ({ signal }) => getMeBillBillIdDebtOperationOperationId(billId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDebtOperationOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>>
export type GetMeBillBillIdDebtOperationOperationIdQueryError = unknown


export function useGetMeBillBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError = unknown>(
 billId: string,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError = unknown>(
 billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError = unknown>(
 billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeBillBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError = unknown>(
 billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDebtOperationOperationIdQueryOptions(billId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return main data about the object related to this debt operation
 */
export const getMeBillBillIdDebtOperationOperationIdAssociatedObject = (
    billId: string,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtEntryAssociatedObjectOVH>(
      {url: `/me/bill/${billId}/debt/operation/${operationId}/associatedObject`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdDebtOperationOperationIdAssociatedObjectQueryKey = (billId: string,
    operationId: number,) => {
    return [`/me/bill/${billId}/debt/operation/${operationId}/associatedObject`] as const;
    }

    
export const getGetMeBillBillIdDebtOperationOperationIdAssociatedObjectQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDebtOperationOperationIdAssociatedObjectQueryKey(billId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>> = ({ signal }) => getMeBillBillIdDebtOperationOperationIdAssociatedObject(billId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDebtOperationOperationIdAssociatedObjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>>
export type GetMeBillBillIdDebtOperationOperationIdAssociatedObjectQueryError = unknown


export function useGetMeBillBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 billId: string,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return main data about the object related to this debt operation
 */

export function useGetMeBillBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDebtOperationOperationIdAssociatedObjectQueryOptions(billId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an order in order to pay this order's debt
 */
export const postMeBillBillIdDebtPay = (
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/bill/${billId}/debt/pay`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeBillBillIdDebtPayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillBillIdDebtPay>>, TError,{billId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillBillIdDebtPay>>, TError,{billId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillBillIdDebtPay>>, {billId: string}> = (props) => {
          const {billId} = props ?? {};

          return  postMeBillBillIdDebtPay(billId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillBillIdDebtPayMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillBillIdDebtPay>>>
    
    export type PostMeBillBillIdDebtPayMutationError = unknown

    /**
 * @summary Create an order in order to pay this order's debt
 */
export const usePostMeBillBillIdDebtPay = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillBillIdDebtPay>>, TError,{billId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillBillIdDebtPay>>,
        TError,
        {billId: string},
        TContext
      > => {

      const mutationOptions = getPostMeBillBillIdDebtPayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Give access to all entries of the bill
 */
export const getMeBillBillIdDetails = (
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/bill/${billId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdDetailsQueryKey = (billId: string,) => {
    return [`/me/bill/${billId}/details`] as const;
    }

    
export const getGetMeBillBillIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError = unknown>(billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDetailsQueryKey(billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDetails>>> = ({ signal }) => getMeBillBillIdDetails(billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDetails>>>
export type GetMeBillBillIdDetailsQueryError = unknown


export function useGetMeBillBillIdDetails<TData = Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError = unknown>(
 billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDetails<TData = Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDetails<TData = Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of the bill
 */

export function useGetMeBillBillIdDetails<TData = Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDetailsQueryOptions(billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeBillBillIdDetailsBillDetailId = (
    billId: string,
    billDetailId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingBillDetailOVH>(
      {url: `/me/bill/${billId}/details/${billDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdDetailsBillDetailIdQueryKey = (billId: string,
    billDetailId: string,) => {
    return [`/me/bill/${billId}/details/${billDetailId}`] as const;
    }

    
export const getGetMeBillBillIdDetailsBillDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError = unknown>(billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDetailsBillDetailIdQueryKey(billId,billDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>> = ({ signal }) => getMeBillBillIdDetailsBillDetailId(billId,billDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId && billDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDetailsBillDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>>
export type GetMeBillBillIdDetailsBillDetailIdQueryError = unknown


export function useGetMeBillBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError = unknown>(
 billId: string,
    billDetailId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError = unknown>(
 billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError = unknown>(
 billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeBillBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError = unknown>(
 billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDetailsBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDetailsBillDetailIdQueryOptions(billId,billDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeBillBillIdPayment = (
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/bill/${billId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillBillIdPaymentQueryKey = (billId: string,) => {
    return [`/me/bill/${billId}/payment`] as const;
    }

    
export const getGetMeBillBillIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError = unknown>(billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdPaymentQueryKey(billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdPayment>>> = ({ signal }) => getMeBillBillIdPayment(billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdPayment>>>
export type GetMeBillBillIdPaymentQueryError = unknown


export function useGetMeBillBillIdPayment<TData = Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError = unknown>(
 billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdPayment<TData = Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdPayment<TData = Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeBillBillIdPayment<TData = Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError = unknown>(
 billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdPaymentQueryOptions(billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Customer billing capacities
 */
export const getMeBillingCapacities = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleBillingCapacitiesOVH>(
      {url: `/me/billing/capacities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingCapacitiesQueryKey = () => {
    return [`/me/billing/capacities`] as const;
    }

    
export const getGetMeBillingCapacitiesQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingCapacities>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingCapacitiesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingCapacities>>> = ({ signal }) => getMeBillingCapacities(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingCapacities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingCapacitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingCapacities>>>
export type GetMeBillingCapacitiesQueryError = unknown


export function useGetMeBillingCapacities<TData = Awaited<ReturnType<typeof getMeBillingCapacities>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingCapacities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingCapacities<TData = Awaited<ReturnType<typeof getMeBillingCapacities>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingCapacities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingCapacities<TData = Awaited<ReturnType<typeof getMeBillingCapacities>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Customer billing capacities
 */

export function useGetMeBillingCapacities<TData = Awaited<ReturnType<typeof getMeBillingCapacities>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingCapacitiesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all billing groups
 */
export const getMeBillingGroup = (
    params?: GetMeBillingGroupParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/billing/group`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBillingGroupQueryKey = (params?: GetMeBillingGroupParams,) => {
    return [`/me/billing/group`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBillingGroupQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingGroup>>, TError = unknown>(params?: GetMeBillingGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingGroupQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingGroup>>> = ({ signal }) => getMeBillingGroup(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingGroup>>>
export type GetMeBillingGroupQueryError = unknown


export function useGetMeBillingGroup<TData = Awaited<ReturnType<typeof getMeBillingGroup>>, TError = unknown>(
 params: undefined |  GetMeBillingGroupParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroup<TData = Awaited<ReturnType<typeof getMeBillingGroup>>, TError = unknown>(
 params?: GetMeBillingGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroup<TData = Awaited<ReturnType<typeof getMeBillingGroup>>, TError = unknown>(
 params?: GetMeBillingGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all billing groups
 */

export function useGetMeBillingGroup<TData = Awaited<ReturnType<typeof getMeBillingGroup>>, TError = unknown>(
 params?: GetMeBillingGroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingGroupQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new billing group
 */
export const postMeBillingGroup = (
    meBillingGroupBillingGroupOVH: NonReadonly<MeBillingGroupBillingGroupOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingGroupBillingGroupOVH>(
      {url: `/me/billing/group`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meBillingGroupBillingGroupOVH, signal
    },
      options);
    }
  


export const getPostMeBillingGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingGroup>>, TError,{data: NonReadonly<MeBillingGroupBillingGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillingGroup>>, TError,{data: NonReadonly<MeBillingGroupBillingGroupOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillingGroup>>, {data: NonReadonly<MeBillingGroupBillingGroupOVH>}> = (props) => {
          const {data} = props ?? {};

          return  postMeBillingGroup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillingGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillingGroup>>>
    export type PostMeBillingGroupMutationBody = NonReadonly<MeBillingGroupBillingGroupOVH>
    export type PostMeBillingGroupMutationError = unknown

    /**
 * @summary Create a new billing group
 */
export const usePostMeBillingGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingGroup>>, TError,{data: NonReadonly<MeBillingGroupBillingGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillingGroup>>,
        TError,
        {data: NonReadonly<MeBillingGroupBillingGroupOVH>},
        TContext
      > => {

      const mutationOptions = getPostMeBillingGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a billing group
 */
export const deleteMeBillingGroupGroupId = (
    groupId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/billing/group/${groupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeBillingGroupGroupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingGroupGroupId>>, TError,{groupId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingGroupGroupId>>, TError,{groupId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeBillingGroupGroupId>>, {groupId: number}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteMeBillingGroupGroupId(groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeBillingGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeBillingGroupGroupId>>>
    
    export type DeleteMeBillingGroupGroupIdMutationError = unknown

    /**
 * @summary Delete a billing group
 */
export const useDeleteMeBillingGroupGroupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingGroupGroupId>>, TError,{groupId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeBillingGroupGroupId>>,
        TError,
        {groupId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeBillingGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a billing group
 */
export const getMeBillingGroupGroupId = (
    groupId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingGroupBillingGroupOVH>(
      {url: `/me/billing/group/${groupId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingGroupGroupIdQueryKey = (groupId: number,) => {
    return [`/me/billing/group/${groupId}`] as const;
    }

    
export const getGetMeBillingGroupGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError = unknown>(groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingGroupGroupIdQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>> = ({ signal }) => getMeBillingGroupGroupId(groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingGroupGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>>
export type GetMeBillingGroupGroupIdQueryError = unknown


export function useGetMeBillingGroupGroupId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError = unknown>(
 groupId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroupGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroupGroupId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError = unknown>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroupGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroupGroupId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError = unknown>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a billing group
 */

export function useGetMeBillingGroupGroupId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError = unknown>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingGroupGroupIdQueryOptions(groupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit billing group
 */
export const putMeBillingGroupGroupId = (
    groupId: number,
    meBillingGroupBillingGroupOVH: NonReadonly<MeBillingGroupBillingGroupOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/billing/group/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meBillingGroupBillingGroupOVH
    },
      options);
    }
  


export const getPutMeBillingGroupGroupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeBillingGroupGroupId>>, TError,{groupId: number;data: NonReadonly<MeBillingGroupBillingGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeBillingGroupGroupId>>, TError,{groupId: number;data: NonReadonly<MeBillingGroupBillingGroupOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeBillingGroupGroupId>>, {groupId: number;data: NonReadonly<MeBillingGroupBillingGroupOVH>}> = (props) => {
          const {groupId,data} = props ?? {};

          return  putMeBillingGroupGroupId(groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeBillingGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeBillingGroupGroupId>>>
    export type PutMeBillingGroupGroupIdMutationBody = NonReadonly<MeBillingGroupBillingGroupOVH>
    export type PutMeBillingGroupGroupIdMutationError = unknown

    /**
 * @summary Edit billing group
 */
export const usePutMeBillingGroupGroupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeBillingGroupGroupId>>, TError,{groupId: number;data: NonReadonly<MeBillingGroupBillingGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeBillingGroupGroupId>>,
        TError,
        {groupId: number;data: NonReadonly<MeBillingGroupBillingGroupOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeBillingGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve billing group service ID list
 */
export const getMeBillingGroupGroupIdService = (
    groupId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/billing/group/${groupId}/service`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingGroupGroupIdServiceQueryKey = (groupId: number,) => {
    return [`/me/billing/group/${groupId}/service`] as const;
    }

    
export const getGetMeBillingGroupGroupIdServiceQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError = unknown>(groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingGroupGroupIdServiceQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>> = ({ signal }) => getMeBillingGroupGroupIdService(groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingGroupGroupIdServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>>
export type GetMeBillingGroupGroupIdServiceQueryError = unknown


export function useGetMeBillingGroupGroupIdService<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError = unknown>(
 groupId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroupGroupIdService<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError = unknown>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroupGroupIdService<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError = unknown>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve billing group service ID list
 */

export function useGetMeBillingGroupGroupIdService<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError = unknown>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingGroupGroupIdServiceQueryOptions(groupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Associate a service to a billing group
 */
export const postMeBillingGroupGroupIdService = (
    groupId: number,
    meBillingGroupServiceCreateOVH: MeBillingGroupServiceCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingGroupServiceOVH>(
      {url: `/me/billing/group/${groupId}/service`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meBillingGroupServiceCreateOVH, signal
    },
      options);
    }
  


export const getPostMeBillingGroupGroupIdServiceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingGroupGroupIdService>>, TError,{groupId: number;data: MeBillingGroupServiceCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillingGroupGroupIdService>>, TError,{groupId: number;data: MeBillingGroupServiceCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillingGroupGroupIdService>>, {groupId: number;data: MeBillingGroupServiceCreateOVH}> = (props) => {
          const {groupId,data} = props ?? {};

          return  postMeBillingGroupGroupIdService(groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillingGroupGroupIdServiceMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillingGroupGroupIdService>>>
    export type PostMeBillingGroupGroupIdServiceMutationBody = MeBillingGroupServiceCreateOVH
    export type PostMeBillingGroupGroupIdServiceMutationError = unknown

    /**
 * @summary Associate a service to a billing group
 */
export const usePostMeBillingGroupGroupIdService = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingGroupGroupIdService>>, TError,{groupId: number;data: MeBillingGroupServiceCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillingGroupGroupIdService>>,
        TError,
        {groupId: number;data: MeBillingGroupServiceCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostMeBillingGroupGroupIdServiceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Unlink a service from a billing group
 */
export const deleteMeBillingGroupGroupIdServiceServiceId = (
    groupId: number,
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/billing/group/${groupId}/service/${serviceId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeBillingGroupGroupIdServiceServiceIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingGroupGroupIdServiceServiceId>>, TError,{groupId: number;serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingGroupGroupIdServiceServiceId>>, TError,{groupId: number;serviceId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeBillingGroupGroupIdServiceServiceId>>, {groupId: number;serviceId: number}> = (props) => {
          const {groupId,serviceId} = props ?? {};

          return  deleteMeBillingGroupGroupIdServiceServiceId(groupId,serviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeBillingGroupGroupIdServiceServiceIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeBillingGroupGroupIdServiceServiceId>>>
    
    export type DeleteMeBillingGroupGroupIdServiceServiceIdMutationError = unknown

    /**
 * @summary Unlink a service from a billing group
 */
export const useDeleteMeBillingGroupGroupIdServiceServiceId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingGroupGroupIdServiceServiceId>>, TError,{groupId: number;serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeBillingGroupGroupIdServiceServiceId>>,
        TError,
        {groupId: number;serviceId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeBillingGroupGroupIdServiceServiceIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a billing group service
 */
export const getMeBillingGroupGroupIdServiceServiceId = (
    groupId: number,
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingGroupServiceOVH>(
      {url: `/me/billing/group/${groupId}/service/${serviceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingGroupGroupIdServiceServiceIdQueryKey = (groupId: number,
    serviceId: number,) => {
    return [`/me/billing/group/${groupId}/service/${serviceId}`] as const;
    }

    
export const getGetMeBillingGroupGroupIdServiceServiceIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError = unknown>(groupId: number,
    serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingGroupGroupIdServiceServiceIdQueryKey(groupId,serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>> = ({ signal }) => getMeBillingGroupGroupIdServiceServiceId(groupId,serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId && serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingGroupGroupIdServiceServiceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>>
export type GetMeBillingGroupGroupIdServiceServiceIdQueryError = unknown


export function useGetMeBillingGroupGroupIdServiceServiceId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError = unknown>(
 groupId: number,
    serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroupGroupIdServiceServiceId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError = unknown>(
 groupId: number,
    serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingGroupGroupIdServiceServiceId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError = unknown>(
 groupId: number,
    serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a billing group service
 */

export function useGetMeBillingGroupGroupIdServiceServiceId<TData = Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError = unknown>(
 groupId: number,
    serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingGroupGroupIdServiceServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingGroupGroupIdServiceServiceIdQueryOptions(groupId,serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send invoices through postal mail
 */
export const getMeBillingInvoicesByPostalMail = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/me/billing/invoicesByPostalMail`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingInvoicesByPostalMailQueryKey = () => {
    return [`/me/billing/invoicesByPostalMail`] as const;
    }

    
export const getGetMeBillingInvoicesByPostalMailQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingInvoicesByPostalMailQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>> = ({ signal }) => getMeBillingInvoicesByPostalMail(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingInvoicesByPostalMailQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>>
export type GetMeBillingInvoicesByPostalMailQueryError = unknown


export function useGetMeBillingInvoicesByPostalMail<TData = Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingInvoicesByPostalMail<TData = Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingInvoicesByPostalMail<TData = Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Send invoices through postal mail
 */

export function useGetMeBillingInvoicesByPostalMail<TData = Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingInvoicesByPostalMail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingInvoicesByPostalMailQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Enable or disable invoices by postal mail
 */
export const postMeBillingInvoicesByPostalMail = (
    postMeBillingInvoicesByPostalMailBody: PostMeBillingInvoicesByPostalMailBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/billing/invoicesByPostalMail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeBillingInvoicesByPostalMailBody, signal
    },
      options);
    }
  


export const getPostMeBillingInvoicesByPostalMailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingInvoicesByPostalMail>>, TError,{data: PostMeBillingInvoicesByPostalMailBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillingInvoicesByPostalMail>>, TError,{data: PostMeBillingInvoicesByPostalMailBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillingInvoicesByPostalMail>>, {data: PostMeBillingInvoicesByPostalMailBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeBillingInvoicesByPostalMail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillingInvoicesByPostalMailMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillingInvoicesByPostalMail>>>
    export type PostMeBillingInvoicesByPostalMailMutationBody = PostMeBillingInvoicesByPostalMailBody
    export type PostMeBillingInvoicesByPostalMailMutationError = unknown

    /**
 * @summary Enable or disable invoices by postal mail
 */
export const usePostMeBillingInvoicesByPostalMail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingInvoicesByPostalMail>>, TError,{data: PostMeBillingInvoicesByPostalMailBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillingInvoicesByPostalMail>>,
        TError,
        {data: PostMeBillingInvoicesByPostalMailBody},
        TContext
      > => {

      const mutationOptions = getPostMeBillingInvoicesByPostalMailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all purchase orders
 */
export const getMeBillingPurchaseOrder = (
    params?: GetMeBillingPurchaseOrderParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/billing/purchaseOrder`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBillingPurchaseOrderQueryKey = (params?: GetMeBillingPurchaseOrderParams,) => {
    return [`/me/billing/purchaseOrder`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBillingPurchaseOrderQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError = unknown>(params?: GetMeBillingPurchaseOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingPurchaseOrderQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>> = ({ signal }) => getMeBillingPurchaseOrder(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingPurchaseOrderQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>>
export type GetMeBillingPurchaseOrderQueryError = unknown


export function useGetMeBillingPurchaseOrder<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError = unknown>(
 params: undefined |  GetMeBillingPurchaseOrderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingPurchaseOrder<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError = unknown>(
 params?: GetMeBillingPurchaseOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingPurchaseOrder<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError = unknown>(
 params?: GetMeBillingPurchaseOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all purchase orders
 */

export function useGetMeBillingPurchaseOrder<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError = unknown>(
 params?: GetMeBillingPurchaseOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingPurchaseOrderQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a purchase order
 */
export const postMeBillingPurchaseOrder = (
    meBillingPurchaseOrderCreationOVH: MeBillingPurchaseOrderCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingPurchaseOrderPurchaseOrderOVH>(
      {url: `/me/billing/purchaseOrder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meBillingPurchaseOrderCreationOVH, signal
    },
      options);
    }
  


export const getPostMeBillingPurchaseOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingPurchaseOrder>>, TError,{data: MeBillingPurchaseOrderCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillingPurchaseOrder>>, TError,{data: MeBillingPurchaseOrderCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillingPurchaseOrder>>, {data: MeBillingPurchaseOrderCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeBillingPurchaseOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillingPurchaseOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillingPurchaseOrder>>>
    export type PostMeBillingPurchaseOrderMutationBody = MeBillingPurchaseOrderCreationOVH
    export type PostMeBillingPurchaseOrderMutationError = unknown

    /**
 * @summary Create a purchase order
 */
export const usePostMeBillingPurchaseOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingPurchaseOrder>>, TError,{data: MeBillingPurchaseOrderCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillingPurchaseOrder>>,
        TError,
        {data: MeBillingPurchaseOrderCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeBillingPurchaseOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a purchase order
 */
export const deleteMeBillingPurchaseOrderId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/billing/purchaseOrder/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeBillingPurchaseOrderIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingPurchaseOrderId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingPurchaseOrderId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeBillingPurchaseOrderId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeBillingPurchaseOrderId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeBillingPurchaseOrderIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeBillingPurchaseOrderId>>>
    
    export type DeleteMeBillingPurchaseOrderIdMutationError = unknown

    /**
 * @summary Delete a purchase order
 */
export const useDeleteMeBillingPurchaseOrderId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeBillingPurchaseOrderId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeBillingPurchaseOrderId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeBillingPurchaseOrderIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a purchase order
 */
export const getMeBillingPurchaseOrderId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingPurchaseOrderPurchaseOrderOVH>(
      {url: `/me/billing/purchaseOrder/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingPurchaseOrderIdQueryKey = (id: number,) => {
    return [`/me/billing/purchaseOrder/${id}`] as const;
    }

    
export const getGetMeBillingPurchaseOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingPurchaseOrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>> = ({ signal }) => getMeBillingPurchaseOrderId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingPurchaseOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>>
export type GetMeBillingPurchaseOrderIdQueryError = unknown


export function useGetMeBillingPurchaseOrderId<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingPurchaseOrderId<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingPurchaseOrderId<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a purchase order
 */

export function useGetMeBillingPurchaseOrderId<TData = Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingPurchaseOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingPurchaseOrderIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a purchase order
 */
export const putMeBillingPurchaseOrderId = (
    id: number,
    meBillingPurchaseOrderUpdateOVH: MeBillingPurchaseOrderUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/billing/purchaseOrder/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meBillingPurchaseOrderUpdateOVH
    },
      options);
    }
  


export const getPutMeBillingPurchaseOrderIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeBillingPurchaseOrderId>>, TError,{id: number;data: MeBillingPurchaseOrderUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeBillingPurchaseOrderId>>, TError,{id: number;data: MeBillingPurchaseOrderUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeBillingPurchaseOrderId>>, {id: number;data: MeBillingPurchaseOrderUpdateOVH}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeBillingPurchaseOrderId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeBillingPurchaseOrderIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeBillingPurchaseOrderId>>>
    export type PutMeBillingPurchaseOrderIdMutationBody = MeBillingPurchaseOrderUpdateOVH
    export type PutMeBillingPurchaseOrderIdMutationError = unknown

    /**
 * @summary Update a purchase order
 */
export const usePutMeBillingPurchaseOrderId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeBillingPurchaseOrderId>>, TError,{id: number;data: MeBillingPurchaseOrderUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeBillingPurchaseOrderId>>,
        TError,
        {id: number;data: MeBillingPurchaseOrderUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutMeBillingPurchaseOrderIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all billing reports of consumption
 */
export const getMeBillingReportConsumption = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/billing/report/consumption`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingReportConsumptionQueryKey = () => {
    return [`/me/billing/report/consumption`] as const;
    }

    
export const getGetMeBillingReportConsumptionQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingReportConsumptionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingReportConsumption>>> = ({ signal }) => getMeBillingReportConsumption(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingReportConsumptionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingReportConsumption>>>
export type GetMeBillingReportConsumptionQueryError = unknown


export function useGetMeBillingReportConsumption<TData = Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingReportConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingReportConsumption<TData = Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingReportConsumption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingReportConsumption<TData = Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all billing reports of consumption
 */

export function useGetMeBillingReportConsumption<TData = Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingReportConsumptionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate consumption billing report for a period
 */
export const postMeBillingReportConsumption = (
    meBillingReportConsumptionCreationRequestOVH: MeBillingReportConsumptionCreationRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingReportConsumptionCreationResponseOVH>(
      {url: `/me/billing/report/consumption`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meBillingReportConsumptionCreationRequestOVH, signal
    },
      options);
    }
  


export const getPostMeBillingReportConsumptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingReportConsumption>>, TError,{data: MeBillingReportConsumptionCreationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeBillingReportConsumption>>, TError,{data: MeBillingReportConsumptionCreationRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeBillingReportConsumption>>, {data: MeBillingReportConsumptionCreationRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeBillingReportConsumption(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeBillingReportConsumptionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeBillingReportConsumption>>>
    export type PostMeBillingReportConsumptionMutationBody = MeBillingReportConsumptionCreationRequestOVH
    export type PostMeBillingReportConsumptionMutationError = unknown

    /**
 * @summary Generate consumption billing report for a period
 */
export const usePostMeBillingReportConsumption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeBillingReportConsumption>>, TError,{data: MeBillingReportConsumptionCreationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeBillingReportConsumption>>,
        TError,
        {data: MeBillingReportConsumptionCreationRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostMeBillingReportConsumptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve a consumption billing report with task id
 */
export const getMeBillingReportConsumptionTaskId = (
    taskId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingReportConsumptionOVH>(
      {url: `/me/billing/report/consumption/${taskId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingReportConsumptionTaskIdQueryKey = (taskId: string,) => {
    return [`/me/billing/report/consumption/${taskId}`] as const;
    }

    
export const getGetMeBillingReportConsumptionTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError = unknown>(taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingReportConsumptionTaskIdQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>> = ({ signal }) => getMeBillingReportConsumptionTaskId(taskId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingReportConsumptionTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>>
export type GetMeBillingReportConsumptionTaskIdQueryError = unknown


export function useGetMeBillingReportConsumptionTaskId<TData = Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError = unknown>(
 taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingReportConsumptionTaskId<TData = Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingReportConsumptionTaskId<TData = Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a consumption billing report with task id
 */

export function useGetMeBillingReportConsumptionTaskId<TData = Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingReportConsumptionTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingReportConsumptionTaskIdQueryOptions(taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of tasks
 */
export const getMeBillingTask = (
    params?: GetMeBillingTaskParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/billing/task`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBillingTaskQueryKey = (params?: GetMeBillingTaskParams,) => {
    return [`/me/billing/task`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBillingTaskQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingTask>>, TError = unknown>(params?: GetMeBillingTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingTaskQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingTask>>> = ({ signal }) => getMeBillingTask(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingTask>>>
export type GetMeBillingTaskQueryError = unknown


export function useGetMeBillingTask<TData = Awaited<ReturnType<typeof getMeBillingTask>>, TError = unknown>(
 params: undefined |  GetMeBillingTaskParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingTask<TData = Awaited<ReturnType<typeof getMeBillingTask>>, TError = unknown>(
 params?: GetMeBillingTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingTask<TData = Awaited<ReturnType<typeof getMeBillingTask>>, TError = unknown>(
 params?: GetMeBillingTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of tasks
 */

export function useGetMeBillingTask<TData = Awaited<ReturnType<typeof getMeBillingTask>>, TError = unknown>(
 params?: GetMeBillingTaskParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingTaskQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get details about a task
 */
export const getMeBillingTaskId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeBillingTasksTaskOVH>(
      {url: `/me/billing/task/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeBillingTaskIdQueryKey = (id: number,) => {
    return [`/me/billing/task/${id}`] as const;
    }

    
export const getGetMeBillingTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillingTaskId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillingTaskIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillingTaskId>>> = ({ signal }) => getMeBillingTaskId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillingTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillingTaskId>>>
export type GetMeBillingTaskIdQueryError = unknown


export function useGetMeBillingTaskId<TData = Awaited<ReturnType<typeof getMeBillingTaskId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingTaskId<TData = Awaited<ReturnType<typeof getMeBillingTaskId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillingTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillingTaskId<TData = Awaited<ReturnType<typeof getMeBillingTaskId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get details about a task
 */

export function useGetMeBillingTaskId<TData = Awaited<ReturnType<typeof getMeBillingTaskId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillingTaskIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get your Bring your own IP token
 */
export const getMeBringYourOwnIpToken = (
    params: GetMeBringYourOwnIpTokenParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/bringYourOwnIp/token`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBringYourOwnIpTokenQueryKey = (params: GetMeBringYourOwnIpTokenParams,) => {
    return [`/me/bringYourOwnIp/token`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBringYourOwnIpTokenQueryOptions = <TData = Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError = unknown>(params: GetMeBringYourOwnIpTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBringYourOwnIpTokenQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>> = ({ signal }) => getMeBringYourOwnIpToken(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBringYourOwnIpTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>>
export type GetMeBringYourOwnIpTokenQueryError = unknown


export function useGetMeBringYourOwnIpToken<TData = Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError = unknown>(
 params: GetMeBringYourOwnIpTokenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBringYourOwnIpToken<TData = Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError = unknown>(
 params: GetMeBringYourOwnIpTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBringYourOwnIpToken<TData = Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError = unknown>(
 params: GetMeBringYourOwnIpTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get your Bring your own IP token
 */

export function useGetMeBringYourOwnIpToken<TData = Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError = unknown>(
 params: GetMeBringYourOwnIpTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBringYourOwnIpToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBringYourOwnIpTokenQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Find out if the account has data to generate invoice
 */
export const getMeCarbonCalculatorHasInvoice = (
    params?: GetMeCarbonCalculatorHasInvoiceParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CarbonCalculatorHasInvoiceResponseOVH>(
      {url: `/me/carbonCalculator/hasInvoice`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeCarbonCalculatorHasInvoiceQueryKey = (params?: GetMeCarbonCalculatorHasInvoiceParams,) => {
    return [`/me/carbonCalculator/hasInvoice`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeCarbonCalculatorHasInvoiceQueryOptions = <TData = Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError = unknown>(params?: GetMeCarbonCalculatorHasInvoiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCarbonCalculatorHasInvoiceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>> = ({ signal }) => getMeCarbonCalculatorHasInvoice(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCarbonCalculatorHasInvoiceQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>>
export type GetMeCarbonCalculatorHasInvoiceQueryError = unknown


export function useGetMeCarbonCalculatorHasInvoice<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError = unknown>(
 params: undefined |  GetMeCarbonCalculatorHasInvoiceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCarbonCalculatorHasInvoice<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError = unknown>(
 params?: GetMeCarbonCalculatorHasInvoiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCarbonCalculatorHasInvoice<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError = unknown>(
 params?: GetMeCarbonCalculatorHasInvoiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Find out if the account has data to generate invoice
 */

export function useGetMeCarbonCalculatorHasInvoice<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError = unknown>(
 params?: GetMeCarbonCalculatorHasInvoiceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorHasInvoice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCarbonCalculatorHasInvoiceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all tasks
 */
export const getMeCarbonCalculatorTask = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CarbonCalculatorTaskOVH[]>(
      {url: `/me/carbonCalculator/task`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeCarbonCalculatorTaskQueryKey = () => {
    return [`/me/carbonCalculator/task`] as const;
    }

    
export const getGetMeCarbonCalculatorTaskQueryOptions = <TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCarbonCalculatorTaskQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>> = ({ signal }) => getMeCarbonCalculatorTask(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCarbonCalculatorTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>>
export type GetMeCarbonCalculatorTaskQueryError = unknown


export function useGetMeCarbonCalculatorTask<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCarbonCalculatorTask<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCarbonCalculatorTask<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all tasks
 */

export function useGetMeCarbonCalculatorTask<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCarbonCalculatorTaskQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a carbon footprint generation task
 */
export const postMeCarbonCalculatorTask = (
    carbonCalculatorCalculationRequestOVH: CarbonCalculatorCalculationRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CarbonCalculatorCalculationResponseOVH>(
      {url: `/me/carbonCalculator/task`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: carbonCalculatorCalculationRequestOVH, signal
    },
      options);
    }
  


export const getPostMeCarbonCalculatorTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeCarbonCalculatorTask>>, TError,{data: CarbonCalculatorCalculationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeCarbonCalculatorTask>>, TError,{data: CarbonCalculatorCalculationRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeCarbonCalculatorTask>>, {data: CarbonCalculatorCalculationRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeCarbonCalculatorTask(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeCarbonCalculatorTaskMutationResult = NonNullable<Awaited<ReturnType<typeof postMeCarbonCalculatorTask>>>
    export type PostMeCarbonCalculatorTaskMutationBody = CarbonCalculatorCalculationRequestOVH
    export type PostMeCarbonCalculatorTaskMutationError = unknown

    /**
 * @summary Create a carbon footprint generation task
 */
export const usePostMeCarbonCalculatorTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeCarbonCalculatorTask>>, TError,{data: CarbonCalculatorCalculationRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeCarbonCalculatorTask>>,
        TError,
        {data: CarbonCalculatorCalculationRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostMeCarbonCalculatorTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Fetch a task by its ID
 */
export const getMeCarbonCalculatorTaskTaskID = (
    taskID: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<CarbonCalculatorTaskOVH>(
      {url: `/me/carbonCalculator/task/${taskID}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeCarbonCalculatorTaskTaskIDQueryKey = (taskID: string,) => {
    return [`/me/carbonCalculator/task/${taskID}`] as const;
    }

    
export const getGetMeCarbonCalculatorTaskTaskIDQueryOptions = <TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError = unknown>(taskID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCarbonCalculatorTaskTaskIDQueryKey(taskID);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>> = ({ signal }) => getMeCarbonCalculatorTaskTaskID(taskID, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskID), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCarbonCalculatorTaskTaskIDQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>>
export type GetMeCarbonCalculatorTaskTaskIDQueryError = unknown


export function useGetMeCarbonCalculatorTaskTaskID<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError = unknown>(
 taskID: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCarbonCalculatorTaskTaskID<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError = unknown>(
 taskID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCarbonCalculatorTaskTaskID<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError = unknown>(
 taskID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch a task by its ID
 */

export function useGetMeCarbonCalculatorTaskTaskID<TData = Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError = unknown>(
 taskID: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCarbonCalculatorTaskTaskID>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCarbonCalculatorTaskTaskIDQueryOptions(taskID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all certificates of the account
 */
export const getCertificates = (
    params?: GetCertificatesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/certificates`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCertificatesQueryKey = (params?: GetCertificatesParams,) => {
    return [`/me/certificates`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCertificatesQueryOptions = <TData = Awaited<ReturnType<typeof getCertificates>>, TError = unknown>(params?: GetCertificatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCertificates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCertificatesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCertificates>>> = ({ signal }) => getCertificates(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCertificates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCertificatesQueryResult = NonNullable<Awaited<ReturnType<typeof getCertificates>>>
export type GetCertificatesQueryError = unknown


export function useGetCertificates<TData = Awaited<ReturnType<typeof getCertificates>>, TError = unknown>(
 params: undefined |  GetCertificatesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCertificates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCertificates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCertificates<TData = Awaited<ReturnType<typeof getCertificates>>, TError = unknown>(
 params?: GetCertificatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCertificates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCertificates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCertificates<TData = Awaited<ReturnType<typeof getCertificates>>, TError = unknown>(
 params?: GetCertificatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCertificates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all certificates of the account
 */

export function useGetCertificates<TData = Awaited<ReturnType<typeof getCertificates>>, TError = unknown>(
 params?: GetCertificatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCertificates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCertificatesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Initiate an email change procedure
 */
export const postMeChangeEmail = (
    postMeChangeEmailBody: PostMeChangeEmailBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleEmailChangeTaskOVH>(
      {url: `/me/changeEmail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeChangeEmailBody, signal
    },
      options);
    }
  


export const getPostMeChangeEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeChangeEmail>>, TError,{data: PostMeChangeEmailBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeChangeEmail>>, TError,{data: PostMeChangeEmailBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeChangeEmail>>, {data: PostMeChangeEmailBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeChangeEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeChangeEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postMeChangeEmail>>>
    export type PostMeChangeEmailMutationBody = PostMeChangeEmailBody
    export type PostMeChangeEmailMutationError = unknown

    /**
 * @summary Initiate an email change procedure
 */
export const usePostMeChangeEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeChangeEmail>>, TError,{data: PostMeChangeEmailBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeChangeEmail>>,
        TError,
        {data: PostMeChangeEmailBody},
        TContext
      > => {

      const mutationOptions = getPostMeChangeEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Initiate a password change procedure
 */
export const postMeChangePassword = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/changePassword`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeChangePassword>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeChangePassword>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeChangePassword>>, void> = () => {
          

          return  postMeChangePassword(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postMeChangePassword>>>
    
    export type PostMeChangePasswordMutationError = unknown

    /**
 * @summary Initiate a password change procedure
 */
export const usePostMeChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeChangePassword>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeChangePassword>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List all consent campaign available
 */
export const getMeConsent = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeConsentCampaignOVH[]>(
      {url: `/me/consent`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeConsentQueryKey = () => {
    return [`/me/consent`] as const;
    }

    
export const getGetMeConsentQueryOptions = <TData = Awaited<ReturnType<typeof getMeConsent>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeConsentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeConsent>>> = ({ signal }) => getMeConsent(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeConsent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeConsentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeConsent>>>
export type GetMeConsentQueryError = unknown


export function useGetMeConsent<TData = Awaited<ReturnType<typeof getMeConsent>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsent<TData = Awaited<ReturnType<typeof getMeConsent>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsent<TData = Awaited<ReturnType<typeof getMeConsent>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all consent campaign available
 */

export function useGetMeConsent<TData = Awaited<ReturnType<typeof getMeConsent>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeConsentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information about a consent campaign
 */
export const getMeConsentCampaignName = (
    campaignName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeConsentCampaignOVH>(
      {url: `/me/consent/${campaignName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeConsentCampaignNameQueryKey = (campaignName: string,) => {
    return [`/me/consent/${campaignName}`] as const;
    }

    
export const getGetMeConsentCampaignNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError = unknown>(campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeConsentCampaignNameQueryKey(campaignName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeConsentCampaignName>>> = ({ signal }) => getMeConsentCampaignName(campaignName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(campaignName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeConsentCampaignNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeConsentCampaignName>>>
export type GetMeConsentCampaignNameQueryError = unknown


export function useGetMeConsentCampaignName<TData = Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError = unknown>(
 campaignName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsentCampaignName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsentCampaignName<TData = Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError = unknown>(
 campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsentCampaignName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsentCampaignName<TData = Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError = unknown>(
 campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a consent campaign
 */

export function useGetMeConsentCampaignName<TData = Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError = unknown>(
 campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeConsentCampaignNameQueryOptions(campaignName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get decision value for a consent campaign
 */
export const getMeConsentCampaignNameDecision = (
    campaignName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeConsentConsentOVH>(
      {url: `/me/consent/${campaignName}/decision`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeConsentCampaignNameDecisionQueryKey = (campaignName: string,) => {
    return [`/me/consent/${campaignName}/decision`] as const;
    }

    
export const getGetMeConsentCampaignNameDecisionQueryOptions = <TData = Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError = unknown>(campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeConsentCampaignNameDecisionQueryKey(campaignName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>> = ({ signal }) => getMeConsentCampaignNameDecision(campaignName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(campaignName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeConsentCampaignNameDecisionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>>
export type GetMeConsentCampaignNameDecisionQueryError = unknown


export function useGetMeConsentCampaignNameDecision<TData = Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError = unknown>(
 campaignName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsentCampaignNameDecision<TData = Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError = unknown>(
 campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsentCampaignNameDecision<TData = Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError = unknown>(
 campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get decision value for a consent campaign
 */

export function useGetMeConsentCampaignNameDecision<TData = Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError = unknown>(
 campaignName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsentCampaignNameDecision>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeConsentCampaignNameDecisionQueryOptions(campaignName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update decision of a consent campaign
 */
export const putMeConsentCampaignNameDecision = (
    campaignName: string,
    meConsentDecisionOVH: NonReadonly<MeConsentDecisionOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/consent/${campaignName}/decision`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meConsentDecisionOVH
    },
      options);
    }
  


export const getPutMeConsentCampaignNameDecisionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeConsentCampaignNameDecision>>, TError,{campaignName: string;data: NonReadonly<MeConsentDecisionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeConsentCampaignNameDecision>>, TError,{campaignName: string;data: NonReadonly<MeConsentDecisionOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeConsentCampaignNameDecision>>, {campaignName: string;data: NonReadonly<MeConsentDecisionOVH>}> = (props) => {
          const {campaignName,data} = props ?? {};

          return  putMeConsentCampaignNameDecision(campaignName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeConsentCampaignNameDecisionMutationResult = NonNullable<Awaited<ReturnType<typeof putMeConsentCampaignNameDecision>>>
    export type PutMeConsentCampaignNameDecisionMutationBody = NonReadonly<MeConsentDecisionOVH>
    export type PutMeConsentCampaignNameDecisionMutationError = unknown

    /**
 * @summary Update decision of a consent campaign
 */
export const usePutMeConsentCampaignNameDecision = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeConsentCampaignNameDecision>>, TError,{campaignName: string;data: NonReadonly<MeConsentDecisionOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeConsentCampaignNameDecision>>,
        TError,
        {campaignName: string;data: NonReadonly<MeConsentDecisionOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeConsentCampaignNameDecisionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get on-going consumptions for all services
 */
export const getMeConsumptionUsageCurrent = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeConsumptionTransactionOVH[]>(
      {url: `/me/consumption/usage/current`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeConsumptionUsageCurrentQueryKey = () => {
    return [`/me/consumption/usage/current`] as const;
    }

    
export const getGetMeConsumptionUsageCurrentQueryOptions = <TData = Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeConsumptionUsageCurrentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>> = ({ signal }) => getMeConsumptionUsageCurrent(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeConsumptionUsageCurrentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>>
export type GetMeConsumptionUsageCurrentQueryError = unknown


export function useGetMeConsumptionUsageCurrent<TData = Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsumptionUsageCurrent<TData = Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsumptionUsageCurrent<TData = Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get on-going consumptions for all services
 */

export function useGetMeConsumptionUsageCurrent<TData = Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageCurrent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeConsumptionUsageCurrentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get forecasted consumptions for all services
 */
export const getMeConsumptionUsageForecast = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeConsumptionTransactionOVH[]>(
      {url: `/me/consumption/usage/forecast`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeConsumptionUsageForecastQueryKey = () => {
    return [`/me/consumption/usage/forecast`] as const;
    }

    
export const getGetMeConsumptionUsageForecastQueryOptions = <TData = Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeConsumptionUsageForecastQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>> = ({ signal }) => getMeConsumptionUsageForecast(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeConsumptionUsageForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>>
export type GetMeConsumptionUsageForecastQueryError = unknown


export function useGetMeConsumptionUsageForecast<TData = Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsumptionUsageForecast<TData = Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsumptionUsageForecast<TData = Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get forecasted consumptions for all services
 */

export function useGetMeConsumptionUsageForecast<TData = Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeConsumptionUsageForecastQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of transactions between two dates
 */
export const getMeConsumptionUsageHistory = (
    params: GetMeConsumptionUsageHistoryParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeConsumptionTransactionOVH[]>(
      {url: `/me/consumption/usage/history`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeConsumptionUsageHistoryQueryKey = (params: GetMeConsumptionUsageHistoryParams,) => {
    return [`/me/consumption/usage/history`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeConsumptionUsageHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError = unknown>(params: GetMeConsumptionUsageHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeConsumptionUsageHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>> = ({ signal }) => getMeConsumptionUsageHistory(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeConsumptionUsageHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>>
export type GetMeConsumptionUsageHistoryQueryError = unknown


export function useGetMeConsumptionUsageHistory<TData = Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError = unknown>(
 params: GetMeConsumptionUsageHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsumptionUsageHistory<TData = Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError = unknown>(
 params: GetMeConsumptionUsageHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeConsumptionUsageHistory<TData = Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError = unknown>(
 params: GetMeConsumptionUsageHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of transactions between two dates
 */

export function useGetMeConsumptionUsageHistory<TData = Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError = unknown>(
 params: GetMeConsumptionUsageHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeConsumptionUsageHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeConsumptionUsageHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve every contact your created
 */
export const getMeContact = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/contact`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeContactQueryKey = () => {
    return [`/me/contact`] as const;
    }

    
export const getGetMeContactQueryOptions = <TData = Awaited<ReturnType<typeof getMeContact>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeContactQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeContact>>> = ({ signal }) => getMeContact(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeContactQueryResult = NonNullable<Awaited<ReturnType<typeof getMeContact>>>
export type GetMeContactQueryError = unknown


export function useGetMeContact<TData = Awaited<ReturnType<typeof getMeContact>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeContact<TData = Awaited<ReturnType<typeof getMeContact>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeContact>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeContact<TData = Awaited<ReturnType<typeof getMeContact>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve every contact your created
 */

export function useGetMeContact<TData = Awaited<ReturnType<typeof getMeContact>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContact>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeContactQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new contact
 */
export const postMeContact = (
    meContactContactOVH: NonReadonly<MeContactContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeContactContactOVH>(
      {url: `/me/contact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meContactContactOVH, signal
    },
      options);
    }
  


export const getPostMeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeContact>>, TError,{data: NonReadonly<MeContactContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeContact>>, TError,{data: NonReadonly<MeContactContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeContact>>, {data: NonReadonly<MeContactContactOVH>}> = (props) => {
          const {data} = props ?? {};

          return  postMeContact(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postMeContact>>>
    export type PostMeContactMutationBody = NonReadonly<MeContactContactOVH>
    export type PostMeContactMutationError = unknown

    /**
 * @summary Create a new contact
 */
export const usePostMeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeContact>>, TError,{data: NonReadonly<MeContactContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeContact>>,
        TError,
        {data: NonReadonly<MeContactContactOVH>},
        TContext
      > => {

      const mutationOptions = getPostMeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve information about a contact
 */
export const getMeContactContactId = (
    contactId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeContactContactOVH>(
      {url: `/me/contact/${contactId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeContactContactIdQueryKey = (contactId: number,) => {
    return [`/me/contact/${contactId}`] as const;
    }

    
export const getGetMeContactContactIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeContactContactId>>, TError = unknown>(contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeContactContactIdQueryKey(contactId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeContactContactId>>> = ({ signal }) => getMeContactContactId(contactId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(contactId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeContactContactIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeContactContactId>>>
export type GetMeContactContactIdQueryError = unknown


export function useGetMeContactContactId<TData = Awaited<ReturnType<typeof getMeContactContactId>>, TError = unknown>(
 contactId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeContactContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeContactContactId<TData = Awaited<ReturnType<typeof getMeContactContactId>>, TError = unknown>(
 contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeContactContactId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeContactContactId<TData = Awaited<ReturnType<typeof getMeContactContactId>>, TError = unknown>(
 contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a contact
 */

export function useGetMeContactContactId<TData = Awaited<ReturnType<typeof getMeContactContactId>>, TError = unknown>(
 contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeContactContactIdQueryOptions(contactId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing contact
 */
export const putMeContactContactId = (
    contactId: number,
    meContactContactOVH: NonReadonly<MeContactContactOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MeContactContactOVH>(
      {url: `/me/contact/${contactId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meContactContactOVH
    },
      options);
    }
  


export const getPutMeContactContactIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeContactContactId>>, TError,{contactId: number;data: NonReadonly<MeContactContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeContactContactId>>, TError,{contactId: number;data: NonReadonly<MeContactContactOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeContactContactId>>, {contactId: number;data: NonReadonly<MeContactContactOVH>}> = (props) => {
          const {contactId,data} = props ?? {};

          return  putMeContactContactId(contactId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeContactContactIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeContactContactId>>>
    export type PutMeContactContactIdMutationBody = NonReadonly<MeContactContactOVH>
    export type PutMeContactContactIdMutationError = unknown

    /**
 * @summary Update an existing contact
 */
export const usePutMeContactContactId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeContactContactId>>, TError,{contactId: number;data: NonReadonly<MeContactContactOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeContactContactId>>,
        TError,
        {contactId: number;data: NonReadonly<MeContactContactOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeContactContactIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get mandatory/read-only information about the fields of a contact
 */
export const getMeContactContactIdFields = (
    contactId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeContactFieldInformationOVH[]>(
      {url: `/me/contact/${contactId}/fields`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeContactContactIdFieldsQueryKey = (contactId: number,) => {
    return [`/me/contact/${contactId}/fields`] as const;
    }

    
export const getGetMeContactContactIdFieldsQueryOptions = <TData = Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError = unknown>(contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeContactContactIdFieldsQueryKey(contactId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeContactContactIdFields>>> = ({ signal }) => getMeContactContactIdFields(contactId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(contactId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeContactContactIdFieldsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeContactContactIdFields>>>
export type GetMeContactContactIdFieldsQueryError = unknown


export function useGetMeContactContactIdFields<TData = Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError = unknown>(
 contactId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeContactContactIdFields>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeContactContactIdFields<TData = Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError = unknown>(
 contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeContactContactIdFields>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeContactContactIdFields<TData = Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError = unknown>(
 contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get mandatory/read-only information about the fields of a contact
 */

export function useGetMeContactContactIdFields<TData = Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError = unknown>(
 contactId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeContactContactIdFields>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeContactContactIdFieldsQueryOptions(contactId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all credit balances
 */
export const getMeCreditBalance = (
    params?: GetMeCreditBalanceParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/credit/balance`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeCreditBalanceQueryKey = (params?: GetMeCreditBalanceParams,) => {
    return [`/me/credit/balance`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeCreditBalanceQueryOptions = <TData = Awaited<ReturnType<typeof getMeCreditBalance>>, TError = unknown>(params?: GetMeCreditBalanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCreditBalanceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCreditBalance>>> = ({ signal }) => getMeCreditBalance(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCreditBalanceQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCreditBalance>>>
export type GetMeCreditBalanceQueryError = unknown


export function useGetMeCreditBalance<TData = Awaited<ReturnType<typeof getMeCreditBalance>>, TError = unknown>(
 params: undefined |  GetMeCreditBalanceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalance>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalance<TData = Awaited<ReturnType<typeof getMeCreditBalance>>, TError = unknown>(
 params?: GetMeCreditBalanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalance>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalance<TData = Awaited<ReturnType<typeof getMeCreditBalance>>, TError = unknown>(
 params?: GetMeCreditBalanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all credit balances
 */

export function useGetMeCreditBalance<TData = Awaited<ReturnType<typeof getMeCreditBalance>>, TError = unknown>(
 params?: GetMeCreditBalanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCreditBalanceQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a credit balance
 */
export const getMeCreditBalanceBalanceName = (
    balanceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeCreditBalanceOVH>(
      {url: `/me/credit/balance/${balanceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeCreditBalanceBalanceNameQueryKey = (balanceName: string,) => {
    return [`/me/credit/balance/${balanceName}`] as const;
    }

    
export const getGetMeCreditBalanceBalanceNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError = unknown>(balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCreditBalanceBalanceNameQueryKey(balanceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>> = ({ signal }) => getMeCreditBalanceBalanceName(balanceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(balanceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCreditBalanceBalanceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>>
export type GetMeCreditBalanceBalanceNameQueryError = unknown


export function useGetMeCreditBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError = unknown>(
 balanceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError = unknown>(
 balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError = unknown>(
 balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a credit balance
 */

export function useGetMeCreditBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError = unknown>(
 balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCreditBalanceBalanceNameQueryOptions(balanceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve movements for a specific balance
 */
export const getMeCreditBalanceBalanceNameMovement = (
    balanceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/credit/balance/${balanceName}/movement`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeCreditBalanceBalanceNameMovementQueryKey = (balanceName: string,) => {
    return [`/me/credit/balance/${balanceName}/movement`] as const;
    }

    
export const getGetMeCreditBalanceBalanceNameMovementQueryOptions = <TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError = unknown>(balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCreditBalanceBalanceNameMovementQueryKey(balanceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>> = ({ signal }) => getMeCreditBalanceBalanceNameMovement(balanceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(balanceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCreditBalanceBalanceNameMovementQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>>
export type GetMeCreditBalanceBalanceNameMovementQueryError = unknown


export function useGetMeCreditBalanceBalanceNameMovement<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError = unknown>(
 balanceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalanceBalanceNameMovement<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError = unknown>(
 balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalanceBalanceNameMovement<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError = unknown>(
 balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve movements for a specific balance
 */

export function useGetMeCreditBalanceBalanceNameMovement<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError = unknown>(
 balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCreditBalanceBalanceNameMovementQueryOptions(balanceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a specific movement for a credit balance
 */
export const getMeCreditBalanceBalanceNameMovementMovementId = (
    balanceName: string,
    movementId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeCreditBalanceMovementOVH>(
      {url: `/me/credit/balance/${balanceName}/movement/${movementId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeCreditBalanceBalanceNameMovementMovementIdQueryKey = (balanceName: string,
    movementId: number,) => {
    return [`/me/credit/balance/${balanceName}/movement/${movementId}`] as const;
    }

    
export const getGetMeCreditBalanceBalanceNameMovementMovementIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError = unknown>(balanceName: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeCreditBalanceBalanceNameMovementMovementIdQueryKey(balanceName,movementId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>> = ({ signal }) => getMeCreditBalanceBalanceNameMovementMovementId(balanceName,movementId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(balanceName && movementId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeCreditBalanceBalanceNameMovementMovementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>>
export type GetMeCreditBalanceBalanceNameMovementMovementIdQueryError = unknown


export function useGetMeCreditBalanceBalanceNameMovementMovementId<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError = unknown>(
 balanceName: string,
    movementId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalanceBalanceNameMovementMovementId<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError = unknown>(
 balanceName: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeCreditBalanceBalanceNameMovementMovementId<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError = unknown>(
 balanceName: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a specific movement for a credit balance
 */

export function useGetMeCreditBalanceBalanceNameMovementMovementId<TData = Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError = unknown>(
 balanceName: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeCreditBalanceBalanceNameMovementMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeCreditBalanceBalanceNameMovementMovementIdQueryOptions(balanceName,movementId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Validate a code to generate associated credit movement
 */
export const postMeCreditCode = (
    meCreditCodeRedeemOVH: MeCreditCodeRedeemOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeCreditBalanceMovementOVH>(
      {url: `/me/credit/code`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meCreditCodeRedeemOVH, signal
    },
      options);
    }
  


export const getPostMeCreditCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeCreditCode>>, TError,{data: MeCreditCodeRedeemOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeCreditCode>>, TError,{data: MeCreditCodeRedeemOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeCreditCode>>, {data: MeCreditCodeRedeemOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeCreditCode(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeCreditCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeCreditCode>>>
    export type PostMeCreditCodeMutationBody = MeCreditCodeRedeemOVH
    export type PostMeCreditCodeMutationError = unknown

    /**
 * @summary Validate a code to generate associated credit movement
 */
export const usePostMeCreditCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeCreditCode>>, TError,{data: MeCreditCodeRedeemOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeCreditCode>>,
        TError,
        {data: MeCreditCodeRedeemOVH},
        TContext
      > => {

      const mutationOptions = getPostMeCreditCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeDebtAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtBalanceOVH>(
      {url: `/me/debtAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDebtAccountQueryKey = () => {
    return [`/me/debtAccount`] as const;
    }

    
export const getGetMeDebtAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMeDebtAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDebtAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDebtAccount>>> = ({ signal }) => getMeDebtAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDebtAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDebtAccount>>>
export type GetMeDebtAccountQueryError = unknown


export function useGetMeDebtAccount<TData = Awaited<ReturnType<typeof getMeDebtAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccount<TData = Awaited<ReturnType<typeof getMeDebtAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccount<TData = Awaited<ReturnType<typeof getMeDebtAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDebtAccount<TData = Awaited<ReturnType<typeof getMeDebtAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDebtAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All debts related to your account
 */
export const getMeDebtAccountDebt = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/debtAccount/debt`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDebtAccountDebtQueryKey = () => {
    return [`/me/debtAccount/debt`] as const;
    }

    
export const getGetMeDebtAccountDebtQueryOptions = <TData = Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDebtAccountDebtQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDebtAccountDebt>>> = ({ signal }) => getMeDebtAccountDebt(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDebtAccountDebtQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDebtAccountDebt>>>
export type GetMeDebtAccountDebtQueryError = unknown


export function useGetMeDebtAccountDebt<TData = Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebt<TData = Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebt<TData = Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All debts related to your account
 */

export function useGetMeDebtAccountDebt<TData = Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDebtAccountDebtQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDebtAccountDebtDebtId = (
    debtId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtDebtOVH>(
      {url: `/me/debtAccount/debt/${debtId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDebtAccountDebtDebtIdQueryKey = (debtId: number,) => {
    return [`/me/debtAccount/debt/${debtId}`] as const;
    }

    
export const getGetMeDebtAccountDebtDebtIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError = unknown>(debtId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDebtAccountDebtDebtIdQueryKey(debtId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>> = ({ signal }) => getMeDebtAccountDebtDebtId(debtId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(debtId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDebtAccountDebtDebtIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>>
export type GetMeDebtAccountDebtDebtIdQueryError = unknown


export function useGetMeDebtAccountDebtDebtId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError = unknown>(
 debtId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError = unknown>(
 debtId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError = unknown>(
 debtId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDebtAccountDebtDebtId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError = unknown>(
 debtId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDebtAccountDebtDebtIdQueryOptions(debtId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All operations related to these debts
 */
export const getMeDebtAccountDebtDebtIdOperation = (
    debtId: number,
    params?: GetMeDebtAccountDebtDebtIdOperationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/debtAccount/debt/${debtId}/operation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeDebtAccountDebtDebtIdOperationQueryKey = (debtId: number,
    params?: GetMeDebtAccountDebtDebtIdOperationParams,) => {
    return [`/me/debtAccount/debt/${debtId}/operation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeDebtAccountDebtDebtIdOperationQueryOptions = <TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError = unknown>(debtId: number,
    params?: GetMeDebtAccountDebtDebtIdOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDebtAccountDebtDebtIdOperationQueryKey(debtId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>> = ({ signal }) => getMeDebtAccountDebtDebtIdOperation(debtId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(debtId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDebtAccountDebtDebtIdOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>>
export type GetMeDebtAccountDebtDebtIdOperationQueryError = unknown


export function useGetMeDebtAccountDebtDebtIdOperation<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError = unknown>(
 debtId: number,
    params: undefined |  GetMeDebtAccountDebtDebtIdOperationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtIdOperation<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError = unknown>(
 debtId: number,
    params?: GetMeDebtAccountDebtDebtIdOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtIdOperation<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError = unknown>(
 debtId: number,
    params?: GetMeDebtAccountDebtDebtIdOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All operations related to these debts
 */

export function useGetMeDebtAccountDebtDebtIdOperation<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError = unknown>(
 debtId: number,
    params?: GetMeDebtAccountDebtDebtIdOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDebtAccountDebtDebtIdOperationQueryOptions(debtId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDebtAccountDebtDebtIdOperationOperationId = (
    debtId: number,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtOperationOVH>(
      {url: `/me/debtAccount/debt/${debtId}/operation/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDebtAccountDebtDebtIdOperationOperationIdQueryKey = (debtId: number,
    operationId: number,) => {
    return [`/me/debtAccount/debt/${debtId}/operation/${operationId}`] as const;
    }

    
export const getGetMeDebtAccountDebtDebtIdOperationOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError = unknown>(debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDebtAccountDebtDebtIdOperationOperationIdQueryKey(debtId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>> = ({ signal }) => getMeDebtAccountDebtDebtIdOperationOperationId(debtId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(debtId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDebtAccountDebtDebtIdOperationOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>>
export type GetMeDebtAccountDebtDebtIdOperationOperationIdQueryError = unknown


export function useGetMeDebtAccountDebtDebtIdOperationOperationId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError = unknown>(
 debtId: number,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtIdOperationOperationId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError = unknown>(
 debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtIdOperationOperationId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError = unknown>(
 debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDebtAccountDebtDebtIdOperationOperationId<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError = unknown>(
 debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDebtAccountDebtDebtIdOperationOperationIdQueryOptions(debtId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return main data about the object related to this debt operation
 */
export const getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject = (
    debtId: number,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtEntryAssociatedObjectOVH>(
      {url: `/me/debtAccount/debt/${debtId}/operation/${operationId}/associatedObject`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectQueryKey = (debtId: number,
    operationId: number,) => {
    return [`/me/debtAccount/debt/${debtId}/operation/${operationId}/associatedObject`] as const;
    }

    
export const getGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectQueryOptions = <TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError = unknown>(debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectQueryKey(debtId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>> = ({ signal }) => getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject(debtId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(debtId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>>
export type GetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectQueryError = unknown


export function useGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError = unknown>(
 debtId: number,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError = unknown>(
 debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError = unknown>(
 debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return main data about the object related to this debt operation
 */

export function useGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError = unknown>(
 debtId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectQueryOptions(debtId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an order in order to pay this order's debt
 */
export const postMeDebtAccountDebtDebtIdPay = (
    debtId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/debtAccount/debt/${debtId}/pay`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeDebtAccountDebtDebtIdPayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDebtAccountDebtDebtIdPay>>, TError,{debtId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeDebtAccountDebtDebtIdPay>>, TError,{debtId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeDebtAccountDebtDebtIdPay>>, {debtId: number}> = (props) => {
          const {debtId} = props ?? {};

          return  postMeDebtAccountDebtDebtIdPay(debtId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeDebtAccountDebtDebtIdPayMutationResult = NonNullable<Awaited<ReturnType<typeof postMeDebtAccountDebtDebtIdPay>>>
    
    export type PostMeDebtAccountDebtDebtIdPayMutationError = unknown

    /**
 * @summary Create an order in order to pay this order's debt
 */
export const usePostMeDebtAccountDebtDebtIdPay = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDebtAccountDebtDebtIdPay>>, TError,{debtId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeDebtAccountDebtDebtIdPay>>,
        TError,
        {debtId: number},
        TContext
      > => {

      const mutationOptions = getPostMeDebtAccountDebtDebtIdPayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create an order in order to pay all your due debts
 */
export const postMeDebtAccountPay = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/debtAccount/pay`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeDebtAccountPayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDebtAccountPay>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeDebtAccountPay>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeDebtAccountPay>>, void> = () => {
          

          return  postMeDebtAccountPay(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeDebtAccountPayMutationResult = NonNullable<Awaited<ReturnType<typeof postMeDebtAccountPay>>>
    
    export type PostMeDebtAccountPayMutationError = unknown

    /**
 * @summary Create an order in order to pay all your due debts
 */
export const usePostMeDebtAccountPay = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDebtAccountPay>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeDebtAccountPay>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeDebtAccountPayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of all the deposits made to your prepaid account or debt account
 */
export const getMeDeposit = (
    params?: GetMeDepositParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/deposit`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeDepositQueryKey = (params?: GetMeDepositParams,) => {
    return [`/me/deposit`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeDepositQueryOptions = <TData = Awaited<ReturnType<typeof getMeDeposit>>, TError = unknown>(params?: GetMeDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDeposit>>> = ({ signal }) => getMeDeposit(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDeposit>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDeposit>>>
export type GetMeDepositQueryError = unknown


export function useGetMeDeposit<TData = Awaited<ReturnType<typeof getMeDeposit>>, TError = unknown>(
 params: undefined |  GetMeDepositParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDeposit>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDeposit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDeposit<TData = Awaited<ReturnType<typeof getMeDeposit>>, TError = unknown>(
 params?: GetMeDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDeposit>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDeposit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDeposit<TData = Awaited<ReturnType<typeof getMeDeposit>>, TError = unknown>(
 params?: GetMeDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of all the deposits made to your prepaid account or debt account
 */

export function useGetMeDeposit<TData = Awaited<ReturnType<typeof getMeDeposit>>, TError = unknown>(
 params?: GetMeDepositParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDeposit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositId = (
    depositId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingDepositOVH>(
      {url: `/me/deposit/${depositId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdQueryKey = (depositId: string,) => {
    return [`/me/deposit/${depositId}`] as const;
    }

    
export const getGetMeDepositDepositIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositId>>, TError = unknown>(depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdQueryKey(depositId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositId>>> = ({ signal }) => getMeDepositDepositId(depositId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositId>>>
export type GetMeDepositDepositIdQueryError = unknown


export function useGetMeDepositDepositId<TData = Awaited<ReturnType<typeof getMeDepositDepositId>>, TError = unknown>(
 depositId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositId<TData = Awaited<ReturnType<typeof getMeDepositDepositId>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositId<TData = Awaited<ReturnType<typeof getMeDepositDepositId>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositId<TData = Awaited<ReturnType<typeof getMeDepositDepositId>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdQueryOptions(depositId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give access to all entries of this deposit
 */
export const getMeDepositDepositIdDetails = (
    depositId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/deposit/${depositId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdDetailsQueryKey = (depositId: string,) => {
    return [`/me/deposit/${depositId}/details`] as const;
    }

    
export const getGetMeDepositDepositIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError = unknown>(depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdDetailsQueryKey(depositId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>> = ({ signal }) => getMeDepositDepositIdDetails(depositId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>>
export type GetMeDepositDepositIdDetailsQueryError = unknown


export function useGetMeDepositDepositIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError = unknown>(
 depositId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of this deposit
 */

export function useGetMeDepositDepositIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdDetailsQueryOptions(depositId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdDetailsDepositDetailId = (
    depositId: string,
    depositDetailId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingDepositDetailOVH>(
      {url: `/me/deposit/${depositId}/details/${depositDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdDetailsDepositDetailIdQueryKey = (depositId: string,
    depositDetailId: string,) => {
    return [`/me/deposit/${depositId}/details/${depositDetailId}`] as const;
    }

    
export const getGetMeDepositDepositIdDetailsDepositDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError = unknown>(depositId: string,
    depositDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdDetailsDepositDetailIdQueryKey(depositId,depositDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>> = ({ signal }) => getMeDepositDepositIdDetailsDepositDetailId(depositId,depositDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && depositDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdDetailsDepositDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>>
export type GetMeDepositDepositIdDetailsDepositDetailIdQueryError = unknown


export function useGetMeDepositDepositIdDetailsDepositDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError = unknown>(
 depositId: string,
    depositDetailId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdDetailsDepositDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError = unknown>(
 depositId: string,
    depositDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdDetailsDepositDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError = unknown>(
 depositId: string,
    depositDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdDetailsDepositDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError = unknown>(
 depositId: string,
    depositDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDetailsDepositDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdDetailsDepositDetailIdQueryOptions(depositId,depositDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get invoices paid by this deposit
 */
export const getMeDepositDepositIdPaidBills = (
    depositId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/deposit/${depositId}/paidBills`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsQueryKey = (depositId: string,) => {
    return [`/me/deposit/${depositId}/paidBills`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError = unknown>(depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsQueryKey(depositId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>> = ({ signal }) => getMeDepositDepositIdPaidBills(depositId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>>
export type GetMeDepositDepositIdPaidBillsQueryError = unknown


export function useGetMeDepositDepositIdPaidBills<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError = unknown>(
 depositId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBills<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBills<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get invoices paid by this deposit
 */

export function useGetMeDepositDepositIdPaidBills<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBills>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsQueryOptions(depositId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdPaidBillsBillId = (
    depositId: string,
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingBillOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdQueryKey = (depositId: string,
    billId: string,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError = unknown>(depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdQueryKey(depositId,billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillId(depositId,billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>>
export type GetMeDepositDepositIdPaidBillsBillIdQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError = unknown>(
 depositId: string,
    billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdPaidBillsBillId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdQueryOptions(depositId,billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdPaidBillsBillIdDebt = (
    depositId: string,
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtDebtOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/debt`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDebtQueryKey = (depositId: string,
    billId: string,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/debt`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDebtQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError = unknown>(depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDebtQueryKey(depositId,billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDebt(depositId,billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDebtQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>>
export type GetMeDepositDepositIdPaidBillsBillIdDebtQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDebt<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError = unknown>(
 depositId: string,
    billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebt<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebt<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDebt<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDebtQueryOptions(depositId,billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All operations related to these debts
 */
export const getMeDepositDepositIdPaidBillsBillIdDebtOperation = (
    depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/debt/operation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDebtOperationQueryKey = (depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/debt/operation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDebtOperationQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError = unknown>(depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDebtOperationQueryKey(depositId,billId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDebtOperation(depositId,billId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDebtOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>>
export type GetMeDepositDepositIdPaidBillsBillIdDebtOperationQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError = unknown>(
 depositId: string,
    billId: string,
    params: undefined |  GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError = unknown>(
 depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError = unknown>(
 depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All operations related to these debts
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperation<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError = unknown>(
 depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDebtOperationQueryOptions(depositId,billId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId = (
    depositId: string,
    billId: string,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtOperationOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/debt/operation/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdQueryKey = (depositId: string,
    billId: string,
    operationId: number,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/debt/operation/${operationId}`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError = unknown>(depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdQueryKey(depositId,billId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId(depositId,billId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>>
export type GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdQueryOptions(depositId,billId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return main data about the object related to this debt operation
 */
export const getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject = (
    depositId: string,
    billId: string,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtEntryAssociatedObjectOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/debt/operation/${operationId}/associatedObject`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectQueryKey = (depositId: string,
    billId: string,
    operationId: number,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/debt/operation/${operationId}/associatedObject`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectQueryKey(depositId,billId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject(depositId,billId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>>
export type GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return main data about the object related to this debt operation
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 depositId: string,
    billId: string,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectQueryOptions(depositId,billId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an order in order to pay this order's debt
 */
export const postMeDepositDepositIdPaidBillsBillIdDebtPay = (
    depositId: string,
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/debt/pay`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeDepositDepositIdPaidBillsBillIdDebtPayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDepositDepositIdPaidBillsBillIdDebtPay>>, TError,{depositId: string;billId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeDepositDepositIdPaidBillsBillIdDebtPay>>, TError,{depositId: string;billId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeDepositDepositIdPaidBillsBillIdDebtPay>>, {depositId: string;billId: string}> = (props) => {
          const {depositId,billId} = props ?? {};

          return  postMeDepositDepositIdPaidBillsBillIdDebtPay(depositId,billId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeDepositDepositIdPaidBillsBillIdDebtPayMutationResult = NonNullable<Awaited<ReturnType<typeof postMeDepositDepositIdPaidBillsBillIdDebtPay>>>
    
    export type PostMeDepositDepositIdPaidBillsBillIdDebtPayMutationError = unknown

    /**
 * @summary Create an order in order to pay this order's debt
 */
export const usePostMeDepositDepositIdPaidBillsBillIdDebtPay = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDepositDepositIdPaidBillsBillIdDebtPay>>, TError,{depositId: string;billId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeDepositDepositIdPaidBillsBillIdDebtPay>>,
        TError,
        {depositId: string;billId: string},
        TContext
      > => {

      const mutationOptions = getPostMeDepositDepositIdPaidBillsBillIdDebtPayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Give access to all entries of the bill
 */
export const getMeDepositDepositIdPaidBillsBillIdDetails = (
    depositId: string,
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDetailsQueryKey = (depositId: string,
    billId: string,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/details`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError = unknown>(depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDetailsQueryKey(depositId,billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDetails(depositId,billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>>
export type GetMeDepositDepositIdPaidBillsBillIdDetailsQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError = unknown>(
 depositId: string,
    billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of the bill
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDetails<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDetailsQueryOptions(depositId,billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId = (
    depositId: string,
    billId: string,
    billDetailId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingBillDetailOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/details/${billDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdQueryKey = (depositId: string,
    billId: string,
    billDetailId: string,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/details/${billDetailId}`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError = unknown>(depositId: string,
    billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdQueryKey(depositId,billId,billDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId(depositId,billId,billDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId && billDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>>
export type GetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError = unknown>(
 depositId: string,
    billId: string,
    billDetailId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError = unknown>(
 depositId: string,
    billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError = unknown>(
 depositId: string,
    billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError = unknown>(
 depositId: string,
    billId: string,
    billDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDetailsBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdQueryOptions(depositId,billId,billDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdPaidBillsBillIdPayment = (
    depositId: string,
    billId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdPaymentQueryKey = (depositId: string,
    billId: string,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/payment`] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError = unknown>(depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdPaymentQueryKey(depositId,billId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdPayment(depositId,billId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>>
export type GetMeDepositDepositIdPaidBillsBillIdPaymentQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError = unknown>(
 depositId: string,
    billId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdPaidBillsBillIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError = unknown>(
 depositId: string,
    billId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdPaymentQueryOptions(depositId,billId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositDepositIdPayment = (
    depositId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/deposit/${depositId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaymentQueryKey = (depositId: string,) => {
    return [`/me/deposit/${depositId}/payment`] as const;
    }

    
export const getGetMeDepositDepositIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError = unknown>(depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaymentQueryKey(depositId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>> = ({ signal }) => getMeDepositDepositIdPayment(depositId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>>
export type GetMeDepositDepositIdPaymentQueryError = unknown


export function useGetMeDepositDepositIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError = unknown>(
 depositId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositDepositIdPayment<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaymentQueryOptions(depositId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of documents added in your account
 */
export const getMeDocument = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/document`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDocumentQueryKey = () => {
    return [`/me/document`] as const;
    }

    
export const getGetMeDocumentQueryOptions = <TData = Awaited<ReturnType<typeof getMeDocument>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDocumentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDocument>>> = ({ signal }) => getMeDocument(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDocument>>>
export type GetMeDocumentQueryError = unknown


export function useGetMeDocument<TData = Awaited<ReturnType<typeof getMeDocument>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDocument<TData = Awaited<ReturnType<typeof getMeDocument>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDocument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDocument<TData = Awaited<ReturnType<typeof getMeDocument>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of documents added in your account
 */

export function useGetMeDocument<TData = Awaited<ReturnType<typeof getMeDocument>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDocumentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new document
 */
export const postMeDocument = (
    postMeDocumentBody: PostMeDocumentBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleDocumentDocumentOVH>(
      {url: `/me/document`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeDocumentBody, signal
    },
      options);
    }
  


export const getPostMeDocumentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDocument>>, TError,{data: PostMeDocumentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeDocument>>, TError,{data: PostMeDocumentBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeDocument>>, {data: PostMeDocumentBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeDocument(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeDocumentMutationResult = NonNullable<Awaited<ReturnType<typeof postMeDocument>>>
    export type PostMeDocumentMutationBody = PostMeDocumentBody
    export type PostMeDocumentMutationError = unknown

    /**
 * @summary Create new document
 */
export const usePostMeDocument = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDocument>>, TError,{data: PostMeDocumentBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeDocument>>,
        TError,
        {data: PostMeDocumentBody},
        TContext
      > => {

      const mutationOptions = getPostMeDocumentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add CORS support on your container
 */
export const postMeDocumentCors = (
    postMeDocumentCorsBody: PostMeDocumentCorsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/document/cors`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeDocumentCorsBody, signal
    },
      options);
    }
  


export const getPostMeDocumentCorsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDocumentCors>>, TError,{data: PostMeDocumentCorsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeDocumentCors>>, TError,{data: PostMeDocumentCorsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeDocumentCors>>, {data: PostMeDocumentCorsBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeDocumentCors(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeDocumentCorsMutationResult = NonNullable<Awaited<ReturnType<typeof postMeDocumentCors>>>
    export type PostMeDocumentCorsMutationBody = PostMeDocumentCorsBody
    export type PostMeDocumentCorsMutationError = unknown

    /**
 * @summary Add CORS support on your container
 */
export const usePostMeDocumentCors = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeDocumentCors>>, TError,{data: PostMeDocumentCorsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeDocumentCors>>,
        TError,
        {data: PostMeDocumentCorsBody},
        TContext
      > => {

      const mutationOptions = getPostMeDocumentCorsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a document
 */
export const deleteMeDocumentId = (
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/document/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeDocumentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeDocumentId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeDocumentId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeDocumentId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeDocumentId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeDocumentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeDocumentId>>>
    
    export type DeleteMeDocumentIdMutationError = unknown

    /**
 * @summary Delete a document
 */
export const useDeleteMeDocumentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeDocumentId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeDocumentId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeDocumentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeDocumentId = (
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleDocumentDocumentOVH>(
      {url: `/me/document/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDocumentIdQueryKey = (id: string,) => {
    return [`/me/document/${id}`] as const;
    }

    
export const getGetMeDocumentIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDocumentId>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocumentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDocumentIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDocumentId>>> = ({ signal }) => getMeDocumentId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDocumentId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDocumentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDocumentId>>>
export type GetMeDocumentIdQueryError = unknown


export function useGetMeDocumentId<TData = Awaited<ReturnType<typeof getMeDocumentId>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocumentId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDocumentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDocumentId<TData = Awaited<ReturnType<typeof getMeDocumentId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocumentId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDocumentId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDocumentId<TData = Awaited<ReturnType<typeof getMeDocumentId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocumentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDocumentId<TData = Awaited<ReturnType<typeof getMeDocumentId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDocumentId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDocumentIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeDocumentId = (
    id: string,
    nichandleDocumentDocumentOVH: NonReadonly<NichandleDocumentDocumentOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/document/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleDocumentDocumentOVH
    },
      options);
    }
  


export const getPutMeDocumentIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeDocumentId>>, TError,{id: string;data: NonReadonly<NichandleDocumentDocumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeDocumentId>>, TError,{id: string;data: NonReadonly<NichandleDocumentDocumentOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeDocumentId>>, {id: string;data: NonReadonly<NichandleDocumentDocumentOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeDocumentId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeDocumentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeDocumentId>>>
    export type PutMeDocumentIdMutationBody = NonReadonly<NichandleDocumentDocumentOVH>
    export type PutMeDocumentIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeDocumentId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeDocumentId>>, TError,{id: string;data: NonReadonly<NichandleDocumentDocumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeDocumentId>>,
        TError,
        {id: string;data: NonReadonly<NichandleDocumentDocumentOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeDocumentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the fax custom domains linked to the customer account
 */
export const getMeFaxCustomDomains = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/fax/customDomains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeFaxCustomDomainsQueryKey = () => {
    return [`/me/fax/customDomains`] as const;
    }

    
export const getGetMeFaxCustomDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeFaxCustomDomainsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeFaxCustomDomains>>> = ({ signal }) => getMeFaxCustomDomains(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeFaxCustomDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeFaxCustomDomains>>>
export type GetMeFaxCustomDomainsQueryError = unknown


export function useGetMeFaxCustomDomains<TData = Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFaxCustomDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFaxCustomDomains<TData = Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFaxCustomDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFaxCustomDomains<TData = Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the fax custom domains linked to the customer account
 */

export function useGetMeFaxCustomDomains<TData = Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeFaxCustomDomainsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a custom domain for your fax services
 */
export const postMeFaxCustomDomains = (
    postMeFaxCustomDomainsBody: PostMeFaxCustomDomainsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyMailDomain2ServiceOVH>(
      {url: `/me/fax/customDomains`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeFaxCustomDomainsBody, signal
    },
      options);
    }
  


export const getPostMeFaxCustomDomainsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeFaxCustomDomains>>, TError,{data: PostMeFaxCustomDomainsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeFaxCustomDomains>>, TError,{data: PostMeFaxCustomDomainsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeFaxCustomDomains>>, {data: PostMeFaxCustomDomainsBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeFaxCustomDomains(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeFaxCustomDomainsMutationResult = NonNullable<Awaited<ReturnType<typeof postMeFaxCustomDomains>>>
    export type PostMeFaxCustomDomainsMutationBody = PostMeFaxCustomDomainsBody
    export type PostMeFaxCustomDomainsMutationError = unknown

    /**
 * @summary Create a custom domain for your fax services
 */
export const usePostMeFaxCustomDomains = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeFaxCustomDomains>>, TError,{data: PostMeFaxCustomDomainsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeFaxCustomDomains>>,
        TError,
        {data: PostMeFaxCustomDomainsBody},
        TContext
      > => {

      const mutationOptions = getPostMeFaxCustomDomainsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a custom domain of your fax services
 */
export const deleteMeFaxCustomDomainsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/fax/customDomains/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeFaxCustomDomainsIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeFaxCustomDomainsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeFaxCustomDomainsId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeFaxCustomDomainsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeFaxCustomDomainsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeFaxCustomDomainsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeFaxCustomDomainsId>>>
    
    export type DeleteMeFaxCustomDomainsIdMutationError = unknown

    /**
 * @summary Delete a custom domain of your fax services
 */
export const useDeleteMeFaxCustomDomainsId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeFaxCustomDomainsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeFaxCustomDomainsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeFaxCustomDomainsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeFaxCustomDomainsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyMailDomain2ServiceOVH>(
      {url: `/me/fax/customDomains/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeFaxCustomDomainsIdQueryKey = (id: number,) => {
    return [`/me/fax/customDomains/${id}`] as const;
    }

    
export const getGetMeFaxCustomDomainsIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeFaxCustomDomainsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>> = ({ signal }) => getMeFaxCustomDomainsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeFaxCustomDomainsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>>
export type GetMeFaxCustomDomainsIdQueryError = unknown


export function useGetMeFaxCustomDomainsId<TData = Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFaxCustomDomainsId<TData = Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFaxCustomDomainsId<TData = Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeFaxCustomDomainsId<TData = Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFaxCustomDomainsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeFaxCustomDomainsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Post customer feedback on V6 Manager
 */
export const postMeFeedback = (
    postMeFeedbackBody: PostMeFeedbackBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/feedback`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeFeedbackBody, signal
    },
      options);
    }
  


export const getPostMeFeedbackMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeFeedback>>, TError,{data: PostMeFeedbackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeFeedback>>, TError,{data: PostMeFeedbackBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeFeedback>>, {data: PostMeFeedbackBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeFeedback(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeFeedbackMutationResult = NonNullable<Awaited<ReturnType<typeof postMeFeedback>>>
    export type PostMeFeedbackMutationBody = PostMeFeedbackBody
    export type PostMeFeedbackMutationError = unknown

    /**
 * @summary Post customer feedback on V6 Manager
 */
export const usePostMeFeedback = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeFeedback>>, TError,{data: PostMeFeedbackBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeFeedback>>,
        TError,
        {data: PostMeFeedbackBody},
        TContext
      > => {

      const mutationOptions = getPostMeFeedbackMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeFidelityAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingFidelityAccountOVH>(
      {url: `/me/fidelityAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeFidelityAccountQueryKey = () => {
    return [`/me/fidelityAccount`] as const;
    }

    
export const getGetMeFidelityAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMeFidelityAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeFidelityAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeFidelityAccount>>> = ({ signal }) => getMeFidelityAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeFidelityAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeFidelityAccount>>>
export type GetMeFidelityAccountQueryError = unknown


export function useGetMeFidelityAccount<TData = Awaited<ReturnType<typeof getMeFidelityAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFidelityAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFidelityAccount<TData = Awaited<ReturnType<typeof getMeFidelityAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFidelityAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFidelityAccount<TData = Awaited<ReturnType<typeof getMeFidelityAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeFidelityAccount<TData = Awaited<ReturnType<typeof getMeFidelityAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeFidelityAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeFidelityAccount = (
    billingFidelityAccountOVH: NonReadonly<BillingFidelityAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/fidelityAccount`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: billingFidelityAccountOVH
    },
      options);
    }
  


export const getPutMeFidelityAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeFidelityAccount>>, TError,{data: NonReadonly<BillingFidelityAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeFidelityAccount>>, TError,{data: NonReadonly<BillingFidelityAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeFidelityAccount>>, {data: NonReadonly<BillingFidelityAccountOVH>}> = (props) => {
          const {data} = props ?? {};

          return  putMeFidelityAccount(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeFidelityAccountMutationResult = NonNullable<Awaited<ReturnType<typeof putMeFidelityAccount>>>
    export type PutMeFidelityAccountMutationBody = NonReadonly<BillingFidelityAccountOVH>
    export type PutMeFidelityAccountMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeFidelityAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeFidelityAccount>>, TError,{data: NonReadonly<BillingFidelityAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeFidelityAccount>>,
        TError,
        {data: NonReadonly<BillingFidelityAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeFidelityAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate an order that can be paid in order to credit the fidelity account
 */
export const postMeFidelityAccountCreditOrder = (
    postMeFidelityAccountCreditOrderBody: PostMeFidelityAccountCreditOrderBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/fidelityAccount/creditOrder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeFidelityAccountCreditOrderBody, signal
    },
      options);
    }
  


export const getPostMeFidelityAccountCreditOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeFidelityAccountCreditOrder>>, TError,{data: PostMeFidelityAccountCreditOrderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeFidelityAccountCreditOrder>>, TError,{data: PostMeFidelityAccountCreditOrderBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeFidelityAccountCreditOrder>>, {data: PostMeFidelityAccountCreditOrderBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeFidelityAccountCreditOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeFidelityAccountCreditOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postMeFidelityAccountCreditOrder>>>
    export type PostMeFidelityAccountCreditOrderMutationBody = PostMeFidelityAccountCreditOrderBody
    export type PostMeFidelityAccountCreditOrderMutationError = unknown

    /**
 * @summary Generate an order that can be paid in order to credit the fidelity account
 */
export const usePostMeFidelityAccountCreditOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeFidelityAccountCreditOrder>>, TError,{data: PostMeFidelityAccountCreditOrderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeFidelityAccountCreditOrder>>,
        TError,
        {data: PostMeFidelityAccountCreditOrderBody},
        TContext
      > => {

      const mutationOptions = getPostMeFidelityAccountCreditOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of entries of the fidelity account
 */
export const getMeFidelityAccountMovements = (
    params?: GetMeFidelityAccountMovementsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/fidelityAccount/movements`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeFidelityAccountMovementsQueryKey = (params?: GetMeFidelityAccountMovementsParams,) => {
    return [`/me/fidelityAccount/movements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeFidelityAccountMovementsQueryOptions = <TData = Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError = unknown>(params?: GetMeFidelityAccountMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeFidelityAccountMovementsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>> = ({ signal }) => getMeFidelityAccountMovements(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeFidelityAccountMovementsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>>
export type GetMeFidelityAccountMovementsQueryError = unknown


export function useGetMeFidelityAccountMovements<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError = unknown>(
 params: undefined |  GetMeFidelityAccountMovementsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFidelityAccountMovements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFidelityAccountMovements<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError = unknown>(
 params?: GetMeFidelityAccountMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFidelityAccountMovements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFidelityAccountMovements<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError = unknown>(
 params?: GetMeFidelityAccountMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of entries of the fidelity account
 */

export function useGetMeFidelityAccountMovements<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError = unknown>(
 params?: GetMeFidelityAccountMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeFidelityAccountMovementsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeFidelityAccountMovementsMovementId = (
    movementId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingFidelityMovementOVH>(
      {url: `/me/fidelityAccount/movements/${movementId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeFidelityAccountMovementsMovementIdQueryKey = (movementId: number,) => {
    return [`/me/fidelityAccount/movements/${movementId}`] as const;
    }

    
export const getGetMeFidelityAccountMovementsMovementIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError = unknown>(movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeFidelityAccountMovementsMovementIdQueryKey(movementId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>> = ({ signal }) => getMeFidelityAccountMovementsMovementId(movementId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(movementId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeFidelityAccountMovementsMovementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>>
export type GetMeFidelityAccountMovementsMovementIdQueryError = unknown


export function useGetMeFidelityAccountMovementsMovementId<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError = unknown>(
 movementId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFidelityAccountMovementsMovementId<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError = unknown>(
 movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeFidelityAccountMovementsMovementId<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError = unknown>(
 movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeFidelityAccountMovementsMovementId<TData = Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError = unknown>(
 movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeFidelityAccountMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeFidelityAccountMovementsMovementIdQueryOptions(movementId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch visitor country & region
 */
export const postMeGeolocation = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeGeolocationContinentCountryLocationOVH>(
      {url: `/me/geolocation`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeGeolocationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeGeolocation>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeGeolocation>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeGeolocation>>, void> = () => {
          

          return  postMeGeolocation(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeGeolocationMutationResult = NonNullable<Awaited<ReturnType<typeof postMeGeolocation>>>
    
    export type PostMeGeolocationMutationError = unknown

    /**
 * @summary Fetch visitor country & region
 */
export const usePostMeGeolocation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeGeolocation>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeGeolocation>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeGeolocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all IAM groups of this account
 */
export const getMeIdentityGroup = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/identity/group`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIdentityGroupQueryKey = () => {
    return [`/me/identity/group`] as const;
    }

    
export const getGetMeIdentityGroupQueryOptions = <TData = Awaited<ReturnType<typeof getMeIdentityGroup>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIdentityGroupQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIdentityGroup>>> = ({ signal }) => getMeIdentityGroup(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIdentityGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIdentityGroup>>>
export type GetMeIdentityGroupQueryError = unknown


export function useGetMeIdentityGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroup>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all IAM groups of this account
 */

export function useGetMeIdentityGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroup>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIdentityGroupQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new IAM group
 */
export const postMeIdentityGroup = (
    authGroupRequestOVH: AuthGroupRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthGroupOVH>(
      {url: `/me/identity/group`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authGroupRequestOVH, signal
    },
      options);
    }
  


export const getPostMeIdentityGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityGroup>>, TError,{data: AuthGroupRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityGroup>>, TError,{data: AuthGroupRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIdentityGroup>>, {data: AuthGroupRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeIdentityGroup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIdentityGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIdentityGroup>>>
    export type PostMeIdentityGroupMutationBody = AuthGroupRequestOVH
    export type PostMeIdentityGroupMutationError = unknown

    /**
 * @summary Create a new IAM group
 */
export const usePostMeIdentityGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityGroup>>, TError,{data: AuthGroupRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIdentityGroup>>,
        TError,
        {data: AuthGroupRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostMeIdentityGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an IAM group
 */
export const deleteMeIdentityGroupGroup = (
    group: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/group/${group}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeIdentityGroupGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityGroupGroup>>, TError,{group: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityGroupGroup>>, TError,{group: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeIdentityGroupGroup>>, {group: string}> = (props) => {
          const {group} = props ?? {};

          return  deleteMeIdentityGroupGroup(group,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeIdentityGroupGroupMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeIdentityGroupGroup>>>
    
    export type DeleteMeIdentityGroupGroupMutationError = unknown

    /**
 * @summary Delete an IAM group
 */
export const useDeleteMeIdentityGroupGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityGroupGroup>>, TError,{group: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeIdentityGroupGroup>>,
        TError,
        {group: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeIdentityGroupGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an IAM group
 */
export const getMeIdentityGroupGroup = (
    group: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthGroupOVH>(
      {url: `/me/identity/group/${group}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIdentityGroupGroupQueryKey = (group: string,) => {
    return [`/me/identity/group/${group}`] as const;
    }

    
export const getGetMeIdentityGroupGroupQueryOptions = <TData = Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError = unknown>(group: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIdentityGroupGroupQueryKey(group);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>> = ({ signal }) => getMeIdentityGroupGroup(group, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(group), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIdentityGroupGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>>
export type GetMeIdentityGroupGroupQueryError = unknown


export function useGetMeIdentityGroupGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError = unknown>(
 group: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityGroupGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityGroupGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError = unknown>(
 group: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityGroupGroup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityGroupGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError = unknown>(
 group: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an IAM group
 */

export function useGetMeIdentityGroupGroup<TData = Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError = unknown>(
 group: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityGroupGroup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIdentityGroupGroupQueryOptions(group,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter an IAM group
 */
export const putMeIdentityGroupGroup = (
    group: string,
    authGroupOVH: NonReadonly<AuthGroupOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/group/${group}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authGroupOVH
    },
      options);
    }
  


export const getPutMeIdentityGroupGroupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityGroupGroup>>, TError,{group: string;data: NonReadonly<AuthGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityGroupGroup>>, TError,{group: string;data: NonReadonly<AuthGroupOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeIdentityGroupGroup>>, {group: string;data: NonReadonly<AuthGroupOVH>}> = (props) => {
          const {group,data} = props ?? {};

          return  putMeIdentityGroupGroup(group,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeIdentityGroupGroupMutationResult = NonNullable<Awaited<ReturnType<typeof putMeIdentityGroupGroup>>>
    export type PutMeIdentityGroupGroupMutationBody = NonReadonly<AuthGroupOVH>
    export type PutMeIdentityGroupGroupMutationError = unknown

    /**
 * @summary Alter an IAM group
 */
export const usePutMeIdentityGroupGroup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityGroupGroup>>, TError,{group: string;data: NonReadonly<AuthGroupOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeIdentityGroupGroup>>,
        TError,
        {group: string;data: NonReadonly<AuthGroupOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeIdentityGroupGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove the identity provider
 */
export const deleteMeIdentityProvider = (
    
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/provider`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeIdentityProviderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityProvider>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityProvider>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeIdentityProvider>>, void> = () => {
          

          return  deleteMeIdentityProvider(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeIdentityProviderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeIdentityProvider>>>
    
    export type DeleteMeIdentityProviderMutationError = unknown

    /**
 * @summary Remove the identity provider
 */
export const useDeleteMeIdentityProvider = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityProvider>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeIdentityProvider>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteMeIdentityProviderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the identity provider linked to this account
 */
export const getMeIdentityProvider = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthProviderOVH>(
      {url: `/me/identity/provider`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIdentityProviderQueryKey = () => {
    return [`/me/identity/provider`] as const;
    }

    
export const getGetMeIdentityProviderQueryOptions = <TData = Awaited<ReturnType<typeof getMeIdentityProvider>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityProvider>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIdentityProviderQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIdentityProvider>>> = ({ signal }) => getMeIdentityProvider(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityProvider>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIdentityProviderQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIdentityProvider>>>
export type GetMeIdentityProviderQueryError = unknown


export function useGetMeIdentityProvider<TData = Awaited<ReturnType<typeof getMeIdentityProvider>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityProvider>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityProvider>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityProvider<TData = Awaited<ReturnType<typeof getMeIdentityProvider>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityProvider>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityProvider>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityProvider<TData = Awaited<ReturnType<typeof getMeIdentityProvider>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityProvider>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the identity provider linked to this account
 */

export function useGetMeIdentityProvider<TData = Awaited<ReturnType<typeof getMeIdentityProvider>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityProvider>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIdentityProviderQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Define an identity provider (SAML 2.0)
 */
export const postMeIdentityProvider = (
    authProviderRequestOVH: AuthProviderRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthProviderOVH>(
      {url: `/me/identity/provider`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authProviderRequestOVH, signal
    },
      options);
    }
  


export const getPostMeIdentityProviderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityProvider>>, TError,{data: AuthProviderRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityProvider>>, TError,{data: AuthProviderRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIdentityProvider>>, {data: AuthProviderRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeIdentityProvider(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIdentityProviderMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIdentityProvider>>>
    export type PostMeIdentityProviderMutationBody = AuthProviderRequestOVH
    export type PostMeIdentityProviderMutationError = unknown

    /**
 * @summary Define an identity provider (SAML 2.0)
 */
export const usePostMeIdentityProvider = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityProvider>>, TError,{data: AuthProviderRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIdentityProvider>>,
        TError,
        {data: AuthProviderRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostMeIdentityProviderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Alter the provider
 */
export const putMeIdentityProvider = (
    authProviderOVH: NonReadonly<AuthProviderOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/provider`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authProviderOVH
    },
      options);
    }
  


export const getPutMeIdentityProviderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityProvider>>, TError,{data: NonReadonly<AuthProviderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityProvider>>, TError,{data: NonReadonly<AuthProviderOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeIdentityProvider>>, {data: NonReadonly<AuthProviderOVH>}> = (props) => {
          const {data} = props ?? {};

          return  putMeIdentityProvider(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeIdentityProviderMutationResult = NonNullable<Awaited<ReturnType<typeof putMeIdentityProvider>>>
    export type PutMeIdentityProviderMutationBody = NonReadonly<AuthProviderOVH>
    export type PutMeIdentityProviderMutationError = unknown

    /**
 * @summary Alter the provider
 */
export const usePutMeIdentityProvider = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityProvider>>, TError,{data: NonReadonly<AuthProviderOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeIdentityProvider>>,
        TError,
        {data: NonReadonly<AuthProviderOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeIdentityProviderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all IAM users of this account
 */
export const getMeIdentityUser = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/identity/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIdentityUserQueryKey = () => {
    return [`/me/identity/user`] as const;
    }

    
export const getGetMeIdentityUserQueryOptions = <TData = Awaited<ReturnType<typeof getMeIdentityUser>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIdentityUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIdentityUser>>> = ({ signal }) => getMeIdentityUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIdentityUserQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIdentityUser>>>
export type GetMeIdentityUserQueryError = unknown


export function useGetMeIdentityUser<TData = Awaited<ReturnType<typeof getMeIdentityUser>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityUser<TData = Awaited<ReturnType<typeof getMeIdentityUser>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityUser<TData = Awaited<ReturnType<typeof getMeIdentityUser>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all IAM users of this account
 */

export function useGetMeIdentityUser<TData = Awaited<ReturnType<typeof getMeIdentityUser>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIdentityUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new IAM user
 */
export const postMeIdentityUser = (
    authUserRequestOVH: AuthUserRequestOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authUserRequestOVH, signal
    },
      options);
    }
  


export const getPostMeIdentityUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUser>>, TError,{data: AuthUserRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUser>>, TError,{data: AuthUserRequestOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIdentityUser>>, {data: AuthUserRequestOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeIdentityUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIdentityUserMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIdentityUser>>>
    export type PostMeIdentityUserMutationBody = AuthUserRequestOVH
    export type PostMeIdentityUserMutationError = unknown

    /**
 * @summary Create a new IAM user
 */
export const usePostMeIdentityUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUser>>, TError,{data: AuthUserRequestOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIdentityUser>>,
        TError,
        {data: AuthUserRequestOVH},
        TContext
      > => {

      const mutationOptions = getPostMeIdentityUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete an IAM user
 */
export const deleteMeIdentityUserUser = (
    user: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/user/${user}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeIdentityUserUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityUserUser>>, TError,{user: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityUserUser>>, TError,{user: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeIdentityUserUser>>, {user: string}> = (props) => {
          const {user} = props ?? {};

          return  deleteMeIdentityUserUser(user,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeIdentityUserUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeIdentityUserUser>>>
    
    export type DeleteMeIdentityUserUserMutationError = unknown

    /**
 * @summary Delete an IAM user
 */
export const useDeleteMeIdentityUserUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIdentityUserUser>>, TError,{user: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeIdentityUserUser>>,
        TError,
        {user: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeIdentityUserUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an IAM user
 */
export const getMeIdentityUserUser = (
    user: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuthUserOVH>(
      {url: `/me/identity/user/${user}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIdentityUserUserQueryKey = (user: string,) => {
    return [`/me/identity/user/${user}`] as const;
    }

    
export const getGetMeIdentityUserUserQueryOptions = <TData = Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError = unknown>(user: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIdentityUserUserQueryKey(user);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIdentityUserUser>>> = ({ signal }) => getMeIdentityUserUser(user, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(user), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIdentityUserUserQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIdentityUserUser>>>
export type GetMeIdentityUserUserQueryError = unknown


export function useGetMeIdentityUserUser<TData = Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError = unknown>(
 user: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityUserUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityUserUser<TData = Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError = unknown>(
 user: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIdentityUserUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIdentityUserUser<TData = Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError = unknown>(
 user: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an IAM user
 */

export function useGetMeIdentityUserUser<TData = Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError = unknown>(
 user: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIdentityUserUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIdentityUserUserQueryOptions(user,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter an IAM user
 */
export const putMeIdentityUserUser = (
    user: string,
    authUserOVH: NonReadonly<AuthUserOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/user/${user}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authUserOVH
    },
      options);
    }
  


export const getPutMeIdentityUserUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityUserUser>>, TError,{user: string;data: NonReadonly<AuthUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityUserUser>>, TError,{user: string;data: NonReadonly<AuthUserOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeIdentityUserUser>>, {user: string;data: NonReadonly<AuthUserOVH>}> = (props) => {
          const {user,data} = props ?? {};

          return  putMeIdentityUserUser(user,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeIdentityUserUserMutationResult = NonNullable<Awaited<ReturnType<typeof putMeIdentityUserUser>>>
    export type PutMeIdentityUserUserMutationBody = NonReadonly<AuthUserOVH>
    export type PutMeIdentityUserUserMutationError = unknown

    /**
 * @summary Alter an IAM user
 */
export const usePutMeIdentityUserUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIdentityUserUser>>, TError,{user: string;data: NonReadonly<AuthUserOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeIdentityUserUser>>,
        TError,
        {user: string;data: NonReadonly<AuthUserOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeIdentityUserUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Disable this user
 */
export const postMeIdentityUserUserDisable = (
    user: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/user/${user}/disable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeIdentityUserUserDisableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUserUserDisable>>, TError,{user: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUserUserDisable>>, TError,{user: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIdentityUserUserDisable>>, {user: string}> = (props) => {
          const {user} = props ?? {};

          return  postMeIdentityUserUserDisable(user,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIdentityUserUserDisableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIdentityUserUserDisable>>>
    
    export type PostMeIdentityUserUserDisableMutationError = unknown

    /**
 * @summary Disable this user
 */
export const usePostMeIdentityUserUserDisable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUserUserDisable>>, TError,{user: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIdentityUserUserDisable>>,
        TError,
        {user: string},
        TContext
      > => {

      const mutationOptions = getPostMeIdentityUserUserDisableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Enable this user
 */
export const postMeIdentityUserUserEnable = (
    user: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/identity/user/${user}/enable`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeIdentityUserUserEnableMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUserUserEnable>>, TError,{user: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUserUserEnable>>, TError,{user: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIdentityUserUserEnable>>, {user: string}> = (props) => {
          const {user} = props ?? {};

          return  postMeIdentityUserUserEnable(user,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIdentityUserUserEnableMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIdentityUserUserEnable>>>
    
    export type PostMeIdentityUserUserEnableMutationError = unknown

    /**
 * @summary Enable this user
 */
export const usePostMeIdentityUserUserEnable = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIdentityUserUserEnable>>, TError,{user: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIdentityUserUserEnable>>,
        TError,
        {user: string},
        TContext
      > => {

      const mutationOptions = getPostMeIdentityUserUserEnableMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all services you can migrate
 */
export const getMeIncidentSbgMigrateServices = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeIncidentServiceMigrationOVH[]>(
      {url: `/me/incident/sbg/migrateServices`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIncidentSbgMigrateServicesQueryKey = () => {
    return [`/me/incident/sbg/migrateServices`] as const;
    }

    
export const getGetMeIncidentSbgMigrateServicesQueryOptions = <TData = Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIncidentSbgMigrateServicesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>> = ({ signal }) => getMeIncidentSbgMigrateServices(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIncidentSbgMigrateServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>>
export type GetMeIncidentSbgMigrateServicesQueryError = unknown


export function useGetMeIncidentSbgMigrateServices<TData = Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIncidentSbgMigrateServices<TData = Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIncidentSbgMigrateServices<TData = Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all services you can migrate
 */

export function useGetMeIncidentSbgMigrateServices<TData = Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIncidentSbgMigrateServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIncidentSbgMigrateServicesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for impacted services migration
 */
export const postMeIncidentSbgMigrateServices = (
    meIncidentMigrateServicesOVH: MeIncidentMigrateServicesOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeIncidentOrderOVH>(
      {url: `/me/incident/sbg/migrateServices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meIncidentMigrateServicesOVH, signal
    },
      options);
    }
  


export const getPostMeIncidentSbgMigrateServicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIncidentSbgMigrateServices>>, TError,{data: MeIncidentMigrateServicesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIncidentSbgMigrateServices>>, TError,{data: MeIncidentMigrateServicesOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIncidentSbgMigrateServices>>, {data: MeIncidentMigrateServicesOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeIncidentSbgMigrateServices(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIncidentSbgMigrateServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIncidentSbgMigrateServices>>>
    export type PostMeIncidentSbgMigrateServicesMutationBody = MeIncidentMigrateServicesOVH
    export type PostMeIncidentSbgMigrateServicesMutationError = unknown

    /**
 * @summary Ask for impacted services migration
 */
export const usePostMeIncidentSbgMigrateServices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIncidentSbgMigrateServices>>, TError,{data: MeIncidentMigrateServicesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIncidentSbgMigrateServices>>,
        TError,
        {data: MeIncidentMigrateServicesOVH},
        TContext
      > => {

      const mutationOptions = getPostMeIncidentSbgMigrateServicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get your insight access token
 */
export const getMeInsight = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeInsightAccessOVH>(
      {url: `/me/insight`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInsightQueryKey = () => {
    return [`/me/insight`] as const;
    }

    
export const getGetMeInsightQueryOptions = <TData = Awaited<ReturnType<typeof getMeInsight>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInsight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInsightQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInsight>>> = ({ signal }) => getMeInsight(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInsight>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInsightQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInsight>>>
export type GetMeInsightQueryError = unknown


export function useGetMeInsight<TData = Awaited<ReturnType<typeof getMeInsight>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInsight>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInsight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInsight<TData = Awaited<ReturnType<typeof getMeInsight>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInsight>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInsight>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInsight<TData = Awaited<ReturnType<typeof getMeInsight>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInsight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get your insight access token
 */

export function useGetMeInsight<TData = Awaited<ReturnType<typeof getMeInsight>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInsight>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInsightQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Your customized operating system installation templates
 */
export const getMeInstallationTemplate = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/installationTemplate`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateQueryKey = () => {
    return [`/me/installationTemplate`] as const;
    }

    
export const getGetMeInstallationTemplateQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplate>>> = ({ signal }) => getMeInstallationTemplate(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplate>>>
export type GetMeInstallationTemplateQueryError = unknown


export function useGetMeInstallationTemplate<TData = Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplate<TData = Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplate<TData = Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Your customized operating system installation templates
 */

export function useGetMeInstallationTemplate<TData = Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplate>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a template
 */
export const postMeInstallationTemplate = (
    postMeInstallationTemplateBody: PostMeInstallationTemplateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeInstallationTemplateBody, signal
    },
      options);
    }
  


export const getPostMeInstallationTemplateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplate>>, TError,{data: PostMeInstallationTemplateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplate>>, TError,{data: PostMeInstallationTemplateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeInstallationTemplate>>, {data: PostMeInstallationTemplateBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeInstallationTemplate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeInstallationTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeInstallationTemplate>>>
    export type PostMeInstallationTemplateMutationBody = PostMeInstallationTemplateBody
    export type PostMeInstallationTemplateMutationError = unknown

    /**
 * @summary Create a template
 */
export const usePostMeInstallationTemplate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplate>>, TError,{data: PostMeInstallationTemplateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeInstallationTemplate>>,
        TError,
        {data: PostMeInstallationTemplateBody},
        TContext
      > => {

      const mutationOptions = getPostMeInstallationTemplateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this template
 */
export const deleteMeInstallationTemplateTemplateName = (
    templateName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeInstallationTemplateTemplateNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateName>>, TError,{templateName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateName>>, TError,{templateName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateName>>, {templateName: string}> = (props) => {
          const {templateName} = props ?? {};

          return  deleteMeInstallationTemplateTemplateName(templateName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeInstallationTemplateTemplateNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateName>>>
    
    export type DeleteMeInstallationTemplateTemplateNameMutationError = unknown

    /**
 * @summary Remove this template
 */
export const useDeleteMeInstallationTemplateTemplateName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateName>>, TError,{templateName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateName>>,
        TError,
        {templateName: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeInstallationTemplateTemplateNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeInstallationTemplateTemplateName = (
    templateName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateTemplatesOVH>(
      {url: `/me/installationTemplate/${templateName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNameQueryKey = (templateName: string,) => {
    return [`/me/installationTemplate/${templateName}`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError = unknown>(templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNameQueryKey(templateName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>> = ({ signal }) => getMeInstallationTemplateTemplateName(templateName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>>
export type GetMeInstallationTemplateTemplateNameQueryError = unknown


export function useGetMeInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeInstallationTemplateTemplateName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNameQueryOptions(templateName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this template
 */
export const putMeInstallationTemplateTemplateName = (
    templateName: string,
    dedicatedInstallationTemplateTemplatesOVH: NonReadonly<DedicatedInstallationTemplateTemplatesOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedInstallationTemplateTemplatesOVH
    },
      options);
    }
  


export const getPutMeInstallationTemplateTemplateNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateName>>, TError,{templateName: string;data: NonReadonly<DedicatedInstallationTemplateTemplatesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateName>>, TError,{templateName: string;data: NonReadonly<DedicatedInstallationTemplateTemplatesOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateName>>, {templateName: string;data: NonReadonly<DedicatedInstallationTemplateTemplatesOVH>}> = (props) => {
          const {templateName,data} = props ?? {};

          return  putMeInstallationTemplateTemplateName(templateName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeInstallationTemplateTemplateNameMutationResult = NonNullable<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateName>>>
    export type PutMeInstallationTemplateTemplateNameMutationBody = NonReadonly<DedicatedInstallationTemplateTemplatesOVH>
    export type PutMeInstallationTemplateTemplateNameMutationError = unknown

    /**
 * @summary Alter this template
 */
export const usePutMeInstallationTemplateTemplateName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateName>>, TError,{templateName: string;data: NonReadonly<DedicatedInstallationTemplateTemplatesOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeInstallationTemplateTemplateName>>,
        TError,
        {templateName: string;data: NonReadonly<DedicatedInstallationTemplateTemplatesOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeInstallationTemplateTemplateNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check the integrity of this template
 */
export const postMeInstallationTemplateTemplateNameCheckIntegrity = (
    templateName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/checkIntegrity`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeInstallationTemplateTemplateNameCheckIntegrityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNameCheckIntegrity>>, TError,{templateName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNameCheckIntegrity>>, TError,{templateName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNameCheckIntegrity>>, {templateName: string}> = (props) => {
          const {templateName} = props ?? {};

          return  postMeInstallationTemplateTemplateNameCheckIntegrity(templateName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeInstallationTemplateTemplateNameCheckIntegrityMutationResult = NonNullable<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNameCheckIntegrity>>>
    
    export type PostMeInstallationTemplateTemplateNameCheckIntegrityMutationError = unknown

    /**
 * @summary Check the integrity of this template
 */
export const usePostMeInstallationTemplateTemplateNameCheckIntegrity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNameCheckIntegrity>>, TError,{templateName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNameCheckIntegrity>>,
        TError,
        {templateName: string},
        TContext
      > => {

      const mutationOptions = getPostMeInstallationTemplateTemplateNameCheckIntegrityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Partitioning schemes available on this template
 */
export const getMeInstallationTemplateTemplateNamePartitionScheme = (
    templateName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNamePartitionSchemeQueryKey = (templateName: string,) => {
    return [`/me/installationTemplate/${templateName}/partitionScheme`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNamePartitionSchemeQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNamePartitionSchemeQueryKey(templateName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>> = ({ signal }) => getMeInstallationTemplateTemplateNamePartitionScheme(templateName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNamePartitionSchemeQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>>
export type GetMeInstallationTemplateTemplateNamePartitionSchemeQueryError = unknown


export function useGetMeInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Partitioning schemes available on this template
 */

export function useGetMeInstallationTemplateTemplateNamePartitionScheme<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError = unknown>(
 templateName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionScheme>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNamePartitionSchemeQueryOptions(templateName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a scheme of partition
 */
export const postMeInstallationTemplateTemplateNamePartitionScheme = (
    templateName: string,
    postMeInstallationTemplateTemplateNamePartitionSchemeBody: PostMeInstallationTemplateTemplateNamePartitionSchemeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeInstallationTemplateTemplateNamePartitionSchemeBody, signal
    },
      options);
    }
  


export const getPostMeInstallationTemplateTemplateNamePartitionSchemeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionScheme>>, TError,{templateName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionScheme>>, TError,{templateName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionScheme>>, {templateName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeBody}> = (props) => {
          const {templateName,data} = props ?? {};

          return  postMeInstallationTemplateTemplateNamePartitionScheme(templateName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeInstallationTemplateTemplateNamePartitionSchemeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionScheme>>>
    export type PostMeInstallationTemplateTemplateNamePartitionSchemeMutationBody = PostMeInstallationTemplateTemplateNamePartitionSchemeBody
    export type PostMeInstallationTemplateTemplateNamePartitionSchemeMutationError = unknown

    /**
 * @summary Add a scheme of partition
 */
export const usePostMeInstallationTemplateTemplateNamePartitionScheme = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionScheme>>, TError,{templateName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionScheme>>,
        TError,
        {templateName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeBody},
        TContext
      > => {

      const mutationOptions = getPostMeInstallationTemplateTemplateNamePartitionSchemeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this scheme of partition
 */
export const deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError,{templateName: string;schemeName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError,{templateName: string;schemeName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, {templateName: string;schemeName: string}> = (props) => {
          const {templateName,schemeName} = props ?? {};

          return  deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName(templateName,schemeName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>>
    
    export type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationError = unknown

    /**
 * @summary Remove this scheme of partition
 */
export const useDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError,{templateName: string;schemeName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>,
        TError,
        {templateName: string;schemeName: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateTemplatePartitioningSchemesOVH>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryKey = (templateName: string,
    schemeName: string,) => {
    return [`/me/installationTemplate/${templateName}/partitionScheme/${schemeName}`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryKey(templateName,schemeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>> = ({ signal }) => getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName(templateName,schemeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>>
export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryError = unknown


export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameQueryOptions(templateName,schemeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this scheme of partition
 */
export const putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName = (
    templateName: string,
    schemeName: string,
    dedicatedInstallationTemplateTemplatePartitioningSchemesOVH: DedicatedInstallationTemplateTemplatePartitioningSchemesOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedInstallationTemplateTemplatePartitioningSchemesOVH
    },
      options);
    }
  


export const getPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError,{templateName: string;schemeName: string;data: DedicatedInstallationTemplateTemplatePartitioningSchemesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError,{templateName: string;schemeName: string;data: DedicatedInstallationTemplateTemplatePartitioningSchemesOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, {templateName: string;schemeName: string;data: DedicatedInstallationTemplateTemplatePartitioningSchemesOVH}> = (props) => {
          const {templateName,schemeName,data} = props ?? {};

          return  putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName(templateName,schemeName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationResult = NonNullable<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>>
    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationBody = DedicatedInstallationTemplateTemplatePartitioningSchemesOVH
    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationError = unknown

    /**
 * @summary Alter this scheme of partition
 */
export const usePutMeInstallationTemplateTemplateNamePartitionSchemeSchemeName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>, TError,{templateName: string;schemeName: string;data: DedicatedInstallationTemplateTemplatePartitioningSchemesOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeName>>,
        TError,
        {templateName: string;schemeName: string;data: DedicatedInstallationTemplateTemplatePartitioningSchemesOVH},
        TContext
      > => {

      const mutationOptions = getPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Hardware RAIDs defined in this partitioning scheme
 */
export const getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryKey = (templateName: string,
    schemeName: string,) => {
    return [`/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryKey(templateName,schemeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>> = ({ signal }) => getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid(templateName,schemeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>>
export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryError = unknown


export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Hardware RAIDs defined in this partitioning scheme
 */

export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidQueryOptions(templateName,schemeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an hardware RAID in this partitioning scheme
 */
export const postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid = (
    templateName: string,
    schemeName: string,
    postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody, signal
    },
      options);
    }
  


export const getPostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError,{templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError,{templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, {templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody}> = (props) => {
          const {templateName,schemeName,data} = props ?? {};

          return  postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid(templateName,schemeName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidMutationResult = NonNullable<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>>
    export type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidMutationBody = PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody
    export type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidMutationError = unknown

    /**
 * @summary Add an hardware RAID in this partitioning scheme
 */
export const usePostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>, TError,{templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid>>,
        TError,
        {templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidBody},
        TContext
      > => {

      const mutationOptions = getPostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this RAID
 */
export const deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName = (
    templateName: string,
    schemeName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid/${name}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError,{templateName: string;schemeName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError,{templateName: string;schemeName: string;name: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, {templateName: string;schemeName: string;name: string}> = (props) => {
          const {templateName,schemeName,name} = props ?? {};

          return  deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(templateName,schemeName,name,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>>
    
    export type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationError = unknown

    /**
 * @summary Remove this RAID
 */
export const useDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError,{templateName: string;schemeName: string;name: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>,
        TError,
        {templateName: string;schemeName: string;name: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName = (
    templateName: string,
    schemeName: string,
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateHardwareRaidOVH>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryKey = (templateName: string,
    schemeName: string,
    name: string,) => {
    return [`/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid/${name}`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryKey(templateName,schemeName,name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>> = ({ signal }) => getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(templateName,schemeName,name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName && name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>>
export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryError = unknown


export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameQueryOptions(templateName,schemeName,name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName = (
    templateName: string,
    schemeName: string,
    name: string,
    dedicatedInstallationTemplateHardwareRaidOVH: DedicatedInstallationTemplateHardwareRaidOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/hardwareRaid/${name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedInstallationTemplateHardwareRaidOVH
    },
      options);
    }
  


export const getPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError,{templateName: string;schemeName: string;name: string;data: DedicatedInstallationTemplateHardwareRaidOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError,{templateName: string;schemeName: string;name: string;data: DedicatedInstallationTemplateHardwareRaidOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, {templateName: string;schemeName: string;name: string;data: DedicatedInstallationTemplateHardwareRaidOVH}> = (props) => {
          const {templateName,schemeName,name,data} = props ?? {};

          return  putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(templateName,schemeName,name,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationResult = NonNullable<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>>
    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationBody = DedicatedInstallationTemplateHardwareRaidOVH
    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>, TError,{templateName: string;schemeName: string;name: string;data: DedicatedInstallationTemplateHardwareRaidOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName>>,
        TError,
        {templateName: string;schemeName: string;name: string;data: DedicatedInstallationTemplateHardwareRaidOVH},
        TContext
      > => {

      const mutationOptions = getPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Partitions defined in this partitioning scheme
 */
export const getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition = (
    templateName: string,
    schemeName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryKey = (templateName: string,
    schemeName: string,) => {
    return [`/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryKey(templateName,schemeName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>> = ({ signal }) => getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition(templateName,schemeName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>>
export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryError = unknown


export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Partitions defined in this partitioning scheme
 */

export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError = unknown>(
 templateName: string,
    schemeName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionQueryOptions(templateName,schemeName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a partition in this partitioning scheme
 */
export const postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition = (
    templateName: string,
    schemeName: string,
    postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody, signal
    },
      options);
    }
  


export const getPostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError,{templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError,{templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, {templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody}> = (props) => {
          const {templateName,schemeName,data} = props ?? {};

          return  postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition(templateName,schemeName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>>
    export type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMutationBody = PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody
    export type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMutationError = unknown

    /**
 * @summary Add a partition in this partitioning scheme
 */
export const usePostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>, TError,{templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition>>,
        TError,
        {templateName: string;schemeName: string;data: PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionBody},
        TContext
      > => {

      const mutationOptions = getPostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this partition
 */
export const deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint = (
    templateName: string,
    schemeName: string,
    mountpoint: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition/${mountpoint}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError,{templateName: string;schemeName: string;mountpoint: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError,{templateName: string;schemeName: string;mountpoint: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, {templateName: string;schemeName: string;mountpoint: string}> = (props) => {
          const {templateName,schemeName,mountpoint} = props ?? {};

          return  deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(templateName,schemeName,mountpoint,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>>
    
    export type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationError = unknown

    /**
 * @summary Remove this partition
 */
export const useDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError,{templateName: string;schemeName: string;mountpoint: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>,
        TError,
        {templateName: string;schemeName: string;mountpoint: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint = (
    templateName: string,
    schemeName: string,
    mountpoint: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedInstallationTemplateTemplatePartitionsOVH>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition/${mountpoint}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryKey = (templateName: string,
    schemeName: string,
    mountpoint: string,) => {
    return [`/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition/${mountpoint}`] as const;
    }

    
export const getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryOptions = <TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryKey(templateName,schemeName,mountpoint);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>> = ({ signal }) => getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(templateName,schemeName,mountpoint, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateName && schemeName && mountpoint), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryResult = NonNullable<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>>
export type GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryError = unknown


export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint<TData = Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError = unknown>(
 templateName: string,
    schemeName: string,
    mountpoint: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointQueryOptions(templateName,schemeName,mountpoint,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this partition
 */
export const putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint = (
    templateName: string,
    schemeName: string,
    mountpoint: string,
    dedicatedInstallationTemplateTemplatePartitionsOVH: DedicatedInstallationTemplateTemplatePartitionsOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/installationTemplate/${templateName}/partitionScheme/${schemeName}/partition/${mountpoint}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedInstallationTemplateTemplatePartitionsOVH
    },
      options);
    }
  


export const getPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError,{templateName: string;schemeName: string;mountpoint: string;data: DedicatedInstallationTemplateTemplatePartitionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError,{templateName: string;schemeName: string;mountpoint: string;data: DedicatedInstallationTemplateTemplatePartitionsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, {templateName: string;schemeName: string;mountpoint: string;data: DedicatedInstallationTemplateTemplatePartitionsOVH}> = (props) => {
          const {templateName,schemeName,mountpoint,data} = props ?? {};

          return  putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(templateName,schemeName,mountpoint,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationResult = NonNullable<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>>
    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationBody = DedicatedInstallationTemplateTemplatePartitionsOVH
    export type PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationError = unknown

    /**
 * @summary Alter this partition
 */
export const usePutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>, TError,{templateName: string;schemeName: string;mountpoint: string;data: DedicatedInstallationTemplateTemplatePartitionsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint>>,
        TError,
        {templateName: string;schemeName: string;mountpoint: string;data: DedicatedInstallationTemplateTemplatePartitionsOVH},
        TContext
      > => {

      const mutationOptions = getPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of organisations
 */
export const getMeIpOrganisation = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/ipOrganisation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIpOrganisationQueryKey = () => {
    return [`/me/ipOrganisation`] as const;
    }

    
export const getGetMeIpOrganisationQueryOptions = <TData = Awaited<ReturnType<typeof getMeIpOrganisation>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIpOrganisationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIpOrganisation>>> = ({ signal }) => getMeIpOrganisation(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIpOrganisationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIpOrganisation>>>
export type GetMeIpOrganisationQueryError = unknown


export function useGetMeIpOrganisation<TData = Awaited<ReturnType<typeof getMeIpOrganisation>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIpOrganisation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIpOrganisation<TData = Awaited<ReturnType<typeof getMeIpOrganisation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIpOrganisation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIpOrganisation<TData = Awaited<ReturnType<typeof getMeIpOrganisation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of organisations
 */

export function useGetMeIpOrganisation<TData = Awaited<ReturnType<typeof getMeIpOrganisation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIpOrganisationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add an organisation
 */
export const postMeIpOrganisation = (
    postMeIpOrganisationBody: PostMeIpOrganisationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/ipOrganisation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeIpOrganisationBody, signal
    },
      options);
    }
  


export const getPostMeIpOrganisationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIpOrganisation>>, TError,{data: PostMeIpOrganisationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeIpOrganisation>>, TError,{data: PostMeIpOrganisationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeIpOrganisation>>, {data: PostMeIpOrganisationBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeIpOrganisation(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeIpOrganisationMutationResult = NonNullable<Awaited<ReturnType<typeof postMeIpOrganisation>>>
    export type PostMeIpOrganisationMutationBody = PostMeIpOrganisationBody
    export type PostMeIpOrganisationMutationError = unknown

    /**
 * @summary Add an organisation
 */
export const usePostMeIpOrganisation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeIpOrganisation>>, TError,{data: PostMeIpOrganisationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeIpOrganisation>>,
        TError,
        {data: PostMeIpOrganisationBody},
        TContext
      > => {

      const mutationOptions = getPostMeIpOrganisationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete this organisation
 */
export const deleteMeIpOrganisationOrganisationId = (
    organisationId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/ipOrganisation/${organisationId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeIpOrganisationOrganisationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIpOrganisationOrganisationId>>, TError,{organisationId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeIpOrganisationOrganisationId>>, TError,{organisationId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeIpOrganisationOrganisationId>>, {organisationId: string}> = (props) => {
          const {organisationId} = props ?? {};

          return  deleteMeIpOrganisationOrganisationId(organisationId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeIpOrganisationOrganisationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeIpOrganisationOrganisationId>>>
    
    export type DeleteMeIpOrganisationOrganisationIdMutationError = unknown

    /**
 * @summary Delete this organisation
 */
export const useDeleteMeIpOrganisationOrganisationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeIpOrganisationOrganisationId>>, TError,{organisationId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeIpOrganisationOrganisationId>>,
        TError,
        {organisationId: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeIpOrganisationOrganisationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeIpOrganisationOrganisationId = (
    organisationId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleIpv4OrgOVH>(
      {url: `/me/ipOrganisation/${organisationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeIpOrganisationOrganisationIdQueryKey = (organisationId: string,) => {
    return [`/me/ipOrganisation/${organisationId}`] as const;
    }

    
export const getGetMeIpOrganisationOrganisationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError = unknown>(organisationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeIpOrganisationOrganisationIdQueryKey(organisationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>> = ({ signal }) => getMeIpOrganisationOrganisationId(organisationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organisationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeIpOrganisationOrganisationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>>
export type GetMeIpOrganisationOrganisationIdQueryError = unknown


export function useGetMeIpOrganisationOrganisationId<TData = Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError = unknown>(
 organisationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIpOrganisationOrganisationId<TData = Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError = unknown>(
 organisationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeIpOrganisationOrganisationId<TData = Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError = unknown>(
 organisationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeIpOrganisationOrganisationId<TData = Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError = unknown>(
 organisationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeIpOrganisationOrganisationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeIpOrganisationOrganisationIdQueryOptions(organisationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeIpOrganisationOrganisationId = (
    organisationId: string,
    nichandleIpv4OrgOVH: NonReadonly<NichandleIpv4OrgOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/ipOrganisation/${organisationId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleIpv4OrgOVH
    },
      options);
    }
  


export const getPutMeIpOrganisationOrganisationIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIpOrganisationOrganisationId>>, TError,{organisationId: string;data: NonReadonly<NichandleIpv4OrgOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeIpOrganisationOrganisationId>>, TError,{organisationId: string;data: NonReadonly<NichandleIpv4OrgOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeIpOrganisationOrganisationId>>, {organisationId: string;data: NonReadonly<NichandleIpv4OrgOVH>}> = (props) => {
          const {organisationId,data} = props ?? {};

          return  putMeIpOrganisationOrganisationId(organisationId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeIpOrganisationOrganisationIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeIpOrganisationOrganisationId>>>
    export type PutMeIpOrganisationOrganisationIdMutationBody = NonReadonly<NichandleIpv4OrgOVH>
    export type PutMeIpOrganisationOrganisationIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeIpOrganisationOrganisationId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeIpOrganisationOrganisationId>>, TError,{organisationId: string;data: NonReadonly<NichandleIpv4OrgOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeIpOrganisationOrganisationId>>,
        TError,
        {organisationId: string;data: NonReadonly<NichandleIpv4OrgOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeIpOrganisationOrganisationIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get your audit logs
 */
export const getMeLogsAudit = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<AuditLogOVH[]>(
      {url: `/me/logs/audit`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeLogsAuditQueryKey = () => {
    return [`/me/logs/audit`] as const;
    }

    
export const getGetMeLogsAuditQueryOptions = <TData = Awaited<ReturnType<typeof getMeLogsAudit>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAudit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeLogsAuditQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeLogsAudit>>> = ({ signal }) => getMeLogsAudit(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAudit>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeLogsAuditQueryResult = NonNullable<Awaited<ReturnType<typeof getMeLogsAudit>>>
export type GetMeLogsAuditQueryError = unknown


export function useGetMeLogsAudit<TData = Awaited<ReturnType<typeof getMeLogsAudit>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAudit>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAudit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAudit<TData = Awaited<ReturnType<typeof getMeLogsAudit>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAudit>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAudit>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAudit<TData = Awaited<ReturnType<typeof getMeLogsAudit>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAudit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get your audit logs
 */

export function useGetMeLogsAudit<TData = Awaited<ReturnType<typeof getMeLogsAudit>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAudit>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeLogsAuditQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available log kinds
 */
export const getMeLogsAuditLogKind = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/logs/audit/log/kind`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeLogsAuditLogKindQueryKey = () => {
    return [`/me/logs/audit/log/kind`] as const;
    }

    
export const getGetMeLogsAuditLogKindQueryOptions = <TData = Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeLogsAuditLogKindQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>> = ({ signal }) => getMeLogsAuditLogKind(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeLogsAuditLogKindQueryResult = NonNullable<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>>
export type GetMeLogsAuditLogKindQueryError = unknown


export function useGetMeLogsAuditLogKind<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogKind<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogKind>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogKind<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available log kinds
 */

export function useGetMeLogsAuditLogKind<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKind>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeLogsAuditLogKindQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a log kind
 */
export const getMeLogsAuditLogKindName = (
    name: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogKindOVH>(
      {url: `/me/logs/audit/log/kind/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeLogsAuditLogKindNameQueryKey = (name: string,) => {
    return [`/me/logs/audit/log/kind/${name}`] as const;
    }

    
export const getGetMeLogsAuditLogKindNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError = unknown>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeLogsAuditLogKindNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>> = ({ signal }) => getMeLogsAuditLogKindName(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeLogsAuditLogKindNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>>
export type GetMeLogsAuditLogKindNameQueryError = unknown


export function useGetMeLogsAuditLogKindName<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError = unknown>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogKindName<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogKindName<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a log kind
 */

export function useGetMeLogsAuditLogKindName<TData = Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogKindName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeLogsAuditLogKindNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List subscription IDs for a cluster
 */
export const getMeLogsAuditLogSubscription = (
    params?: GetMeLogsAuditLogSubscriptionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/logs/audit/log/subscription`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeLogsAuditLogSubscriptionQueryKey = (params?: GetMeLogsAuditLogSubscriptionParams,) => {
    return [`/me/logs/audit/log/subscription`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeLogsAuditLogSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError = unknown>(params?: GetMeLogsAuditLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeLogsAuditLogSubscriptionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>> = ({ signal }) => getMeLogsAuditLogSubscription(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeLogsAuditLogSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>>
export type GetMeLogsAuditLogSubscriptionQueryError = unknown


export function useGetMeLogsAuditLogSubscription<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError = unknown>(
 params: undefined |  GetMeLogsAuditLogSubscriptionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogSubscription<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError = unknown>(
 params?: GetMeLogsAuditLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogSubscription<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError = unknown>(
 params?: GetMeLogsAuditLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List subscription IDs for a cluster
 */

export function useGetMeLogsAuditLogSubscription<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError = unknown>(
 params?: GetMeLogsAuditLogSubscriptionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeLogsAuditLogSubscriptionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const postMeLogsAuditLogSubscription = (
    dbaasLogsLogSubscriptionCreationOVH: DbaasLogsLogSubscriptionCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/me/logs/audit/log/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogSubscriptionCreationOVH, signal
    },
      options);
    }
  


export const getPostMeLogsAuditLogSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeLogsAuditLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeLogsAuditLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeLogsAuditLogSubscription>>, {data: DbaasLogsLogSubscriptionCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeLogsAuditLogSubscription(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeLogsAuditLogSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeLogsAuditLogSubscription>>>
    export type PostMeLogsAuditLogSubscriptionMutationBody = DbaasLogsLogSubscriptionCreationOVH
    export type PostMeLogsAuditLogSubscriptionMutationError = unknown

    /**
 * @summary Create a subscription from logs to a pre-existing LDP stream
 */
export const usePostMeLogsAuditLogSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeLogsAuditLogSubscription>>, TError,{data: DbaasLogsLogSubscriptionCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeLogsAuditLogSubscription>>,
        TError,
        {data: DbaasLogsLogSubscriptionCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeLogsAuditLogSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription
 */
export const deleteMeLogsAuditLogSubscriptionSubscriptionId = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionResponseOVH>(
      {url: `/me/logs/audit/log/subscription/${subscriptionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeLogsAuditLogSubscriptionSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeLogsAuditLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeLogsAuditLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeLogsAuditLogSubscriptionSubscriptionId>>, {subscriptionId: string}> = (props) => {
          const {subscriptionId} = props ?? {};

          return  deleteMeLogsAuditLogSubscriptionSubscriptionId(subscriptionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeLogsAuditLogSubscriptionSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeLogsAuditLogSubscriptionSubscriptionId>>>
    
    export type DeleteMeLogsAuditLogSubscriptionSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription
 */
export const useDeleteMeLogsAuditLogSubscriptionSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeLogsAuditLogSubscriptionSubscriptionId>>, TError,{subscriptionId: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeLogsAuditLogSubscriptionSubscriptionId>>,
        TError,
        {subscriptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeLogsAuditLogSubscriptionSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get subscription details
 */
export const getMeLogsAuditLogSubscriptionSubscriptionId = (
    subscriptionId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsLogSubscriptionOVH>(
      {url: `/me/logs/audit/log/subscription/${subscriptionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeLogsAuditLogSubscriptionSubscriptionIdQueryKey = (subscriptionId: string,) => {
    return [`/me/logs/audit/log/subscription/${subscriptionId}`] as const;
    }

    
export const getGetMeLogsAuditLogSubscriptionSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError = unknown>(subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeLogsAuditLogSubscriptionSubscriptionIdQueryKey(subscriptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>> = ({ signal }) => getMeLogsAuditLogSubscriptionSubscriptionId(subscriptionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(subscriptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeLogsAuditLogSubscriptionSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>>
export type GetMeLogsAuditLogSubscriptionSubscriptionIdQueryError = unknown


export function useGetMeLogsAuditLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeLogsAuditLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get subscription details
 */

export function useGetMeLogsAuditLogSubscriptionSubscriptionId<TData = Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError = unknown>(
 subscriptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeLogsAuditLogSubscriptionSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeLogsAuditLogSubscriptionSubscriptionIdQueryOptions(subscriptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate a temporary URL to retrieve logs
 */
export const postMeLogsAuditLogUrl = (
    dbaasLogsLogUrlCreationOVH: DbaasLogsLogUrlCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DbaasLogsTemporaryLogsLinkOVH>(
      {url: `/me/logs/audit/log/url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dbaasLogsLogUrlCreationOVH, signal
    },
      options);
    }
  


export const getPostMeLogsAuditLogUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeLogsAuditLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeLogsAuditLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeLogsAuditLogUrl>>, {data: DbaasLogsLogUrlCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeLogsAuditLogUrl(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeLogsAuditLogUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postMeLogsAuditLogUrl>>>
    export type PostMeLogsAuditLogUrlMutationBody = DbaasLogsLogUrlCreationOVH
    export type PostMeLogsAuditLogUrlMutationError = unknown

    /**
 * @summary Generate a temporary URL to retrieve logs
 */
export const usePostMeLogsAuditLogUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeLogsAuditLogUrl>>, TError,{data: DbaasLogsLogUrlCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeLogsAuditLogUrl>>,
        TError,
        {data: DbaasLogsLogUrlCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeLogsAuditLogUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of mailing list you can subscribe
 */
export const getMeMailingListAvailableLists = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/mailingList/availableLists`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMailingListAvailableListsQueryKey = () => {
    return [`/me/mailingList/availableLists`] as const;
    }

    
export const getGetMeMailingListAvailableListsQueryOptions = <TData = Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMailingListAvailableListsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>> = ({ signal }) => getMeMailingListAvailableLists(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMailingListAvailableListsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>>
export type GetMeMailingListAvailableListsQueryError = unknown


export function useGetMeMailingListAvailableLists<TData = Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMailingListAvailableLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMailingListAvailableLists<TData = Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMailingListAvailableLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMailingListAvailableLists<TData = Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of mailing list you can subscribe
 */

export function useGetMeMailingListAvailableLists<TData = Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMailingListAvailableLists>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMailingListAvailableListsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Subscribe an email to a restricted mailing list
 */
export const postMeMailingListSubscribe = (
    postMeMailingListSubscribeBody: PostMeMailingListSubscribeBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/mailingList/subscribe`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeMailingListSubscribeBody, signal
    },
      options);
    }
  


export const getPostMeMailingListSubscribeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeMailingListSubscribe>>, TError,{data: PostMeMailingListSubscribeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeMailingListSubscribe>>, TError,{data: PostMeMailingListSubscribeBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeMailingListSubscribe>>, {data: PostMeMailingListSubscribeBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeMailingListSubscribe(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeMailingListSubscribeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeMailingListSubscribe>>>
    export type PostMeMailingListSubscribeMutationBody = PostMeMailingListSubscribeBody
    export type PostMeMailingListSubscribeMutationError = unknown

    /**
 * @summary Subscribe an email to a restricted mailing list
 */
export const usePostMeMailingListSubscribe = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeMailingListSubscribe>>, TError,{data: PostMeMailingListSubscribeBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeMailingListSubscribe>>,
        TError,
        {data: PostMeMailingListSubscribeBody},
        TContext
      > => {

      const mutationOptions = getPostMeMailingListSubscribeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary For domain reseller, get current status of your manual payment mode migration
 */
export const getMeManualDomainPayment = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingManualDomainPaymentStatusOVH>(
      {url: `/me/manualDomainPayment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeManualDomainPaymentQueryKey = () => {
    return [`/me/manualDomainPayment`] as const;
    }

    
export const getGetMeManualDomainPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeManualDomainPaymentQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeManualDomainPayment>>> = ({ signal }) => getMeManualDomainPayment(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeManualDomainPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeManualDomainPayment>>>
export type GetMeManualDomainPaymentQueryError = unknown


export function useGetMeManualDomainPayment<TData = Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeManualDomainPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeManualDomainPayment<TData = Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeManualDomainPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeManualDomainPayment<TData = Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary For domain reseller, get current status of your manual payment mode migration
 */

export function useGetMeManualDomainPayment<TData = Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeManualDomainPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeManualDomainPaymentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary For domain reseller, request migration of all your domain name services to a manual payment mode,
 */
export const postMeManualDomainPayment = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/manualDomainPayment`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeManualDomainPaymentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeManualDomainPayment>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeManualDomainPayment>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeManualDomainPayment>>, void> = () => {
          

          return  postMeManualDomainPayment(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeManualDomainPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof postMeManualDomainPayment>>>
    
    export type PostMeManualDomainPaymentMutationError = unknown

    /**
 * @summary For domain reseller, request migration of all your domain name services to a manual payment mode,
 */
export const usePostMeManualDomainPayment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeManualDomainPayment>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeManualDomainPayment>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeManualDomainPaymentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve user marketing consent details
 */
export const getMeMarketing = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeMarketingConsentOVH>(
      {url: `/me/marketing`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMarketingQueryKey = () => {
    return [`/me/marketing`] as const;
    }

    
export const getGetMeMarketingQueryOptions = <TData = Awaited<ReturnType<typeof getMeMarketing>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMarketing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMarketingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMarketing>>> = ({ signal }) => getMeMarketing(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMarketing>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMarketingQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMarketing>>>
export type GetMeMarketingQueryError = unknown


export function useGetMeMarketing<TData = Awaited<ReturnType<typeof getMeMarketing>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMarketing>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMarketing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMarketing<TData = Awaited<ReturnType<typeof getMeMarketing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMarketing>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMarketing>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMarketing<TData = Awaited<ReturnType<typeof getMeMarketing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMarketing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve user marketing consent details
 */

export function useGetMeMarketing<TData = Awaited<ReturnType<typeof getMeMarketing>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMarketing>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMarketingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update user marketing consent
 */
export const putMeMarketing = (
    meMarketingConsentOVH: MeMarketingConsentOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MeMarketingConsentOVH>(
      {url: `/me/marketing`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meMarketingConsentOVH
    },
      options);
    }
  


export const getPutMeMarketingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeMarketing>>, TError,{data: MeMarketingConsentOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeMarketing>>, TError,{data: MeMarketingConsentOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeMarketing>>, {data: MeMarketingConsentOVH}> = (props) => {
          const {data} = props ?? {};

          return  putMeMarketing(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeMarketingMutationResult = NonNullable<Awaited<ReturnType<typeof putMeMarketing>>>
    export type PutMeMarketingMutationBody = MeMarketingConsentOVH
    export type PutMeMarketingMutationError = unknown

    /**
 * @summary Update user marketing consent
 */
export const usePutMeMarketing = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeMarketing>>, TError,{data: MeMarketingConsentOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeMarketing>>,
        TError,
        {data: MeMarketingConsentOVH},
        TContext
      > => {

      const mutationOptions = getPutMeMarketingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all country migrations
 */
export const getMeMigration = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/migration`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMigrationQueryKey = () => {
    return [`/me/migration`] as const;
    }

    
export const getGetMeMigrationQueryOptions = <TData = Awaited<ReturnType<typeof getMeMigration>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMigrationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMigration>>> = ({ signal }) => getMeMigration(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMigration>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMigrationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMigration>>>
export type GetMeMigrationQueryError = unknown


export function useGetMeMigration<TData = Awaited<ReturnType<typeof getMeMigration>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigration>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigration<TData = Awaited<ReturnType<typeof getMeMigration>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigration>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigration>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigration<TData = Awaited<ReturnType<typeof getMeMigration>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all country migrations
 */

export function useGetMeMigration<TData = Awaited<ReturnType<typeof getMeMigration>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigration>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMigrationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information about a country migration
 */
export const getMeMigrationMigrationId = (
    migrationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeMigrationOVH>(
      {url: `/me/migration/${migrationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMigrationMigrationIdQueryKey = (migrationId: number,) => {
    return [`/me/migration/${migrationId}`] as const;
    }

    
export const getGetMeMigrationMigrationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError = unknown>(migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMigrationMigrationIdQueryKey(migrationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMigrationMigrationId>>> = ({ signal }) => getMeMigrationMigrationId(migrationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(migrationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMigrationMigrationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMigrationMigrationId>>>
export type GetMeMigrationMigrationIdQueryError = unknown


export function useGetMeMigrationMigrationId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError = unknown>(
 migrationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError = unknown>(
 migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError = unknown>(
 migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about a country migration
 */

export function useGetMeMigrationMigrationId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError = unknown>(
 migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMigrationMigrationIdQueryOptions(migrationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve all contracts for a billing country migration
 */
export const getMeMigrationMigrationIdContract = (
    migrationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/migration/${migrationId}/contract`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMigrationMigrationIdContractQueryKey = (migrationId: number,) => {
    return [`/me/migration/${migrationId}/contract`] as const;
    }

    
export const getGetMeMigrationMigrationIdContractQueryOptions = <TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError = unknown>(migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMigrationMigrationIdContractQueryKey(migrationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>> = ({ signal }) => getMeMigrationMigrationIdContract(migrationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(migrationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMigrationMigrationIdContractQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>>
export type GetMeMigrationMigrationIdContractQueryError = unknown


export function useGetMeMigrationMigrationIdContract<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError = unknown>(
 migrationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationIdContract<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError = unknown>(
 migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationIdContract<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError = unknown>(
 migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all contracts for a billing country migration
 */

export function useGetMeMigrationMigrationIdContract<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError = unknown>(
 migrationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContract>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMigrationMigrationIdContractQueryOptions(migrationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve detail about a contract for a billing country migration
 */
export const getMeMigrationMigrationIdContractContractId = (
    migrationId: number,
    contractId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeMigrationContractOVH>(
      {url: `/me/migration/${migrationId}/contract/${contractId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMigrationMigrationIdContractContractIdQueryKey = (migrationId: number,
    contractId: number,) => {
    return [`/me/migration/${migrationId}/contract/${contractId}`] as const;
    }

    
export const getGetMeMigrationMigrationIdContractContractIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError = unknown>(migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMigrationMigrationIdContractContractIdQueryKey(migrationId,contractId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>> = ({ signal }) => getMeMigrationMigrationIdContractContractId(migrationId,contractId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(migrationId && contractId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMigrationMigrationIdContractContractIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>>
export type GetMeMigrationMigrationIdContractContractIdQueryError = unknown


export function useGetMeMigrationMigrationIdContractContractId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError = unknown>(
 migrationId: number,
    contractId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationIdContractContractId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError = unknown>(
 migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationIdContractContractId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError = unknown>(
 migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve detail about a contract for a billing country migration
 */

export function useGetMeMigrationMigrationIdContractContractId<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError = unknown>(
 migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMigrationMigrationIdContractContractIdQueryOptions(migrationId,contractId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accept contract
 */
export const postMeMigrationMigrationIdContractContractIdAccept = (
    migrationId: number,
    contractId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeAgreementsContractAgreementOVH>(
      {url: `/me/migration/${migrationId}/contract/${contractId}/accept`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeMigrationMigrationIdContractContractIdAcceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeMigrationMigrationIdContractContractIdAccept>>, TError,{migrationId: number;contractId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeMigrationMigrationIdContractContractIdAccept>>, TError,{migrationId: number;contractId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeMigrationMigrationIdContractContractIdAccept>>, {migrationId: number;contractId: number}> = (props) => {
          const {migrationId,contractId} = props ?? {};

          return  postMeMigrationMigrationIdContractContractIdAccept(migrationId,contractId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeMigrationMigrationIdContractContractIdAcceptMutationResult = NonNullable<Awaited<ReturnType<typeof postMeMigrationMigrationIdContractContractIdAccept>>>
    
    export type PostMeMigrationMigrationIdContractContractIdAcceptMutationError = unknown

    /**
 * @summary Accept contract
 */
export const usePostMeMigrationMigrationIdContractContractIdAccept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeMigrationMigrationIdContractContractIdAccept>>, TError,{migrationId: number;contractId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeMigrationMigrationIdContractContractIdAccept>>,
        TError,
        {migrationId: number;contractId: number},
        TContext
      > => {

      const mutationOptions = getPostMeMigrationMigrationIdContractContractIdAcceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve agreement for this contract
 */
export const getMeMigrationMigrationIdContractContractIdAgreement = (
    migrationId: number,
    contractId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeAgreementsContractAgreementOVH>(
      {url: `/me/migration/${migrationId}/contract/${contractId}/agreement`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeMigrationMigrationIdContractContractIdAgreementQueryKey = (migrationId: number,
    contractId: number,) => {
    return [`/me/migration/${migrationId}/contract/${contractId}/agreement`] as const;
    }

    
export const getGetMeMigrationMigrationIdContractContractIdAgreementQueryOptions = <TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError = unknown>(migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMigrationMigrationIdContractContractIdAgreementQueryKey(migrationId,contractId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>> = ({ signal }) => getMeMigrationMigrationIdContractContractIdAgreement(migrationId,contractId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(migrationId && contractId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMigrationMigrationIdContractContractIdAgreementQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>>
export type GetMeMigrationMigrationIdContractContractIdAgreementQueryError = unknown


export function useGetMeMigrationMigrationIdContractContractIdAgreement<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError = unknown>(
 migrationId: number,
    contractId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationIdContractContractIdAgreement<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError = unknown>(
 migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMigrationMigrationIdContractContractIdAgreement<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError = unknown>(
 migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve agreement for this contract
 */

export function useGetMeMigrationMigrationIdContractContractIdAgreement<TData = Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError = unknown>(
 migrationId: number,
    contractId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMigrationMigrationIdContractContractIdAgreement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMigrationMigrationIdContractContractIdAgreementQueryOptions(migrationId,contractId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve every email sent to you
 */
export const getMeNotificationEmailHistory = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/notification/email/history`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeNotificationEmailHistoryQueryKey = () => {
    return [`/me/notification/email/history`] as const;
    }

    
export const getGetMeNotificationEmailHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeNotificationEmailHistoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>> = ({ signal }) => getMeNotificationEmailHistory(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeNotificationEmailHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>>
export type GetMeNotificationEmailHistoryQueryError = unknown


export function useGetMeNotificationEmailHistory<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationEmailHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationEmailHistory<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationEmailHistory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationEmailHistory<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve every email sent to you
 */

export function useGetMeNotificationEmailHistory<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistory>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeNotificationEmailHistoryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve information about an email
 */
export const getMeNotificationEmailHistoryId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleEmailNotificationOVH>(
      {url: `/me/notification/email/history/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeNotificationEmailHistoryIdQueryKey = (id: number,) => {
    return [`/me/notification/email/history/${id}`] as const;
    }

    
export const getGetMeNotificationEmailHistoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeNotificationEmailHistoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>> = ({ signal }) => getMeNotificationEmailHistoryId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeNotificationEmailHistoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>>
export type GetMeNotificationEmailHistoryIdQueryError = unknown


export function useGetMeNotificationEmailHistoryId<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationEmailHistoryId<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationEmailHistoryId<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve information about an email
 */

export function useGetMeNotificationEmailHistoryId<TData = Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationEmailHistoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeNotificationEmailHistoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get data accuracy notification properties
 */
export const getMeNotificationGdprDataAccuracy = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NotificationGdprDataAccuracyOVH>(
      {url: `/me/notification/gdpr/dataAccuracy`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeNotificationGdprDataAccuracyQueryKey = () => {
    return [`/me/notification/gdpr/dataAccuracy`] as const;
    }

    
export const getGetMeNotificationGdprDataAccuracyQueryOptions = <TData = Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeNotificationGdprDataAccuracyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>> = ({ signal }) => getMeNotificationGdprDataAccuracy(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeNotificationGdprDataAccuracyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>>
export type GetMeNotificationGdprDataAccuracyQueryError = unknown


export function useGetMeNotificationGdprDataAccuracy<TData = Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationGdprDataAccuracy<TData = Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationGdprDataAccuracy<TData = Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get data accuracy notification properties
 */

export function useGetMeNotificationGdprDataAccuracy<TData = Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationGdprDataAccuracy>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeNotificationGdprDataAccuracyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of your SMS notifications
 */
export const getMeNotificationSms = (
    params?: GetMeNotificationSmsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/notification/sms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeNotificationSmsQueryKey = (params?: GetMeNotificationSmsParams,) => {
    return [`/me/notification/sms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeNotificationSmsQueryOptions = <TData = Awaited<ReturnType<typeof getMeNotificationSms>>, TError = unknown>(params?: GetMeNotificationSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeNotificationSmsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeNotificationSms>>> = ({ signal }) => getMeNotificationSms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeNotificationSmsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeNotificationSms>>>
export type GetMeNotificationSmsQueryError = unknown


export function useGetMeNotificationSms<TData = Awaited<ReturnType<typeof getMeNotificationSms>>, TError = unknown>(
 params: undefined |  GetMeNotificationSmsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationSms<TData = Awaited<ReturnType<typeof getMeNotificationSms>>, TError = unknown>(
 params?: GetMeNotificationSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationSms>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationSms<TData = Awaited<ReturnType<typeof getMeNotificationSms>>, TError = unknown>(
 params?: GetMeNotificationSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your SMS notifications
 */

export function useGetMeNotificationSms<TData = Awaited<ReturnType<typeof getMeNotificationSms>>, TError = unknown>(
 params?: GetMeNotificationSmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSms>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeNotificationSmsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a phone number
 */
export const postMeNotificationSms = (
    postMeNotificationSmsBody: PostMeNotificationSmsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/notification/sms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeNotificationSmsBody, signal
    },
      options);
    }
  


export const getPostMeNotificationSmsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSms>>, TError,{data: PostMeNotificationSmsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSms>>, TError,{data: PostMeNotificationSmsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeNotificationSms>>, {data: PostMeNotificationSmsBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeNotificationSms(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeNotificationSmsMutationResult = NonNullable<Awaited<ReturnType<typeof postMeNotificationSms>>>
    export type PostMeNotificationSmsMutationBody = PostMeNotificationSmsBody
    export type PostMeNotificationSmsMutationError = unknown

    /**
 * @summary Add a phone number
 */
export const usePostMeNotificationSms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSms>>, TError,{data: PostMeNotificationSmsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeNotificationSms>>,
        TError,
        {data: PostMeNotificationSmsBody},
        TContext
      > => {

      const mutationOptions = getPostMeNotificationSmsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this phone number
 */
export const deleteMeNotificationSmsPhoneNumber = (
    phoneNumber: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/notification/sms/${phoneNumber}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeNotificationSmsPhoneNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeNotificationSmsPhoneNumber>>, TError,{phoneNumber: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeNotificationSmsPhoneNumber>>, TError,{phoneNumber: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeNotificationSmsPhoneNumber>>, {phoneNumber: string}> = (props) => {
          const {phoneNumber} = props ?? {};

          return  deleteMeNotificationSmsPhoneNumber(phoneNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeNotificationSmsPhoneNumberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeNotificationSmsPhoneNumber>>>
    
    export type DeleteMeNotificationSmsPhoneNumberMutationError = unknown

    /**
 * @summary Remove this phone number
 */
export const useDeleteMeNotificationSmsPhoneNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeNotificationSmsPhoneNumber>>, TError,{phoneNumber: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeNotificationSmsPhoneNumber>>,
        TError,
        {phoneNumber: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeNotificationSmsPhoneNumberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeNotificationSmsPhoneNumber = (
    phoneNumber: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleNichandleSmsNotificationOVH>(
      {url: `/me/notification/sms/${phoneNumber}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeNotificationSmsPhoneNumberQueryKey = (phoneNumber: string,) => {
    return [`/me/notification/sms/${phoneNumber}`] as const;
    }

    
export const getGetMeNotificationSmsPhoneNumberQueryOptions = <TData = Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError = unknown>(phoneNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeNotificationSmsPhoneNumberQueryKey(phoneNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>> = ({ signal }) => getMeNotificationSmsPhoneNumber(phoneNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(phoneNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeNotificationSmsPhoneNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>>
export type GetMeNotificationSmsPhoneNumberQueryError = unknown


export function useGetMeNotificationSmsPhoneNumber<TData = Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError = unknown>(
 phoneNumber: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationSmsPhoneNumber<TData = Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError = unknown>(
 phoneNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeNotificationSmsPhoneNumber<TData = Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError = unknown>(
 phoneNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeNotificationSmsPhoneNumber<TData = Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError = unknown>(
 phoneNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeNotificationSmsPhoneNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeNotificationSmsPhoneNumberQueryOptions(phoneNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Send validation SMS
 */
export const postMeNotificationSmsPhoneNumberSendValidation = (
    phoneNumber: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/notification/sms/${phoneNumber}/sendValidation`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeNotificationSmsPhoneNumberSendValidationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberSendValidation>>, TError,{phoneNumber: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberSendValidation>>, TError,{phoneNumber: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberSendValidation>>, {phoneNumber: string}> = (props) => {
          const {phoneNumber} = props ?? {};

          return  postMeNotificationSmsPhoneNumberSendValidation(phoneNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeNotificationSmsPhoneNumberSendValidationMutationResult = NonNullable<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberSendValidation>>>
    
    export type PostMeNotificationSmsPhoneNumberSendValidationMutationError = unknown

    /**
 * @summary Send validation SMS
 */
export const usePostMeNotificationSmsPhoneNumberSendValidation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberSendValidation>>, TError,{phoneNumber: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberSendValidation>>,
        TError,
        {phoneNumber: string},
        TContext
      > => {

      const mutationOptions = getPostMeNotificationSmsPhoneNumberSendValidationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Validate your phone number
 */
export const postMeNotificationSmsPhoneNumberValidate = (
    phoneNumber: string,
    postMeNotificationSmsPhoneNumberValidateBody: PostMeNotificationSmsPhoneNumberValidateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/notification/sms/${phoneNumber}/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeNotificationSmsPhoneNumberValidateBody, signal
    },
      options);
    }
  


export const getPostMeNotificationSmsPhoneNumberValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberValidate>>, TError,{phoneNumber: string;data: PostMeNotificationSmsPhoneNumberValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberValidate>>, TError,{phoneNumber: string;data: PostMeNotificationSmsPhoneNumberValidateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberValidate>>, {phoneNumber: string;data: PostMeNotificationSmsPhoneNumberValidateBody}> = (props) => {
          const {phoneNumber,data} = props ?? {};

          return  postMeNotificationSmsPhoneNumberValidate(phoneNumber,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeNotificationSmsPhoneNumberValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberValidate>>>
    export type PostMeNotificationSmsPhoneNumberValidateMutationBody = PostMeNotificationSmsPhoneNumberValidateBody
    export type PostMeNotificationSmsPhoneNumberValidateMutationError = unknown

    /**
 * @summary Validate your phone number
 */
export const usePostMeNotificationSmsPhoneNumberValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberValidate>>, TError,{phoneNumber: string;data: PostMeNotificationSmsPhoneNumberValidateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeNotificationSmsPhoneNumberValidate>>,
        TError,
        {phoneNumber: string;data: PostMeNotificationSmsPhoneNumberValidateBody},
        TContext
      > => {

      const mutationOptions = getPostMeNotificationSmsPhoneNumberValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of all the orders the logged account has
 */
export const getMeOrder = (
    params?: GetMeOrderParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/order`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeOrderQueryKey = (params?: GetMeOrderParams,) => {
    return [`/me/order`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeOrderQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrder>>, TError = unknown>(params?: GetMeOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrder>>> = ({ signal }) => getMeOrder(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrder>>>
export type GetMeOrderQueryError = unknown


export function useGetMeOrder<TData = Awaited<ReturnType<typeof getMeOrder>>, TError = unknown>(
 params: undefined |  GetMeOrderParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrder<TData = Awaited<ReturnType<typeof getMeOrder>>, TError = unknown>(
 params?: GetMeOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrder>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrder<TData = Awaited<ReturnType<typeof getMeOrder>>, TError = unknown>(
 params?: GetMeOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of all the orders the logged account has
 */

export function useGetMeOrder<TData = Awaited<ReturnType<typeof getMeOrder>>, TError = unknown>(
 params?: GetMeOrderParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOrderOrderId = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/order/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}`] as const;
    }

    
export const getGetMeOrderOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderId>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderId>>> = ({ signal }) => getMeOrderOrderId(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderId>>>
export type GetMeOrderOrderIdQueryError = unknown


export function useGetMeOrderOrderId<TData = Awaited<ReturnType<typeof getMeOrderOrderId>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderId<TData = Awaited<ReturnType<typeof getMeOrderOrderId>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderId<TData = Awaited<ReturnType<typeof getMeOrderOrderId>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderId<TData = Awaited<ReturnType<typeof getMeOrderOrderId>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return main data about the object the processing of the order generated
 */
export const getMeOrderOrderIdAssociatedObject = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderAssociatedObjectOVH>(
      {url: `/me/order/${orderId}/associatedObject`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdAssociatedObjectQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/associatedObject`] as const;
    }

    
export const getGetMeOrderOrderIdAssociatedObjectQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdAssociatedObjectQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>> = ({ signal }) => getMeOrderOrderIdAssociatedObject(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdAssociatedObjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>>
export type GetMeOrderOrderIdAssociatedObjectQueryError = unknown


export function useGetMeOrderOrderIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return main data about the object the processing of the order generated
 */

export function useGetMeOrderOrderIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdAssociatedObjectQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return available payment mean
 */
export const getMeOrderOrderIdAvailablePaymentMean = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderAvailablePaymentMeanOVH[]>(
      {url: `/me/order/${orderId}/availablePaymentMean`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdAvailablePaymentMeanQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/availablePaymentMean`] as const;
    }

    
export const getGetMeOrderOrderIdAvailablePaymentMeanQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdAvailablePaymentMeanQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>> = ({ signal }) => getMeOrderOrderIdAvailablePaymentMean(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdAvailablePaymentMeanQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>>
export type GetMeOrderOrderIdAvailablePaymentMeanQueryError = unknown


export function useGetMeOrderOrderIdAvailablePaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAvailablePaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAvailablePaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return available payment mean
 */

export function useGetMeOrderOrderIdAvailablePaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMean>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdAvailablePaymentMeanQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of registered payment mean you can use to pay this order
 */
export const getMeOrderOrderIdAvailableRegisteredPaymentMean = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderRegisteredPaymentMeanOVH[]>(
      {url: `/me/order/${orderId}/availableRegisteredPaymentMean`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdAvailableRegisteredPaymentMeanQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/availableRegisteredPaymentMean`] as const;
    }

    
export const getGetMeOrderOrderIdAvailableRegisteredPaymentMeanQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdAvailableRegisteredPaymentMeanQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>> = ({ signal }) => getMeOrderOrderIdAvailableRegisteredPaymentMean(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdAvailableRegisteredPaymentMeanQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>>
export type GetMeOrderOrderIdAvailableRegisteredPaymentMeanQueryError = unknown


export function useGetMeOrderOrderIdAvailableRegisteredPaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAvailableRegisteredPaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAvailableRegisteredPaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of registered payment mean you can use to pay this order
 */

export function useGetMeOrderOrderIdAvailableRegisteredPaymentMean<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailableRegisteredPaymentMean>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdAvailableRegisteredPaymentMeanQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List credit balances applied on this Order
 */
export const getMeOrderOrderIdBalance = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/order/${orderId}/balance`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdBalanceQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/balance`] as const;
    }

    
export const getGetMeOrderOrderIdBalanceQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdBalanceQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>> = ({ signal }) => getMeOrderOrderIdBalance(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdBalanceQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>>
export type GetMeOrderOrderIdBalanceQueryError = unknown


export function useGetMeOrderOrderIdBalance<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdBalance<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdBalance<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List credit balances applied on this Order
 */

export function useGetMeOrderOrderIdBalance<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalance>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdBalanceQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Use a credit balance on this Order
 */
export const postMeOrderOrderIdBalance = (
    orderId: number,
    postMeOrderOrderIdBalanceBody: PostMeOrderOrderIdBalanceBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingCreditBalanceOVH>(
      {url: `/me/order/${orderId}/balance`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOrderOrderIdBalanceBody, signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdBalanceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdBalance>>, TError,{orderId: number;data: PostMeOrderOrderIdBalanceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdBalance>>, TError,{orderId: number;data: PostMeOrderOrderIdBalanceBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdBalance>>, {orderId: number;data: PostMeOrderOrderIdBalanceBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postMeOrderOrderIdBalance(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdBalanceMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdBalance>>>
    export type PostMeOrderOrderIdBalanceMutationBody = PostMeOrderOrderIdBalanceBody
    export type PostMeOrderOrderIdBalanceMutationError = unknown

    /**
 * @summary Use a credit balance on this Order
 */
export const usePostMeOrderOrderIdBalance = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdBalance>>, TError,{orderId: number;data: PostMeOrderOrderIdBalanceBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdBalance>>,
        TError,
        {orderId: number;data: PostMeOrderOrderIdBalanceBody},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdBalanceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove a credit balance from this Order
 */
export const deleteMeOrderOrderIdBalanceBalanceName = (
    orderId: number,
    balanceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/balance/${balanceName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeOrderOrderIdBalanceBalanceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeOrderOrderIdBalanceBalanceName>>, TError,{orderId: number;balanceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeOrderOrderIdBalanceBalanceName>>, TError,{orderId: number;balanceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeOrderOrderIdBalanceBalanceName>>, {orderId: number;balanceName: string}> = (props) => {
          const {orderId,balanceName} = props ?? {};

          return  deleteMeOrderOrderIdBalanceBalanceName(orderId,balanceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeOrderOrderIdBalanceBalanceNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeOrderOrderIdBalanceBalanceName>>>
    
    export type DeleteMeOrderOrderIdBalanceBalanceNameMutationError = unknown

    /**
 * @summary Remove a credit balance from this Order
 */
export const useDeleteMeOrderOrderIdBalanceBalanceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeOrderOrderIdBalanceBalanceName>>, TError,{orderId: number;balanceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeOrderOrderIdBalanceBalanceName>>,
        TError,
        {orderId: number;balanceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeOrderOrderIdBalanceBalanceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeOrderOrderIdBalanceBalanceName = (
    orderId: number,
    balanceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingCreditBalanceOVH>(
      {url: `/me/order/${orderId}/balance/${balanceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdBalanceBalanceNameQueryKey = (orderId: number,
    balanceName: string,) => {
    return [`/me/order/${orderId}/balance/${balanceName}`] as const;
    }

    
export const getGetMeOrderOrderIdBalanceBalanceNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError = unknown>(orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdBalanceBalanceNameQueryKey(orderId,balanceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>> = ({ signal }) => getMeOrderOrderIdBalanceBalanceName(orderId,balanceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && balanceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdBalanceBalanceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>>
export type GetMeOrderOrderIdBalanceBalanceNameQueryError = unknown


export function useGetMeOrderOrderIdBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderIdBalanceBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdBalanceBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdBalanceBalanceNameQueryOptions(orderId,balanceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve order's detailed consumption information as a file
 */
export const getMeOrderOrderIdConsumptionDetails = (
    orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderConsumptionDetailsOVH>(
      {url: `/me/order/${orderId}/consumption/details`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdConsumptionDetailsQueryKey = (orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams,) => {
    return [`/me/order/${orderId}/consumption/details`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeOrderOrderIdConsumptionDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError = unknown>(orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdConsumptionDetailsQueryKey(orderId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>> = ({ signal }) => getMeOrderOrderIdConsumptionDetails(orderId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdConsumptionDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>>
export type GetMeOrderOrderIdConsumptionDetailsQueryError = unknown


export function useGetMeOrderOrderIdConsumptionDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError = unknown>(
 orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdConsumptionDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError = unknown>(
 orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdConsumptionDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError = unknown>(
 orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve order's detailed consumption information as a file
 */

export function useGetMeOrderOrderIdConsumptionDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError = unknown>(
 orderId: number,
    params: GetMeOrderOrderIdConsumptionDetailsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdConsumptionDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdConsumptionDetailsQueryOptions(orderId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOrderOrderIdDebt = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtDebtOVH>(
      {url: `/me/order/${orderId}/debt`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDebtQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/debt`] as const;
    }

    
export const getGetMeOrderOrderIdDebtQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDebtQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>> = ({ signal }) => getMeOrderOrderIdDebt(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDebtQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>>
export type GetMeOrderOrderIdDebtQueryError = unknown


export function useGetMeOrderOrderIdDebt<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebt<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebt<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderIdDebt<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebt>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDebtQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary All operations related to these debts
 */
export const getMeOrderOrderIdDebtOperation = (
    orderId: number,
    params?: GetMeOrderOrderIdDebtOperationParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/order/${orderId}/debt/operation`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDebtOperationQueryKey = (orderId: number,
    params?: GetMeOrderOrderIdDebtOperationParams,) => {
    return [`/me/order/${orderId}/debt/operation`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeOrderOrderIdDebtOperationQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError = unknown>(orderId: number,
    params?: GetMeOrderOrderIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDebtOperationQueryKey(orderId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>> = ({ signal }) => getMeOrderOrderIdDebtOperation(orderId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDebtOperationQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>>
export type GetMeOrderOrderIdDebtOperationQueryError = unknown


export function useGetMeOrderOrderIdDebtOperation<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError = unknown>(
 orderId: number,
    params: undefined |  GetMeOrderOrderIdDebtOperationParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebtOperation<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError = unknown>(
 orderId: number,
    params?: GetMeOrderOrderIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebtOperation<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError = unknown>(
 orderId: number,
    params?: GetMeOrderOrderIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary All operations related to these debts
 */

export function useGetMeOrderOrderIdDebtOperation<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError = unknown>(
 orderId: number,
    params?: GetMeOrderOrderIdDebtOperationParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperation>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDebtOperationQueryOptions(orderId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOrderOrderIdDebtOperationOperationId = (
    orderId: number,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtOperationOVH>(
      {url: `/me/order/${orderId}/debt/operation/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDebtOperationOperationIdQueryKey = (orderId: number,
    operationId: number,) => {
    return [`/me/order/${orderId}/debt/operation/${operationId}`] as const;
    }

    
export const getGetMeOrderOrderIdDebtOperationOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError = unknown>(orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDebtOperationOperationIdQueryKey(orderId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>> = ({ signal }) => getMeOrderOrderIdDebtOperationOperationId(orderId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDebtOperationOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>>
export type GetMeOrderOrderIdDebtOperationOperationIdQueryError = unknown


export function useGetMeOrderOrderIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError = unknown>(
 orderId: number,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError = unknown>(
 orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError = unknown>(
 orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderIdDebtOperationOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError = unknown>(
 orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDebtOperationOperationIdQueryOptions(orderId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return main data about the object related to this debt operation
 */
export const getMeOrderOrderIdDebtOperationOperationIdAssociatedObject = (
    orderId: number,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DebtEntryAssociatedObjectOVH>(
      {url: `/me/order/${orderId}/debt/operation/${operationId}/associatedObject`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectQueryKey = (orderId: number,
    operationId: number,) => {
    return [`/me/order/${orderId}/debt/operation/${operationId}/associatedObject`] as const;
    }

    
export const getGetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectQueryKey(orderId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>> = ({ signal }) => getMeOrderOrderIdDebtOperationOperationIdAssociatedObject(orderId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>>
export type GetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectQueryError = unknown


export function useGetMeOrderOrderIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 orderId: number,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return main data about the object related to this debt operation
 */

export function useGetMeOrderOrderIdDebtOperationOperationIdAssociatedObject<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError = unknown>(
 orderId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDebtOperationOperationIdAssociatedObject>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectQueryOptions(orderId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create an order in order to pay this order's debt
 */
export const postMeOrderOrderIdDebtPay = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/order/${orderId}/debt/pay`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdDebtPayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdDebtPay>>, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdDebtPay>>, TError,{orderId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdDebtPay>>, {orderId: number}> = (props) => {
          const {orderId} = props ?? {};

          return  postMeOrderOrderIdDebtPay(orderId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdDebtPayMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdDebtPay>>>
    
    export type PostMeOrderOrderIdDebtPayMutationError = unknown

    /**
 * @summary Create an order in order to pay this order's debt
 */
export const usePostMeOrderOrderIdDebtPay = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdDebtPay>>, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdDebtPay>>,
        TError,
        {orderId: number},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdDebtPayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Give access to all entries of the order
 */
export const getMeOrderOrderIdDetails = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/order/${orderId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/details`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>> = ({ signal }) => getMeOrderOrderIdDetails(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>>
export type GetMeOrderOrderIdDetailsQueryError = unknown


export function useGetMeOrderOrderIdDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of the order
 */

export function useGetMeOrderOrderIdDetails<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOrderOrderIdDetailsOrderDetailId = (
    orderId: number,
    orderDetailId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderDetailOVH>(
      {url: `/me/order/${orderId}/details/${orderDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsOrderDetailIdQueryKey = (orderId: number,
    orderDetailId: number,) => {
    return [`/me/order/${orderId}/details/${orderDetailId}`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsOrderDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError = unknown>(orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsOrderDetailIdQueryKey(orderId,orderDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>> = ({ signal }) => getMeOrderOrderIdDetailsOrderDetailId(orderId,orderDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && orderDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsOrderDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>>
export type GetMeOrderOrderIdDetailsOrderDetailIdQueryError = unknown


export function useGetMeOrderOrderIdDetailsOrderDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsOrderDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsOrderDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderIdDetailsOrderDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsOrderDetailIdQueryOptions(orderId,orderDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOrderOrderIdDetailsOrderDetailIdExtension = (
    orderId: number,
    orderDetailId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingItemDetailOVH>(
      {url: `/me/order/${orderId}/details/${orderDetailId}/extension`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsOrderDetailIdExtensionQueryKey = (orderId: number,
    orderDetailId: number,) => {
    return [`/me/order/${orderId}/details/${orderDetailId}/extension`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsOrderDetailIdExtensionQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError = unknown>(orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsOrderDetailIdExtensionQueryKey(orderId,orderDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>> = ({ signal }) => getMeOrderOrderIdDetailsOrderDetailIdExtension(orderId,orderDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && orderDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsOrderDetailIdExtensionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>>
export type GetMeOrderOrderIdDetailsOrderDetailIdExtensionQueryError = unknown


export function useGetMeOrderOrderIdDetailsOrderDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsOrderDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsOrderDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderIdDetailsOrderDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError = unknown>(
 orderId: number,
    orderDetailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsOrderDetailIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsOrderDetailIdExtensionQueryOptions(orderId,orderDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return tracking of the order
 */
export const getMeOrderOrderIdFollowUp = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderFollowUpOVH[]>(
      {url: `/me/order/${orderId}/followUp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdFollowUpQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/followUp`] as const;
    }

    
export const getGetMeOrderOrderIdFollowUpQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdFollowUpQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>> = ({ signal }) => getMeOrderOrderIdFollowUp(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdFollowUpQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>>
export type GetMeOrderOrderIdFollowUpQueryError = unknown


export function useGetMeOrderOrderIdFollowUp<TData = Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdFollowUp<TData = Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdFollowUp<TData = Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return tracking of the order
 */

export function useGetMeOrderOrderIdFollowUp<TData = Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdFollowUp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdFollowUpQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Pay with a payment method reference
 */
export const postMeOrderOrderIdPay = (
    orderId: number,
    postMeOrderOrderIdPayBody: PostMeOrderOrderIdPayBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/pay`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOrderOrderIdPayBody, signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdPayMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdPay>>, TError,{orderId: number;data: PostMeOrderOrderIdPayBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdPay>>, TError,{orderId: number;data: PostMeOrderOrderIdPayBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdPay>>, {orderId: number;data: PostMeOrderOrderIdPayBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postMeOrderOrderIdPay(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdPayMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdPay>>>
    export type PostMeOrderOrderIdPayMutationBody = PostMeOrderOrderIdPayBody
    export type PostMeOrderOrderIdPayMutationError = unknown

    /**
 * @summary Pay with a payment method reference
 */
export const usePostMeOrderOrderIdPay = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdPay>>, TError,{orderId: number;data: PostMeOrderOrderIdPayBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdPay>>,
        TError,
        {orderId: number;data: PostMeOrderOrderIdPayBody},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdPayMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Pay with an already registered payment mean
 */
export const postMeOrderOrderIdPayWithRegisteredPaymentMean = (
    orderId: number,
    postMeOrderOrderIdPayWithRegisteredPaymentMeanBody: PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/payWithRegisteredPaymentMean`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOrderOrderIdPayWithRegisteredPaymentMeanBody, signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdPayWithRegisteredPaymentMeanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdPayWithRegisteredPaymentMean>>, TError,{orderId: number;data: PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdPayWithRegisteredPaymentMean>>, TError,{orderId: number;data: PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdPayWithRegisteredPaymentMean>>, {orderId: number;data: PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postMeOrderOrderIdPayWithRegisteredPaymentMean(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdPayWithRegisteredPaymentMeanMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdPayWithRegisteredPaymentMean>>>
    export type PostMeOrderOrderIdPayWithRegisteredPaymentMeanMutationBody = PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody
    export type PostMeOrderOrderIdPayWithRegisteredPaymentMeanMutationError = unknown

    /**
 * @summary Pay with an already registered payment mean
 */
export const usePostMeOrderOrderIdPayWithRegisteredPaymentMean = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdPayWithRegisteredPaymentMean>>, TError,{orderId: number;data: PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdPayWithRegisteredPaymentMean>>,
        TError,
        {orderId: number;data: PostMeOrderOrderIdPayWithRegisteredPaymentMeanBody},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdPayWithRegisteredPaymentMeanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeOrderOrderIdPayment = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/order/${orderId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdPaymentQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/payment`] as const;
    }

    
export const getGetMeOrderOrderIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdPaymentQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>> = ({ signal }) => getMeOrderOrderIdPayment(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>>
export type GetMeOrderOrderIdPaymentQueryError = unknown


export function useGetMeOrderOrderIdPayment<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdPayment<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdPayment<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOrderOrderIdPayment<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdPaymentQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return main data about the object the processing of the order generated
 */
export const getMeOrderOrderIdPaymentMeans = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderPaymentMeansOVH>(
      {url: `/me/order/${orderId}/paymentMeans`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdPaymentMeansQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/paymentMeans`] as const;
    }

    
export const getGetMeOrderOrderIdPaymentMeansQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdPaymentMeansQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>> = ({ signal }) => getMeOrderOrderIdPaymentMeans(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdPaymentMeansQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>>
export type GetMeOrderOrderIdPaymentMeansQueryError = unknown


export function useGetMeOrderOrderIdPaymentMeans<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdPaymentMeans<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdPaymentMeans<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return main data about the object the processing of the order generated
 */

export function useGetMeOrderOrderIdPaymentMeans<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMeans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdPaymentMeansQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of registered payment method you can use to pay this order
 */
export const getMeOrderOrderIdPaymentMethods = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderPaymentMethodsOVH>(
      {url: `/me/order/${orderId}/paymentMethods`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdPaymentMethodsQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/paymentMethods`] as const;
    }

    
export const getGetMeOrderOrderIdPaymentMethodsQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdPaymentMethodsQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>> = ({ signal }) => getMeOrderOrderIdPaymentMethods(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdPaymentMethodsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>>
export type GetMeOrderOrderIdPaymentMethodsQueryError = unknown


export function useGetMeOrderOrderIdPaymentMethods<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdPaymentMethods<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdPaymentMethods<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of registered payment method you can use to pay this order
 */

export function useGetMeOrderOrderIdPaymentMethods<TData = Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdPaymentMethods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdPaymentMethodsQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request retraction of order
 */
export const postMeOrderOrderIdRetraction = (
    orderId: number,
    postMeOrderOrderIdRetractionBody: PostMeOrderOrderIdRetractionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/retraction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOrderOrderIdRetractionBody, signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdRetractionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdRetraction>>, TError,{orderId: number;data: PostMeOrderOrderIdRetractionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdRetraction>>, TError,{orderId: number;data: PostMeOrderOrderIdRetractionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdRetraction>>, {orderId: number;data: PostMeOrderOrderIdRetractionBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postMeOrderOrderIdRetraction(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdRetractionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdRetraction>>>
    export type PostMeOrderOrderIdRetractionMutationBody = PostMeOrderOrderIdRetractionBody
    export type PostMeOrderOrderIdRetractionMutationError = unknown

    /**
 * @summary Request retraction of order
 */
export const usePostMeOrderOrderIdRetraction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdRetraction>>, TError,{orderId: number;data: PostMeOrderOrderIdRetractionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdRetraction>>,
        TError,
        {orderId: number;data: PostMeOrderOrderIdRetractionBody},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdRetractionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return status of order
 */
export const getMeOrderOrderIdStatus = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOrderStatusEnumOVH>(
      {url: `/me/order/${orderId}/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdStatusQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/status`] as const;
    }

    
export const getGetMeOrderOrderIdStatusQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdStatusQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>> = ({ signal }) => getMeOrderOrderIdStatus(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>>
export type GetMeOrderOrderIdStatusQueryError = unknown


export function useGetMeOrderOrderIdStatus<TData = Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdStatus<TData = Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdStatus<TData = Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return status of order
 */

export function useGetMeOrderOrderIdStatus<TData = Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdStatusQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Waive retraction period of order
 */
export const postMeOrderOrderIdWaiveRetraction = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/waiveRetraction`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdWaiveRetractionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetraction>>, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetraction>>, TError,{orderId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetraction>>, {orderId: number}> = (props) => {
          const {orderId} = props ?? {};

          return  postMeOrderOrderIdWaiveRetraction(orderId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdWaiveRetractionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetraction>>>
    
    export type PostMeOrderOrderIdWaiveRetractionMutationError = unknown

    /**
 * @summary Waive retraction period of order
 */
export const usePostMeOrderOrderIdWaiveRetraction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetraction>>, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetraction>>,
        TError,
        {orderId: number},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdWaiveRetractionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of OVH accounts the logged account has
 */
export const getMeOvhAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/ovhAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOvhAccountQueryKey = () => {
    return [`/me/ovhAccount`] as const;
    }

    
export const getGetMeOvhAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMeOvhAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOvhAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOvhAccount>>> = ({ signal }) => getMeOvhAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOvhAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOvhAccount>>>
export type GetMeOvhAccountQueryError = unknown


export function useGetMeOvhAccount<TData = Awaited<ReturnType<typeof getMeOvhAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccount<TData = Awaited<ReturnType<typeof getMeOvhAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccount<TData = Awaited<ReturnType<typeof getMeOvhAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of OVH accounts the logged account has
 */

export function useGetMeOvhAccount<TData = Awaited<ReturnType<typeof getMeOvhAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOvhAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOvhAccountOvhAccountId = (
    ovhAccountId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOvhAccountOVH>(
      {url: `/me/ovhAccount/${ovhAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOvhAccountOvhAccountIdQueryKey = (ovhAccountId: string,) => {
    return [`/me/ovhAccount/${ovhAccountId}`] as const;
    }

    
export const getGetMeOvhAccountOvhAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError = unknown>(ovhAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOvhAccountOvhAccountIdQueryKey(ovhAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>> = ({ signal }) => getMeOvhAccountOvhAccountId(ovhAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ovhAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOvhAccountOvhAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>>
export type GetMeOvhAccountOvhAccountIdQueryError = unknown


export function useGetMeOvhAccountOvhAccountId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError = unknown>(
 ovhAccountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccountOvhAccountId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError = unknown>(
 ovhAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccountOvhAccountId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError = unknown>(
 ovhAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOvhAccountOvhAccountId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError = unknown>(
 ovhAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOvhAccountOvhAccountIdQueryOptions(ovhAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeOvhAccountOvhAccountId = (
    ovhAccountId: string,
    billingOvhAccountOVH: NonReadonly<BillingOvhAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/ovhAccount/${ovhAccountId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: billingOvhAccountOVH
    },
      options);
    }
  


export const getPutMeOvhAccountOvhAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeOvhAccountOvhAccountId>>, TError,{ovhAccountId: string;data: NonReadonly<BillingOvhAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeOvhAccountOvhAccountId>>, TError,{ovhAccountId: string;data: NonReadonly<BillingOvhAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeOvhAccountOvhAccountId>>, {ovhAccountId: string;data: NonReadonly<BillingOvhAccountOVH>}> = (props) => {
          const {ovhAccountId,data} = props ?? {};

          return  putMeOvhAccountOvhAccountId(ovhAccountId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeOvhAccountOvhAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeOvhAccountOvhAccountId>>>
    export type PutMeOvhAccountOvhAccountIdMutationBody = NonReadonly<BillingOvhAccountOVH>
    export type PutMeOvhAccountOvhAccountIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeOvhAccountOvhAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeOvhAccountOvhAccountId>>, TError,{ovhAccountId: string;data: NonReadonly<BillingOvhAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeOvhAccountOvhAccountId>>,
        TError,
        {ovhAccountId: string;data: NonReadonly<BillingOvhAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeOvhAccountOvhAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate an order that can be paid in order to credit the OVH account
 */
export const postMeOvhAccountOvhAccountIdCreditOrder = (
    ovhAccountId: string,
    postMeOvhAccountOvhAccountIdCreditOrderBody: PostMeOvhAccountOvhAccountIdCreditOrderBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/ovhAccount/${ovhAccountId}/creditOrder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOvhAccountOvhAccountIdCreditOrderBody, signal
    },
      options);
    }
  


export const getPostMeOvhAccountOvhAccountIdCreditOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdCreditOrder>>, TError,{ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdCreditOrderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdCreditOrder>>, TError,{ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdCreditOrderBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdCreditOrder>>, {ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdCreditOrderBody}> = (props) => {
          const {ovhAccountId,data} = props ?? {};

          return  postMeOvhAccountOvhAccountIdCreditOrder(ovhAccountId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOvhAccountOvhAccountIdCreditOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdCreditOrder>>>
    export type PostMeOvhAccountOvhAccountIdCreditOrderMutationBody = PostMeOvhAccountOvhAccountIdCreditOrderBody
    export type PostMeOvhAccountOvhAccountIdCreditOrderMutationError = unknown

    /**
 * @summary Generate an order that can be paid in order to credit the OVH account
 */
export const usePostMeOvhAccountOvhAccountIdCreditOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdCreditOrder>>, TError,{ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdCreditOrderBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdCreditOrder>>,
        TError,
        {ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdCreditOrderBody},
        TContext
      > => {

      const mutationOptions = getPostMeOvhAccountOvhAccountIdCreditOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Details about an entry of the OVH account
 */
export const getMeOvhAccountOvhAccountIdMovements = (
    ovhAccountId: string,
    params?: GetMeOvhAccountOvhAccountIdMovementsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/ovhAccount/${ovhAccountId}/movements`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeOvhAccountOvhAccountIdMovementsQueryKey = (ovhAccountId: string,
    params?: GetMeOvhAccountOvhAccountIdMovementsParams,) => {
    return [`/me/ovhAccount/${ovhAccountId}/movements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeOvhAccountOvhAccountIdMovementsQueryOptions = <TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError = unknown>(ovhAccountId: string,
    params?: GetMeOvhAccountOvhAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOvhAccountOvhAccountIdMovementsQueryKey(ovhAccountId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>> = ({ signal }) => getMeOvhAccountOvhAccountIdMovements(ovhAccountId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ovhAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOvhAccountOvhAccountIdMovementsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>>
export type GetMeOvhAccountOvhAccountIdMovementsQueryError = unknown


export function useGetMeOvhAccountOvhAccountIdMovements<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError = unknown>(
 ovhAccountId: string,
    params: undefined |  GetMeOvhAccountOvhAccountIdMovementsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccountOvhAccountIdMovements<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError = unknown>(
 ovhAccountId: string,
    params?: GetMeOvhAccountOvhAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccountOvhAccountIdMovements<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError = unknown>(
 ovhAccountId: string,
    params?: GetMeOvhAccountOvhAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Details about an entry of the OVH account
 */

export function useGetMeOvhAccountOvhAccountIdMovements<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError = unknown>(
 ovhAccountId: string,
    params?: GetMeOvhAccountOvhAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOvhAccountOvhAccountIdMovementsQueryOptions(ovhAccountId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeOvhAccountOvhAccountIdMovementsMovementId = (
    ovhAccountId: string,
    movementId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingMovementOVH>(
      {url: `/me/ovhAccount/${ovhAccountId}/movements/${movementId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOvhAccountOvhAccountIdMovementsMovementIdQueryKey = (ovhAccountId: string,
    movementId: number,) => {
    return [`/me/ovhAccount/${ovhAccountId}/movements/${movementId}`] as const;
    }

    
export const getGetMeOvhAccountOvhAccountIdMovementsMovementIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError = unknown>(ovhAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOvhAccountOvhAccountIdMovementsMovementIdQueryKey(ovhAccountId,movementId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>> = ({ signal }) => getMeOvhAccountOvhAccountIdMovementsMovementId(ovhAccountId,movementId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ovhAccountId && movementId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOvhAccountOvhAccountIdMovementsMovementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>>
export type GetMeOvhAccountOvhAccountIdMovementsMovementIdQueryError = unknown


export function useGetMeOvhAccountOvhAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError = unknown>(
 ovhAccountId: string,
    movementId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccountOvhAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError = unknown>(
 ovhAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOvhAccountOvhAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError = unknown>(
 ovhAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeOvhAccountOvhAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError = unknown>(
 ovhAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOvhAccountOvhAccountIdMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOvhAccountOvhAccountIdMovementsMovementIdQueryOptions(ovhAccountId,movementId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary request a refund of this credit note to your original payment method
 */
export const postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund = (
    ovhAccountId: string,
    movementId: number,
    postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody: PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/ovhAccount/${ovhAccountId}/movements/${movementId}/requestRefund`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody, signal
    },
      options);
    }
  


export const getPostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund>>, TError,{ovhAccountId: string;movementId: number;data: PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund>>, TError,{ovhAccountId: string;movementId: number;data: PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund>>, {ovhAccountId: string;movementId: number;data: PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody}> = (props) => {
          const {ovhAccountId,movementId,data} = props ?? {};

          return  postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund(ovhAccountId,movementId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund>>>
    export type PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundMutationBody = PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody
    export type PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundMutationError = unknown

    /**
 * @summary request a refund of this credit note to your original payment method
 */
export const usePostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund>>, TError,{ovhAccountId: string;movementId: number;data: PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefund>>,
        TError,
        {ovhAccountId: string;movementId: number;data: PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundBody},
        TContext
      > => {

      const mutationOptions = getPostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Transfer money from ovhAccount to your bank account
 */
export const postMeOvhAccountOvhAccountIdRetrieveMoney = (
    ovhAccountId: string,
    postMeOvhAccountOvhAccountIdRetrieveMoneyBody: PostMeOvhAccountOvhAccountIdRetrieveMoneyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOVH>(
      {url: `/me/ovhAccount/${ovhAccountId}/retrieveMoney`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeOvhAccountOvhAccountIdRetrieveMoneyBody, signal
    },
      options);
    }
  


export const getPostMeOvhAccountOvhAccountIdRetrieveMoneyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdRetrieveMoney>>, TError,{ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdRetrieveMoneyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdRetrieveMoney>>, TError,{ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdRetrieveMoneyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdRetrieveMoney>>, {ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdRetrieveMoneyBody}> = (props) => {
          const {ovhAccountId,data} = props ?? {};

          return  postMeOvhAccountOvhAccountIdRetrieveMoney(ovhAccountId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOvhAccountOvhAccountIdRetrieveMoneyMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdRetrieveMoney>>>
    export type PostMeOvhAccountOvhAccountIdRetrieveMoneyMutationBody = PostMeOvhAccountOvhAccountIdRetrieveMoneyBody
    export type PostMeOvhAccountOvhAccountIdRetrieveMoneyMutationError = unknown

    /**
 * @summary Transfer money from ovhAccount to your bank account
 */
export const usePostMeOvhAccountOvhAccountIdRetrieveMoney = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdRetrieveMoney>>, TError,{ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdRetrieveMoneyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOvhAccountOvhAccountIdRetrieveMoney>>,
        TError,
        {ovhAccountId: string;data: PostMeOvhAccountOvhAccountIdRetrieveMoneyBody},
        TContext
      > => {

      const mutationOptions = getPostMeOvhAccountOvhAccountIdRetrieveMoneyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Fetch the partner level of the account
 */
export const getMePartnerLevel = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePartnerLevelLevelOVH>(
      {url: `/me/partnerLevel`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePartnerLevelQueryKey = () => {
    return [`/me/partnerLevel`] as const;
    }

    
export const getGetMePartnerLevelQueryOptions = <TData = Awaited<ReturnType<typeof getMePartnerLevel>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePartnerLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePartnerLevelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePartnerLevel>>> = ({ signal }) => getMePartnerLevel(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePartnerLevel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePartnerLevelQueryResult = NonNullable<Awaited<ReturnType<typeof getMePartnerLevel>>>
export type GetMePartnerLevelQueryError = unknown


export function useGetMePartnerLevel<TData = Awaited<ReturnType<typeof getMePartnerLevel>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePartnerLevel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePartnerLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePartnerLevel<TData = Awaited<ReturnType<typeof getMePartnerLevel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePartnerLevel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePartnerLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePartnerLevel<TData = Awaited<ReturnType<typeof getMePartnerLevel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePartnerLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch the partner level of the account
 */

export function useGetMePartnerLevel<TData = Awaited<ReturnType<typeof getMePartnerLevel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePartnerLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePartnerLevelQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a password recover
 */
export const postMePasswordRecover = (
    postMePasswordRecoverBody: PostMePasswordRecoverBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/passwordRecover`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMePasswordRecoverBody, signal
    },
      options);
    }
  


export const getPostMePasswordRecoverMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePasswordRecover>>, TError,{data: PostMePasswordRecoverBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePasswordRecover>>, TError,{data: PostMePasswordRecoverBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePasswordRecover>>, {data: PostMePasswordRecoverBody}> = (props) => {
          const {data} = props ?? {};

          return  postMePasswordRecover(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePasswordRecoverMutationResult = NonNullable<Awaited<ReturnType<typeof postMePasswordRecover>>>
    export type PostMePasswordRecoverMutationBody = PostMePasswordRecoverBody
    export type PostMePasswordRecoverMutationError = unknown

    /**
 * @summary Request a password recover
 */
export const usePostMePasswordRecover = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePasswordRecover>>, TError,{data: PostMePasswordRecoverBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePasswordRecover>>,
        TError,
        {data: PostMePasswordRecoverBody},
        TContext
      > => {

      const mutationOptions = getPostMePasswordRecoverMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve available payment method
 */
export const getMePaymentAvailableMethods = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentAvailablePaymentMethodOVH[]>(
      {url: `/me/payment/availableMethods`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePaymentAvailableMethodsQueryKey = () => {
    return [`/me/payment/availableMethods`] as const;
    }

    
export const getGetMePaymentAvailableMethodsQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentAvailableMethodsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>> = ({ signal }) => getMePaymentAvailableMethods(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentAvailableMethodsQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>>
export type GetMePaymentAvailableMethodsQueryError = unknown


export function useGetMePaymentAvailableMethods<TData = Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentAvailableMethods>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentAvailableMethods<TData = Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentAvailableMethods>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentAvailableMethods<TData = Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve available payment method
 */

export function useGetMePaymentAvailableMethods<TData = Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentAvailableMethods>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentAvailableMethodsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve payment method list
 */
export const getMePaymentMethod = (
    params?: GetMePaymentMethodParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/payment/method`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMePaymentMethodQueryKey = (params?: GetMePaymentMethodParams,) => {
    return [`/me/payment/method`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMePaymentMethodQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentMethod>>, TError = unknown>(params?: GetMePaymentMethodParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethod>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentMethodQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentMethod>>> = ({ signal }) => getMePaymentMethod(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethod>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentMethodQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentMethod>>>
export type GetMePaymentMethodQueryError = unknown


export function useGetMePaymentMethod<TData = Awaited<ReturnType<typeof getMePaymentMethod>>, TError = unknown>(
 params: undefined |  GetMePaymentMethodParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethod>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMethod>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMethod<TData = Awaited<ReturnType<typeof getMePaymentMethod>>, TError = unknown>(
 params?: GetMePaymentMethodParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethod>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMethod>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMethod<TData = Awaited<ReturnType<typeof getMePaymentMethod>>, TError = unknown>(
 params?: GetMePaymentMethodParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethod>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve payment method list
 */

export function useGetMePaymentMethod<TData = Awaited<ReturnType<typeof getMePaymentMethod>>, TError = unknown>(
 params?: GetMePaymentMethodParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethod>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentMethodQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Register a new payment method
 */
export const postMePaymentMethod = (
    mePaymentMethodCreationOVH: MePaymentMethodCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentMethodValidationOVH>(
      {url: `/me/payment/method`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentMethodCreationOVH, signal
    },
      options);
    }
  


export const getPostMePaymentMethodMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethod>>, TError,{data: MePaymentMethodCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethod>>, TError,{data: MePaymentMethodCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePaymentMethod>>, {data: MePaymentMethodCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMePaymentMethod(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePaymentMethodMutationResult = NonNullable<Awaited<ReturnType<typeof postMePaymentMethod>>>
    export type PostMePaymentMethodMutationBody = MePaymentMethodCreationOVH
    export type PostMePaymentMethodMutationError = unknown

    /**
 * @summary Register a new payment method
 */
export const usePostMePaymentMethod = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethod>>, TError,{data: MePaymentMethodCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePaymentMethod>>,
        TError,
        {data: MePaymentMethodCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMePaymentMethodMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a payment method
 */
export const deleteMePaymentMethodPaymentMethodId = (
    paymentMethodId: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MePaymentPaymentMethodOVH>(
      {url: `/me/payment/method/${paymentMethodId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMePaymentMethodPaymentMethodIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMePaymentMethodPaymentMethodId>>, TError,{paymentMethodId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMePaymentMethodPaymentMethodId>>, TError,{paymentMethodId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMePaymentMethodPaymentMethodId>>, {paymentMethodId: number}> = (props) => {
          const {paymentMethodId} = props ?? {};

          return  deleteMePaymentMethodPaymentMethodId(paymentMethodId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMePaymentMethodPaymentMethodIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMePaymentMethodPaymentMethodId>>>
    
    export type DeleteMePaymentMethodPaymentMethodIdMutationError = unknown

    /**
 * @summary Delete a payment method
 */
export const useDeleteMePaymentMethodPaymentMethodId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMePaymentMethodPaymentMethodId>>, TError,{paymentMethodId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMePaymentMethodPaymentMethodId>>,
        TError,
        {paymentMethodId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMePaymentMethodPaymentMethodIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve a payment method
 */
export const getMePaymentMethodPaymentMethodId = (
    paymentMethodId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentPaymentMethodOVH>(
      {url: `/me/payment/method/${paymentMethodId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePaymentMethodPaymentMethodIdQueryKey = (paymentMethodId: number,) => {
    return [`/me/payment/method/${paymentMethodId}`] as const;
    }

    
export const getGetMePaymentMethodPaymentMethodIdQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError = unknown>(paymentMethodId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentMethodPaymentMethodIdQueryKey(paymentMethodId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>> = ({ signal }) => getMePaymentMethodPaymentMethodId(paymentMethodId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(paymentMethodId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentMethodPaymentMethodIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>>
export type GetMePaymentMethodPaymentMethodIdQueryError = unknown


export function useGetMePaymentMethodPaymentMethodId<TData = Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError = unknown>(
 paymentMethodId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMethodPaymentMethodId<TData = Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError = unknown>(
 paymentMethodId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMethodPaymentMethodId<TData = Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError = unknown>(
 paymentMethodId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a payment method
 */

export function useGetMePaymentMethodPaymentMethodId<TData = Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError = unknown>(
 paymentMethodId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMethodPaymentMethodId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentMethodPaymentMethodIdQueryOptions(paymentMethodId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Edit payment method
 */
export const putMePaymentMethodPaymentMethodId = (
    paymentMethodId: number,
    mePaymentPaymentMethodOVH: NonReadonly<MePaymentPaymentMethodOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MePaymentPaymentMethodOVH>(
      {url: `/me/payment/method/${paymentMethodId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentPaymentMethodOVH
    },
      options);
    }
  


export const getPutMePaymentMethodPaymentMethodIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMePaymentMethodPaymentMethodId>>, TError,{paymentMethodId: number;data: NonReadonly<MePaymentPaymentMethodOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMePaymentMethodPaymentMethodId>>, TError,{paymentMethodId: number;data: NonReadonly<MePaymentPaymentMethodOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMePaymentMethodPaymentMethodId>>, {paymentMethodId: number;data: NonReadonly<MePaymentPaymentMethodOVH>}> = (props) => {
          const {paymentMethodId,data} = props ?? {};

          return  putMePaymentMethodPaymentMethodId(paymentMethodId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMePaymentMethodPaymentMethodIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMePaymentMethodPaymentMethodId>>>
    export type PutMePaymentMethodPaymentMethodIdMutationBody = NonReadonly<MePaymentPaymentMethodOVH>
    export type PutMePaymentMethodPaymentMethodIdMutationError = unknown

    /**
 * @summary Edit payment method
 */
export const usePutMePaymentMethodPaymentMethodId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMePaymentMethodPaymentMethodId>>, TError,{paymentMethodId: number;data: NonReadonly<MePaymentPaymentMethodOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMePaymentMethodPaymentMethodId>>,
        TError,
        {paymentMethodId: number;data: NonReadonly<MePaymentPaymentMethodOVH>},
        TContext
      > => {

      const mutationOptions = getPutMePaymentMethodPaymentMethodIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Challenge your payment method
 */
export const postMePaymentMethodPaymentMethodIdChallenge = (
    paymentMethodId: number,
    mePaymentMethodChallengeOVH: MePaymentMethodChallengeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/payment/method/${paymentMethodId}/challenge`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentMethodChallengeOVH, signal
    },
      options);
    }
  


export const getPostMePaymentMethodPaymentMethodIdChallengeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdChallenge>>, TError,{paymentMethodId: number;data: MePaymentMethodChallengeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdChallenge>>, TError,{paymentMethodId: number;data: MePaymentMethodChallengeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdChallenge>>, {paymentMethodId: number;data: MePaymentMethodChallengeOVH}> = (props) => {
          const {paymentMethodId,data} = props ?? {};

          return  postMePaymentMethodPaymentMethodIdChallenge(paymentMethodId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePaymentMethodPaymentMethodIdChallengeMutationResult = NonNullable<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdChallenge>>>
    export type PostMePaymentMethodPaymentMethodIdChallengeMutationBody = MePaymentMethodChallengeOVH
    export type PostMePaymentMethodPaymentMethodIdChallengeMutationError = unknown

    /**
 * @summary Challenge your payment method
 */
export const usePostMePaymentMethodPaymentMethodIdChallenge = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdChallenge>>, TError,{paymentMethodId: number;data: MePaymentMethodChallengeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdChallenge>>,
        TError,
        {paymentMethodId: number;data: MePaymentMethodChallengeOVH},
        TContext
      > => {

      const mutationOptions = getPostMePaymentMethodPaymentMethodIdChallengeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add details to your payment method challenge
 */
export const postMePaymentMethodPaymentMethodIdDetails = (
    paymentMethodId: number,
    mePaymentMethodDetailsOVH: MePaymentMethodDetailsOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentMethodValidationOVH>(
      {url: `/me/payment/method/${paymentMethodId}/details`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentMethodDetailsOVH, signal
    },
      options);
    }
  


export const getPostMePaymentMethodPaymentMethodIdDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdDetails>>, TError,{paymentMethodId: number;data: MePaymentMethodDetailsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdDetails>>, TError,{paymentMethodId: number;data: MePaymentMethodDetailsOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdDetails>>, {paymentMethodId: number;data: MePaymentMethodDetailsOVH}> = (props) => {
          const {paymentMethodId,data} = props ?? {};

          return  postMePaymentMethodPaymentMethodIdDetails(paymentMethodId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePaymentMethodPaymentMethodIdDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdDetails>>>
    export type PostMePaymentMethodPaymentMethodIdDetailsMutationBody = MePaymentMethodDetailsOVH
    export type PostMePaymentMethodPaymentMethodIdDetailsMutationError = unknown

    /**
 * @summary Add details to your payment method challenge
 */
export const usePostMePaymentMethodPaymentMethodIdDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdDetails>>, TError,{paymentMethodId: number;data: MePaymentMethodDetailsOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdDetails>>,
        TError,
        {paymentMethodId: number;data: MePaymentMethodDetailsOVH},
        TContext
      > => {

      const mutationOptions = getPostMePaymentMethodPaymentMethodIdDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalize a payment method registration
 */
export const postMePaymentMethodPaymentMethodIdFinalize = (
    paymentMethodId: number,
    mePaymentMethodFinalizeOVH: MePaymentMethodFinalizeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentPaymentMethodOVH>(
      {url: `/me/payment/method/${paymentMethodId}/finalize`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentMethodFinalizeOVH, signal
    },
      options);
    }
  


export const getPostMePaymentMethodPaymentMethodIdFinalizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdFinalize>>, TError,{paymentMethodId: number;data: MePaymentMethodFinalizeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdFinalize>>, TError,{paymentMethodId: number;data: MePaymentMethodFinalizeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdFinalize>>, {paymentMethodId: number;data: MePaymentMethodFinalizeOVH}> = (props) => {
          const {paymentMethodId,data} = props ?? {};

          return  postMePaymentMethodPaymentMethodIdFinalize(paymentMethodId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePaymentMethodPaymentMethodIdFinalizeMutationResult = NonNullable<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdFinalize>>>
    export type PostMePaymentMethodPaymentMethodIdFinalizeMutationBody = MePaymentMethodFinalizeOVH
    export type PostMePaymentMethodPaymentMethodIdFinalizeMutationError = unknown

    /**
 * @summary Finalize a payment method registration
 */
export const usePostMePaymentMethodPaymentMethodIdFinalize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdFinalize>>, TError,{paymentMethodId: number;data: MePaymentMethodFinalizeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdFinalize>>,
        TError,
        {paymentMethodId: number;data: MePaymentMethodFinalizeOVH},
        TContext
      > => {

      const mutationOptions = getPostMePaymentMethodPaymentMethodIdFinalizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a oneclick transaction
 */
export const postMePaymentMethodPaymentMethodIdTransaction = (
    paymentMethodId: number,
    mePaymentMethodOneclickCreationOVH: MePaymentMethodOneclickCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentMethodOneclickResponseOVH>(
      {url: `/me/payment/method/${paymentMethodId}/transaction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentMethodOneclickCreationOVH, signal
    },
      options);
    }
  


export const getPostMePaymentMethodPaymentMethodIdTransactionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdTransaction>>, TError,{paymentMethodId: number;data: MePaymentMethodOneclickCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdTransaction>>, TError,{paymentMethodId: number;data: MePaymentMethodOneclickCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdTransaction>>, {paymentMethodId: number;data: MePaymentMethodOneclickCreationOVH}> = (props) => {
          const {paymentMethodId,data} = props ?? {};

          return  postMePaymentMethodPaymentMethodIdTransaction(paymentMethodId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePaymentMethodPaymentMethodIdTransactionMutationResult = NonNullable<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdTransaction>>>
    export type PostMePaymentMethodPaymentMethodIdTransactionMutationBody = MePaymentMethodOneclickCreationOVH
    export type PostMePaymentMethodPaymentMethodIdTransactionMutationError = unknown

    /**
 * @summary Create a oneclick transaction
 */
export const usePostMePaymentMethodPaymentMethodIdTransaction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdTransaction>>, TError,{paymentMethodId: number;data: MePaymentMethodOneclickCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePaymentMethodPaymentMethodIdTransaction>>,
        TError,
        {paymentMethodId: number;data: MePaymentMethodOneclickCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMePaymentMethodPaymentMethodIdTransactionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve payment transaction list
 */
export const getMePaymentTransaction = (
    params?: GetMePaymentTransactionParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/payment/transaction`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMePaymentTransactionQueryKey = (params?: GetMePaymentTransactionParams,) => {
    return [`/me/payment/transaction`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMePaymentTransactionQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentTransaction>>, TError = unknown>(params?: GetMePaymentTransactionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransaction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentTransactionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentTransaction>>> = ({ signal }) => getMePaymentTransaction(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransaction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentTransactionQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentTransaction>>>
export type GetMePaymentTransactionQueryError = unknown


export function useGetMePaymentTransaction<TData = Awaited<ReturnType<typeof getMePaymentTransaction>>, TError = unknown>(
 params: undefined |  GetMePaymentTransactionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransaction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentTransaction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentTransaction<TData = Awaited<ReturnType<typeof getMePaymentTransaction>>, TError = unknown>(
 params?: GetMePaymentTransactionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransaction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentTransaction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentTransaction<TData = Awaited<ReturnType<typeof getMePaymentTransaction>>, TError = unknown>(
 params?: GetMePaymentTransactionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransaction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve payment transaction list
 */

export function useGetMePaymentTransaction<TData = Awaited<ReturnType<typeof getMePaymentTransaction>>, TError = unknown>(
 params?: GetMePaymentTransactionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransaction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentTransactionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a transaction
 */
export const getMePaymentTransactionTransactionId = (
    transactionId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentTransactionOVH>(
      {url: `/me/payment/transaction/${transactionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePaymentTransactionTransactionIdQueryKey = (transactionId: number,) => {
    return [`/me/payment/transaction/${transactionId}`] as const;
    }

    
export const getGetMePaymentTransactionTransactionIdQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError = unknown>(transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentTransactionTransactionIdQueryKey(transactionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>> = ({ signal }) => getMePaymentTransactionTransactionId(transactionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(transactionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentTransactionTransactionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>>
export type GetMePaymentTransactionTransactionIdQueryError = unknown


export function useGetMePaymentTransactionTransactionId<TData = Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError = unknown>(
 transactionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentTransactionTransactionId<TData = Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError = unknown>(
 transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentTransactionTransactionId<TData = Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError = unknown>(
 transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a transaction
 */

export function useGetMePaymentTransactionTransactionId<TData = Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError = unknown>(
 transactionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentTransactionTransactionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentTransactionTransactionIdQueryOptions(transactionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of payment mean deferred accounts
 */
export const getMePaymentMeanDeferredPaymentAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/paymentMean/deferredPaymentAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePaymentMeanDeferredPaymentAccountQueryKey = () => {
    return [`/me/paymentMean/deferredPaymentAccount`] as const;
    }

    
export const getGetMePaymentMeanDeferredPaymentAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentMeanDeferredPaymentAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>> = ({ signal }) => getMePaymentMeanDeferredPaymentAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentMeanDeferredPaymentAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>>
export type GetMePaymentMeanDeferredPaymentAccountQueryError = unknown


export function useGetMePaymentMeanDeferredPaymentAccount<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMeanDeferredPaymentAccount<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMeanDeferredPaymentAccount<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of payment mean deferred accounts
 */

export function useGetMePaymentMeanDeferredPaymentAccount<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentMeanDeferredPaymentAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMePaymentMeanDeferredPaymentAccountId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MePaymentMeanDeferredOVH>(
      {url: `/me/paymentMean/deferredPaymentAccount/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePaymentMeanDeferredPaymentAccountIdQueryKey = (id: number,) => {
    return [`/me/paymentMean/deferredPaymentAccount/${id}`] as const;
    }

    
export const getGetMePaymentMeanDeferredPaymentAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePaymentMeanDeferredPaymentAccountIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>> = ({ signal }) => getMePaymentMeanDeferredPaymentAccountId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePaymentMeanDeferredPaymentAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>>
export type GetMePaymentMeanDeferredPaymentAccountIdQueryError = unknown


export function useGetMePaymentMeanDeferredPaymentAccountId<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMeanDeferredPaymentAccountId<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePaymentMeanDeferredPaymentAccountId<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMePaymentMeanDeferredPaymentAccountId<TData = Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePaymentMeanDeferredPaymentAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePaymentMeanDeferredPaymentAccountIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMePaymentMeanDeferredPaymentAccountId = (
    id: number,
    mePaymentMeanDeferredOVH: NonReadonly<MePaymentMeanDeferredOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/paymentMean/deferredPaymentAccount/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mePaymentMeanDeferredOVH
    },
      options);
    }
  


export const getPutMePaymentMeanDeferredPaymentAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMePaymentMeanDeferredPaymentAccountId>>, TError,{id: number;data: NonReadonly<MePaymentMeanDeferredOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMePaymentMeanDeferredPaymentAccountId>>, TError,{id: number;data: NonReadonly<MePaymentMeanDeferredOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMePaymentMeanDeferredPaymentAccountId>>, {id: number;data: NonReadonly<MePaymentMeanDeferredOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMePaymentMeanDeferredPaymentAccountId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMePaymentMeanDeferredPaymentAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMePaymentMeanDeferredPaymentAccountId>>>
    export type PutMePaymentMeanDeferredPaymentAccountIdMutationBody = NonReadonly<MePaymentMeanDeferredOVH>
    export type PutMePaymentMeanDeferredPaymentAccountIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMePaymentMeanDeferredPaymentAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMePaymentMeanDeferredPaymentAccountId>>, TError,{id: number;data: NonReadonly<MePaymentMeanDeferredOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMePaymentMeanDeferredPaymentAccountId>>,
        TError,
        {id: number;data: NonReadonly<MePaymentMeanDeferredOVH>},
        TContext
      > => {

      const mutationOptions = getPutMePaymentMeanDeferredPaymentAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Choose this deferred account as your default payment mean. Will cancel the previous choice.
 */
export const postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/paymentMean/deferredPaymentAccount/${id}/chooseAsDefaultPaymentMean`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanMutationResult = NonNullable<Awaited<ReturnType<typeof postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean>>>
    
    export type PostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanMutationError = unknown

    /**
 * @summary Choose this deferred account as your default payment mean. Will cancel the previous choice.
 */
export const usePostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMean>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Manager preferences
 */
export const getMePreferencesManager = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/preferences/manager`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePreferencesManagerQueryKey = () => {
    return [`/me/preferences/manager`] as const;
    }

    
export const getGetMePreferencesManagerQueryOptions = <TData = Awaited<ReturnType<typeof getMePreferencesManager>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManager>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePreferencesManagerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePreferencesManager>>> = ({ signal }) => getMePreferencesManager(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManager>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePreferencesManagerQueryResult = NonNullable<Awaited<ReturnType<typeof getMePreferencesManager>>>
export type GetMePreferencesManagerQueryError = unknown


export function useGetMePreferencesManager<TData = Awaited<ReturnType<typeof getMePreferencesManager>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManager>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePreferencesManager>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePreferencesManager<TData = Awaited<ReturnType<typeof getMePreferencesManager>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManager>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePreferencesManager>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePreferencesManager<TData = Awaited<ReturnType<typeof getMePreferencesManager>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManager>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Manager preferences
 */

export function useGetMePreferencesManager<TData = Awaited<ReturnType<typeof getMePreferencesManager>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManager>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePreferencesManagerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a preference
 */
export const postMePreferencesManager = (
    postMePreferencesManagerBody: PostMePreferencesManagerBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/preferences/manager`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMePreferencesManagerBody, signal
    },
      options);
    }
  


export const getPostMePreferencesManagerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePreferencesManager>>, TError,{data: PostMePreferencesManagerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMePreferencesManager>>, TError,{data: PostMePreferencesManagerBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMePreferencesManager>>, {data: PostMePreferencesManagerBody}> = (props) => {
          const {data} = props ?? {};

          return  postMePreferencesManager(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMePreferencesManagerMutationResult = NonNullable<Awaited<ReturnType<typeof postMePreferencesManager>>>
    export type PostMePreferencesManagerMutationBody = PostMePreferencesManagerBody
    export type PostMePreferencesManagerMutationError = unknown

    /**
 * @summary Add a preference
 */
export const usePostMePreferencesManager = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMePreferencesManager>>, TError,{data: PostMePreferencesManagerBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMePreferencesManager>>,
        TError,
        {data: PostMePreferencesManagerBody},
        TContext
      > => {

      const mutationOptions = getPostMePreferencesManagerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this preference
 */
export const deleteMePreferencesManagerKey = (
    key: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/preferences/manager/${key}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMePreferencesManagerKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMePreferencesManagerKey>>, TError,{key: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMePreferencesManagerKey>>, TError,{key: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMePreferencesManagerKey>>, {key: string}> = (props) => {
          const {key} = props ?? {};

          return  deleteMePreferencesManagerKey(key,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMePreferencesManagerKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMePreferencesManagerKey>>>
    
    export type DeleteMePreferencesManagerKeyMutationError = unknown

    /**
 * @summary Remove this preference
 */
export const useDeleteMePreferencesManagerKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMePreferencesManagerKey>>, TError,{key: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMePreferencesManagerKey>>,
        TError,
        {key: string},
        TContext
      > => {

      const mutationOptions = getDeleteMePreferencesManagerKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMePreferencesManagerKey = (
    key: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleManagerPreferenceOVH>(
      {url: `/me/preferences/manager/${key}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMePreferencesManagerKeyQueryKey = (key: string,) => {
    return [`/me/preferences/manager/${key}`] as const;
    }

    
export const getGetMePreferencesManagerKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError = unknown>(key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMePreferencesManagerKeyQueryKey(key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMePreferencesManagerKey>>> = ({ signal }) => getMePreferencesManagerKey(key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMePreferencesManagerKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMePreferencesManagerKey>>>
export type GetMePreferencesManagerKeyQueryError = unknown


export function useGetMePreferencesManagerKey<TData = Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError = unknown>(
 key: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePreferencesManagerKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePreferencesManagerKey<TData = Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMePreferencesManagerKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMePreferencesManagerKey<TData = Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMePreferencesManagerKey<TData = Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMePreferencesManagerKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMePreferencesManagerKeyQueryOptions(key,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMePreferencesManagerKey = (
    key: string,
    nichandleManagerPreferenceOVH: NonReadonly<NichandleManagerPreferenceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/preferences/manager/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleManagerPreferenceOVH
    },
      options);
    }
  


export const getPutMePreferencesManagerKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMePreferencesManagerKey>>, TError,{key: string;data: NonReadonly<NichandleManagerPreferenceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMePreferencesManagerKey>>, TError,{key: string;data: NonReadonly<NichandleManagerPreferenceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMePreferencesManagerKey>>, {key: string;data: NonReadonly<NichandleManagerPreferenceOVH>}> = (props) => {
          const {key,data} = props ?? {};

          return  putMePreferencesManagerKey(key,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMePreferencesManagerKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMePreferencesManagerKey>>>
    export type PutMePreferencesManagerKeyMutationBody = NonReadonly<NichandleManagerPreferenceOVH>
    export type PutMePreferencesManagerKeyMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMePreferencesManagerKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMePreferencesManagerKey>>, TError,{key: string;data: NonReadonly<NichandleManagerPreferenceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMePreferencesManagerKey>>,
        TError,
        {key: string;data: NonReadonly<NichandleManagerPreferenceOVH>},
        TContext
      > => {

      const mutationOptions = getPutMePreferencesManagerKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve the status of the 2FA procedure
 */
export const getMeProcedure2FA = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedure2FAStatusOVH>(
      {url: `/me/procedure/2FA`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeProcedure2FAQueryKey = () => {
    return [`/me/procedure/2FA`] as const;
    }

    
export const getGetMeProcedure2FAQueryOptions = <TData = Awaited<ReturnType<typeof getMeProcedure2FA>>, TError = GetMeProcedure2FA500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedure2FA>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeProcedure2FAQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeProcedure2FA>>> = ({ signal }) => getMeProcedure2FA(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeProcedure2FA>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeProcedure2FAQueryResult = NonNullable<Awaited<ReturnType<typeof getMeProcedure2FA>>>
export type GetMeProcedure2FAQueryError = GetMeProcedure2FA500


export function useGetMeProcedure2FA<TData = Awaited<ReturnType<typeof getMeProcedure2FA>>, TError = GetMeProcedure2FA500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedure2FA>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeProcedure2FA>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeProcedure2FA<TData = Awaited<ReturnType<typeof getMeProcedure2FA>>, TError = GetMeProcedure2FA500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedure2FA>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeProcedure2FA>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeProcedure2FA<TData = Awaited<ReturnType<typeof getMeProcedure2FA>>, TError = GetMeProcedure2FA500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedure2FA>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve the status of the 2FA procedure
 */

export function useGetMeProcedure2FA<TData = Awaited<ReturnType<typeof getMeProcedure2FA>>, TError = GetMeProcedure2FA500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedure2FA>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeProcedure2FAQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Initiate a 2FA procedure
 */
export const postMeProcedure2FA = (
    meProcedure2FACreateOVH: MeProcedure2FACreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedure2FACreateResponseOVH>(
      {url: `/me/procedure/2FA`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meProcedure2FACreateOVH, signal
    },
      options);
    }
  


export const getPostMeProcedure2FAMutationOptions = <TError = PostMeProcedure2FA400 | PostMeProcedure2FA500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedure2FA>>, TError,{data: MeProcedure2FACreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedure2FA>>, TError,{data: MeProcedure2FACreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedure2FA>>, {data: MeProcedure2FACreateOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeProcedure2FA(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedure2FAMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedure2FA>>>
    export type PostMeProcedure2FAMutationBody = MeProcedure2FACreateOVH
    export type PostMeProcedure2FAMutationError = PostMeProcedure2FA400 | PostMeProcedure2FA500

    /**
 * @summary Initiate a 2FA procedure
 */
export const usePostMeProcedure2FA = <TError = PostMeProcedure2FA400 | PostMeProcedure2FA500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedure2FA>>, TError,{data: MeProcedure2FACreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedure2FA>>,
        TError,
        {data: MeProcedure2FACreateOVH},
        TContext
      > => {

      const mutationOptions = getPostMeProcedure2FAMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalize a 2FA procedure
 */
export const postMeProcedure2FAFinalize = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/procedure/2FA/finalize`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeProcedure2FAFinalizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedure2FAFinalize>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedure2FAFinalize>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedure2FAFinalize>>, void> = () => {
          

          return  postMeProcedure2FAFinalize(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedure2FAFinalizeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedure2FAFinalize>>>
    
    export type PostMeProcedure2FAFinalizeMutationError = unknown

    /**
 * @summary Finalize a 2FA procedure
 */
export const usePostMeProcedure2FAFinalize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedure2FAFinalize>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedure2FAFinalize>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeProcedure2FAFinalizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve the status of the fraud procedure
 */
export const getMeProcedureFraud = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedureFraudStatusOVH>(
      {url: `/me/procedure/fraud`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeProcedureFraudQueryKey = () => {
    return [`/me/procedure/fraud`] as const;
    }

    
export const getGetMeProcedureFraudQueryOptions = <TData = Awaited<ReturnType<typeof getMeProcedureFraud>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureFraud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeProcedureFraudQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeProcedureFraud>>> = ({ signal }) => getMeProcedureFraud(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureFraud>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeProcedureFraudQueryResult = NonNullable<Awaited<ReturnType<typeof getMeProcedureFraud>>>
export type GetMeProcedureFraudQueryError = unknown


export function useGetMeProcedureFraud<TData = Awaited<ReturnType<typeof getMeProcedureFraud>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureFraud>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeProcedureFraud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeProcedureFraud<TData = Awaited<ReturnType<typeof getMeProcedureFraud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureFraud>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeProcedureFraud>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeProcedureFraud<TData = Awaited<ReturnType<typeof getMeProcedureFraud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureFraud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve the status of the fraud procedure
 */

export function useGetMeProcedureFraud<TData = Awaited<ReturnType<typeof getMeProcedureFraud>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureFraud>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeProcedureFraudQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Initiate a fraud procedure
 */
export const postMeProcedureFraud = (
    meProcedureFraudCreateOVH: MeProcedureFraudCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedureFraudCreateResponseOVH>(
      {url: `/me/procedure/fraud`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meProcedureFraudCreateOVH, signal
    },
      options);
    }
  


export const getPostMeProcedureFraudMutationOptions = <TError = PostMeProcedureFraud400 | PostMeProcedureFraud500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureFraud>>, TError,{data: MeProcedureFraudCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureFraud>>, TError,{data: MeProcedureFraudCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedureFraud>>, {data: MeProcedureFraudCreateOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeProcedureFraud(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedureFraudMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedureFraud>>>
    export type PostMeProcedureFraudMutationBody = MeProcedureFraudCreateOVH
    export type PostMeProcedureFraudMutationError = PostMeProcedureFraud400 | PostMeProcedureFraud500

    /**
 * @summary Initiate a fraud procedure
 */
export const usePostMeProcedureFraud = <TError = PostMeProcedureFraud400 | PostMeProcedureFraud500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureFraud>>, TError,{data: MeProcedureFraudCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedureFraud>>,
        TError,
        {data: MeProcedureFraudCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostMeProcedureFraudMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalize a fraud procedure
 */
export const postMeProcedureFraudFinalize = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/procedure/fraud/finalize`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeProcedureFraudFinalizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureFraudFinalize>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureFraudFinalize>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedureFraudFinalize>>, void> = () => {
          

          return  postMeProcedureFraudFinalize(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedureFraudFinalizeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedureFraudFinalize>>>
    
    export type PostMeProcedureFraudFinalizeMutationError = unknown

    /**
 * @summary Finalize a fraud procedure
 */
export const usePostMeProcedureFraudFinalize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureFraudFinalize>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedureFraudFinalize>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeProcedureFraudFinalizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Initiate a GDPR procedure
 */
export const postMeProcedureGdpr = (
    meProcedureGDPRCreateOVH: MeProcedureGDPRCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedureGDPRCreateResponseOVH>(
      {url: `/me/procedure/gdpr`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meProcedureGDPRCreateOVH, signal
    },
      options);
    }
  


export const getPostMeProcedureGdprMutationOptions = <TError = PostMeProcedureGdpr400 | PostMeProcedureGdpr500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureGdpr>>, TError,{data: MeProcedureGDPRCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureGdpr>>, TError,{data: MeProcedureGDPRCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedureGdpr>>, {data: MeProcedureGDPRCreateOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeProcedureGdpr(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedureGdprMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedureGdpr>>>
    export type PostMeProcedureGdprMutationBody = MeProcedureGDPRCreateOVH
    export type PostMeProcedureGdprMutationError = PostMeProcedureGdpr400 | PostMeProcedureGdpr500

    /**
 * @summary Initiate a GDPR procedure
 */
export const usePostMeProcedureGdpr = <TError = PostMeProcedureGdpr400 | PostMeProcedureGdpr500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureGdpr>>, TError,{data: MeProcedureGDPRCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedureGdpr>>,
        TError,
        {data: MeProcedureGDPRCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostMeProcedureGdprMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalize a GDPR procedure
 */
export const postMeProcedureGdprFinalize = (
    meProcedureGDPRFinalizeOVH: MeProcedureGDPRFinalizeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/procedure/gdpr/finalize`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meProcedureGDPRFinalizeOVH, signal
    },
      options);
    }
  


export const getPostMeProcedureGdprFinalizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureGdprFinalize>>, TError,{data: MeProcedureGDPRFinalizeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureGdprFinalize>>, TError,{data: MeProcedureGDPRFinalizeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedureGdprFinalize>>, {data: MeProcedureGDPRFinalizeOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeProcedureGdprFinalize(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedureGdprFinalizeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedureGdprFinalize>>>
    export type PostMeProcedureGdprFinalizeMutationBody = MeProcedureGDPRFinalizeOVH
    export type PostMeProcedureGdprFinalizeMutationError = unknown

    /**
 * @summary Finalize a GDPR procedure
 */
export const usePostMeProcedureGdprFinalize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureGdprFinalize>>, TError,{data: MeProcedureGDPRFinalizeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedureGdprFinalize>>,
        TError,
        {data: MeProcedureGDPRFinalizeOVH},
        TContext
      > => {

      const mutationOptions = getPostMeProcedureGdprFinalizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve the status of the identity procedure
 */
export const getMeProcedureIdentity = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedureIdentityStatusOVH>(
      {url: `/me/procedure/identity`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeProcedureIdentityQueryKey = () => {
    return [`/me/procedure/identity`] as const;
    }

    
export const getGetMeProcedureIdentityQueryOptions = <TData = Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeProcedureIdentityQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeProcedureIdentity>>> = ({ signal }) => getMeProcedureIdentity(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeProcedureIdentityQueryResult = NonNullable<Awaited<ReturnType<typeof getMeProcedureIdentity>>>
export type GetMeProcedureIdentityQueryError = unknown


export function useGetMeProcedureIdentity<TData = Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeProcedureIdentity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeProcedureIdentity<TData = Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeProcedureIdentity>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeProcedureIdentity<TData = Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve the status of the identity procedure
 */

export function useGetMeProcedureIdentity<TData = Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeProcedureIdentity>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeProcedureIdentityQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Initiate an identity procedure
 */
export const postMeProcedureIdentity = (
    meProcedureIdentityCreateOVH: MeProcedureIdentityCreateOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeProcedureIdentityCreateResponseOVH>(
      {url: `/me/procedure/identity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meProcedureIdentityCreateOVH, signal
    },
      options);
    }
  


export const getPostMeProcedureIdentityMutationOptions = <TError = PostMeProcedureIdentity400 | PostMeProcedureIdentity500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureIdentity>>, TError,{data: MeProcedureIdentityCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureIdentity>>, TError,{data: MeProcedureIdentityCreateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedureIdentity>>, {data: MeProcedureIdentityCreateOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeProcedureIdentity(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedureIdentityMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedureIdentity>>>
    export type PostMeProcedureIdentityMutationBody = MeProcedureIdentityCreateOVH
    export type PostMeProcedureIdentityMutationError = PostMeProcedureIdentity400 | PostMeProcedureIdentity500

    /**
 * @summary Initiate an identity procedure
 */
export const usePostMeProcedureIdentity = <TError = PostMeProcedureIdentity400 | PostMeProcedureIdentity500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureIdentity>>, TError,{data: MeProcedureIdentityCreateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedureIdentity>>,
        TError,
        {data: MeProcedureIdentityCreateOVH},
        TContext
      > => {

      const mutationOptions = getPostMeProcedureIdentityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalize an identity procedure
 */
export const postMeProcedureIdentityFinalize = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/procedure/identity/finalize`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeProcedureIdentityFinalizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureIdentityFinalize>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureIdentityFinalize>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeProcedureIdentityFinalize>>, void> = () => {
          

          return  postMeProcedureIdentityFinalize(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeProcedureIdentityFinalizeMutationResult = NonNullable<Awaited<ReturnType<typeof postMeProcedureIdentityFinalize>>>
    
    export type PostMeProcedureIdentityFinalizeMutationError = unknown

    /**
 * @summary Finalize an identity procedure
 */
export const usePostMeProcedureIdentityFinalize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeProcedureIdentityFinalize>>, TError,void, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeProcedureIdentityFinalize>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMeProcedureIdentityFinalizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeRecommendations = (
    params?: GetMeRecommendationsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<RecommendationsRecommendationsOVH>(
      {url: `/me/recommendations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeRecommendationsQueryKey = (params?: GetMeRecommendationsParams,) => {
    return [`/me/recommendations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeRecommendationsQueryOptions = <TData = Awaited<ReturnType<typeof getMeRecommendations>>, TError = unknown>(params?: GetMeRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRecommendations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRecommendationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRecommendations>>> = ({ signal }) => getMeRecommendations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRecommendations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRecommendationsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRecommendations>>>
export type GetMeRecommendationsQueryError = unknown


export function useGetMeRecommendations<TData = Awaited<ReturnType<typeof getMeRecommendations>>, TError = unknown>(
 params: undefined |  GetMeRecommendationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRecommendations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRecommendations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRecommendations<TData = Awaited<ReturnType<typeof getMeRecommendations>>, TError = unknown>(
 params?: GetMeRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRecommendations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRecommendations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRecommendations<TData = Awaited<ReturnType<typeof getMeRecommendations>>, TError = unknown>(
 params?: GetMeRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRecommendations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeRecommendations<TData = Awaited<ReturnType<typeof getMeRecommendations>>, TError = unknown>(
 params?: GetMeRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRecommendations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRecommendationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of all the refunds the logged account has
 */
export const getMeRefund = (
    params?: GetMeRefundParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/refund`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeRefundQueryKey = (params?: GetMeRefundParams,) => {
    return [`/me/refund`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeRefundQueryOptions = <TData = Awaited<ReturnType<typeof getMeRefund>>, TError = unknown>(params?: GetMeRefundParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefund>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRefundQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRefund>>> = ({ signal }) => getMeRefund(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRefund>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRefundQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRefund>>>
export type GetMeRefundQueryError = unknown


export function useGetMeRefund<TData = Awaited<ReturnType<typeof getMeRefund>>, TError = unknown>(
 params: undefined |  GetMeRefundParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefund>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefund>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefund<TData = Awaited<ReturnType<typeof getMeRefund>>, TError = unknown>(
 params?: GetMeRefundParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefund>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefund>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefund<TData = Awaited<ReturnType<typeof getMeRefund>>, TError = unknown>(
 params?: GetMeRefundParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefund>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of all the refunds the logged account has
 */

export function useGetMeRefund<TData = Awaited<ReturnType<typeof getMeRefund>>, TError = unknown>(
 params?: GetMeRefundParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefund>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRefundQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Exports a bundle of refunds
 */
export const postMeRefundExport = (
    postMeRefundExportBody: PostMeRefundExportBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/refund/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeRefundExportBody, signal
    },
      options);
    }
  


export const getPostMeRefundExportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeRefundExport>>, TError,{data: PostMeRefundExportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeRefundExport>>, TError,{data: PostMeRefundExportBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeRefundExport>>, {data: PostMeRefundExportBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeRefundExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeRefundExportMutationResult = NonNullable<Awaited<ReturnType<typeof postMeRefundExport>>>
    export type PostMeRefundExportMutationBody = PostMeRefundExportBody
    export type PostMeRefundExportMutationError = unknown

    /**
 * @summary Exports a bundle of refunds
 */
export const usePostMeRefundExport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeRefundExport>>, TError,{data: PostMeRefundExportBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeRefundExport>>,
        TError,
        {data: PostMeRefundExportBody},
        TContext
      > => {

      const mutationOptions = getPostMeRefundExportMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeRefundRefundId = (
    refundId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingRefundOVH>(
      {url: `/me/refund/${refundId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeRefundRefundIdQueryKey = (refundId: string,) => {
    return [`/me/refund/${refundId}`] as const;
    }

    
export const getGetMeRefundRefundIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeRefundRefundId>>, TError = unknown>(refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRefundRefundIdQueryKey(refundId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRefundRefundId>>> = ({ signal }) => getMeRefundRefundId(refundId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(refundId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRefundRefundIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRefundRefundId>>>
export type GetMeRefundRefundIdQueryError = unknown


export function useGetMeRefundRefundId<TData = Awaited<ReturnType<typeof getMeRefundRefundId>>, TError = unknown>(
 refundId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundId<TData = Awaited<ReturnType<typeof getMeRefundRefundId>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundId<TData = Awaited<ReturnType<typeof getMeRefundRefundId>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeRefundRefundId<TData = Awaited<ReturnType<typeof getMeRefundRefundId>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRefundRefundIdQueryOptions(refundId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give access to all entries of the refund
 */
export const getMeRefundRefundIdDetails = (
    refundId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/refund/${refundId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeRefundRefundIdDetailsQueryKey = (refundId: string,) => {
    return [`/me/refund/${refundId}/details`] as const;
    }

    
export const getGetMeRefundRefundIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError = unknown>(refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRefundRefundIdDetailsQueryKey(refundId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>> = ({ signal }) => getMeRefundRefundIdDetails(refundId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(refundId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRefundRefundIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>>
export type GetMeRefundRefundIdDetailsQueryError = unknown


export function useGetMeRefundRefundIdDetails<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError = unknown>(
 refundId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdDetails<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdDetails<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of the refund
 */

export function useGetMeRefundRefundIdDetails<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRefundRefundIdDetailsQueryOptions(refundId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeRefundRefundIdDetailsRefundDetailId = (
    refundId: string,
    refundDetailId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingRefundDetailOVH>(
      {url: `/me/refund/${refundId}/details/${refundDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeRefundRefundIdDetailsRefundDetailIdQueryKey = (refundId: string,
    refundDetailId: string,) => {
    return [`/me/refund/${refundId}/details/${refundDetailId}`] as const;
    }

    
export const getGetMeRefundRefundIdDetailsRefundDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError = unknown>(refundId: string,
    refundDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRefundRefundIdDetailsRefundDetailIdQueryKey(refundId,refundDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>> = ({ signal }) => getMeRefundRefundIdDetailsRefundDetailId(refundId,refundDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(refundId && refundDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRefundRefundIdDetailsRefundDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>>
export type GetMeRefundRefundIdDetailsRefundDetailIdQueryError = unknown


export function useGetMeRefundRefundIdDetailsRefundDetailId<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError = unknown>(
 refundId: string,
    refundDetailId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdDetailsRefundDetailId<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError = unknown>(
 refundId: string,
    refundDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdDetailsRefundDetailId<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError = unknown>(
 refundId: string,
    refundDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeRefundRefundIdDetailsRefundDetailId<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError = unknown>(
 refundId: string,
    refundDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDetailsRefundDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRefundRefundIdDetailsRefundDetailIdQueryOptions(refundId,refundDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeRefundRefundIdPayment = (
    refundId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/refund/${refundId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeRefundRefundIdPaymentQueryKey = (refundId: string,) => {
    return [`/me/refund/${refundId}/payment`] as const;
    }

    
export const getGetMeRefundRefundIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError = unknown>(refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRefundRefundIdPaymentQueryKey(refundId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>> = ({ signal }) => getMeRefundRefundIdPayment(refundId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(refundId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRefundRefundIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>>
export type GetMeRefundRefundIdPaymentQueryError = unknown


export function useGetMeRefundRefundIdPayment<TData = Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError = unknown>(
 refundId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdPayment<TData = Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdPayment<TData = Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeRefundRefundIdPayment<TData = Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError = unknown>(
 refundId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRefundRefundIdPaymentQueryOptions(refundId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * This endpoint will return a list of all of your active VPS and Bare Metal subscriptions (including Server and Eco Range) along with details about the current base price and the estimated price increase, excluding active deals and promotions. To estimate those prices, apply the associated discounts to the new pricing for all of your services.
 * @summary Get price changes for your VPS and Bare Metal subscriptions
 */
export const getMeRepricingFall22 = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeRepricingServiceOVH[]>(
      {url: `/me/repricing/fall22`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeRepricingFall22QueryKey = () => {
    return [`/me/repricing/fall22`] as const;
    }

    
export const getGetMeRepricingFall22QueryOptions = <TData = Awaited<ReturnType<typeof getMeRepricingFall22>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRepricingFall22>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRepricingFall22QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRepricingFall22>>> = ({ signal }) => getMeRepricingFall22(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRepricingFall22>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRepricingFall22QueryResult = NonNullable<Awaited<ReturnType<typeof getMeRepricingFall22>>>
export type GetMeRepricingFall22QueryError = unknown


export function useGetMeRepricingFall22<TData = Awaited<ReturnType<typeof getMeRepricingFall22>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRepricingFall22>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRepricingFall22>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRepricingFall22<TData = Awaited<ReturnType<typeof getMeRepricingFall22>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRepricingFall22>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRepricingFall22>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRepricingFall22<TData = Awaited<ReturnType<typeof getMeRepricingFall22>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRepricingFall22>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get price changes for your VPS and Bare Metal subscriptions
 */

export function useGetMeRepricingFall22<TData = Awaited<ReturnType<typeof getMeRepricingFall22>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRepricingFall22>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRepricingFall22QueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all the bills sent by the current account
 */
export const getMeReverseBill = (
    params?: GetMeReverseBillParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/reverseBill`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeReverseBillQueryKey = (params?: GetMeReverseBillParams,) => {
    return [`/me/reverseBill`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeReverseBillQueryOptions = <TData = Awaited<ReturnType<typeof getMeReverseBill>>, TError = unknown>(params?: GetMeReverseBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBill>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeReverseBillQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeReverseBill>>> = ({ signal }) => getMeReverseBill(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBill>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeReverseBillQueryResult = NonNullable<Awaited<ReturnType<typeof getMeReverseBill>>>
export type GetMeReverseBillQueryError = unknown


export function useGetMeReverseBill<TData = Awaited<ReturnType<typeof getMeReverseBill>>, TError = unknown>(
 params: undefined |  GetMeReverseBillParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBill>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBill>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBill<TData = Awaited<ReturnType<typeof getMeReverseBill>>, TError = unknown>(
 params?: GetMeReverseBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBill>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBill>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBill<TData = Awaited<ReturnType<typeof getMeReverseBill>>, TError = unknown>(
 params?: GetMeReverseBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBill>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all the bills sent by the current account
 */

export function useGetMeReverseBill<TData = Awaited<ReturnType<typeof getMeReverseBill>>, TError = unknown>(
 params?: GetMeReverseBillParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBill>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeReverseBillQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeReverseBillReverseBillId = (
    reverseBillId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingReverseBillOVH>(
      {url: `/me/reverseBill/${reverseBillId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeReverseBillReverseBillIdQueryKey = (reverseBillId: string,) => {
    return [`/me/reverseBill/${reverseBillId}`] as const;
    }

    
export const getGetMeReverseBillReverseBillIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError = unknown>(reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeReverseBillReverseBillIdQueryKey(reverseBillId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>> = ({ signal }) => getMeReverseBillReverseBillId(reverseBillId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reverseBillId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeReverseBillReverseBillIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>>
export type GetMeReverseBillReverseBillIdQueryError = unknown


export function useGetMeReverseBillReverseBillId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError = unknown>(
 reverseBillId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeReverseBillReverseBillId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeReverseBillReverseBillIdQueryOptions(reverseBillId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give access to all entries of this withdrawal
 */
export const getMeReverseBillReverseBillIdDetails = (
    reverseBillId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/reverseBill/${reverseBillId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeReverseBillReverseBillIdDetailsQueryKey = (reverseBillId: string,) => {
    return [`/me/reverseBill/${reverseBillId}/details`] as const;
    }

    
export const getGetMeReverseBillReverseBillIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError = unknown>(reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeReverseBillReverseBillIdDetailsQueryKey(reverseBillId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>> = ({ signal }) => getMeReverseBillReverseBillIdDetails(reverseBillId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reverseBillId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeReverseBillReverseBillIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>>
export type GetMeReverseBillReverseBillIdDetailsQueryError = unknown


export function useGetMeReverseBillReverseBillIdDetails<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError = unknown>(
 reverseBillId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillIdDetails<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillIdDetails<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of this withdrawal
 */

export function useGetMeReverseBillReverseBillIdDetails<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeReverseBillReverseBillIdDetailsQueryOptions(reverseBillId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeReverseBillReverseBillIdDetailsReverseBillDetailId = (
    reverseBillId: string,
    reverseBillDetailId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingReversableBillDetailOVH>(
      {url: `/me/reverseBill/${reverseBillId}/details/${reverseBillDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeReverseBillReverseBillIdDetailsReverseBillDetailIdQueryKey = (reverseBillId: string,
    reverseBillDetailId: string,) => {
    return [`/me/reverseBill/${reverseBillId}/details/${reverseBillDetailId}`] as const;
    }

    
export const getGetMeReverseBillReverseBillIdDetailsReverseBillDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError = unknown>(reverseBillId: string,
    reverseBillDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeReverseBillReverseBillIdDetailsReverseBillDetailIdQueryKey(reverseBillId,reverseBillDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>> = ({ signal }) => getMeReverseBillReverseBillIdDetailsReverseBillDetailId(reverseBillId,reverseBillDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reverseBillId && reverseBillDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeReverseBillReverseBillIdDetailsReverseBillDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>>
export type GetMeReverseBillReverseBillIdDetailsReverseBillDetailIdQueryError = unknown


export function useGetMeReverseBillReverseBillIdDetailsReverseBillDetailId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError = unknown>(
 reverseBillId: string,
    reverseBillDetailId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillIdDetailsReverseBillDetailId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError = unknown>(
 reverseBillId: string,
    reverseBillDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillIdDetailsReverseBillDetailId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError = unknown>(
 reverseBillId: string,
    reverseBillDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeReverseBillReverseBillIdDetailsReverseBillDetailId<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError = unknown>(
 reverseBillId: string,
    reverseBillDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdDetailsReverseBillDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeReverseBillReverseBillIdDetailsReverseBillDetailIdQueryOptions(reverseBillId,reverseBillDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeReverseBillReverseBillIdPayment = (
    reverseBillId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/reverseBill/${reverseBillId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeReverseBillReverseBillIdPaymentQueryKey = (reverseBillId: string,) => {
    return [`/me/reverseBill/${reverseBillId}/payment`] as const;
    }

    
export const getGetMeReverseBillReverseBillIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError = unknown>(reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeReverseBillReverseBillIdPaymentQueryKey(reverseBillId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>> = ({ signal }) => getMeReverseBillReverseBillIdPayment(reverseBillId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reverseBillId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeReverseBillReverseBillIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>>
export type GetMeReverseBillReverseBillIdPaymentQueryError = unknown


export function useGetMeReverseBillReverseBillIdPayment<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError = unknown>(
 reverseBillId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillIdPayment<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeReverseBillReverseBillIdPayment<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeReverseBillReverseBillIdPayment<TData = Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError = unknown>(
 reverseBillId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeReverseBillReverseBillIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeReverseBillReverseBillIdPaymentQueryOptions(reverseBillId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List active SLA
 */
export const getMeSla = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/sla`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSlaQueryKey = () => {
    return [`/me/sla`] as const;
    }

    
export const getGetMeSlaQueryOptions = <TData = Awaited<ReturnType<typeof getMeSla>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSla>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSlaQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSla>>> = ({ signal }) => getMeSla(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSla>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSlaQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSla>>>
export type GetMeSlaQueryError = unknown


export function useGetMeSla<TData = Awaited<ReturnType<typeof getMeSla>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSla>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSla>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSla<TData = Awaited<ReturnType<typeof getMeSla>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSla>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSla>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSla<TData = Awaited<ReturnType<typeof getMeSla>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSla>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List active SLA
 */

export function useGetMeSla<TData = Awaited<ReturnType<typeof getMeSla>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSla>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSlaQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeSlaId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingSlaOperationOVH>(
      {url: `/me/sla/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSlaIdQueryKey = (id: number,) => {
    return [`/me/sla/${id}`] as const;
    }

    
export const getGetMeSlaIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeSlaId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSlaIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSlaId>>> = ({ signal }) => getMeSlaId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSlaId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSlaIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSlaId>>>
export type GetMeSlaIdQueryError = unknown


export function useGetMeSlaId<TData = Awaited<ReturnType<typeof getMeSlaId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaId<TData = Awaited<ReturnType<typeof getMeSlaId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaId<TData = Awaited<ReturnType<typeof getMeSlaId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeSlaId<TData = Awaited<ReturnType<typeof getMeSlaId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSlaIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for SLA application
 */
export const postMeSlaIdApply = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/sla/${id}/apply`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeSlaIdApplyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSlaIdApply>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSlaIdApply>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSlaIdApply>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeSlaIdApply(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSlaIdApplyMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSlaIdApply>>>
    
    export type PostMeSlaIdApplyMutationError = unknown

    /**
 * @summary Ask for SLA application
 */
export const usePostMeSlaIdApply = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSlaIdApply>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSlaIdApply>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeSlaIdApplyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Check whether this SLA can be applied on your services
 */
export const getMeSlaIdCanBeApplied = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/me/sla/${id}/canBeApplied`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSlaIdCanBeAppliedQueryKey = (id: number,) => {
    return [`/me/sla/${id}/canBeApplied`] as const;
    }

    
export const getGetMeSlaIdCanBeAppliedQueryOptions = <TData = Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSlaIdCanBeAppliedQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>> = ({ signal }) => getMeSlaIdCanBeApplied(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSlaIdCanBeAppliedQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>>
export type GetMeSlaIdCanBeAppliedQueryError = unknown


export function useGetMeSlaIdCanBeApplied<TData = Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaIdCanBeApplied<TData = Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaIdCanBeApplied<TData = Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check whether this SLA can be applied on your services
 */

export function useGetMeSlaIdCanBeApplied<TData = Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdCanBeApplied>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSlaIdCanBeAppliedQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get services impacted by this SLA
 */
export const getMeSlaIdServices = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingSlaOperationServiceOVH[]>(
      {url: `/me/sla/${id}/services`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSlaIdServicesQueryKey = (id: number,) => {
    return [`/me/sla/${id}/services`] as const;
    }

    
export const getGetMeSlaIdServicesQueryOptions = <TData = Awaited<ReturnType<typeof getMeSlaIdServices>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSlaIdServicesQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSlaIdServices>>> = ({ signal }) => getMeSlaIdServices(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSlaIdServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSlaIdServices>>>
export type GetMeSlaIdServicesQueryError = unknown


export function useGetMeSlaIdServices<TData = Awaited<ReturnType<typeof getMeSlaIdServices>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaIdServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaIdServices<TData = Awaited<ReturnType<typeof getMeSlaIdServices>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaIdServices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaIdServices<TData = Awaited<ReturnType<typeof getMeSlaIdServices>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get services impacted by this SLA
 */

export function useGetMeSlaIdServices<TData = Awaited<ReturnType<typeof getMeSlaIdServices>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdServices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSlaIdServicesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the status request of this SLA
 */
export const getMeSlaIdStatus = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/sla/${id}/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSlaIdStatusQueryKey = (id: number,) => {
    return [`/me/sla/${id}/status`] as const;
    }

    
export const getGetMeSlaIdStatusQueryOptions = <TData = Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSlaIdStatusQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSlaIdStatus>>> = ({ signal }) => getMeSlaIdStatus(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSlaIdStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSlaIdStatus>>>
export type GetMeSlaIdStatusQueryError = unknown


export function useGetMeSlaIdStatus<TData = Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaIdStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaIdStatus<TData = Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSlaIdStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSlaIdStatus<TData = Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the status request of this SLA
 */

export function useGetMeSlaIdStatus<TData = Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSlaIdStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSlaIdStatusQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of your public SSH keys
 */
export const getMeSshKey = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/sshKey`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSshKeyQueryKey = () => {
    return [`/me/sshKey`] as const;
    }

    
export const getGetMeSshKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeSshKey>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSshKeyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSshKey>>> = ({ signal }) => getMeSshKey(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSshKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSshKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSshKey>>>
export type GetMeSshKeyQueryError = unknown


export function useGetMeSshKey<TData = Awaited<ReturnType<typeof getMeSshKey>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSshKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSshKey<TData = Awaited<ReturnType<typeof getMeSshKey>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSshKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSshKey<TData = Awaited<ReturnType<typeof getMeSshKey>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of your public SSH keys
 */

export function useGetMeSshKey<TData = Awaited<ReturnType<typeof getMeSshKey>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSshKeyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a new public SSH key
 */
export const postMeSshKey = (
    postMeSshKeyBody: PostMeSshKeyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/sshKey`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeSshKeyBody, signal
    },
      options);
    }
  


export const getPostMeSshKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSshKey>>, TError,{data: PostMeSshKeyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSshKey>>, TError,{data: PostMeSshKeyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSshKey>>, {data: PostMeSshKeyBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeSshKey(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSshKeyMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSshKey>>>
    export type PostMeSshKeyMutationBody = PostMeSshKeyBody
    export type PostMeSshKeyMutationError = unknown

    /**
 * @summary Add a new public SSH key
 */
export const usePostMeSshKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSshKey>>, TError,{data: PostMeSshKeyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSshKey>>,
        TError,
        {data: PostMeSshKeyBody},
        TContext
      > => {

      const mutationOptions = getPostMeSshKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove this public SSH key
 */
export const deleteMeSshKeyKeyName = (
    keyName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/sshKey/${keyName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeSshKeyKeyNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeSshKeyKeyName>>, TError,{keyName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeSshKeyKeyName>>, TError,{keyName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeSshKeyKeyName>>, {keyName: string}> = (props) => {
          const {keyName} = props ?? {};

          return  deleteMeSshKeyKeyName(keyName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeSshKeyKeyNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeSshKeyKeyName>>>
    
    export type DeleteMeSshKeyKeyNameMutationError = unknown

    /**
 * @summary Remove this public SSH key
 */
export const useDeleteMeSshKeyKeyName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeSshKeyKeyName>>, TError,{keyName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeSshKeyKeyName>>,
        TError,
        {keyName: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeSshKeyKeyNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeSshKeyKeyName = (
    keyName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleSshKeyOVH>(
      {url: `/me/sshKey/${keyName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSshKeyKeyNameQueryKey = (keyName: string,) => {
    return [`/me/sshKey/${keyName}`] as const;
    }

    
export const getGetMeSshKeyKeyNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError = unknown>(keyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSshKeyKeyNameQueryKey(keyName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSshKeyKeyName>>> = ({ signal }) => getMeSshKeyKeyName(keyName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(keyName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSshKeyKeyNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSshKeyKeyName>>>
export type GetMeSshKeyKeyNameQueryError = unknown


export function useGetMeSshKeyKeyName<TData = Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError = unknown>(
 keyName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSshKeyKeyName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSshKeyKeyName<TData = Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError = unknown>(
 keyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSshKeyKeyName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSshKeyKeyName<TData = Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError = unknown>(
 keyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeSshKeyKeyName<TData = Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError = unknown>(
 keyName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSshKeyKeyName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSshKeyKeyNameQueryOptions(keyName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of sub-accounts
 */
export const getMeSubAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/subAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSubAccountQueryKey = () => {
    return [`/me/subAccount`] as const;
    }

    
export const getGetMeSubAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMeSubAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSubAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSubAccount>>> = ({ signal }) => getMeSubAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSubAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSubAccount>>>
export type GetMeSubAccountQueryError = unknown


export function useGetMeSubAccount<TData = Awaited<ReturnType<typeof getMeSubAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSubAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSubAccount<TData = Awaited<ReturnType<typeof getMeSubAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSubAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSubAccount<TData = Awaited<ReturnType<typeof getMeSubAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of sub-accounts
 */

export function useGetMeSubAccount<TData = Awaited<ReturnType<typeof getMeSubAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSubAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new sub-account
 */
export const postMeSubAccount = (
    postMeSubAccountBody: PostMeSubAccountBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number>(
      {url: `/me/subAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeSubAccountBody, signal
    },
      options);
    }
  


export const getPostMeSubAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSubAccount>>, TError,{data: PostMeSubAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSubAccount>>, TError,{data: PostMeSubAccountBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSubAccount>>, {data: PostMeSubAccountBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeSubAccount(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSubAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSubAccount>>>
    export type PostMeSubAccountMutationBody = PostMeSubAccountBody
    export type PostMeSubAccountMutationError = unknown

    /**
 * @summary Create a new sub-account
 */
export const usePostMeSubAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSubAccount>>, TError,{data: PostMeSubAccountBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSubAccount>>,
        TError,
        {data: PostMeSubAccountBody},
        TContext
      > => {

      const mutationOptions = getPostMeSubAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeSubAccountId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleSubAccountOVH>(
      {url: `/me/subAccount/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSubAccountIdQueryKey = (id: number,) => {
    return [`/me/subAccount/${id}`] as const;
    }

    
export const getGetMeSubAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeSubAccountId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSubAccountIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSubAccountId>>> = ({ signal }) => getMeSubAccountId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSubAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSubAccountId>>>
export type GetMeSubAccountIdQueryError = unknown


export function useGetMeSubAccountId<TData = Awaited<ReturnType<typeof getMeSubAccountId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSubAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSubAccountId<TData = Awaited<ReturnType<typeof getMeSubAccountId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSubAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSubAccountId<TData = Awaited<ReturnType<typeof getMeSubAccountId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeSubAccountId<TData = Awaited<ReturnType<typeof getMeSubAccountId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSubAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSubAccountIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeSubAccountId = (
    id: number,
    nichandleSubAccountOVH: NonReadonly<NichandleSubAccountOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/subAccount/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleSubAccountOVH
    },
      options);
    }
  


export const getPutMeSubAccountIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeSubAccountId>>, TError,{id: number;data: NonReadonly<NichandleSubAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeSubAccountId>>, TError,{id: number;data: NonReadonly<NichandleSubAccountOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeSubAccountId>>, {id: number;data: NonReadonly<NichandleSubAccountOVH>}> = (props) => {
          const {id,data} = props ?? {};

          return  putMeSubAccountId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeSubAccountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMeSubAccountId>>>
    export type PutMeSubAccountIdMutationBody = NonReadonly<NichandleSubAccountOVH>
    export type PutMeSubAccountIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeSubAccountId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeSubAccountId>>, TError,{id: number;data: NonReadonly<NichandleSubAccountOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeSubAccountId>>,
        TError,
        {id: number;data: NonReadonly<NichandleSubAccountOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeSubAccountIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a consumer key for the current application
 */
export const postMeSubAccountIdCreateConsumerKey = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleSubAccountConsumerKeyOVH>(
      {url: `/me/subAccount/${id}/createConsumerKey`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeSubAccountIdCreateConsumerKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSubAccountIdCreateConsumerKey>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSubAccountIdCreateConsumerKey>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSubAccountIdCreateConsumerKey>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeSubAccountIdCreateConsumerKey(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSubAccountIdCreateConsumerKeyMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSubAccountIdCreateConsumerKey>>>
    
    export type PostMeSubAccountIdCreateConsumerKeyMutationError = unknown

    /**
 * @summary Create a consumer key for the current application
 */
export const usePostMeSubAccountIdCreateConsumerKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSubAccountIdCreateConsumerKey>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSubAccountIdCreateConsumerKey>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeSubAccountIdCreateConsumerKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get suggestion about company id
 */
export const getMeSuggestCompany = (
    params?: GetMeSuggestCompanyParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SuggestCompanyOVH>(
      {url: `/me/suggest/company`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeSuggestCompanyQueryKey = (params?: GetMeSuggestCompanyParams,) => {
    return [`/me/suggest/company`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeSuggestCompanyQueryOptions = <TData = Awaited<ReturnType<typeof getMeSuggestCompany>>, TError = unknown>(params?: GetMeSuggestCompanyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSuggestCompany>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSuggestCompanyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSuggestCompany>>> = ({ signal }) => getMeSuggestCompany(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSuggestCompany>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSuggestCompanyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSuggestCompany>>>
export type GetMeSuggestCompanyQueryError = unknown


export function useGetMeSuggestCompany<TData = Awaited<ReturnType<typeof getMeSuggestCompany>>, TError = unknown>(
 params: undefined |  GetMeSuggestCompanyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSuggestCompany>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSuggestCompany>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSuggestCompany<TData = Awaited<ReturnType<typeof getMeSuggestCompany>>, TError = unknown>(
 params?: GetMeSuggestCompanyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSuggestCompany>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSuggestCompany>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSuggestCompany<TData = Awaited<ReturnType<typeof getMeSuggestCompany>>, TError = unknown>(
 params?: GetMeSuggestCompanyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSuggestCompany>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get suggestion about company id
 */

export function useGetMeSuggestCompany<TData = Awaited<ReturnType<typeof getMeSuggestCompany>>, TError = unknown>(
 params?: GetMeSuggestCompanyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSuggestCompany>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSuggestCompanyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Fetch the support level of the account
 */
export const getMeSupportLevel = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSupportLevelLevelOVH>(
      {url: `/me/supportLevel`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSupportLevelQueryKey = () => {
    return [`/me/supportLevel`] as const;
    }

    
export const getGetMeSupportLevelQueryOptions = <TData = Awaited<ReturnType<typeof getMeSupportLevel>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSupportLevelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSupportLevel>>> = ({ signal }) => getMeSupportLevel(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSupportLevel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSupportLevelQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSupportLevel>>>
export type GetMeSupportLevelQueryError = unknown


export function useGetMeSupportLevel<TData = Awaited<ReturnType<typeof getMeSupportLevel>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSupportLevel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSupportLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSupportLevel<TData = Awaited<ReturnType<typeof getMeSupportLevel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSupportLevel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSupportLevel>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSupportLevel<TData = Awaited<ReturnType<typeof getMeSupportLevel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Fetch the support level of the account
 */

export function useGetMeSupportLevel<TData = Awaited<ReturnType<typeof getMeSupportLevel>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSupportLevel>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSupportLevelQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get SVA cdrs
 */
export const getMeSvaCdr = (
    params?: GetMeSvaCdrParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaCdrOVH[]>(
      {url: `/me/sva/cdr`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeSvaCdrQueryKey = (params?: GetMeSvaCdrParams,) => {
    return [`/me/sva/cdr`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeSvaCdrQueryOptions = <TData = Awaited<ReturnType<typeof getMeSvaCdr>>, TError = unknown>(params?: GetMeSvaCdrParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaCdr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSvaCdrQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSvaCdr>>> = ({ signal }) => getMeSvaCdr(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSvaCdr>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSvaCdrQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSvaCdr>>>
export type GetMeSvaCdrQueryError = unknown


export function useGetMeSvaCdr<TData = Awaited<ReturnType<typeof getMeSvaCdr>>, TError = unknown>(
 params: undefined |  GetMeSvaCdrParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaCdr>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaCdr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaCdr<TData = Awaited<ReturnType<typeof getMeSvaCdr>>, TError = unknown>(
 params?: GetMeSvaCdrParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaCdr>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaCdr>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaCdr<TData = Awaited<ReturnType<typeof getMeSvaCdr>>, TError = unknown>(
 params?: GetMeSvaCdrParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaCdr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get SVA cdrs
 */

export function useGetMeSvaCdr<TData = Awaited<ReturnType<typeof getMeSvaCdr>>, TError = unknown>(
 params?: GetMeSvaCdrParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaCdr>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSvaCdrQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the SVA wallet
 */
export const getMeSvaWallet = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaWalletOVH>(
      {url: `/me/sva/wallet`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSvaWalletQueryKey = () => {
    return [`/me/sva/wallet`] as const;
    }

    
export const getGetMeSvaWalletQueryOptions = <TData = Awaited<ReturnType<typeof getMeSvaWallet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWallet>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSvaWalletQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSvaWallet>>> = ({ signal }) => getMeSvaWallet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWallet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSvaWalletQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSvaWallet>>>
export type GetMeSvaWalletQueryError = unknown


export function useGetMeSvaWallet<TData = Awaited<ReturnType<typeof getMeSvaWallet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWallet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWallet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWallet<TData = Awaited<ReturnType<typeof getMeSvaWallet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWallet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWallet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWallet<TData = Awaited<ReturnType<typeof getMeSvaWallet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWallet>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the SVA wallet
 */

export function useGetMeSvaWallet<TData = Awaited<ReturnType<typeof getMeSvaWallet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWallet>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSvaWalletQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a SVA wallet
 */
export const postMeSvaWallet = (
    meSvaWalletCreationOVH: MeSvaWalletCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaWalletOVH>(
      {url: `/me/sva/wallet`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meSvaWalletCreationOVH, signal
    },
      options);
    }
  


export const getPostMeSvaWalletMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWallet>>, TError,{data: MeSvaWalletCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWallet>>, TError,{data: MeSvaWalletCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSvaWallet>>, {data: MeSvaWalletCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeSvaWallet(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSvaWalletMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSvaWallet>>>
    export type PostMeSvaWalletMutationBody = MeSvaWalletCreationOVH
    export type PostMeSvaWalletMutationError = unknown

    /**
 * @summary Create a SVA wallet
 */
export const usePostMeSvaWallet = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWallet>>, TError,{data: MeSvaWalletCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSvaWallet>>,
        TError,
        {data: MeSvaWalletCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeSvaWalletMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update a SVA wallet
 */
export const putMeSvaWallet = (
    meSvaWalletUpdateOVH: MeSvaWalletUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MeSvaWalletOVH>(
      {url: `/me/sva/wallet`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meSvaWalletUpdateOVH
    },
      options);
    }
  


export const getPutMeSvaWalletMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeSvaWallet>>, TError,{data: MeSvaWalletUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeSvaWallet>>, TError,{data: MeSvaWalletUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeSvaWallet>>, {data: MeSvaWalletUpdateOVH}> = (props) => {
          const {data} = props ?? {};

          return  putMeSvaWallet(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeSvaWalletMutationResult = NonNullable<Awaited<ReturnType<typeof putMeSvaWallet>>>
    export type PutMeSvaWalletMutationBody = MeSvaWalletUpdateOVH
    export type PutMeSvaWalletMutationError = unknown

    /**
 * @summary Update a SVA wallet
 */
export const usePutMeSvaWallet = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeSvaWallet>>, TError,{data: MeSvaWalletUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeSvaWallet>>,
        TError,
        {data: MeSvaWalletUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutMeSvaWalletMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Associated bank account
 */
export const getMeSvaWalletBankAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaBankAccountOVH>(
      {url: `/me/sva/wallet/bankAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSvaWalletBankAccountQueryKey = () => {
    return [`/me/sva/wallet/bankAccount`] as const;
    }

    
export const getGetMeSvaWalletBankAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSvaWalletBankAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>> = ({ signal }) => getMeSvaWalletBankAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSvaWalletBankAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>>
export type GetMeSvaWalletBankAccountQueryError = unknown


export function useGetMeSvaWalletBankAccount<TData = Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWalletBankAccount<TData = Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWalletBankAccount<TData = Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Associated bank account
 */

export function useGetMeSvaWalletBankAccount<TData = Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletBankAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSvaWalletBankAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Associate a bank account to your wallet
 */
export const postMeSvaWalletBankAccount = (
    meSvaBankAccountCreationOVH: MeSvaBankAccountCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaBankAccountOVH>(
      {url: `/me/sva/wallet/bankAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meSvaBankAccountCreationOVH, signal
    },
      options);
    }
  


export const getPostMeSvaWalletBankAccountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletBankAccount>>, TError,{data: MeSvaBankAccountCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletBankAccount>>, TError,{data: MeSvaBankAccountCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSvaWalletBankAccount>>, {data: MeSvaBankAccountCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeSvaWalletBankAccount(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSvaWalletBankAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSvaWalletBankAccount>>>
    export type PostMeSvaWalletBankAccountMutationBody = MeSvaBankAccountCreationOVH
    export type PostMeSvaWalletBankAccountMutationError = unknown

    /**
 * @summary Associate a bank account to your wallet
 */
export const usePostMeSvaWalletBankAccount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletBankAccount>>, TError,{data: MeSvaBankAccountCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSvaWalletBankAccount>>,
        TError,
        {data: MeSvaBankAccountCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeSvaWalletBankAccountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List customer cashouts
 */
export const getMeSvaWalletCashouts = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaCashoutOVH[]>(
      {url: `/me/sva/wallet/cashouts`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSvaWalletCashoutsQueryKey = () => {
    return [`/me/sva/wallet/cashouts`] as const;
    }

    
export const getGetMeSvaWalletCashoutsQueryOptions = <TData = Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSvaWalletCashoutsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>> = ({ signal }) => getMeSvaWalletCashouts(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSvaWalletCashoutsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>>
export type GetMeSvaWalletCashoutsQueryError = unknown


export function useGetMeSvaWalletCashouts<TData = Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWalletCashouts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWalletCashouts<TData = Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWalletCashouts>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWalletCashouts<TData = Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List customer cashouts
 */

export function useGetMeSvaWalletCashouts<TData = Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashouts>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSvaWalletCashoutsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a customer cashout
 */
export const getMeSvaWalletCashoutsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaCashoutOVH>(
      {url: `/me/sva/wallet/cashouts/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeSvaWalletCashoutsIdQueryKey = (id: number,) => {
    return [`/me/sva/wallet/cashouts/${id}`] as const;
    }

    
export const getGetMeSvaWalletCashoutsIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeSvaWalletCashoutsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>> = ({ signal }) => getMeSvaWalletCashoutsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeSvaWalletCashoutsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>>
export type GetMeSvaWalletCashoutsIdQueryError = unknown


export function useGetMeSvaWalletCashoutsId<TData = Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWalletCashoutsId<TData = Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeSvaWalletCashoutsId<TData = Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a customer cashout
 */

export function useGetMeSvaWalletCashoutsId<TData = Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeSvaWalletCashoutsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeSvaWalletCashoutsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for an attachment temporary URL
 */
export const postMeSvaWalletCashoutsIdAttachment = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaCashoutAttachmentOVH>(
      {url: `/me/sva/wallet/cashouts/${id}/attachment`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeSvaWalletCashoutsIdAttachmentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletCashoutsIdAttachment>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletCashoutsIdAttachment>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSvaWalletCashoutsIdAttachment>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeSvaWalletCashoutsIdAttachment(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSvaWalletCashoutsIdAttachmentMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSvaWalletCashoutsIdAttachment>>>
    
    export type PostMeSvaWalletCashoutsIdAttachmentMutationError = unknown

    /**
 * @summary Ask for an attachment temporary URL
 */
export const usePostMeSvaWalletCashoutsIdAttachment = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletCashoutsIdAttachment>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSvaWalletCashoutsIdAttachment>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeSvaWalletCashoutsIdAttachmentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Associate a document from /me/document
 */
export const postMeSvaWalletDocument = (
    meSvaDocumentCreationOVH: MeSvaDocumentCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeSvaDocumentOVH>(
      {url: `/me/sva/wallet/document`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meSvaDocumentCreationOVH, signal
    },
      options);
    }
  


export const getPostMeSvaWalletDocumentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletDocument>>, TError,{data: MeSvaDocumentCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletDocument>>, TError,{data: MeSvaDocumentCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeSvaWalletDocument>>, {data: MeSvaDocumentCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeSvaWalletDocument(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeSvaWalletDocumentMutationResult = NonNullable<Awaited<ReturnType<typeof postMeSvaWalletDocument>>>
    export type PostMeSvaWalletDocumentMutationBody = MeSvaDocumentCreationOVH
    export type PostMeSvaWalletDocumentMutationError = unknown

    /**
 * @summary Associate a document from /me/document
 */
export const usePostMeSvaWalletDocument = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeSvaWalletDocument>>, TError,{data: MeSvaDocumentCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeSvaWalletDocument>>,
        TError,
        {data: MeSvaDocumentCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeSvaWalletDocumentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve customer tags list
 */
export const getMeTag = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/tag`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTagQueryKey = () => {
    return [`/me/tag`] as const;
    }

    
export const getGetMeTagQueryOptions = <TData = Awaited<ReturnType<typeof getMeTag>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTagQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTag>>> = ({ signal }) => getMeTag(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTag>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTagQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTag>>>
export type GetMeTagQueryError = unknown


export function useGetMeTag<TData = Awaited<ReturnType<typeof getMeTag>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTag>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTag>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTag<TData = Awaited<ReturnType<typeof getMeTag>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTag>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTag>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTag<TData = Awaited<ReturnType<typeof getMeTag>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve customer tags list
 */

export function useGetMeTag<TData = Awaited<ReturnType<typeof getMeTag>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTagQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Activate customer tag
 */
export const postMeTag = (
    meTagCreationOVH: MeTagCreationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeTagTagOVH>(
      {url: `/me/tag`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meTagCreationOVH, signal
    },
      options);
    }
  


export const getPostMeTagMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTag>>, TError,{data: MeTagCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTag>>, TError,{data: MeTagCreationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTag>>, {data: MeTagCreationOVH}> = (props) => {
          const {data} = props ?? {};

          return  postMeTag(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTagMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTag>>>
    export type PostMeTagMutationBody = MeTagCreationOVH
    export type PostMeTagMutationError = unknown

    /**
 * @summary Activate customer tag
 */
export const usePostMeTag = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTag>>, TError,{data: MeTagCreationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTag>>,
        TError,
        {data: MeTagCreationOVH},
        TContext
      > => {

      const mutationOptions = getPostMeTagMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all available tags
 */
export const getMeTagAvailable = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeTagAvailableTagOVH[]>(
      {url: `/me/tag/available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTagAvailableQueryKey = () => {
    return [`/me/tag/available`] as const;
    }

    
export const getGetMeTagAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getMeTagAvailable>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTagAvailableQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTagAvailable>>> = ({ signal }) => getMeTagAvailable(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTagAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTagAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTagAvailable>>>
export type GetMeTagAvailableQueryError = unknown


export function useGetMeTagAvailable<TData = Awaited<ReturnType<typeof getMeTagAvailable>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTagAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTagAvailable<TData = Awaited<ReturnType<typeof getMeTagAvailable>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTagAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTagAvailable<TData = Awaited<ReturnType<typeof getMeTagAvailable>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve all available tags
 */

export function useGetMeTagAvailable<TData = Awaited<ReturnType<typeof getMeTagAvailable>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTagAvailableQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete a customer tag
 */
export const deleteMeTagTag = (
    tag: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<MeTagTagOVH>(
      {url: `/me/tag/${tag}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeTagTagMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeTagTag>>, TError,{tag: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeTagTag>>, TError,{tag: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeTagTag>>, {tag: string}> = (props) => {
          const {tag} = props ?? {};

          return  deleteMeTagTag(tag,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeTagTagMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeTagTag>>>
    
    export type DeleteMeTagTagMutationError = unknown

    /**
 * @summary Delete a customer tag
 */
export const useDeleteMeTagTag = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeTagTag>>, TError,{tag: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeTagTag>>,
        TError,
        {tag: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeTagTagMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve a customer tag
 */
export const getMeTagTag = (
    tag: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeTagTagOVH>(
      {url: `/me/tag/${tag}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTagTagQueryKey = (tag: string,) => {
    return [`/me/tag/${tag}`] as const;
    }

    
export const getGetMeTagTagQueryOptions = <TData = Awaited<ReturnType<typeof getMeTagTag>>, TError = unknown>(tag: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTagTagQueryKey(tag);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTagTag>>> = ({ signal }) => getMeTagTag(tag, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tag), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTagTag>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTagTagQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTagTag>>>
export type GetMeTagTagQueryError = unknown


export function useGetMeTagTag<TData = Awaited<ReturnType<typeof getMeTagTag>>, TError = unknown>(
 tag: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagTag>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTagTag>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTagTag<TData = Awaited<ReturnType<typeof getMeTagTag>>, TError = unknown>(
 tag: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagTag>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTagTag>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTagTag<TData = Awaited<ReturnType<typeof getMeTagTag>>, TError = unknown>(
 tag: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a customer tag
 */

export function useGetMeTagTag<TData = Awaited<ReturnType<typeof getMeTagTag>>, TError = unknown>(
 tag: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTagTag>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTagTagQueryOptions(tag,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of service contact change tasks you are involved in
 */
export const getMeTaskContactChange = (
    params?: GetMeTaskContactChangeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/task/contactChange`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeTaskContactChangeQueryKey = (params?: GetMeTaskContactChangeParams,) => {
    return [`/me/task/contactChange`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeTaskContactChangeQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskContactChange>>, TError = unknown>(params?: GetMeTaskContactChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskContactChangeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskContactChange>>> = ({ signal }) => getMeTaskContactChange(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskContactChangeQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskContactChange>>>
export type GetMeTaskContactChangeQueryError = unknown


export function useGetMeTaskContactChange<TData = Awaited<ReturnType<typeof getMeTaskContactChange>>, TError = unknown>(
 params: undefined |  GetMeTaskContactChangeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskContactChange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskContactChange<TData = Awaited<ReturnType<typeof getMeTaskContactChange>>, TError = unknown>(
 params?: GetMeTaskContactChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskContactChange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskContactChange<TData = Awaited<ReturnType<typeof getMeTaskContactChange>>, TError = unknown>(
 params?: GetMeTaskContactChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of service contact change tasks you are involved in
 */

export function useGetMeTaskContactChange<TData = Awaited<ReturnType<typeof getMeTaskContactChange>>, TError = unknown>(
 params?: GetMeTaskContactChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskContactChangeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeTaskContactChangeId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleContactChangeTaskOVH>(
      {url: `/me/task/contactChange/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskContactChangeIdQueryKey = (id: number,) => {
    return [`/me/task/contactChange/${id}`] as const;
    }

    
export const getGetMeTaskContactChangeIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskContactChangeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskContactChangeId>>> = ({ signal }) => getMeTaskContactChangeId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskContactChangeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskContactChangeId>>>
export type GetMeTaskContactChangeIdQueryError = unknown


export function useGetMeTaskContactChangeId<TData = Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskContactChangeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskContactChangeId<TData = Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskContactChangeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskContactChangeId<TData = Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeTaskContactChangeId<TData = Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskContactChangeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskContactChangeIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accept this change request
 */
export const postMeTaskContactChangeIdAccept = (
    id: number,
    postMeTaskContactChangeIdAcceptBody: PostMeTaskContactChangeIdAcceptBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/contactChange/${id}/accept`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeTaskContactChangeIdAcceptBody, signal
    },
      options);
    }
  


export const getPostMeTaskContactChangeIdAcceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdAccept>>, TError,{id: number;data: PostMeTaskContactChangeIdAcceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdAccept>>, TError,{id: number;data: PostMeTaskContactChangeIdAcceptBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskContactChangeIdAccept>>, {id: number;data: PostMeTaskContactChangeIdAcceptBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeTaskContactChangeIdAccept(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskContactChangeIdAcceptMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskContactChangeIdAccept>>>
    export type PostMeTaskContactChangeIdAcceptMutationBody = PostMeTaskContactChangeIdAcceptBody
    export type PostMeTaskContactChangeIdAcceptMutationError = unknown

    /**
 * @summary Accept this change request
 */
export const usePostMeTaskContactChangeIdAccept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdAccept>>, TError,{id: number;data: PostMeTaskContactChangeIdAcceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskContactChangeIdAccept>>,
        TError,
        {id: number;data: PostMeTaskContactChangeIdAcceptBody},
        TContext
      > => {

      const mutationOptions = getPostMeTaskContactChangeIdAcceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Refuse this change request
 */
export const postMeTaskContactChangeIdRefuse = (
    id: number,
    postMeTaskContactChangeIdRefuseBody: PostMeTaskContactChangeIdRefuseBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/contactChange/${id}/refuse`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeTaskContactChangeIdRefuseBody, signal
    },
      options);
    }
  


export const getPostMeTaskContactChangeIdRefuseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdRefuse>>, TError,{id: number;data: PostMeTaskContactChangeIdRefuseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdRefuse>>, TError,{id: number;data: PostMeTaskContactChangeIdRefuseBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskContactChangeIdRefuse>>, {id: number;data: PostMeTaskContactChangeIdRefuseBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeTaskContactChangeIdRefuse(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskContactChangeIdRefuseMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskContactChangeIdRefuse>>>
    export type PostMeTaskContactChangeIdRefuseMutationBody = PostMeTaskContactChangeIdRefuseBody
    export type PostMeTaskContactChangeIdRefuseMutationError = unknown

    /**
 * @summary Refuse this change request
 */
export const usePostMeTaskContactChangeIdRefuse = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdRefuse>>, TError,{id: number;data: PostMeTaskContactChangeIdRefuseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskContactChangeIdRefuse>>,
        TError,
        {id: number;data: PostMeTaskContactChangeIdRefuseBody},
        TContext
      > => {

      const mutationOptions = getPostMeTaskContactChangeIdRefuseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary This call will send you a new email, containing a new token
 */
export const postMeTaskContactChangeIdResendEmail = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/contactChange/${id}/resendEmail`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskContactChangeIdResendEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdResendEmail>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdResendEmail>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskContactChangeIdResendEmail>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskContactChangeIdResendEmail(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskContactChangeIdResendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskContactChangeIdResendEmail>>>
    
    export type PostMeTaskContactChangeIdResendEmailMutationError = unknown

    /**
 * @summary This call will send you a new email, containing a new token
 */
export const usePostMeTaskContactChangeIdResendEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskContactChangeIdResendEmail>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskContactChangeIdResendEmail>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskContactChangeIdResendEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List zone tasks
 */
export const getMeTaskDns = (
    params?: GetMeTaskDnsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/task/dns`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeTaskDnsQueryKey = (params?: GetMeTaskDnsParams,) => {
    return [`/me/task/dns`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeTaskDnsQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDns>>, TError = unknown>(params?: GetMeTaskDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDnsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDns>>> = ({ signal }) => getMeTaskDns(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDnsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDns>>>
export type GetMeTaskDnsQueryError = unknown


export function useGetMeTaskDns<TData = Awaited<ReturnType<typeof getMeTaskDns>>, TError = unknown>(
 params: undefined |  GetMeTaskDnsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDns<TData = Awaited<ReturnType<typeof getMeTaskDns>>, TError = unknown>(
 params?: GetMeTaskDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDns>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDns<TData = Awaited<ReturnType<typeof getMeTaskDns>>, TError = unknown>(
 params?: GetMeTaskDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List zone tasks
 */

export function useGetMeTaskDns<TData = Awaited<ReturnType<typeof getMeTaskDns>>, TError = unknown>(
 params?: GetMeTaskDnsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDns>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDnsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a zone task
 */
export const getMeTaskDnsId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<MeDnsTaskOVH>(
      {url: `/me/task/dns/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskDnsIdQueryKey = (id: number,) => {
    return [`/me/task/dns/${id}`] as const;
    }

    
export const getGetMeTaskDnsIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDnsId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDnsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDnsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDnsId>>> = ({ signal }) => getMeTaskDnsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDnsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDnsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDnsId>>>
export type GetMeTaskDnsIdQueryError = unknown


export function useGetMeTaskDnsId<TData = Awaited<ReturnType<typeof getMeTaskDnsId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDnsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDnsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDnsId<TData = Awaited<ReturnType<typeof getMeTaskDnsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDnsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDnsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDnsId<TData = Awaited<ReturnType<typeof getMeTaskDnsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDnsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a zone task
 */

export function useGetMeTaskDnsId<TData = Awaited<ReturnType<typeof getMeTaskDnsId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDnsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDnsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accelerate the task
 */
export const postMeTaskDnsIdAccelerate = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/dns/${id}/accelerate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskDnsIdAccelerateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdAccelerate>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdAccelerate>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskDnsIdAccelerate>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskDnsIdAccelerate(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskDnsIdAccelerateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskDnsIdAccelerate>>>
    
    export type PostMeTaskDnsIdAccelerateMutationError = unknown

    /**
 * @summary Accelerate the task
 */
export const usePostMeTaskDnsIdAccelerate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdAccelerate>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskDnsIdAccelerate>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskDnsIdAccelerateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel the task
 */
export const postMeTaskDnsIdCancel = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/dns/${id}/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskDnsIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdCancel>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdCancel>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskDnsIdCancel>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskDnsIdCancel(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskDnsIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskDnsIdCancel>>>
    
    export type PostMeTaskDnsIdCancelMutationError = unknown

    /**
 * @summary Cancel the task
 */
export const usePostMeTaskDnsIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdCancel>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskDnsIdCancel>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskDnsIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Relaunch the task
 */
export const postMeTaskDnsIdRelaunch = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/dns/${id}/relaunch`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskDnsIdRelaunchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdRelaunch>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdRelaunch>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskDnsIdRelaunch>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskDnsIdRelaunch(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskDnsIdRelaunchMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskDnsIdRelaunch>>>
    
    export type PostMeTaskDnsIdRelaunchMutationError = unknown

    /**
 * @summary Relaunch the task
 */
export const usePostMeTaskDnsIdRelaunch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDnsIdRelaunch>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskDnsIdRelaunch>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskDnsIdRelaunchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of domain tasks
 */
export const getMeTaskDomain = (
    params?: GetMeTaskDomainParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/task/domain`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeTaskDomainQueryKey = (params?: GetMeTaskDomainParams,) => {
    return [`/me/task/domain`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeTaskDomainQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDomain>>, TError = unknown>(params?: GetMeTaskDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDomainQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDomain>>> = ({ signal }) => getMeTaskDomain(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDomain>>>
export type GetMeTaskDomainQueryError = unknown


export function useGetMeTaskDomain<TData = Awaited<ReturnType<typeof getMeTaskDomain>>, TError = unknown>(
 params: undefined |  GetMeTaskDomainParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomain<TData = Awaited<ReturnType<typeof getMeTaskDomain>>, TError = unknown>(
 params?: GetMeTaskDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomain<TData = Awaited<ReturnType<typeof getMeTaskDomain>>, TError = unknown>(
 params?: GetMeTaskDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of domain tasks
 */

export function useGetMeTaskDomain<TData = Awaited<ReturnType<typeof getMeTaskDomain>>, TError = unknown>(
 params?: GetMeTaskDomainParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDomainQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeTaskDomainId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DomainTaskOVH>(
      {url: `/me/task/domain/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskDomainIdQueryKey = (id: number,) => {
    return [`/me/task/domain/${id}`] as const;
    }

    
export const getGetMeTaskDomainIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDomainId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDomainIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDomainId>>> = ({ signal }) => getMeTaskDomainId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDomainIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDomainId>>>
export type GetMeTaskDomainIdQueryError = unknown


export function useGetMeTaskDomainId<TData = Awaited<ReturnType<typeof getMeTaskDomainId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainId<TData = Awaited<ReturnType<typeof getMeTaskDomainId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainId<TData = Awaited<ReturnType<typeof getMeTaskDomainId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeTaskDomainId<TData = Awaited<ReturnType<typeof getMeTaskDomainId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDomainIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accelerate the task
 */
export const postMeTaskDomainIdAccelerate = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/domain/${id}/accelerate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskDomainIdAccelerateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdAccelerate>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdAccelerate>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskDomainIdAccelerate>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskDomainIdAccelerate(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskDomainIdAccelerateMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskDomainIdAccelerate>>>
    
    export type PostMeTaskDomainIdAccelerateMutationError = unknown

    /**
 * @summary Accelerate the task
 */
export const usePostMeTaskDomainIdAccelerate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdAccelerate>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskDomainIdAccelerate>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskDomainIdAccelerateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of arguments
 */
export const getMeTaskDomainIdArgument = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/task/domain/${id}/argument`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskDomainIdArgumentQueryKey = (id: number,) => {
    return [`/me/task/domain/${id}/argument`] as const;
    }

    
export const getGetMeTaskDomainIdArgumentQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDomainIdArgumentQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>> = ({ signal }) => getMeTaskDomainIdArgument(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDomainIdArgumentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>>
export type GetMeTaskDomainIdArgumentQueryError = unknown


export function useGetMeTaskDomainIdArgument<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainIdArgument<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainIdArgument<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of arguments
 */

export function useGetMeTaskDomainIdArgument<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgument>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDomainIdArgumentQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeTaskDomainIdArgumentKey = (
    id: number,
    key: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleDomainTaskArgumentOVH>(
      {url: `/me/task/domain/${id}/argument/${key}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskDomainIdArgumentKeyQueryKey = (id: number,
    key: string,) => {
    return [`/me/task/domain/${id}/argument/${key}`] as const;
    }

    
export const getGetMeTaskDomainIdArgumentKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError = unknown>(id: number,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDomainIdArgumentKeyQueryKey(id,key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>> = ({ signal }) => getMeTaskDomainIdArgumentKey(id,key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id && key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDomainIdArgumentKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>>
export type GetMeTaskDomainIdArgumentKeyQueryError = unknown


export function useGetMeTaskDomainIdArgumentKey<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError = unknown>(
 id: number,
    key: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainIdArgumentKey<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError = unknown>(
 id: number,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainIdArgumentKey<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError = unknown>(
 id: number,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeTaskDomainIdArgumentKey<TData = Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError = unknown>(
 id: number,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdArgumentKey>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDomainIdArgumentKeyQueryOptions(id,key,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putMeTaskDomainIdArgumentKey = (
    id: number,
    key: string,
    nichandleDomainTaskArgumentOVH: NonReadonly<NichandleDomainTaskArgumentOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/domain/${id}/argument/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: nichandleDomainTaskArgumentOVH
    },
      options);
    }
  


export const getPutMeTaskDomainIdArgumentKeyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeTaskDomainIdArgumentKey>>, TError,{id: number;key: string;data: NonReadonly<NichandleDomainTaskArgumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putMeTaskDomainIdArgumentKey>>, TError,{id: number;key: string;data: NonReadonly<NichandleDomainTaskArgumentOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMeTaskDomainIdArgumentKey>>, {id: number;key: string;data: NonReadonly<NichandleDomainTaskArgumentOVH>}> = (props) => {
          const {id,key,data} = props ?? {};

          return  putMeTaskDomainIdArgumentKey(id,key,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMeTaskDomainIdArgumentKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putMeTaskDomainIdArgumentKey>>>
    export type PutMeTaskDomainIdArgumentKeyMutationBody = NonReadonly<NichandleDomainTaskArgumentOVH>
    export type PutMeTaskDomainIdArgumentKeyMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutMeTaskDomainIdArgumentKey = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMeTaskDomainIdArgumentKey>>, TError,{id: number;key: string;data: NonReadonly<NichandleDomainTaskArgumentOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putMeTaskDomainIdArgumentKey>>,
        TError,
        {id: number;key: string;data: NonReadonly<NichandleDomainTaskArgumentOVH>},
        TContext
      > => {

      const mutationOptions = getPutMeTaskDomainIdArgumentKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancel the task
 */
export const postMeTaskDomainIdCancel = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/domain/${id}/cancel`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskDomainIdCancelMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdCancel>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdCancel>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskDomainIdCancel>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskDomainIdCancel(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskDomainIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskDomainIdCancel>>>
    
    export type PostMeTaskDomainIdCancelMutationError = unknown

    /**
 * @summary Cancel the task
 */
export const usePostMeTaskDomainIdCancel = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdCancel>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskDomainIdCancel>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskDomainIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Show progress of a task
 */
export const getMeTaskDomainIdProgressbar = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleDomainTaskProgressBarOVH>(
      {url: `/me/task/domain/${id}/progressbar`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskDomainIdProgressbarQueryKey = (id: number,) => {
    return [`/me/task/domain/${id}/progressbar`] as const;
    }

    
export const getGetMeTaskDomainIdProgressbarQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskDomainIdProgressbarQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>> = ({ signal }) => getMeTaskDomainIdProgressbar(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskDomainIdProgressbarQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>>
export type GetMeTaskDomainIdProgressbarQueryError = unknown


export function useGetMeTaskDomainIdProgressbar<TData = Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainIdProgressbar<TData = Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskDomainIdProgressbar<TData = Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Show progress of a task
 */

export function useGetMeTaskDomainIdProgressbar<TData = Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskDomainIdProgressbar>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskDomainIdProgressbarQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Relaunch the task
 */
export const postMeTaskDomainIdRelaunch = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/domain/${id}/relaunch`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeTaskDomainIdRelaunchMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdRelaunch>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdRelaunch>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskDomainIdRelaunch>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postMeTaskDomainIdRelaunch(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskDomainIdRelaunchMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskDomainIdRelaunch>>>
    
    export type PostMeTaskDomainIdRelaunchMutationError = unknown

    /**
 * @summary Relaunch the task
 */
export const usePostMeTaskDomainIdRelaunch = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskDomainIdRelaunch>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskDomainIdRelaunch>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostMeTaskDomainIdRelaunchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of email change tasks you are involved in
 */
export const getMeTaskEmailChange = (
    params?: GetMeTaskEmailChangeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/task/emailChange`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeTaskEmailChangeQueryKey = (params?: GetMeTaskEmailChangeParams,) => {
    return [`/me/task/emailChange`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeTaskEmailChangeQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError = unknown>(params?: GetMeTaskEmailChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskEmailChangeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskEmailChange>>> = ({ signal }) => getMeTaskEmailChange(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskEmailChangeQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskEmailChange>>>
export type GetMeTaskEmailChangeQueryError = unknown


export function useGetMeTaskEmailChange<TData = Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError = unknown>(
 params: undefined |  GetMeTaskEmailChangeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskEmailChange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskEmailChange<TData = Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError = unknown>(
 params?: GetMeTaskEmailChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskEmailChange>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskEmailChange<TData = Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError = unknown>(
 params?: GetMeTaskEmailChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of email change tasks you are involved in
 */

export function useGetMeTaskEmailChange<TData = Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError = unknown>(
 params?: GetMeTaskEmailChangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChange>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskEmailChangeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeTaskEmailChangeId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleEmailChangeTaskOVH>(
      {url: `/me/task/emailChange/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTaskEmailChangeIdQueryKey = (id: number,) => {
    return [`/me/task/emailChange/${id}`] as const;
    }

    
export const getGetMeTaskEmailChangeIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTaskEmailChangeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>> = ({ signal }) => getMeTaskEmailChangeId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTaskEmailChangeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>>
export type GetMeTaskEmailChangeIdQueryError = unknown


export function useGetMeTaskEmailChangeId<TData = Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskEmailChangeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskEmailChangeId<TData = Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTaskEmailChangeId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTaskEmailChangeId<TData = Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeTaskEmailChangeId<TData = Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTaskEmailChangeId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTaskEmailChangeIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accept this change request
 */
export const postMeTaskEmailChangeIdAccept = (
    id: number,
    postMeTaskEmailChangeIdAcceptBody: PostMeTaskEmailChangeIdAcceptBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/emailChange/${id}/accept`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeTaskEmailChangeIdAcceptBody, signal
    },
      options);
    }
  


export const getPostMeTaskEmailChangeIdAcceptMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskEmailChangeIdAccept>>, TError,{id: number;data: PostMeTaskEmailChangeIdAcceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskEmailChangeIdAccept>>, TError,{id: number;data: PostMeTaskEmailChangeIdAcceptBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskEmailChangeIdAccept>>, {id: number;data: PostMeTaskEmailChangeIdAcceptBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeTaskEmailChangeIdAccept(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskEmailChangeIdAcceptMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskEmailChangeIdAccept>>>
    export type PostMeTaskEmailChangeIdAcceptMutationBody = PostMeTaskEmailChangeIdAcceptBody
    export type PostMeTaskEmailChangeIdAcceptMutationError = unknown

    /**
 * @summary Accept this change request
 */
export const usePostMeTaskEmailChangeIdAccept = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskEmailChangeIdAccept>>, TError,{id: number;data: PostMeTaskEmailChangeIdAcceptBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskEmailChangeIdAccept>>,
        TError,
        {id: number;data: PostMeTaskEmailChangeIdAcceptBody},
        TContext
      > => {

      const mutationOptions = getPostMeTaskEmailChangeIdAcceptMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Refuse this change request
 */
export const postMeTaskEmailChangeIdRefuse = (
    id: number,
    postMeTaskEmailChangeIdRefuseBody: PostMeTaskEmailChangeIdRefuseBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/task/emailChange/${id}/refuse`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeTaskEmailChangeIdRefuseBody, signal
    },
      options);
    }
  


export const getPostMeTaskEmailChangeIdRefuseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskEmailChangeIdRefuse>>, TError,{id: number;data: PostMeTaskEmailChangeIdRefuseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTaskEmailChangeIdRefuse>>, TError,{id: number;data: PostMeTaskEmailChangeIdRefuseBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTaskEmailChangeIdRefuse>>, {id: number;data: PostMeTaskEmailChangeIdRefuseBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postMeTaskEmailChangeIdRefuse(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTaskEmailChangeIdRefuseMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTaskEmailChangeIdRefuse>>>
    export type PostMeTaskEmailChangeIdRefuseMutationBody = PostMeTaskEmailChangeIdRefuseBody
    export type PostMeTaskEmailChangeIdRefuseMutationError = unknown

    /**
 * @summary Refuse this change request
 */
export const usePostMeTaskEmailChangeIdRefuse = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTaskEmailChangeIdRefuse>>, TError,{id: number;data: PostMeTaskEmailChangeIdRefuseBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTaskEmailChangeIdRefuse>>,
        TError,
        {id: number;data: PostMeTaskEmailChangeIdRefuseBody},
        TContext
      > => {

      const mutationOptions = getPostMeTaskEmailChangeIdRefuseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary The default SIP IP restictions for your future VoIP lines
 */
export const getMeTelephonyDefaultIpRestriction = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/telephony/defaultIpRestriction`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTelephonyDefaultIpRestrictionQueryKey = () => {
    return [`/me/telephony/defaultIpRestriction`] as const;
    }

    
export const getGetMeTelephonyDefaultIpRestrictionQueryOptions = <TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTelephonyDefaultIpRestrictionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>> = ({ signal }) => getMeTelephonyDefaultIpRestriction(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTelephonyDefaultIpRestrictionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>>
export type GetMeTelephonyDefaultIpRestrictionQueryError = unknown


export function useGetMeTelephonyDefaultIpRestriction<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTelephonyDefaultIpRestriction<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTelephonyDefaultIpRestriction<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary The default SIP IP restictions for your future VoIP lines
 */

export function useGetMeTelephonyDefaultIpRestriction<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestriction>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTelephonyDefaultIpRestrictionQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a default IP restriction for your future VoIP lines
 */
export const postMeTelephonyDefaultIpRestriction = (
    postMeTelephonyDefaultIpRestrictionBody: PostMeTelephonyDefaultIpRestrictionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDefaultIpRestrictionOVH>(
      {url: `/me/telephony/defaultIpRestriction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeTelephonyDefaultIpRestrictionBody, signal
    },
      options);
    }
  


export const getPostMeTelephonyDefaultIpRestrictionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTelephonyDefaultIpRestriction>>, TError,{data: PostMeTelephonyDefaultIpRestrictionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTelephonyDefaultIpRestriction>>, TError,{data: PostMeTelephonyDefaultIpRestrictionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTelephonyDefaultIpRestriction>>, {data: PostMeTelephonyDefaultIpRestrictionBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeTelephonyDefaultIpRestriction(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTelephonyDefaultIpRestrictionMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTelephonyDefaultIpRestriction>>>
    export type PostMeTelephonyDefaultIpRestrictionMutationBody = PostMeTelephonyDefaultIpRestrictionBody
    export type PostMeTelephonyDefaultIpRestrictionMutationError = unknown

    /**
 * @summary Create a default IP restriction for your future VoIP lines
 */
export const usePostMeTelephonyDefaultIpRestriction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTelephonyDefaultIpRestriction>>, TError,{data: PostMeTelephonyDefaultIpRestrictionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTelephonyDefaultIpRestriction>>,
        TError,
        {data: PostMeTelephonyDefaultIpRestrictionBody},
        TContext
      > => {

      const mutationOptions = getPostMeTelephonyDefaultIpRestrictionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a default IP restriction for your future VoIP lines
 */
export const deleteMeTelephonyDefaultIpRestrictionId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/telephony/defaultIpRestriction/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeTelephonyDefaultIpRestrictionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeTelephonyDefaultIpRestrictionId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeTelephonyDefaultIpRestrictionId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeTelephonyDefaultIpRestrictionId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeTelephonyDefaultIpRestrictionId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeTelephonyDefaultIpRestrictionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeTelephonyDefaultIpRestrictionId>>>
    
    export type DeleteMeTelephonyDefaultIpRestrictionIdMutationError = unknown

    /**
 * @summary Delete a default IP restriction for your future VoIP lines
 */
export const useDeleteMeTelephonyDefaultIpRestrictionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeTelephonyDefaultIpRestrictionId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeTelephonyDefaultIpRestrictionId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeTelephonyDefaultIpRestrictionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getMeTelephonyDefaultIpRestrictionId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonyDefaultIpRestrictionOVH>(
      {url: `/me/telephony/defaultIpRestriction/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTelephonyDefaultIpRestrictionIdQueryKey = (id: number,) => {
    return [`/me/telephony/defaultIpRestriction/${id}`] as const;
    }

    
export const getGetMeTelephonyDefaultIpRestrictionIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTelephonyDefaultIpRestrictionIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>> = ({ signal }) => getMeTelephonyDefaultIpRestrictionId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTelephonyDefaultIpRestrictionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>>
export type GetMeTelephonyDefaultIpRestrictionIdQueryError = unknown


export function useGetMeTelephonyDefaultIpRestrictionId<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTelephonyDefaultIpRestrictionId<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTelephonyDefaultIpRestrictionId<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeTelephonyDefaultIpRestrictionId<TData = Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonyDefaultIpRestrictionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTelephonyDefaultIpRestrictionIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the telephony settings linked to the customer account
 */
export const getMeTelephonySettings = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<TelephonySettingsOVH>(
      {url: `/me/telephony/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeTelephonySettingsQueryKey = () => {
    return [`/me/telephony/settings`] as const;
    }

    
export const getGetMeTelephonySettingsQueryOptions = <TData = Awaited<ReturnType<typeof getMeTelephonySettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonySettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeTelephonySettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeTelephonySettings>>> = ({ signal }) => getMeTelephonySettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonySettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeTelephonySettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeTelephonySettings>>>
export type GetMeTelephonySettingsQueryError = unknown


export function useGetMeTelephonySettings<TData = Awaited<ReturnType<typeof getMeTelephonySettings>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonySettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTelephonySettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTelephonySettings<TData = Awaited<ReturnType<typeof getMeTelephonySettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonySettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeTelephonySettings>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeTelephonySettings<TData = Awaited<ReturnType<typeof getMeTelephonySettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonySettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the telephony settings linked to the customer account
 */

export function useGetMeTelephonySettings<TData = Awaited<ReturnType<typeof getMeTelephonySettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeTelephonySettings>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeTelephonySettingsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the telephony settings linked to the customer account
 */
export const postMeTelephonySettings = (
    postMeTelephonySettingsBody: PostMeTelephonySettingsBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/telephony/settings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeTelephonySettingsBody, signal
    },
      options);
    }
  


export const getPostMeTelephonySettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTelephonySettings>>, TError,{data: PostMeTelephonySettingsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeTelephonySettings>>, TError,{data: PostMeTelephonySettingsBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeTelephonySettings>>, {data: PostMeTelephonySettingsBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeTelephonySettings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeTelephonySettingsMutationResult = NonNullable<Awaited<ReturnType<typeof postMeTelephonySettings>>>
    export type PostMeTelephonySettingsMutationBody = PostMeTelephonySettingsBody
    export type PostMeTelephonySettingsMutationError = unknown

    /**
 * @summary Change the telephony settings linked to the customer account
 */
export const usePostMeTelephonySettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeTelephonySettings>>, TError,{data: PostMeTelephonySettingsBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeTelephonySettings>>,
        TError,
        {data: PostMeTelephonySettingsBody},
        TContext
      > => {

      const mutationOptions = getPostMeTelephonySettingsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary VIP Status of this account
 */
export const getMeVipStatus = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleVipStatusOVH>(
      {url: `/me/vipStatus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeVipStatusQueryKey = () => {
    return [`/me/vipStatus`] as const;
    }

    
export const getGetMeVipStatusQueryOptions = <TData = Awaited<ReturnType<typeof getMeVipStatus>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVipStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeVipStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeVipStatus>>> = ({ signal }) => getMeVipStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeVipStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeVipStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getMeVipStatus>>>
export type GetMeVipStatusQueryError = unknown


export function useGetMeVipStatus<TData = Awaited<ReturnType<typeof getMeVipStatus>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVipStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVipStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVipStatus<TData = Awaited<ReturnType<typeof getMeVipStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVipStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVipStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVipStatus<TData = Awaited<ReturnType<typeof getMeVipStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVipStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary VIP Status of this account
 */

export function useGetMeVipStatus<TData = Awaited<ReturnType<typeof getMeVipStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVipStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeVipStatusQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Verify existing voucher
 */
export const postMeVoucherCheckValidity = (
    postMeVoucherCheckValidityBody: PostMeVoucherCheckValidityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<NichandleVoucherStatusOVH>(
      {url: `/me/voucher/checkValidity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeVoucherCheckValidityBody, signal
    },
      options);
    }
  


export const getPostMeVoucherCheckValidityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeVoucherCheckValidity>>, TError,{data: PostMeVoucherCheckValidityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeVoucherCheckValidity>>, TError,{data: PostMeVoucherCheckValidityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeVoucherCheckValidity>>, {data: PostMeVoucherCheckValidityBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeVoucherCheckValidity(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeVoucherCheckValidityMutationResult = NonNullable<Awaited<ReturnType<typeof postMeVoucherCheckValidity>>>
    export type PostMeVoucherCheckValidityMutationBody = PostMeVoucherCheckValidityBody
    export type PostMeVoucherCheckValidityMutationError = unknown

    /**
 * @summary Verify existing voucher
 */
export const usePostMeVoucherCheckValidity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeVoucherCheckValidity>>, TError,{data: PostMeVoucherCheckValidityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeVoucherCheckValidity>>,
        TError,
        {data: PostMeVoucherCheckValidityBody},
        TContext
      > => {

      const mutationOptions = getPostMeVoucherCheckValidityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of voucher accounts the logged account has
 */
export const getMeVoucherAccount = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/voucherAccount`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeVoucherAccountQueryKey = () => {
    return [`/me/voucherAccount`] as const;
    }

    
export const getGetMeVoucherAccountQueryOptions = <TData = Awaited<ReturnType<typeof getMeVoucherAccount>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeVoucherAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeVoucherAccount>>> = ({ signal }) => getMeVoucherAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeVoucherAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getMeVoucherAccount>>>
export type GetMeVoucherAccountQueryError = unknown


export function useGetMeVoucherAccount<TData = Awaited<ReturnType<typeof getMeVoucherAccount>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccount<TData = Awaited<ReturnType<typeof getMeVoucherAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccount>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccount<TData = Awaited<ReturnType<typeof getMeVoucherAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of voucher accounts the logged account has
 */

export function useGetMeVoucherAccount<TData = Awaited<ReturnType<typeof getMeVoucherAccount>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccount>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeVoucherAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeVoucherAccountVoucherAccountId = (
    voucherAccountId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingVoucherAccountOVH>(
      {url: `/me/voucherAccount/${voucherAccountId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeVoucherAccountVoucherAccountIdQueryKey = (voucherAccountId: string,) => {
    return [`/me/voucherAccount/${voucherAccountId}`] as const;
    }

    
export const getGetMeVoucherAccountVoucherAccountIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError = unknown>(voucherAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeVoucherAccountVoucherAccountIdQueryKey(voucherAccountId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>> = ({ signal }) => getMeVoucherAccountVoucherAccountId(voucherAccountId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(voucherAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeVoucherAccountVoucherAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>>
export type GetMeVoucherAccountVoucherAccountIdQueryError = unknown


export function useGetMeVoucherAccountVoucherAccountId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError = unknown>(
 voucherAccountId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccountVoucherAccountId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError = unknown>(
 voucherAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccountVoucherAccountId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError = unknown>(
 voucherAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeVoucherAccountVoucherAccountId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError = unknown>(
 voucherAccountId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeVoucherAccountVoucherAccountIdQueryOptions(voucherAccountId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Details about an entry of the voucher account
 */
export const getMeVoucherAccountVoucherAccountIdMovements = (
    voucherAccountId: string,
    params?: GetMeVoucherAccountVoucherAccountIdMovementsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/voucherAccount/${voucherAccountId}/movements`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeVoucherAccountVoucherAccountIdMovementsQueryKey = (voucherAccountId: string,
    params?: GetMeVoucherAccountVoucherAccountIdMovementsParams,) => {
    return [`/me/voucherAccount/${voucherAccountId}/movements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeVoucherAccountVoucherAccountIdMovementsQueryOptions = <TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError = unknown>(voucherAccountId: string,
    params?: GetMeVoucherAccountVoucherAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeVoucherAccountVoucherAccountIdMovementsQueryKey(voucherAccountId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>> = ({ signal }) => getMeVoucherAccountVoucherAccountIdMovements(voucherAccountId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(voucherAccountId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeVoucherAccountVoucherAccountIdMovementsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>>
export type GetMeVoucherAccountVoucherAccountIdMovementsQueryError = unknown


export function useGetMeVoucherAccountVoucherAccountIdMovements<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError = unknown>(
 voucherAccountId: string,
    params: undefined |  GetMeVoucherAccountVoucherAccountIdMovementsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccountVoucherAccountIdMovements<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError = unknown>(
 voucherAccountId: string,
    params?: GetMeVoucherAccountVoucherAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccountVoucherAccountIdMovements<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError = unknown>(
 voucherAccountId: string,
    params?: GetMeVoucherAccountVoucherAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Details about an entry of the voucher account
 */

export function useGetMeVoucherAccountVoucherAccountIdMovements<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError = unknown>(
 voucherAccountId: string,
    params?: GetMeVoucherAccountVoucherAccountIdMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovements>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeVoucherAccountVoucherAccountIdMovementsQueryOptions(voucherAccountId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeVoucherAccountVoucherAccountIdMovementsMovementId = (
    voucherAccountId: string,
    movementId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingVoucherMovementOVH>(
      {url: `/me/voucherAccount/${voucherAccountId}/movements/${movementId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeVoucherAccountVoucherAccountIdMovementsMovementIdQueryKey = (voucherAccountId: string,
    movementId: number,) => {
    return [`/me/voucherAccount/${voucherAccountId}/movements/${movementId}`] as const;
    }

    
export const getGetMeVoucherAccountVoucherAccountIdMovementsMovementIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError = unknown>(voucherAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeVoucherAccountVoucherAccountIdMovementsMovementIdQueryKey(voucherAccountId,movementId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>> = ({ signal }) => getMeVoucherAccountVoucherAccountIdMovementsMovementId(voucherAccountId,movementId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(voucherAccountId && movementId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeVoucherAccountVoucherAccountIdMovementsMovementIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>>
export type GetMeVoucherAccountVoucherAccountIdMovementsMovementIdQueryError = unknown


export function useGetMeVoucherAccountVoucherAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError = unknown>(
 voucherAccountId: string,
    movementId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccountVoucherAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError = unknown>(
 voucherAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeVoucherAccountVoucherAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError = unknown>(
 voucherAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeVoucherAccountVoucherAccountIdMovementsMovementId<TData = Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError = unknown>(
 voucherAccountId: string,
    movementId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeVoucherAccountVoucherAccountIdMovementsMovementId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeVoucherAccountVoucherAccountIdMovementsMovementIdQueryOptions(voucherAccountId,movementId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of all the withdrawals made from your prepaid account
 */
export const getMeWithdrawal = (
    params?: GetMeWithdrawalParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/withdrawal`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeWithdrawalQueryKey = (params?: GetMeWithdrawalParams,) => {
    return [`/me/withdrawal`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeWithdrawalQueryOptions = <TData = Awaited<ReturnType<typeof getMeWithdrawal>>, TError = unknown>(params?: GetMeWithdrawalParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawal>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeWithdrawalQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeWithdrawal>>> = ({ signal }) => getMeWithdrawal(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawal>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeWithdrawalQueryResult = NonNullable<Awaited<ReturnType<typeof getMeWithdrawal>>>
export type GetMeWithdrawalQueryError = unknown


export function useGetMeWithdrawal<TData = Awaited<ReturnType<typeof getMeWithdrawal>>, TError = unknown>(
 params: undefined |  GetMeWithdrawalParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawal>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawal>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawal<TData = Awaited<ReturnType<typeof getMeWithdrawal>>, TError = unknown>(
 params?: GetMeWithdrawalParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawal>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawal>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawal<TData = Awaited<ReturnType<typeof getMeWithdrawal>>, TError = unknown>(
 params?: GetMeWithdrawalParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawal>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of all the withdrawals made from your prepaid account
 */

export function useGetMeWithdrawal<TData = Awaited<ReturnType<typeof getMeWithdrawal>>, TError = unknown>(
 params?: GetMeWithdrawalParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawal>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeWithdrawalQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeWithdrawalWithdrawalId = (
    withdrawalId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingWithdrawalOVH>(
      {url: `/me/withdrawal/${withdrawalId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeWithdrawalWithdrawalIdQueryKey = (withdrawalId: string,) => {
    return [`/me/withdrawal/${withdrawalId}`] as const;
    }

    
export const getGetMeWithdrawalWithdrawalIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError = unknown>(withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeWithdrawalWithdrawalIdQueryKey(withdrawalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>> = ({ signal }) => getMeWithdrawalWithdrawalId(withdrawalId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(withdrawalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeWithdrawalWithdrawalIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>>
export type GetMeWithdrawalWithdrawalIdQueryError = unknown


export function useGetMeWithdrawalWithdrawalId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError = unknown>(
 withdrawalId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeWithdrawalWithdrawalId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeWithdrawalWithdrawalIdQueryOptions(withdrawalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Give access to all entries of this withdrawal
 */
export const getMeWithdrawalWithdrawalIdDetails = (
    withdrawalId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/withdrawal/${withdrawalId}/details`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeWithdrawalWithdrawalIdDetailsQueryKey = (withdrawalId: string,) => {
    return [`/me/withdrawal/${withdrawalId}/details`] as const;
    }

    
export const getGetMeWithdrawalWithdrawalIdDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError = unknown>(withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeWithdrawalWithdrawalIdDetailsQueryKey(withdrawalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>> = ({ signal }) => getMeWithdrawalWithdrawalIdDetails(withdrawalId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(withdrawalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeWithdrawalWithdrawalIdDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>>
export type GetMeWithdrawalWithdrawalIdDetailsQueryError = unknown


export function useGetMeWithdrawalWithdrawalIdDetails<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError = unknown>(
 withdrawalId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdDetails<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdDetails<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give access to all entries of this withdrawal
 */

export function useGetMeWithdrawalWithdrawalIdDetails<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeWithdrawalWithdrawalIdDetailsQueryOptions(withdrawalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId = (
    withdrawalId: string,
    withdrawalDetailId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingWithdrawalDetailOVH>(
      {url: `/me/withdrawal/${withdrawalId}/details/${withdrawalDetailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdQueryKey = (withdrawalId: string,
    withdrawalDetailId: string,) => {
    return [`/me/withdrawal/${withdrawalId}/details/${withdrawalDetailId}`] as const;
    }

    
export const getGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError = unknown>(withdrawalId: string,
    withdrawalDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdQueryKey(withdrawalId,withdrawalDetailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>> = ({ signal }) => getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId(withdrawalId,withdrawalDetailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(withdrawalId && withdrawalDetailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>>
export type GetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdQueryError = unknown


export function useGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError = unknown>(
 withdrawalId: string,
    withdrawalDetailId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError = unknown>(
 withdrawalId: string,
    withdrawalDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError = unknown>(
 withdrawalId: string,
    withdrawalDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError = unknown>(
 withdrawalId: string,
    withdrawalDetailId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDetailsWithdrawalDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdQueryOptions(withdrawalId,withdrawalDetailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeWithdrawalWithdrawalIdPayment = (
    withdrawalId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingPaymentOVH>(
      {url: `/me/withdrawal/${withdrawalId}/payment`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeWithdrawalWithdrawalIdPaymentQueryKey = (withdrawalId: string,) => {
    return [`/me/withdrawal/${withdrawalId}/payment`] as const;
    }

    
export const getGetMeWithdrawalWithdrawalIdPaymentQueryOptions = <TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError = unknown>(withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeWithdrawalWithdrawalIdPaymentQueryKey(withdrawalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>> = ({ signal }) => getMeWithdrawalWithdrawalIdPayment(withdrawalId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(withdrawalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeWithdrawalWithdrawalIdPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>>
export type GetMeWithdrawalWithdrawalIdPaymentQueryError = unknown


export function useGetMeWithdrawalWithdrawalIdPayment<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError = unknown>(
 withdrawalId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdPayment<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdPayment<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeWithdrawalWithdrawalIdPayment<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeWithdrawalWithdrawalIdPaymentQueryOptions(withdrawalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get xdsl settings linked to the nichandle
 */
export const getMeXdslSetting = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<XdslSettingOVH>(
      {url: `/me/xdsl/setting`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeXdslSettingQueryKey = () => {
    return [`/me/xdsl/setting`] as const;
    }

    
export const getGetMeXdslSettingQueryOptions = <TData = Awaited<ReturnType<typeof getMeXdslSetting>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeXdslSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeXdslSettingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeXdslSetting>>> = ({ signal }) => getMeXdslSetting(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeXdslSetting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeXdslSettingQueryResult = NonNullable<Awaited<ReturnType<typeof getMeXdslSetting>>>
export type GetMeXdslSettingQueryError = unknown


export function useGetMeXdslSetting<TData = Awaited<ReturnType<typeof getMeXdslSetting>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeXdslSetting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeXdslSetting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeXdslSetting<TData = Awaited<ReturnType<typeof getMeXdslSetting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeXdslSetting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeXdslSetting>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeXdslSetting<TData = Awaited<ReturnType<typeof getMeXdslSetting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeXdslSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get xdsl settings linked to the nichandle
 */

export function useGetMeXdslSetting<TData = Awaited<ReturnType<typeof getMeXdslSetting>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeXdslSetting>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeXdslSettingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change xdsl settings linked to the nichandle
 */
export const postMeXdslSetting = (
    postMeXdslSettingBody: PostMeXdslSettingBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/xdsl/setting`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMeXdslSettingBody, signal
    },
      options);
    }
  


export const getPostMeXdslSettingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeXdslSetting>>, TError,{data: PostMeXdslSettingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeXdslSetting>>, TError,{data: PostMeXdslSettingBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeXdslSetting>>, {data: PostMeXdslSettingBody}> = (props) => {
          const {data} = props ?? {};

          return  postMeXdslSetting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeXdslSettingMutationResult = NonNullable<Awaited<ReturnType<typeof postMeXdslSetting>>>
    export type PostMeXdslSettingMutationBody = PostMeXdslSettingBody
    export type PostMeXdslSettingMutationError = unknown

    /**
 * @summary Change xdsl settings linked to the nichandle
 */
export const usePostMeXdslSetting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeXdslSetting>>, TError,{data: PostMeXdslSettingBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeXdslSetting>>,
        TError,
        {data: PostMeXdslSettingBody},
        TContext
      > => {

      const mutationOptions = getPostMeXdslSettingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate download link for the document
 */
export const getMeBillBillIdDownload = (
    billId: string,
    params?: GetMeBillBillIdDownloadParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/bill/${billId}/download`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeBillBillIdDownloadQueryKey = (billId: string,
    params?: GetMeBillBillIdDownloadParams,) => {
    return [`/me/bill/${billId}/download`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeBillBillIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError = unknown>(billId: string,
    params?: GetMeBillBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBillBillIdDownloadQueryKey(billId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBillBillIdDownload>>> = ({ signal }) => getMeBillBillIdDownload(billId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeBillBillIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBillBillIdDownload>>>
export type GetMeBillBillIdDownloadQueryError = unknown


export function useGetMeBillBillIdDownload<TData = Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError = unknown>(
 billId: string,
    params: undefined |  GetMeBillBillIdDownloadParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDownload<TData = Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError = unknown>(
 billId: string,
    params?: GetMeBillBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBillBillIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeBillBillIdDownload<TData = Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError = unknown>(
 billId: string,
    params?: GetMeBillBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate download link for the document
 */

export function useGetMeBillBillIdDownload<TData = Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError = unknown>(
 billId: string,
    params?: GetMeBillBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBillBillIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeBillBillIdDownloadQueryOptions(billId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate download link for the pdf document
 */
export const getMeDepositDepositIdDownload = (
    depositId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/deposit/${depositId}/download`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdDownloadQueryKey = (depositId: string,) => {
    return [`/me/deposit/${depositId}/download`] as const;
    }

    
export const getGetMeDepositDepositIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError = unknown>(depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdDownloadQueryKey(depositId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>> = ({ signal }) => getMeDepositDepositIdDownload(depositId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>>
export type GetMeDepositDepositIdDownloadQueryError = unknown


export function useGetMeDepositDepositIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError = unknown>(
 depositId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate download link for the pdf document
 */

export function useGetMeDepositDepositIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError = unknown>(
 depositId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdDownloadQueryOptions(depositId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate download link for the document
 */
export const getMeDepositDepositIdPaidBillsBillIdDownload = (
    depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDownloadParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/deposit/${depositId}/paidBills/${billId}/download`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeDepositDepositIdPaidBillsBillIdDownloadQueryKey = (depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDownloadParams,) => {
    return [`/me/deposit/${depositId}/paidBills/${billId}/download`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeDepositDepositIdPaidBillsBillIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError = unknown>(depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositDepositIdPaidBillsBillIdDownloadQueryKey(depositId,billId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>> = ({ signal }) => getMeDepositDepositIdPaidBillsBillIdDownload(depositId,billId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(depositId && billId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositDepositIdPaidBillsBillIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>>
export type GetMeDepositDepositIdPaidBillsBillIdDownloadQueryError = unknown


export function useGetMeDepositDepositIdPaidBillsBillIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError = unknown>(
 depositId: string,
    billId: string,
    params: undefined |  GetMeDepositDepositIdPaidBillsBillIdDownloadParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError = unknown>(
 depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositDepositIdPaidBillsBillIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError = unknown>(
 depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate download link for the document
 */

export function useGetMeDepositDepositIdPaidBillsBillIdDownload<TData = Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError = unknown>(
 depositId: string,
    billId: string,
    params?: GetMeDepositDepositIdPaidBillsBillIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositDepositIdPaidBillsBillIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositDepositIdPaidBillsBillIdDownloadQueryOptions(depositId,billId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of all the deposit requests made
 */
export const getMeDepositRequest = (
    params?: GetMeDepositRequestParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/depositRequest`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeDepositRequestQueryKey = (params?: GetMeDepositRequestParams,) => {
    return [`/me/depositRequest`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeDepositRequestQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositRequest>>, TError = unknown>(params?: GetMeDepositRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositRequestQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositRequest>>> = ({ signal }) => getMeDepositRequest(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositRequestQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositRequest>>>
export type GetMeDepositRequestQueryError = unknown


export function useGetMeDepositRequest<TData = Awaited<ReturnType<typeof getMeDepositRequest>>, TError = unknown>(
 params: undefined |  GetMeDepositRequestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositRequest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositRequest<TData = Awaited<ReturnType<typeof getMeDepositRequest>>, TError = unknown>(
 params?: GetMeDepositRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositRequest>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositRequest<TData = Awaited<ReturnType<typeof getMeDepositRequest>>, TError = unknown>(
 params?: GetMeDepositRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of all the deposit requests made
 */

export function useGetMeDepositRequest<TData = Awaited<ReturnType<typeof getMeDepositRequest>>, TError = unknown>(
 params?: GetMeDepositRequestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositRequestQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getMeDepositRequestId = (
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingInvoiceDepositRequestOVH>(
      {url: `/me/depositRequest/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeDepositRequestIdQueryKey = (id: number,) => {
    return [`/me/depositRequest/${id}`] as const;
    }

    
export const getGetMeDepositRequestIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeDepositRequestId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequestId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeDepositRequestIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeDepositRequestId>>> = ({ signal }) => getMeDepositRequestId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequestId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeDepositRequestIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeDepositRequestId>>>
export type GetMeDepositRequestIdQueryError = unknown


export function useGetMeDepositRequestId<TData = Awaited<ReturnType<typeof getMeDepositRequestId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequestId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositRequestId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositRequestId<TData = Awaited<ReturnType<typeof getMeDepositRequestId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequestId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeDepositRequestId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeDepositRequestId<TData = Awaited<ReturnType<typeof getMeDepositRequestId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequestId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetMeDepositRequestId<TData = Awaited<ReturnType<typeof getMeDepositRequestId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeDepositRequestId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeDepositRequestIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of payment methods you can use to pay this order
 */
export const getMeOrderOrderIdAvailablePaymentMethod = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderAvailablePaymentMethodOVH[]>(
      {url: `/me/order/${orderId}/availablePaymentMethod`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdAvailablePaymentMethodQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/availablePaymentMethod`] as const;
    }

    
export const getGetMeOrderOrderIdAvailablePaymentMethodQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdAvailablePaymentMethodQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>> = ({ signal }) => getMeOrderOrderIdAvailablePaymentMethod(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdAvailablePaymentMethodQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>>
export type GetMeOrderOrderIdAvailablePaymentMethodQueryError = unknown


export function useGetMeOrderOrderIdAvailablePaymentMethod<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAvailablePaymentMethod<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdAvailablePaymentMethod<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of payment methods you can use to pay this order
 */

export function useGetMeOrderOrderIdAvailablePaymentMethod<TData = Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdAvailablePaymentMethod>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdAvailablePaymentMethodQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Capacities about this order
 */
export const getMeOrderOrderIdCapacities = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOrderCapacitiesOVH>(
      {url: `/me/order/${orderId}/capacities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdCapacitiesQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/capacities`] as const;
    }

    
export const getGetMeOrderOrderIdCapacitiesQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdCapacitiesQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>> = ({ signal }) => getMeOrderOrderIdCapacities(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdCapacitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>>
export type GetMeOrderOrderIdCapacitiesQueryError = unknown


export function useGetMeOrderOrderIdCapacities<TData = Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdCapacities<TData = Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdCapacities<TData = Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Capacities about this order
 */

export function useGetMeOrderOrderIdCapacities<TData = Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdCapacities>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdCapacitiesQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve an order detail
 */
export const getMeOrderOrderIdDetailsDetailId = (
    orderId: number,
    detailId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderDetailOVH>(
      {url: `/me/order/${orderId}/details/${detailId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsDetailIdQueryKey = (orderId: number,
    detailId: number,) => {
    return [`/me/order/${orderId}/details/${detailId}`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsDetailIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError = unknown>(orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsDetailIdQueryKey(orderId,detailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>> = ({ signal }) => getMeOrderOrderIdDetailsDetailId(orderId,detailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && detailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsDetailIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>>
export type GetMeOrderOrderIdDetailsDetailIdQueryError = unknown


export function useGetMeOrderOrderIdDetailsDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError = unknown>(
 orderId: number,
    detailId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve an order detail
 */

export function useGetMeOrderOrderIdDetailsDetailId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsDetailIdQueryOptions(orderId,detailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve an order detail extensions
 */
export const getMeOrderOrderIdDetailsDetailIdExtension = (
    orderId: number,
    detailId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingItemDetailOVH>(
      {url: `/me/order/${orderId}/details/${detailId}/extension`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsDetailIdExtensionQueryKey = (orderId: number,
    detailId: number,) => {
    return [`/me/order/${orderId}/details/${detailId}/extension`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsDetailIdExtensionQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError = unknown>(orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsDetailIdExtensionQueryKey(orderId,detailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>> = ({ signal }) => getMeOrderOrderIdDetailsDetailIdExtension(orderId,detailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && detailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsDetailIdExtensionQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>>
export type GetMeOrderOrderIdDetailsDetailIdExtensionQueryError = unknown


export function useGetMeOrderOrderIdDetailsDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError = unknown>(
 orderId: number,
    detailId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve an order detail extensions
 */

export function useGetMeOrderOrderIdDetailsDetailIdExtension<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdExtension>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsDetailIdExtensionQueryOptions(orderId,detailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a list of operations linked to this order detail
 */
export const getMeOrderOrderIdDetailsDetailIdOperations = (
    orderId: number,
    detailId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/me/order/${orderId}/details/${detailId}/operations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsDetailIdOperationsQueryKey = (orderId: number,
    detailId: number,) => {
    return [`/me/order/${orderId}/details/${detailId}/operations`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsDetailIdOperationsQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError = unknown>(orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsDetailIdOperationsQueryKey(orderId,detailId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>> = ({ signal }) => getMeOrderOrderIdDetailsDetailIdOperations(orderId,detailId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && detailId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsDetailIdOperationsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>>
export type GetMeOrderOrderIdDetailsDetailIdOperationsQueryError = unknown


export function useGetMeOrderOrderIdDetailsDetailIdOperations<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError = unknown>(
 orderId: number,
    detailId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailIdOperations<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailIdOperations<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a list of operations linked to this order detail
 */

export function useGetMeOrderOrderIdDetailsDetailIdOperations<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError = unknown>(
 orderId: number,
    detailId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsDetailIdOperationsQueryOptions(orderId,detailId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a list of operations linked to this order detail
 */
export const getMeOrderOrderIdDetailsDetailIdOperationsOperationId = (
    orderId: number,
    detailId: number,
    operationId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServiceOperationOVH>(
      {url: `/me/order/${orderId}/details/${detailId}/operations/${operationId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdDetailsDetailIdOperationsOperationIdQueryKey = (orderId: number,
    detailId: number,
    operationId: number,) => {
    return [`/me/order/${orderId}/details/${detailId}/operations/${operationId}`] as const;
    }

    
export const getGetMeOrderOrderIdDetailsDetailIdOperationsOperationIdQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError = unknown>(orderId: number,
    detailId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdDetailsDetailIdOperationsOperationIdQueryKey(orderId,detailId,operationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>> = ({ signal }) => getMeOrderOrderIdDetailsDetailIdOperationsOperationId(orderId,detailId,operationId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && detailId && operationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdDetailsDetailIdOperationsOperationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>>
export type GetMeOrderOrderIdDetailsDetailIdOperationsOperationIdQueryError = unknown


export function useGetMeOrderOrderIdDetailsDetailIdOperationsOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError = unknown>(
 orderId: number,
    detailId: number,
    operationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailIdOperationsOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError = unknown>(
 orderId: number,
    detailId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdDetailsDetailIdOperationsOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError = unknown>(
 orderId: number,
    detailId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve a list of operations linked to this order detail
 */

export function useGetMeOrderOrderIdDetailsDetailIdOperationsOperationId<TData = Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError = unknown>(
 orderId: number,
    detailId: number,
    operationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdDetailsDetailIdOperationsOperationId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdDetailsDetailIdOperationsOperationIdQueryOptions(orderId,detailId,operationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List vouchers applied on this Order
 */
export const getMeOrderOrderIdVoucher = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/me/order/${orderId}/voucher`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdVoucherQueryKey = (orderId: number,) => {
    return [`/me/order/${orderId}/voucher`] as const;
    }

    
export const getGetMeOrderOrderIdVoucherQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError = unknown>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdVoucherQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>> = ({ signal }) => getMeOrderOrderIdVoucher(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdVoucherQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>>
export type GetMeOrderOrderIdVoucherQueryError = unknown


export function useGetMeOrderOrderIdVoucher<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError = unknown>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdVoucher<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdVoucher<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List vouchers applied on this Order
 */

export function useGetMeOrderOrderIdVoucher<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError = unknown>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucher>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdVoucherQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Use a Voucher on this Order
 */
export const postMeOrderOrderIdVoucher = (
    orderId: number,
    billingOrderUseVoucherOVH: BillingOrderUseVoucherOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOrderVoucherOVH>(
      {url: `/me/order/${orderId}/voucher`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: billingOrderUseVoucherOVH, signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdVoucherMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdVoucher>>, TError,{orderId: number;data: BillingOrderUseVoucherOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdVoucher>>, TError,{orderId: number;data: BillingOrderUseVoucherOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdVoucher>>, {orderId: number;data: BillingOrderUseVoucherOVH}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postMeOrderOrderIdVoucher(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdVoucherMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdVoucher>>>
    export type PostMeOrderOrderIdVoucherMutationBody = BillingOrderUseVoucherOVH
    export type PostMeOrderOrderIdVoucherMutationError = unknown

    /**
 * @summary Use a Voucher on this Order
 */
export const usePostMeOrderOrderIdVoucher = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdVoucher>>, TError,{orderId: number;data: BillingOrderUseVoucherOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdVoucher>>,
        TError,
        {orderId: number;data: BillingOrderUseVoucherOVH},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdVoucherMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remove Voucher from this Order
 */
export const deleteMeOrderOrderIdVoucherBalanceName = (
    orderId: number,
    balanceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/voucher/${balanceName}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeOrderOrderIdVoucherBalanceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeOrderOrderIdVoucherBalanceName>>, TError,{orderId: number;balanceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeOrderOrderIdVoucherBalanceName>>, TError,{orderId: number;balanceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeOrderOrderIdVoucherBalanceName>>, {orderId: number;balanceName: string}> = (props) => {
          const {orderId,balanceName} = props ?? {};

          return  deleteMeOrderOrderIdVoucherBalanceName(orderId,balanceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeOrderOrderIdVoucherBalanceNameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeOrderOrderIdVoucherBalanceName>>>
    
    export type DeleteMeOrderOrderIdVoucherBalanceNameMutationError = unknown

    /**
 * @summary Remove Voucher from this Order
 */
export const useDeleteMeOrderOrderIdVoucherBalanceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeOrderOrderIdVoucherBalanceName>>, TError,{orderId: number;balanceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeOrderOrderIdVoucherBalanceName>>,
        TError,
        {orderId: number;balanceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteMeOrderOrderIdVoucherBalanceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve Voucher applied on this Order
 */
export const getMeOrderOrderIdVoucherBalanceName = (
    orderId: number,
    balanceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<BillingOrderOrderVoucherOVH>(
      {url: `/me/order/${orderId}/voucher/${balanceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeOrderOrderIdVoucherBalanceNameQueryKey = (orderId: number,
    balanceName: string,) => {
    return [`/me/order/${orderId}/voucher/${balanceName}`] as const;
    }

    
export const getGetMeOrderOrderIdVoucherBalanceNameQueryOptions = <TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError = unknown>(orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeOrderOrderIdVoucherBalanceNameQueryKey(orderId,balanceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>> = ({ signal }) => getMeOrderOrderIdVoucherBalanceName(orderId,balanceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && balanceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeOrderOrderIdVoucherBalanceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>>
export type GetMeOrderOrderIdVoucherBalanceNameQueryError = unknown


export function useGetMeOrderOrderIdVoucherBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdVoucherBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeOrderOrderIdVoucherBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Retrieve Voucher applied on this Order
 */

export function useGetMeOrderOrderIdVoucherBalanceName<TData = Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError = unknown>(
 orderId: number,
    balanceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeOrderOrderIdVoucherBalanceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeOrderOrderIdVoucherBalanceNameQueryOptions(orderId,balanceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Waive retraction period of order
 */
export const postMeOrderOrderIdWaiveRetractionPeriod = (
    orderId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/me/order/${orderId}/waiveRetractionPeriod`, method: 'POST', signal
    },
      options);
    }
  


export const getPostMeOrderOrderIdWaiveRetractionPeriodMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetractionPeriod>>, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetractionPeriod>>, TError,{orderId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetractionPeriod>>, {orderId: number}> = (props) => {
          const {orderId} = props ?? {};

          return  postMeOrderOrderIdWaiveRetractionPeriod(orderId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMeOrderOrderIdWaiveRetractionPeriodMutationResult = NonNullable<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetractionPeriod>>>
    
    export type PostMeOrderOrderIdWaiveRetractionPeriodMutationError = unknown

    /**
 * @summary Waive retraction period of order
 */
export const usePostMeOrderOrderIdWaiveRetractionPeriod = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetractionPeriod>>, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postMeOrderOrderIdWaiveRetractionPeriod>>,
        TError,
        {orderId: number},
        TContext
      > => {

      const mutationOptions = getPostMeOrderOrderIdWaiveRetractionPeriodMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Generate download link for the document
 */
export const getMeRefundRefundIdDownload = (
    refundId: string,
    params?: GetMeRefundRefundIdDownloadParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/refund/${refundId}/download`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetMeRefundRefundIdDownloadQueryKey = (refundId: string,
    params?: GetMeRefundRefundIdDownloadParams,) => {
    return [`/me/refund/${refundId}/download`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMeRefundRefundIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError = unknown>(refundId: string,
    params?: GetMeRefundRefundIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeRefundRefundIdDownloadQueryKey(refundId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>> = ({ signal }) => getMeRefundRefundIdDownload(refundId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(refundId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeRefundRefundIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>>
export type GetMeRefundRefundIdDownloadQueryError = unknown


export function useGetMeRefundRefundIdDownload<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError = unknown>(
 refundId: string,
    params: undefined |  GetMeRefundRefundIdDownloadParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdDownload<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError = unknown>(
 refundId: string,
    params?: GetMeRefundRefundIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeRefundRefundIdDownload<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError = unknown>(
 refundId: string,
    params?: GetMeRefundRefundIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate download link for the document
 */

export function useGetMeRefundRefundIdDownload<TData = Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError = unknown>(
 refundId: string,
    params?: GetMeRefundRefundIdDownloadParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeRefundRefundIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeRefundRefundIdDownloadQueryOptions(refundId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate download link for the pdf document
 */
export const getMeWithdrawalWithdrawalIdDownload = (
    withdrawalId: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/me/withdrawal/${withdrawalId}/download`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeWithdrawalWithdrawalIdDownloadQueryKey = (withdrawalId: string,) => {
    return [`/me/withdrawal/${withdrawalId}/download`] as const;
    }

    
export const getGetMeWithdrawalWithdrawalIdDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError = unknown>(withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeWithdrawalWithdrawalIdDownloadQueryKey(withdrawalId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>> = ({ signal }) => getMeWithdrawalWithdrawalIdDownload(withdrawalId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(withdrawalId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeWithdrawalWithdrawalIdDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>>
export type GetMeWithdrawalWithdrawalIdDownloadQueryError = unknown


export function useGetMeWithdrawalWithdrawalIdDownload<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError = unknown>(
 withdrawalId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdDownload<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeWithdrawalWithdrawalIdDownload<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Generate download link for the pdf document
 */

export function useGetMeWithdrawalWithdrawalIdDownload<TData = Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError = unknown>(
 withdrawalId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeWithdrawalWithdrawalIdDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeWithdrawalWithdrawalIdDownloadQueryOptions(withdrawalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetVpsServiceNameVeeamRestorePointsParams = {
/**
 * Filter the value of creationTime property (like)
 */
creationTime?: string;
};

export type GetVpsServiceNameTasksParams = {
/**
 * Filter the value of state property (=)
 */
state?: VpsTaskStateEnumOVH;
/**
 * Filter the value of type property (=)
 */
type?: VpsTaskTypeEnumOVH;
};

export type GetVpsServiceNameDisksIdUseParams = {
/**
 * The type of statistic to be fetched
 */
type: VpsDiskStatisticTypeEnumOVH;
};

export type GetVpsServiceNameDisksIdMonitoringParams = {
/**
 * The period the statistics are fetched for
 */
period: VpsVpsMonitoringPeriodEnumOVH;
/**
 * The type of statistic to be fetched
 */
type: VpsDiskStatisticTypeEnumOVH;
};

export type GetVpsServiceNameAutomatedBackupRestorePointsParams = {
/**
 * The state of the restore point
 */
state: VpsRestoreStateEnumOVH;
};

export type GetVpsOrderRuleOsChoicesParams = {
/**
 * VPS datacenter
 */
datacenter: string;
/**
 * VPS OS selection in order api
 */
os: string;
};

export type GetVpsOrderRuleDatacenterParams = {
/**
 * VPS OS selection in order api
 */
os?: string;
/**
 * Subsidiary to sort datacenters
 */
ovhSubsidiary: NichandleOvhSubsidiaryEnumOVH;
/**
 * VPS plan code from order api
 */
planCode: string;
};

export type GetVpsDatacenterParams = {
/**
 * Country targeted
 */
country?: NichandleCountryEnumOVH;
};

export type GetVpsParams = {
/**
 * Filter resources on IAM tags
 */
iamTags?: {[key: string]: IamResourceTagFilterOVH[]};
};

/**
 * vps.veeam.restorePoints.restore.post
 */
export interface VpsVeeamRestorePointsRestorePostOVH {
  /** (Full only) Change the restored VPS root password when done */
  changePassword?: boolean;
  /** A structure describing a Veeam backup's export options */
  export?: VpsVeeamExportTypeEnumOVH;
  /** Replace your current VPS by the restorePoint */
  full: boolean;
}

/**
 * A structure describing a Veeam restored backup's state
 */
export type VpsVeeamStateEnumOVH = typeof VpsVeeamStateEnumOVH[keyof typeof VpsVeeamStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVeeamStateEnumOVH = {
  mounted: 'mounted',
  restoring: 'restoring',
  unmounted: 'unmounted',
  unmounting: 'unmounting',
} as const;

/**
 * Informations about a VPS Veeam restore points
 */
export interface VpsVeeamRestorePointOVH {
  /** The restore point's creation time */
  readonly creationTime?: string;
  /** The restore point's id */
  readonly id?: number;
}

/**
 * A structure describing a Veeam backup's access informations
 */
export interface VpsVeeamInfosOVH {
  /** NFS URL of the backup */
  readonly nfs?: string;
  /** SMB URL of the backup */
  readonly smb?: string;
}

/**
 * Currently restored backup
 */
export interface VpsVeeamRestoredBackupOVH {
  /** Backup access informations */
  readonly accessInfos?: VpsVeeamInfosOVH;
  /** The restore point id */
  readonly restorePointId?: number;
  /** The restored backup state */
  readonly state?: VpsVeeamStateEnumOVH;
}

/**
 * A structure describing a Veeam backup's export options
 */
export type VpsVeeamExportTypeEnumOVH = typeof VpsVeeamExportTypeEnumOVH[keyof typeof VpsVeeamExportTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVeeamExportTypeEnumOVH = {
  nfs: 'nfs',
  smb: 'smb',
} as const;

/**
 * vps.secondaryDnsDomains.post
 */
export interface VpsSecondaryDnsDomainsPostOVH {
  /** The domain to add */
  domain: string;
  /** IPv4 address (e.g., 192.0.2.0) */
  ip?: Ipv4OVH;
}

/**
 * vps.reinstall.post
 */
export interface VpsReinstallPostOVH {
  /** If asked, the installation password will NOT be sent (only if sshKey defined) */
  doNotSendPassword?: boolean;
  /** Distribution language. default : en */
  language?: string;
  /** Public SSH key to pre-install on your VPS */
  publicSshKey?: string;
  /** Id of the vps.Software type fetched in /template/{id}/software */
  softwareId?: number[];
  /** SSH key names to pre-install on your VPS (name from /me/sshKey) */
  sshKey?: string[];
  /** Id of the vps.Template fetched in /templates list */
  templateId: number;
}

/**
 * vps.rebuild.post
 */
export interface VpsRebuildPostOVH {
  /** If asked, the installation password will NOT be sent (only if sshKey defined) */
  doNotSendPassword?: boolean;
  /** Id of the vps.Image fetched in /images list */
  imageId: string;
  /** If asked, RTM will be installed on your VPS */
  installRTM?: boolean;
  /** Public SSH key to pre-install on your VPS */
  publicSshKey?: string;
  /** SSH key name to pre-install on your VPS (name from /me/sshKey) */
  sshKey?: string;
}

/**
 * Possible values for OS choice status
 */
export type VpsOrderRuleOSChoiceStatusEnumOVH = typeof VpsOrderRuleOSChoiceStatusEnumOVH[keyof typeof VpsOrderRuleOSChoiceStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsOrderRuleOSChoiceStatusEnumOVH = {
  available: 'available',
  'checked-by-default': 'checked-by-default',
  unavailable: 'unavailable',
} as const;

/**
 * OS choice rules
 */
export interface VpsOrderRuleOSChoiceOVH {
  readonly name?: string;
  readonly status?: VpsOrderRuleOSChoiceStatusEnumOVH;
}

/**
 * OS choices rules
 */
export interface VpsOrderRuleOSChoicesOVH {
  readonly choices?: readonly VpsOrderRuleOSChoiceOVH[];
}

/**
 * Possible values for datacenter status
 */
export type VpsOrderRuleDatacenterStatusEnumOVH = typeof VpsOrderRuleDatacenterStatusEnumOVH[keyof typeof VpsOrderRuleDatacenterStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsOrderRuleDatacenterStatusEnumOVH = {
  available: 'available',
  'out-of-stock': 'out-of-stock',
} as const;

/**
 * Datacenter rules
 */
export interface VpsOrderRuleDatacenterOVH {
  readonly datacenter?: string;
  readonly status?: VpsOrderRuleDatacenterStatusEnumOVH;
}

/**
 * Datacenters rules
 */
export interface VpsOrderRuleDatacentersOVH {
  readonly datacenters?: readonly VpsOrderRuleDatacenterOVH[];
}

/**
 * vps.openConsoleAccess.post
 */
export interface VpsOpenConsoleAccessPostOVH {
  /** All supported VNC protocols by VPS */
  protocol?: VpsVncProtocolEnumOVH;
}

/**
 * Datacenters rules
 */
export interface VpsMigrationSteinOVH {
  readonly date?: string;
  readonly travaux?: string;
  readonly zone?: string;
}

/**
 * vps.migration2018.post
 */
export interface VpsMigration2018PostOVH {
  /** Choosen plan for migration */
  newPlan: string;
}

/**
 * A structure describing a migration plan from VPS 2016/2018 to VPS 2020
 */
export interface VpsMigrationVPS2018to2020PlanOVH {
  /** VPS current plan code */
  readonly currentPlan?: string;
  /** New VPS plan code after migration */
  readonly newPlan?: string;
  /** Mapping of VPS options from VPS 2016 to VPS 2020 */
  readonly options?: readonly VpsMigrationOptionMapping2016OVH[];
  /** VPS product */
  readonly product?: string;
}

/**
 * All status a migration task can be in
 */
export type VpsMigrationStatusEnumOVH = typeof VpsMigrationStatusEnumOVH[keyof typeof VpsMigrationStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsMigrationStatusEnumOVH = {
  available: 'available',
  notAvailable: 'notAvailable',
  ongoing: 'ongoing',
  planned: 'planned',
  toPlan: 'toPlan',
} as const;

/**
 * A structure describing a migration from VPS 2016/2018 to VPS 2020
 */
export interface VpsMigrationVPS2018to2020OVH {
  /** All datacenter of vps migration */
  readonly datacenter?: VpsMigrationDatacenterEnumOVH;
  /**
   * Migration start date
   * @nullable
   */
  readonly date?: string | null;
  /** List of available plans to migrate */
  readonly plans?: readonly VpsMigrationVPS2018to2020PlanOVH[];
  /** All status a migration task can be in */
  readonly status?: VpsMigrationStatusEnumOVH;
}

/**
 * A structure describing a migration from VPS 2016 to VPS 2020
 */
export interface VpsMigrationVPS2016to2020OVH {
  /** VPS current plan code */
  readonly currentPlan?: string;
  /** All datacenter of vps migration */
  readonly datacenter?: VpsMigrationDatacenterEnumOVH;
  /**
   * Migration start date
   * @nullable
   */
  readonly date?: string | null;
  /** New VPS plan code after migration */
  readonly newPlan?: string;
  /** Mapping of VPS options from VPS 2016 to VPS 2020 */
  readonly options?: readonly VpsMigrationOptionMapping2016OVH[];
  /** VPS product */
  readonly product?: string;
  /** All status a migration task can be in */
  readonly status?: VpsMigrationStatusEnumOVH;
}

/**
 * Mapping between a VPS 2016 option code and a VPS 2020 option code
 */
export interface VpsMigrationOptionOptionMapping2016OVH {
  /** VPS option current plan code */
  readonly currentPlan?: string;
  /** New VPS option plan code after migration */
  readonly newPlan?: string;
  /** VPS option product */
  readonly product?: string;
}

/**
 * Mapping between a VPS 2016 option code and a VPS 2020 option code
 */
export interface VpsMigrationOptionMapping2016OVH {
  /** VPS option current plan code */
  readonly currentPlan?: string;
  /** New VPS option plan code after migration */
  readonly newPlan?: string;
  /** Mapping of VPS options of option from VPS 2016 to VPS 2020 */
  readonly options?: readonly VpsMigrationOptionOptionMapping2016OVH[];
  /** VPS option product */
  readonly product?: string;
}

/**
 * All datacenter of vps migration
 */
export type VpsMigrationDatacenterEnumOVH = typeof VpsMigrationDatacenterEnumOVH[keyof typeof VpsMigrationDatacenterEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsMigrationDatacenterEnumOVH = {
  BHS: 'BHS',
  DE: 'DE',
  GRA: 'GRA',
  SBG: 'SBG',
  SGP: 'SGP',
  SYD: 'SYD',
  UK: 'UK',
  WAW: 'WAW',
} as const;

/**
 * Ip types on a VPS
 */
export type VpsIpTypeEnumOVH = typeof VpsIpTypeEnumOVH[keyof typeof VpsIpTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsIpTypeEnumOVH = {
  additional: 'additional',
  primary: 'primary',
} as const;

/**
 * Possible states of a service (ping, port)
 */
export type VpsIpServiceStatusStateEnumOVH = typeof VpsIpServiceStatusStateEnumOVH[keyof typeof VpsIpServiceStatusStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsIpServiceStatusStateEnumOVH = {
  down: 'down',
  up: 'up',
} as const;

/**
 * Port and state of a service on an IP
 */
export interface VpsIpServiceStatusServiceOVH {
  readonly port?: number;
  /** Possible states of a service (ping, port) */
  readonly state?: VpsIpServiceStatusStateEnumOVH;
}

/**
 * @nullable
 */
export type VpsIpServiceStatusOVHTools = VpsIpServiceStatusStateEnumOVH | null;

/**
 * Service states for an Ip
 */
export interface VpsIpServiceStatusOVH {
  /** Port and state of a service on an IP */
  readonly dns?: VpsIpServiceStatusServiceOVH;
  /** Port and state of a service on an IP */
  readonly http?: VpsIpServiceStatusServiceOVH;
  /** Port and state of a service on an IP */
  readonly https?: VpsIpServiceStatusServiceOVH;
  /** Possible states of a service (ping, port) */
  readonly ping?: VpsIpServiceStatusStateEnumOVH;
  /** Port and state of a service on an IP */
  readonly smtp?: VpsIpServiceStatusServiceOVH;
  /** Port and state of a service on an IP */
  readonly ssh?: VpsIpServiceStatusServiceOVH;
  /** @nullable */
  readonly tools?: VpsIpServiceStatusOVHTools;
}

/**
 * Geolocation of the IP Address
 */
export type VpsIpGeolocationEnumOVH = typeof VpsIpGeolocationEnumOVH[keyof typeof VpsIpGeolocationEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsIpGeolocationEnumOVH = {
  au: 'au',
  be: 'be',
  ca: 'ca',
  cz: 'cz',
  de: 'de',
  es: 'es',
  fi: 'fi',
  fr: 'fr',
  gb: 'gb',
  ie: 'ie',
  in: 'in',
  it: 'it',
  lt: 'lt',
  nl: 'nl',
  pl: 'pl',
  pt: 'pt',
  sg: 'sg',
  uk: 'uk',
  us: 'us',
} as const;

/**
 * Possible type a disk can be in
 */
export type VpsDiskTypeEnumOVH = typeof VpsDiskTypeEnumOVH[keyof typeof VpsDiskTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsDiskTypeEnumOVH = {
  additional: 'additional',
  primary: 'primary',
} as const;

/**
 * Available types for the Disk monitoring and use
 */
export type VpsDiskStatisticTypeEnumOVH = typeof VpsDiskStatisticTypeEnumOVH[keyof typeof VpsDiskStatisticTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsDiskStatisticTypeEnumOVH = {
  max: 'max',
  used: 'used',
} as const;

/**
 * Possible states the disk can be in
 */
export type VpsDiskStateEnumOVH = typeof VpsDiskStateEnumOVH[keyof typeof VpsDiskStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsDiskStateEnumOVH = {
  connected: 'connected',
  disconnected: 'disconnected',
  pending: 'pending',
} as const;

/**
 * vps.createSnapshot.post
 */
export interface VpsCreateSnapshotPostOVH {
  /** A textual description for your snapshot */
  description?: string;
}

/**
 * vps.backupftp.access.post
 */
export interface VpsBackupftpAccessPostOVH {
  /** Whether to allow the CIFS (SMB) protocol for this ACL */
  cifs: boolean;
  /** Whether to allow the FTP protocol for this ACL */
  ftp?: boolean;
  /** IP CIDR notation (e.g., 192.0.2.0/24) */
  ipBlock: IpBlockOVH;
  /** Whether to allow the NFS protocol for this ACL */
  nfs: boolean;
}

/**
 * vps.automatedBackup.restore.post
 */
export interface VpsAutomatedBackupRestorePostOVH {
  /** Only with restore full on VPS Cloud 2014 */
  changePassword?: boolean;
  /** Restore Point fetched in /automatedBackup/restorePoints */
  restorePoint: string;
  /** Available restore types */
  type: VpsRestoreTypeEnumOVH;
}

/**
 * vps.automatedBackup.reschedule.post
 */
export interface VpsAutomatedBackupReschedulePostOVH {
  /** Time (e.g., 15:04:05) */
  schedule: TimeOVH;
}

/**
 * vps.automatedBackup.detachBackup.post
 */
export interface VpsAutomatedBackupDetachBackupPostOVH {
  /** restorePoint fetched in /vps/{serviceName}/automatedBackup/attachedBackup */
  restorePoint: string;
}

/**
 * A structure describing a backup's access informations
 */
export interface VpsAutomatedBackupAttachedInfosOVH {
  /**
   * Additional Disk details
   * @nullable
   */
  readonly additionalDisk?: string | null;
  /**
   * NFS URL of the backup
   * @nullable
   */
  readonly nfs?: string | null;
  /**
   * SMB URL of the backup
   * @nullable
   */
  readonly smb?: string | null;
}

/**
 * A backup attached to your VPS
 */
export interface VpsAutomatedBackupAttachedOVH {
  /** A structure describing a backup's access informations */
  readonly access?: VpsAutomatedBackupAttachedInfosOVH;
  readonly restorePoint?: string;
}

/**
 * All versions that VPS can have
 */
export type VpsVpsVersionEnumOVH = typeof VpsVpsVersionEnumOVH[keyof typeof VpsVpsVersionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsVersionEnumOVH = {
  '2013v1': '2013v1',
  '2014v1': '2014v1',
  '2015v1': '2015v1',
  '2017v1': '2017v1',
  '2017v2': '2017v2',
  '2017v3': '2017v3',
  '2018v1': '2018v1',
  '2018v2': '2018v2',
  '2019v1': '2019v1',
} as const;

/**
 * A timestamp associated to a value
 */
export interface VpsVpsTimestampValueOVH {
  readonly timestamp?: number;
  /** @nullable */
  readonly value?: number | null;
}

/**
 * Available types for the VPS monitoring and use
 */
export type VpsVpsStatisticTypeEnumOVH = typeof VpsVpsStatisticTypeEnumOVH[keyof typeof VpsVpsStatisticTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsStatisticTypeEnumOVH = {
  'cpu:iowait': 'cpu:iowait',
  'cpu:max': 'cpu:max',
  'cpu:nice': 'cpu:nice',
  'cpu:sys': 'cpu:sys',
  'cpu:used': 'cpu:used',
  'cpu:user': 'cpu:user',
  'mem:max': 'mem:max',
  'mem:used': 'mem:used',
  'net:rx': 'net:rx',
  'net:tx': 'net:tx',
} as const;

/**
 * All states a VPS can be in
 */
export type VpsVpsStateEnumOVH = typeof VpsVpsStateEnumOVH[keyof typeof VpsVpsStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsStateEnumOVH = {
  backuping: 'backuping',
  installing: 'installing',
  maintenance: 'maintenance',
  rebooting: 'rebooting',
  rescued: 'rescued',
  running: 'running',
  stopped: 'stopped',
  stopping: 'stopping',
  upgrading: 'upgrading',
} as const;

/**
 * All states a VPS Option can be in
 */
export type VpsVpsOptionStateEnumOVH = typeof VpsVpsOptionStateEnumOVH[keyof typeof VpsVpsOptionStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsOptionStateEnumOVH = {
  released: 'released',
  subscribed: 'subscribed',
} as const;

/**
 * All options a VPS can have
 */
export type VpsVpsOptionEnumOVH = typeof VpsVpsOptionEnumOVH[keyof typeof VpsVpsOptionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsOptionEnumOVH = {
  additionalDisk: 'additionalDisk',
  automatedBackup: 'automatedBackup',
  cpanel: 'cpanel',
  ftpbackup: 'ftpbackup',
  plesk: 'plesk',
  snapshot: 'snapshot',
  veeam: 'veeam',
  windows: 'windows',
} as const;

/**
 * All offers a VPS can have
 */
export type VpsVpsOfferEnumOVH = typeof VpsVpsOfferEnumOVH[keyof typeof VpsVpsOfferEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsOfferEnumOVH = {
  'beta-classic': 'beta-classic',
  classic: 'classic',
  cloud: 'cloud',
  cloudram: 'cloudram',
  'game-classic': 'game-classic',
  lowlat: 'lowlat',
  ssd: 'ssd',
} as const;

/**
 * All values a VPS netboot mode can be in
 */
export type VpsVpsNetbootEnumOVH = typeof VpsVpsNetbootEnumOVH[keyof typeof VpsVpsNetbootEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsNetbootEnumOVH = {
  local: 'local',
  rescue: 'rescue',
} as const;

/**
 * Statistics about resource usage
 */
export interface VpsVpsMonitoringStatisticsOVH {
  /** Average CPU usage in percentage over the last 24 hours */
  readonly cpu?: number;
  /** Current disk usage in percentage */
  readonly disk?: number;
  /** Average memory usage in percentage over the last 24 hours */
  readonly memory?: number;
}

/**
 * Available periods for the VPS monitoring
 */
export type VpsVpsMonitoringPeriodEnumOVH = typeof VpsVpsMonitoringPeriodEnumOVH[keyof typeof VpsVpsMonitoringPeriodEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsMonitoringPeriodEnumOVH = {
  lastday: 'lastday',
  lastmonth: 'lastmonth',
  lastweek: 'lastweek',
  lastyear: 'lastyear',
  today: 'today',
} as const;

/**
 * All values keymap can be in
 */
export type VpsVpsKeymapEnumOVH = typeof VpsVpsKeymapEnumOVH[keyof typeof VpsVpsKeymapEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVpsKeymapEnumOVH = {
  fr: 'fr',
  us: 'us',
} as const;

/**
 * VPS billing version
 */
export interface VpsVpsBillingVersionOVH {
  readonly version?: number;
}

/**
 * All supported VNC protocols by VPS
 */
export type VpsVncProtocolEnumOVH = typeof VpsVncProtocolEnumOVH[keyof typeof VpsVncProtocolEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsVncProtocolEnumOVH = {
  VNC: 'VNC',
  VNCOverWebSocket: 'VNCOverWebSocket',
} as const;

/**
 * A VNC connection informations
 */
export interface VpsVncOVH {
  readonly host?: string;
  readonly password?: string;
  readonly port?: number;
}

/**
 * Informations about a VPS Veeam backups
 */
export interface VpsVeeamOVH {
  /** Backup state */
  readonly backup?: boolean;
}

/**
 * Set KVM keyboard layout on VPS Cloud. Reboot your VPS after change
 * @nullable
 */
export type VpsVPSWithIAMOVHKeymap = VpsVpsKeymapEnumOVH | null;

/**
 * IAM resource metadata
 * @nullable
 */
export type VpsVPSWithIAMOVHIam = IamResourceMetadataOVH | null;

/**
 * VPS Virtual Machine
 */
export interface VpsVPSWithIAMOVH {
  readonly cluster?: string;
  /**
   * Set the name displayed in ManagerV6 for your VPS (max 50 chars)
   * @nullable
   */
  displayName?: string | null;
  /**
   * IAM resource metadata
   * @nullable
   */
  readonly iam?: VpsVPSWithIAMOVHIam;
  /**
   * Set KVM keyboard layout on VPS Cloud. Reboot your VPS after change
   * @nullable
   */
  keymap?: VpsVPSWithIAMOVHKeymap;
  readonly memoryLimit?: number;
  readonly model?: VpsModelOVH;
  /** Ip blocks for OVH monitoring servers */
  readonly monitoringIpBlocks?: readonly IpBlockOVH[];
  readonly name?: string;
  /** All values a VPS netboot mode can be in */
  netbootMode?: VpsVpsNetbootEnumOVH;
  readonly offerType?: VpsVpsOfferEnumOVH;
  /** @nullable */
  slaMonitoring?: boolean | null;
  readonly state?: VpsVpsStateEnumOVH;
  readonly vcore?: number;
  readonly zone?: string;
}

/**
 * Set KVM keyboard layout on VPS Cloud. Reboot your VPS after change
 * @nullable
 */
export type VpsVPSOVHKeymap = VpsVpsKeymapEnumOVH | null;

/**
 * VPS Virtual Machine
 */
export interface VpsVPSOVH {
  readonly cluster?: string;
  /**
   * Set the name displayed in ManagerV6 for your VPS (max 50 chars)
   * @nullable
   */
  displayName?: string | null;
  /**
   * Set KVM keyboard layout on VPS Cloud. Reboot your VPS after change
   * @nullable
   */
  keymap?: VpsVPSOVHKeymap;
  readonly memoryLimit?: number;
  readonly model?: VpsModelOVH;
  /** Ip blocks for OVH monitoring servers */
  readonly monitoringIpBlocks?: readonly IpBlockOVH[];
  readonly name?: string;
  /** All values a VPS netboot mode can be in */
  netbootMode?: VpsVpsNetbootEnumOVH;
  readonly offerType?: VpsVpsOfferEnumOVH;
  /** @nullable */
  slaMonitoring?: boolean | null;
  readonly state?: VpsVpsStateEnumOVH;
  readonly vcore?: number;
  readonly zone?: string;
}

/**
 * Bitness of a VPS template
 */
export type VpsTemplateBitFormatEnumOVH = typeof VpsTemplateBitFormatEnumOVH[keyof typeof VpsTemplateBitFormatEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsTemplateBitFormatEnumOVH = {
  NUMBER_32: 32,
  NUMBER_64: 64,
} as const;

/**
 * Installation template for a VPS Virtual Machine
 */
export interface VpsTemplateOVH {
  readonly availableLanguage?: readonly string[];
  readonly bitFormat?: VpsTemplateBitFormatEnumOVH;
  readonly distribution?: string;
  readonly id?: number;
  readonly locale?: string;
  readonly name?: string;
}

/**
 * All type a VPS task can be
 */
export type VpsTaskTypeEnumOVH = typeof VpsTaskTypeEnumOVH[keyof typeof VpsTaskTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsTaskTypeEnumOVH = {
  addVeeamBackupJob: 'addVeeamBackupJob',
  changeRootPassword: 'changeRootPassword',
  createSnapshot: 'createSnapshot',
  deleteSnapshot: 'deleteSnapshot',
  deliverVm: 'deliverVm',
  getConsoleUrl: 'getConsoleUrl',
  internalTask: 'internalTask',
  migrate: 'migrate',
  openConsoleAccess: 'openConsoleAccess',
  provisioningAdditionalIp: 'provisioningAdditionalIp',
  reOpenVm: 'reOpenVm',
  rebootVm: 'rebootVm',
  reinstallVm: 'reinstallVm',
  removeVeeamBackup: 'removeVeeamBackup',
  rescheduleAutoBackup: 'rescheduleAutoBackup',
  restoreFullVeeamBackup: 'restoreFullVeeamBackup',
  restoreVeeamBackup: 'restoreVeeamBackup',
  restoreVm: 'restoreVm',
  revertSnapshot: 'revertSnapshot',
  setMonitoring: 'setMonitoring',
  setNetboot: 'setNetboot',
  startVm: 'startVm',
  stopVm: 'stopVm',
  upgradeVm: 'upgradeVm',
} as const;

/**
 * All states a VPS task can be in
 */
export type VpsTaskStateEnumOVH = typeof VpsTaskStateEnumOVH[keyof typeof VpsTaskStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsTaskStateEnumOVH = {
  blocked: 'blocked',
  cancelled: 'cancelled',
  doing: 'doing',
  done: 'done',
  error: 'error',
  paused: 'paused',
  todo: 'todo',
  waitingAck: 'waitingAck',
} as const;

/**
 * Operation on a VPS Virtual Machine
 */
export interface VpsTaskOVH {
  readonly date?: string;
  readonly id?: number;
  readonly progress?: number;
  readonly state?: VpsTaskStateEnumOVH;
  readonly type?: VpsTaskTypeEnumOVH;
}

/**
 * Available Type for a vps Software
 */
export type VpsSoftwareTypeEnumOVH = typeof VpsSoftwareTypeEnumOVH[keyof typeof VpsSoftwareTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsSoftwareTypeEnumOVH = {
  database: 'database',
  environment: 'environment',
  webserver: 'webserver',
} as const;

/**
 * Available Status for a vps Software
 */
export type VpsSoftwareStatusEnumOVH = typeof VpsSoftwareStatusEnumOVH[keyof typeof VpsSoftwareStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsSoftwareStatusEnumOVH = {
  deprecated: 'deprecated',
  stable: 'stable',
  testing: 'testing',
} as const;

/**
 * Available softwares on a Template
 */
export interface VpsSoftwareOVH {
  readonly id?: number;
  readonly name?: string;
  readonly status?: VpsSoftwareStatusEnumOVH;
  readonly type?: VpsSoftwareTypeEnumOVH;
}

/**
 * Information about the snapshot of a VPS Virtual Machine
 */
export interface VpsSnapshotOVH {
  readonly creationDate?: string;
  description?: string;
  readonly id?: string;
  /** @nullable */
  readonly region?: string | null;
}

/**
 * Available restore types
 */
export type VpsRestoreTypeEnumOVH = typeof VpsRestoreTypeEnumOVH[keyof typeof VpsRestoreTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsRestoreTypeEnumOVH = {
  file: 'file',
  full: 'full',
} as const;

/**
 * Available restore state
 */
export type VpsRestoreStateEnumOVH = typeof VpsRestoreStateEnumOVH[keyof typeof VpsRestoreStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsRestoreStateEnumOVH = {
  available: 'available',
  restored: 'restored',
  restoring: 'restoring',
} as const;

/**
 * Information about the options of a VPS Virtual Machine
 */
export interface VpsOptionOVH {
  /** The option name */
  readonly option?: VpsVpsOptionEnumOVH;
  /** The state of the option */
  readonly state?: VpsVpsOptionStateEnumOVH;
}

/**
 * A structure describing characteristics of a VPS model
 */
export interface VpsModelOVH {
  availableOptions?: VpsVpsOptionEnumOVH[];
  datacenter?: string[];
  disk?: number;
  maximumAdditionnalIp?: number;
  memory?: number;
  name?: string;
  offer?: string;
  vcore?: number;
  /** All versions that VPS can have */
  version?: VpsVpsVersionEnumOVH;
}

/**
 * Get metrics token to query prometheus cluster
 */
export interface VpsMetricsTokenOVH {
  /** Cluster URL */
  readonly endpoint?: string;
  /** Generated token */
  readonly token?: string;
}

/**
 * @nullable
 */
export type VpsIpOVHGateway = IpOVH | null;

/**
 * Information about an IP address for a VPS Virtual Machine
 */
export interface VpsIpOVH {
  /** @nullable */
  readonly gateway?: VpsIpOVHGateway;
  readonly geolocation?: VpsIpGeolocationEnumOVH;
  /** The effective ip address of the Ip object */
  readonly ipAddress?: IpOVH;
  /** @nullable */
  readonly macAddress?: string | null;
  /** @nullable */
  reverse?: string | null;
  readonly type?: VpsIpTypeEnumOVH;
  readonly version?: CoreTypesIpVersionEnumOVH;
}

/**
 * Installation image for a VPS
 */
export interface VpsImageOVH {
  readonly id?: string;
  readonly name?: string;
}

/**
 * URL to download the VPS snapshot
 */
export interface VpsDownloadSnapshotURLOVH {
  /** Snapshot size (bytes) */
  readonly size?: number;
  /** URL to download the snapshot */
  readonly url?: string;
}

/**
 * Information about a disk of a VPS Virtual Machine
 */
export interface VpsDiskOVH {
  readonly bandwidthLimit?: number;
  readonly id?: number;
  /**
   * The low disk free space threshold in MiB
   * @nullable
   */
  lowFreeSpaceThreshold?: number | null;
  /**
   * The monitoring state of this disk
   * @nullable
   */
  monitoring?: boolean | null;
  /**
   * Service name
   * @nullable
   */
  readonly serviceName?: string | null;
  readonly size?: number;
  readonly state?: VpsDiskStateEnumOVH;
  readonly type?: VpsDiskTypeEnumOVH;
}

/**
 * Information about a datacenter of a VPS Virtual Machine
 */
export interface VpsDatacenterOVH {
  /** Datacenter ISO country code */
  readonly country?: CoreTypesCountryEnumOVH;
  /** Datacenter display name */
  readonly longName?: string;
  /** Datacenter name */
  readonly name?: string;
}

/**
 * Available AutomatedBackup states
 */
export type VpsBackupStateEnumOVH = typeof VpsBackupStateEnumOVH[keyof typeof VpsBackupStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VpsBackupStateEnumOVH = {
  disabled: 'disabled',
  enabled: 'enabled',
} as const;

/**
 * The disk space currently used on your backup FTP
 * @nullable
 */
export type VpsBackupFtpOVHUsage = ComplexTypeUnitAndValueLongOVH | null;

/**
 * The disk space available on your backup FTP
 * @nullable
 */
export type VpsBackupFtpOVHQuota = ComplexTypeUnitAndValueLongOVH | null;

/**
 * Backup Ftp assigned to this VPS
 */
export interface VpsBackupFtpOVH {
  /** The backup FTP server name */
  readonly ftpBackupName?: string;
  /**
   * The disk space available on your backup FTP
   * @nullable
   */
  readonly quota?: VpsBackupFtpOVHQuota;
  /**
   * If not-null, gives the date since when your account was set in read-only mode because the quota was exceeded
   * @nullable
   */
  readonly readOnlyDate?: string | null;
  /** The backup FTP type */
  readonly type?: string;
  /**
   * The disk space currently used on your backup FTP
   * @nullable
   */
  readonly usage?: VpsBackupFtpOVHUsage;
}

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Scheduled time of your daily backup
 * @nullable
 */
export type VpsAutomatedBackupOVHSchedule = TimeOVH | null;

/**
 * Backup your VPS
 */
export interface VpsAutomatedBackupOVH {
  /**
   * Scheduled time of your daily backup
   * @nullable
   */
  readonly schedule?: VpsAutomatedBackupOVHSchedule;
  /** Backup state */
  readonly state?: VpsBackupStateEnumOVH;
}

/**
 * Service confirm termination payload
 */
export interface ServicesConfirmTerminationOVH {
  /** Commentary about your termination request */
  commentary?: string;
  /** All future uses you can provide for a service termination */
  futureUse?: ServiceTerminationFutureUseEnumOVH;
  /** All reasons you can provide for a service termination */
  reason?: ServiceTerminationReasonEnumOVH;
  /** The termination token sent by email to the admin contact */
  token: string;
}

/**
 * Service change contact payload
 */
export interface ServicesChangeContactOVH {
  /** The contact to set as admin contact */
  contactAdmin?: string;
  /** The contact to set as billing contact */
  contactBilling?: string;
  /** The contact to set as tech contact */
  contactTech?: string;
}

/**
 * Way of handling the renew
 * @nullable
 */
export type ServicesServiceOVHRenew = ServiceRenewTypeOVH | null;

/**
 * Details about a Service
 */
export interface ServicesServiceOVH {
  /** Indicates that the service can be set up to be deleted at expiration */
  readonly canDeleteAtExpiration?: boolean;
  readonly contactAdmin?: string;
  readonly contactBilling?: string;
  readonly contactTech?: string;
  readonly creation?: string;
  readonly domain?: string;
  /** @nullable */
  readonly engagedUpTo?: string | null;
  readonly expiration?: string;
  /**
   * All the possible renew period of your service in month
   * @nullable
   */
  readonly possibleRenewPeriod?: readonly number[] | null;
  /**
   * Way of handling the renew
   * @nullable
   */
  renew?: ServicesServiceOVHRenew;
  readonly renewalType?: ServiceRenewalTypeEnumOVH;
  readonly serviceId?: number;
  readonly status?: ServiceStateEnumOVH;
}

/**
 * All reasons you can provide for a service termination
 */
export type ServiceTerminationReasonEnumOVH = typeof ServiceTerminationReasonEnumOVH[keyof typeof ServiceTerminationReasonEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationReasonEnumOVH = {
  FEATURES_DONT_SUIT_ME: 'FEATURES_DONT_SUIT_ME',
  LACK_OF_PERFORMANCES: 'LACK_OF_PERFORMANCES',
  MIGRATED_TO_ANOTHER_OVH_PRODUCT: 'MIGRATED_TO_ANOTHER_OVH_PRODUCT',
  MIGRATED_TO_COMPETITOR: 'MIGRATED_TO_COMPETITOR',
  NOT_ENOUGH_RECOGNITION: 'NOT_ENOUGH_RECOGNITION',
  NOT_NEEDED_ANYMORE: 'NOT_NEEDED_ANYMORE',
  NOT_RELIABLE: 'NOT_RELIABLE',
  NO_ANSWER: 'NO_ANSWER',
  OTHER: 'OTHER',
  PRODUCT_DIMENSION_DONT_SUIT_ME: 'PRODUCT_DIMENSION_DONT_SUIT_ME',
  PRODUCT_TOOLS_DONT_SUIT_ME: 'PRODUCT_TOOLS_DONT_SUIT_ME',
  TOO_EXPENSIVE: 'TOO_EXPENSIVE',
  TOO_HARD_TO_USE: 'TOO_HARD_TO_USE',
  UNSATIFIED_BY_CUSTOMER_SUPPORT: 'UNSATIFIED_BY_CUSTOMER_SUPPORT',
} as const;

/**
 * All future uses you can provide for a service termination
 */
export type ServiceTerminationFutureUseEnumOVH = typeof ServiceTerminationFutureUseEnumOVH[keyof typeof ServiceTerminationFutureUseEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceTerminationFutureUseEnumOVH = {
  NOT_REPLACING_SERVICE: 'NOT_REPLACING_SERVICE',
  OTHER: 'OTHER',
  SUBSCRIBE_AN_OTHER_SERVICE: 'SUBSCRIBE_AN_OTHER_SERVICE',
  SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR',
  SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR: 'SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR',
} as const;

/**
 * service.StateEnum
 */
export type ServiceStateEnumOVH = typeof ServiceStateEnumOVH[keyof typeof ServiceStateEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceStateEnumOVH = {
  autorenewInProgress: 'autorenewInProgress',
  expired: 'expired',
  inCreation: 'inCreation',
  ok: 'ok',
  pendingDebt: 'pendingDebt',
  unPaid: 'unPaid',
} as const;

/**
 * Detailed renewal type of a service
 */
export type ServiceRenewalTypeEnumOVH = typeof ServiceRenewalTypeEnumOVH[keyof typeof ServiceRenewalTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceRenewalTypeEnumOVH = {
  automaticForcedProduct: 'automaticForcedProduct',
  automaticV2012: 'automaticV2012',
  automaticV2014: 'automaticV2014',
  automaticV2016: 'automaticV2016',
  manual: 'manual',
  oneShot: 'oneShot',
  option: 'option',
} as const;

/**
 * Map a possible renew for a specific service
 */
export interface ServiceRenewTypeOVH {
  /** The service is automatically renewed */
  automatic?: boolean;
  /** The service will be deleted at expiration */
  deleteAtExpiration?: boolean;
  /** The service forced to be renewed */
  forced?: boolean;
  /**
   * The service needs to be manually renewed and paid
   * @nullable
   */
  manualPayment?: boolean | null;
  /**
   * period of renew in month
   * @nullable
   */
  period?: number | null;
}

/**
 * @nullable
 */
export type SecondaryDnsSecondaryDNSNameServerOVHIpv6 = Ipv6OVH | null;

/**
 * A structure describing informations about available nameserver for secondary dns 
 */
export interface SecondaryDnsSecondaryDNSNameServerOVH {
  /** the name server */
  readonly hostname?: string;
  /** IPv4 address (e.g., 192.0.2.0) */
  readonly ip?: Ipv4OVH;
  /** @nullable */
  readonly ipv6?: SecondaryDnsSecondaryDNSNameServerOVHIpv6;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * OVH subsidiaries
 */
export type NichandleOvhSubsidiaryEnumOVH = typeof NichandleOvhSubsidiaryEnumOVH[keyof typeof NichandleOvhSubsidiaryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleOvhSubsidiaryEnumOVH = {
  CZ: 'CZ',
  DE: 'DE',
  ES: 'ES',
  EU: 'EU',
  FI: 'FI',
  FR: 'FR',
  GB: 'GB',
  IE: 'IE',
  IT: 'IT',
  LT: 'LT',
  MA: 'MA',
  NL: 'NL',
  PL: 'PL',
  PT: 'PT',
  SN: 'SN',
  TN: 'TN',
  ASIA: 'ASIA',
  AU: 'AU',
  CA: 'CA',
  QC: 'QC',
  SG: 'SG',
  US: 'US',
  WE: 'WE',
  WS: 'WS',
  IN: 'IN',
} as const;

/**
 * Countries a nichandle can choose
 */
export type NichandleCountryEnumOVH = typeof NichandleCountryEnumOVH[keyof typeof NichandleCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NichandleCountryEnumOVH = {
  AC: 'AC',
  AD: 'AD',
  AE: 'AE',
  AF: 'AF',
  AG: 'AG',
  AI: 'AI',
  AL: 'AL',
  AM: 'AM',
  AO: 'AO',
  AQ: 'AQ',
  AR: 'AR',
  AS: 'AS',
  AT: 'AT',
  AU: 'AU',
  AW: 'AW',
  AX: 'AX',
  AZ: 'AZ',
  BA: 'BA',
  BB: 'BB',
  BD: 'BD',
  BE: 'BE',
  BF: 'BF',
  BG: 'BG',
  BH: 'BH',
  BI: 'BI',
  BJ: 'BJ',
  BL: 'BL',
  BM: 'BM',
  BN: 'BN',
  BO: 'BO',
  BQ: 'BQ',
  BR: 'BR',
  BS: 'BS',
  BT: 'BT',
  BW: 'BW',
  BY: 'BY',
  BZ: 'BZ',
  CA: 'CA',
  CC: 'CC',
  CD: 'CD',
  CF: 'CF',
  CG: 'CG',
  CH: 'CH',
  CI: 'CI',
  CK: 'CK',
  CL: 'CL',
  CM: 'CM',
  CN: 'CN',
  CO: 'CO',
  CR: 'CR',
  CU: 'CU',
  CV: 'CV',
  CW: 'CW',
  CX: 'CX',
  CY: 'CY',
  CZ: 'CZ',
  DE: 'DE',
  DG: 'DG',
  DJ: 'DJ',
  DK: 'DK',
  DM: 'DM',
  DO: 'DO',
  DZ: 'DZ',
  EA: 'EA',
  EC: 'EC',
  EE: 'EE',
  EG: 'EG',
  EH: 'EH',
  ER: 'ER',
  ES: 'ES',
  ET: 'ET',
  FI: 'FI',
  FJ: 'FJ',
  FK: 'FK',
  FM: 'FM',
  FO: 'FO',
  FR: 'FR',
  GA: 'GA',
  GB: 'GB',
  GD: 'GD',
  GE: 'GE',
  GF: 'GF',
  GG: 'GG',
  GH: 'GH',
  GI: 'GI',
  GL: 'GL',
  GM: 'GM',
  GN: 'GN',
  GP: 'GP',
  GQ: 'GQ',
  GR: 'GR',
  GS: 'GS',
  GT: 'GT',
  GU: 'GU',
  GW: 'GW',
  GY: 'GY',
  HK: 'HK',
  HN: 'HN',
  HR: 'HR',
  HT: 'HT',
  HU: 'HU',
  IC: 'IC',
  ID: 'ID',
  IE: 'IE',
  IL: 'IL',
  IM: 'IM',
  IN: 'IN',
  IO: 'IO',
  IQ: 'IQ',
  IR: 'IR',
  IS: 'IS',
  IT: 'IT',
  JE: 'JE',
  JM: 'JM',
  JO: 'JO',
  JP: 'JP',
  KE: 'KE',
  KG: 'KG',
  KH: 'KH',
  KI: 'KI',
  KM: 'KM',
  KN: 'KN',
  KP: 'KP',
  KR: 'KR',
  KW: 'KW',
  KY: 'KY',
  KZ: 'KZ',
  LA: 'LA',
  LB: 'LB',
  LC: 'LC',
  LI: 'LI',
  LK: 'LK',
  LR: 'LR',
  LS: 'LS',
  LT: 'LT',
  LU: 'LU',
  LV: 'LV',
  LY: 'LY',
  MA: 'MA',
  MC: 'MC',
  MD: 'MD',
  ME: 'ME',
  MF: 'MF',
  MG: 'MG',
  MH: 'MH',
  MK: 'MK',
  ML: 'ML',
  MM: 'MM',
  MN: 'MN',
  MO: 'MO',
  MP: 'MP',
  MQ: 'MQ',
  MR: 'MR',
  MS: 'MS',
  MT: 'MT',
  MU: 'MU',
  MV: 'MV',
  MW: 'MW',
  MX: 'MX',
  MY: 'MY',
  MZ: 'MZ',
  NA: 'NA',
  NC: 'NC',
  NE: 'NE',
  NF: 'NF',
  NG: 'NG',
  NI: 'NI',
  NL: 'NL',
  NO: 'NO',
  NP: 'NP',
  NR: 'NR',
  NU: 'NU',
  NZ: 'NZ',
  OM: 'OM',
  PA: 'PA',
  PE: 'PE',
  PF: 'PF',
  PG: 'PG',
  PH: 'PH',
  PK: 'PK',
  PL: 'PL',
  PM: 'PM',
  PN: 'PN',
  PR: 'PR',
  PS: 'PS',
  PT: 'PT',
  PW: 'PW',
  PY: 'PY',
  QA: 'QA',
  RE: 'RE',
  RO: 'RO',
  RS: 'RS',
  RU: 'RU',
  RW: 'RW',
  SA: 'SA',
  SB: 'SB',
  SC: 'SC',
  SD: 'SD',
  SE: 'SE',
  SG: 'SG',
  SH: 'SH',
  SI: 'SI',
  SJ: 'SJ',
  SK: 'SK',
  SL: 'SL',
  SM: 'SM',
  SN: 'SN',
  SO: 'SO',
  SR: 'SR',
  SS: 'SS',
  ST: 'ST',
  SV: 'SV',
  SX: 'SX',
  SY: 'SY',
  SZ: 'SZ',
  TA: 'TA',
  TC: 'TC',
  TD: 'TD',
  TF: 'TF',
  TG: 'TG',
  TH: 'TH',
  TJ: 'TJ',
  TK: 'TK',
  TL: 'TL',
  TM: 'TM',
  TN: 'TN',
  TO: 'TO',
  TR: 'TR',
  TT: 'TT',
  TV: 'TV',
  TW: 'TW',
  TZ: 'TZ',
  UA: 'UA',
  UG: 'UG',
  UM: 'UM',
  UNKNOWN: 'UNKNOWN',
  US: 'US',
  UY: 'UY',
  UZ: 'UZ',
  VA: 'VA',
  VC: 'VC',
  VE: 'VE',
  VG: 'VG',
  VI: 'VI',
  VN: 'VN',
  VU: 'VU',
  WF: 'WF',
  WS: 'WS',
  XK: 'XK',
  YE: 'YE',
  YT: 'YT',
  ZA: 'ZA',
  ZM: 'ZM',
  ZW: 'ZW',
} as const;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * Secondary dns infos
 */
export interface SecondaryDnsSecondaryDNSOVH {
  readonly creationDate?: string;
  /** secondary dns server */
  readonly dns?: string;
  /** domain on slave server */
  readonly domain?: string;
  /** IPv4 address (e.g., 192.0.2.0) */
  ipMaster?: Ipv4OVH;
}

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Operator that can be used in order to filter resources tags
 */
export type IamResourceTagFilterOperatorEnumOVH = typeof IamResourceTagFilterOperatorEnumOVH[keyof typeof IamResourceTagFilterOperatorEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IamResourceTagFilterOperatorEnumOVH = {
  EQ: 'EQ',
  EXISTS: 'EXISTS',
  ILIKE: 'ILIKE',
  LIKE: 'LIKE',
  NEQ: 'NEQ',
  NEXISTS: 'NEXISTS',
} as const;

/**
 * Operator to use in order to filter on the value (defaults to 'EQ')
 * @nullable
 */
export type IamResourceTagFilterOVHOperator = IamResourceTagFilterOperatorEnumOVH | null;

/**
 * Resource tag filter
 */
export interface IamResourceTagFilterOVH {
  /**
   * Operator to use in order to filter on the value (defaults to 'EQ')
   * @nullable
   */
  readonly operator?: IamResourceTagFilterOVHOperator;
  /** Value to use in order to filter tags */
  readonly value?: string;
}

/**
 * Resource tags. Tags that were internally computed are prefixed with ovh:
 * @nullable
 */
export type IamResourceMetadataOVHTags = {[key: string]: string} | null;

/**
 * IAM resource metadata embedded in services models
 */
export interface IamResourceMetadataOVH {
  /**
   * Resource display name
   * @nullable
   */
  readonly displayName?: string | null;
  /** Unique identifier of the resource */
  readonly id?: string;
  /**
   * Resource tags. Tags that were internally computed are prefixed with ovh:
   * @nullable
   */
  readonly tags?: IamResourceMetadataOVHTags;
  /** Unique resource name used in policies */
  readonly urn?: string;
}

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;

/**
 * Server tasks
 */
export interface DedicatedServerTaskOVH {
  /**
   * Details of this task
   * @nullable
   */
  readonly comment?: string | null;
  /**
   * Completion date
   * @nullable
   */
  readonly doneDate?: string | null;
  /** Function name */
  readonly function?: DedicatedTaskFunctionEnumOVH;
  /**
   * last update
   * @nullable
   */
  readonly lastUpdate?: string | null;
  /** Whether this task need to be scheduled or not */
  readonly needSchedule?: boolean;
  /**
   * Extra information about this task
   * @nullable
   */
  readonly note?: string | null;
  /**
   * ID of the planned intervention for this task
   * @nullable
   */
  readonly plannedInterventionId?: number | null;
  /** Task Creation date */
  readonly startDate?: string;
  /** Task status */
  readonly status?: DedicatedTaskStatusEnumOVH;
  /**
   * Task result tags output
   * @nullable
   */
  readonly tags?: readonly ComplexTypeSafeKeyValueCanBeNullStringOVH[] | null;
  /** the id of the task */
  readonly taskId?: number;
  /**
   * Reference of the thread on the support tool
   * @nullable
   */
  readonly ticketReference?: string | null;
}

/**
 * Backup Ftp ACL for this server and Backup Ftp
 */
export interface DedicatedServerBackupFtpAclOVH {
  /** Whether to allow the CIFS (SMB) protocol for this ACL */
  cifs?: boolean;
  /** Whether to allow the FTP protocol for this ACL */
  ftp?: boolean;
  /** The IP Block specific to this ACL */
  readonly ipBlock?: IpBlockOVH;
  /** Whether the rule has been applied on the Backup Ftp */
  readonly isApplied?: boolean;
  /** Date of the last object modification */
  readonly lastUpdate?: string;
  /** Whether to allow the NFS protocol for this ACL */
  nfs?: boolean;
}

/**
 * different task status
 */
export type DedicatedTaskStatusEnumOVH = typeof DedicatedTaskStatusEnumOVH[keyof typeof DedicatedTaskStatusEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedicatedTaskStatusEnumOVH = {
  cancelled: 'cancelled',
  customerError: 'customerError',
  doing: 'doing',
  done: 'done',
  init: 'init',
  ovhError: 'ovhError',
  todo: 'todo',
} as const;

/**
 * different task operation
 */
export type DedicatedTaskFunctionEnumOVH = typeof DedicatedTaskFunctionEnumOVH[keyof typeof DedicatedTaskFunctionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedicatedTaskFunctionEnumOVH = {
  INFRA_002_VirtualNetworkInterface: 'INFRA_002_VirtualNetworkInterface',
  INFRA_002_VirtualNetworkInterface_group: 'INFRA_002_VirtualNetworkInterface_group',
  INFRA_002_VirtualNetworkInterface_ungroup: 'INFRA_002_VirtualNetworkInterface_ungroup',
  INFRA_ONE_NETWORK_ONEAPI_VirtualNetworkInterface_group: 'INFRA_ONE_NETWORK_ONEAPI_VirtualNetworkInterface_group',
  INFRA_ONE_NETWORK_ONEAPI_VirtualNetworkInterface_ungroup: 'INFRA_ONE_NETWORK_ONEAPI_VirtualNetworkInterface_ungroup',
  INFRA_ONE_NETWORK_VirtualNetworkInterface_group: 'INFRA_ONE_NETWORK_VirtualNetworkInterface_group',
  INFRA_ONE_NETWORK_VirtualNetworkInterface_ungroup: 'INFRA_ONE_NETWORK_VirtualNetworkInterface_ungroup',
  addVirtualMac: 'addVirtualMac',
  addWindowSplaFromExistingSerial: 'addWindowSplaFromExistingSerial',
  applyBackupFtpAcls: 'applyBackupFtpAcls',
  applyBackupFtpQuota: 'applyBackupFtpQuota',
  bypassAntiDDosGame: 'bypassAntiDDosGame',
  changePasswordBackupFTP: 'changePasswordBackupFTP',
  changeRipeOrg: 'changeRipeOrg',
  checkAndReleaseIp: 'checkAndReleaseIp',
  createBackupFTP: 'createBackupFTP',
  createOrUpdateRipeOrg: 'createOrUpdateRipeOrg',
  createPrivateNetwork: 'createPrivateNetwork',
  disableFirewall: 'disableFirewall',
  enableFirewall: 'enableFirewall',
  genericMoveFloatingIp: 'genericMoveFloatingIp',
  hardReboot: 'hardReboot',
  hardware_update: 'hardware_update',
  'ipmi/configureSGX': 'ipmi/configureSGX',
  migrateBackupFTP: 'migrateBackupFTP',
  moveFloatingIp: 'moveFloatingIp',
  moveVirtualMac: 'moveVirtualMac',
  reagregateBlock: 'reagregateBlock',
  rebootPower8To: 'rebootPower8To',
  reinstallServer: 'reinstallServer',
  releaseIp: 'releaseIp',
  removeBackupFTP: 'removeBackupFTP',
  removeVirtualMac: 'removeVirtualMac',
  requestAccessIPMI: 'requestAccessIPMI',
  resetIPMI: 'resetIPMI',
  resetIPMISession: 'resetIPMISession',
  testIPMIhttp: 'testIPMIhttp',
  testIPMIpassword: 'testIPMIpassword',
  testIPMIping: 'testIPMIping',
  virtualMacAdd: 'virtualMacAdd',
  virtualMacDelete: 'virtualMacDelete',
} as const;

/**
 * Ip versions
 */
export type CoreTypesIpVersionEnumOVH = typeof CoreTypesIpVersionEnumOVH[keyof typeof CoreTypesIpVersionEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesIpVersionEnumOVH = {
  v4: 'v4',
  v6: 'v6',
} as const;

/**
 * ISO country codes
 */
export type CoreTypesCountryEnumOVH = typeof CoreTypesCountryEnumOVH[keyof typeof CoreTypesCountryEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoreTypesCountryEnumOVH = {
  ac: 'ac',
  ad: 'ad',
  ae: 'ae',
  af: 'af',
  ag: 'ag',
  ai: 'ai',
  al: 'al',
  am: 'am',
  an: 'an',
  ao: 'ao',
  aq: 'aq',
  ar: 'ar',
  as: 'as',
  at: 'at',
  au: 'au',
  aw: 'aw',
  ax: 'ax',
  az: 'az',
  ba: 'ba',
  bb: 'bb',
  bd: 'bd',
  be: 'be',
  bf: 'bf',
  bg: 'bg',
  bh: 'bh',
  bi: 'bi',
  bj: 'bj',
  bl: 'bl',
  bm: 'bm',
  bn: 'bn',
  bo: 'bo',
  bq: 'bq',
  br: 'br',
  bs: 'bs',
  bt: 'bt',
  bv: 'bv',
  bw: 'bw',
  by: 'by',
  bz: 'bz',
  ca: 'ca',
  cc: 'cc',
  cd: 'cd',
  cf: 'cf',
  cg: 'cg',
  ch: 'ch',
  ci: 'ci',
  ck: 'ck',
  cl: 'cl',
  cm: 'cm',
  cn: 'cn',
  co: 'co',
  cr: 'cr',
  cs: 'cs',
  cu: 'cu',
  cv: 'cv',
  cw: 'cw',
  cx: 'cx',
  cy: 'cy',
  cz: 'cz',
  de: 'de',
  dj: 'dj',
  dk: 'dk',
  dm: 'dm',
  do: 'do',
  dz: 'dz',
  ec: 'ec',
  ee: 'ee',
  eg: 'eg',
  eh: 'eh',
  er: 'er',
  es: 'es',
  et: 'et',
  fc: 'fc',
  fd: 'fd',
  fi: 'fi',
  fj: 'fj',
  fk: 'fk',
  fm: 'fm',
  fo: 'fo',
  fr: 'fr',
  fx: 'fx',
  ga: 'ga',
  gb: 'gb',
  gd: 'gd',
  ge: 'ge',
  gf: 'gf',
  gg: 'gg',
  gh: 'gh',
  gi: 'gi',
  gl: 'gl',
  gm: 'gm',
  gn: 'gn',
  gp: 'gp',
  gq: 'gq',
  gr: 'gr',
  gs: 'gs',
  gt: 'gt',
  gu: 'gu',
  gw: 'gw',
  gy: 'gy',
  hk: 'hk',
  hm: 'hm',
  hn: 'hn',
  hr: 'hr',
  ht: 'ht',
  hu: 'hu',
  id: 'id',
  ie: 'ie',
  il: 'il',
  im: 'im',
  in: 'in',
  io: 'io',
  iq: 'iq',
  ir: 'ir',
  is: 'is',
  it: 'it',
  je: 'je',
  jm: 'jm',
  jo: 'jo',
  jp: 'jp',
  ke: 'ke',
  kg: 'kg',
  kh: 'kh',
  ki: 'ki',
  km: 'km',
  kn: 'kn',
  kp: 'kp',
  kr: 'kr',
  kw: 'kw',
  ky: 'ky',
  kz: 'kz',
  la: 'la',
  lb: 'lb',
  lc: 'lc',
  li: 'li',
  lk: 'lk',
  lr: 'lr',
  ls: 'ls',
  lt: 'lt',
  lu: 'lu',
  lv: 'lv',
  ly: 'ly',
  ma: 'ma',
  mc: 'mc',
  md: 'md',
  me: 'me',
  mf: 'mf',
  mg: 'mg',
  mh: 'mh',
  mk: 'mk',
  ml: 'ml',
  mm: 'mm',
  mn: 'mn',
  mo: 'mo',
  mp: 'mp',
  mq: 'mq',
  mr: 'mr',
  ms: 'ms',
  mt: 'mt',
  mu: 'mu',
  mv: 'mv',
  mw: 'mw',
  mx: 'mx',
  my: 'my',
  mz: 'mz',
  na: 'na',
  nc: 'nc',
  ne: 'ne',
  nf: 'nf',
  ng: 'ng',
  ni: 'ni',
  nl: 'nl',
  no: 'no',
  np: 'np',
  nr: 'nr',
  nu: 'nu',
  nz: 'nz',
  om: 'om',
  pa: 'pa',
  pe: 'pe',
  pf: 'pf',
  pg: 'pg',
  ph: 'ph',
  pk: 'pk',
  pl: 'pl',
  pm: 'pm',
  pn: 'pn',
  pr: 'pr',
  ps: 'ps',
  pt: 'pt',
  pw: 'pw',
  py: 'py',
  qa: 'qa',
  qc: 'qc',
  re: 're',
  ro: 'ro',
  rs: 'rs',
  ru: 'ru',
  rw: 'rw',
  sa: 'sa',
  sb: 'sb',
  sc: 'sc',
  sd: 'sd',
  se: 'se',
  sg: 'sg',
  sh: 'sh',
  si: 'si',
  sj: 'sj',
  sk: 'sk',
  sl: 'sl',
  sm: 'sm',
  sn: 'sn',
  so: 'so',
  sr: 'sr',
  ss: 'ss',
  st: 'st',
  sv: 'sv',
  sx: 'sx',
  sy: 'sy',
  sz: 'sz',
  tc: 'tc',
  td: 'td',
  tf: 'tf',
  tg: 'tg',
  th: 'th',
  tj: 'tj',
  tk: 'tk',
  tl: 'tl',
  tm: 'tm',
  tn: 'tn',
  to: 'to',
  tp: 'tp',
  tr: 'tr',
  tt: 'tt',
  tv: 'tv',
  tw: 'tw',
  tz: 'tz',
  ua: 'ua',
  ug: 'ug',
  uk: 'uk',
  um: 'um',
  us: 'us',
  uy: 'uy',
  uz: 'uz',
  va: 'va',
  vc: 'vc',
  ve: 've',
  vg: 'vg',
  vi: 'vi',
  vn: 'vn',
  vu: 'vu',
  we: 'we',
  wf: 'wf',
  ws: 'ws',
  ye: 'ye',
  yt: 'yt',
  yu: 'yu',
  za: 'za',
  zm: 'zm',
  zw: 'zw',
} as const;

/**
 * complexType.UnitAndValues_vps.VpsTimestampValue
 */
export interface ComplexTypeUnitAndValuesVpsVpsTimestampValueOVH {
  readonly unit?: string;
  readonly values?: readonly VpsVpsTimestampValueOVH[];
}

/**
 * complexType.UnitAndValue_long
 */
export interface ComplexTypeUnitAndValueLongOVH {
  readonly unit?: string;
  readonly value?: number;
}

/**
 * complexType.UnitAndValue_double
 */
export interface ComplexTypeUnitAndValueDoubleOVH {
  readonly unit?: string;
  readonly value?: number;
}

/**
 * complexType.SafeKeyValueCanBeNull_string
 */
export interface ComplexTypeSafeKeyValueCanBeNullStringOVH {
  /** @nullable */
  readonly key?: string | null;
  readonly value?: string;
}


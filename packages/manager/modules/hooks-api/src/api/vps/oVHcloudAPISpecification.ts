/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ComplexTypeUnitAndValueDoubleOVH,
  ComplexTypeUnitAndValuesVpsVpsTimestampValueOVH,
  DedicatedServerBackupFtpAclOVH,
  DedicatedServerTaskOVH,
  GetVpsDatacenterParams,
  GetVpsOrderRuleDatacenterParams,
  GetVpsOrderRuleOsChoicesParams,
  GetVpsParams,
  GetVpsServiceNameAutomatedBackupRestorePointsParams,
  GetVpsServiceNameDisksIdMonitoringParams,
  GetVpsServiceNameDisksIdUseParams,
  GetVpsServiceNameTasksParams,
  GetVpsServiceNameVeeamRestorePointsParams,
  IpBlockOVH,
  IpOVH,
  SecondaryDnsSecondaryDNSNameServerOVH,
  SecondaryDnsSecondaryDNSOVH,
  ServicesChangeContactOVH,
  ServicesConfirmTerminationOVH,
  ServicesServiceOVH,
  VpsAutomatedBackupAttachedOVH,
  VpsAutomatedBackupDetachBackupPostOVH,
  VpsAutomatedBackupOVH,
  VpsAutomatedBackupReschedulePostOVH,
  VpsAutomatedBackupRestorePostOVH,
  VpsBackupFtpOVH,
  VpsBackupftpAccessPostOVH,
  VpsCreateSnapshotPostOVH,
  VpsDatacenterOVH,
  VpsDiskOVH,
  VpsDownloadSnapshotURLOVH,
  VpsImageOVH,
  VpsIpGeolocationEnumOVH,
  VpsIpOVH,
  VpsIpServiceStatusOVH,
  VpsMetricsTokenOVH,
  VpsMigration2018PostOVH,
  VpsMigrationSteinOVH,
  VpsMigrationVPS2018to2020OVH,
  VpsModelOVH,
  VpsOpenConsoleAccessPostOVH,
  VpsOptionOVH,
  VpsOrderRuleDatacentersOVH,
  VpsOrderRuleOSChoicesOVH,
  VpsRebuildPostOVH,
  VpsReinstallPostOVH,
  VpsSecondaryDnsDomainsPostOVH,
  VpsSnapshotOVH,
  VpsSoftwareOVH,
  VpsTaskOVH,
  VpsTemplateOVH,
  VpsVPSOVH,
  VpsVPSWithIAMOVH,
  VpsVeeamOVH,
  VpsVeeamRestorePointOVH,
  VpsVeeamRestorePointsRestorePostOVH,
  VpsVeeamRestoredBackupOVH,
  VpsVncOVH,
  VpsVpsOptionEnumOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getVps = (
    params?: GetVpsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vps`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsQueryKey = (params?: GetVpsParams,) => {
    return [`/vps`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsQueryOptions = <TData = Awaited<ReturnType<typeof getVps>>, TError = unknown>(params?: GetVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVps>>> = ({ signal }) => getVps(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsQueryResult = NonNullable<Awaited<ReturnType<typeof getVps>>>
export type GetVpsQueryError = unknown


export function useGetVps<TData = Awaited<ReturnType<typeof getVps>>, TError = unknown>(
 params: undefined |  GetVpsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVps<TData = Awaited<ReturnType<typeof getVps>>, TError = unknown>(
 params?: GetVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVps<TData = Awaited<ReturnType<typeof getVps>>, TError = unknown>(
 params?: GetVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetVps<TData = Awaited<ReturnType<typeof getVps>>, TError = unknown>(
 params?: GetVpsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all the datacenters for a specific country
 */
export const getVpsDatacenter = (
    params?: GetVpsDatacenterParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vps/datacenter`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsDatacenterQueryKey = (params?: GetVpsDatacenterParams,) => {
    return [`/vps/datacenter`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getVpsDatacenter>>, TError = unknown>(params?: GetVpsDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsDatacenterQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsDatacenter>>> = ({ signal }) => getVpsDatacenter(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsDatacenter>>>
export type GetVpsDatacenterQueryError = unknown


export function useGetVpsDatacenter<TData = Awaited<ReturnType<typeof getVpsDatacenter>>, TError = unknown>(
 params: undefined |  GetVpsDatacenterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsDatacenter<TData = Awaited<ReturnType<typeof getVpsDatacenter>>, TError = unknown>(
 params?: GetVpsDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsDatacenter<TData = Awaited<ReturnType<typeof getVpsDatacenter>>, TError = unknown>(
 params?: GetVpsDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List all the datacenters for a specific country
 */

export function useGetVpsDatacenter<TData = Awaited<ReturnType<typeof getVpsDatacenter>>, TError = unknown>(
 params?: GetVpsDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsDatacenterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List vps zone impacted by migration stein
 */
export const getVpsMigrationStein = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsMigrationSteinOVH[]>(
      {url: `/vps/migrationStein`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsMigrationSteinQueryKey = () => {
    return [`/vps/migrationStein`] as const;
    }

    
export const getGetVpsMigrationSteinQueryOptions = <TData = Awaited<ReturnType<typeof getVpsMigrationStein>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsMigrationStein>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsMigrationSteinQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsMigrationStein>>> = ({ signal }) => getVpsMigrationStein(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsMigrationStein>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsMigrationSteinQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsMigrationStein>>>
export type GetVpsMigrationSteinQueryError = unknown


export function useGetVpsMigrationStein<TData = Awaited<ReturnType<typeof getVpsMigrationStein>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsMigrationStein>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsMigrationStein>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsMigrationStein<TData = Awaited<ReturnType<typeof getVpsMigrationStein>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsMigrationStein>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsMigrationStein>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsMigrationStein<TData = Awaited<ReturnType<typeof getVpsMigrationStein>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsMigrationStein>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List vps zone impacted by migration stein
 */

export function useGetVpsMigrationStein<TData = Awaited<ReturnType<typeof getVpsMigrationStein>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsMigrationStein>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsMigrationSteinQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List datacenters with priority and stock status
 */
export const getVpsOrderRuleDatacenter = (
    params: GetVpsOrderRuleDatacenterParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsOrderRuleDatacentersOVH>(
      {url: `/vps/order/rule/datacenter`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsOrderRuleDatacenterQueryKey = (params: GetVpsOrderRuleDatacenterParams,) => {
    return [`/vps/order/rule/datacenter`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsOrderRuleDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError = unknown>(params: GetVpsOrderRuleDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsOrderRuleDatacenterQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>> = ({ signal }) => getVpsOrderRuleDatacenter(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsOrderRuleDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>>
export type GetVpsOrderRuleDatacenterQueryError = unknown


export function useGetVpsOrderRuleDatacenter<TData = Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError = unknown>(
 params: GetVpsOrderRuleDatacenterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsOrderRuleDatacenter<TData = Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError = unknown>(
 params: GetVpsOrderRuleDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsOrderRuleDatacenter<TData = Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError = unknown>(
 params: GetVpsOrderRuleDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List datacenters with priority and stock status
 */

export function useGetVpsOrderRuleDatacenter<TData = Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError = unknown>(
 params: GetVpsOrderRuleDatacenterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsOrderRuleDatacenterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List OS choices with status
 */
export const getVpsOrderRuleOsChoices = (
    params: GetVpsOrderRuleOsChoicesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsOrderRuleOSChoicesOVH>(
      {url: `/vps/order/rule/osChoices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsOrderRuleOsChoicesQueryKey = (params: GetVpsOrderRuleOsChoicesParams,) => {
    return [`/vps/order/rule/osChoices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsOrderRuleOsChoicesQueryOptions = <TData = Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError = unknown>(params: GetVpsOrderRuleOsChoicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsOrderRuleOsChoicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>> = ({ signal }) => getVpsOrderRuleOsChoices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsOrderRuleOsChoicesQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>>
export type GetVpsOrderRuleOsChoicesQueryError = unknown


export function useGetVpsOrderRuleOsChoices<TData = Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError = unknown>(
 params: GetVpsOrderRuleOsChoicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsOrderRuleOsChoices<TData = Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError = unknown>(
 params: GetVpsOrderRuleOsChoicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsOrderRuleOsChoices<TData = Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError = unknown>(
 params: GetVpsOrderRuleOsChoicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List OS choices with status
 */

export function useGetVpsOrderRuleOsChoices<TData = Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError = unknown>(
 params: GetVpsOrderRuleOsChoicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsOrderRuleOsChoices>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsOrderRuleOsChoicesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsVPSWithIAMOVH>(
      {url: `/vps/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}`] as const;
    }

    
export const getGetVpsServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceName>>> = ({ signal }) => getVpsServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceName>>>
export type GetVpsServiceNameQueryError = unknown


export function useGetVpsServiceName<TData = Awaited<ReturnType<typeof getVpsServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceName<TData = Awaited<ReturnType<typeof getVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceName<TData = Awaited<ReturnType<typeof getVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceName<TData = Awaited<ReturnType<typeof getVpsServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVpsServiceName = (
    serviceName: string,
    vpsVPSOVH: NonReadonly<VpsVPSOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vpsVPSOVH
    },
      options);
    }
  


export const getPutVpsServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceName>>, TError,{serviceName: string;data: NonReadonly<VpsVPSOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceName>>, TError,{serviceName: string;data: NonReadonly<VpsVPSOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceName>>, {serviceName: string;data: NonReadonly<VpsVPSOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putVpsServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceName>>>
    export type PutVpsServiceNameMutationBody = NonReadonly<VpsVPSOVH>
    export type PutVpsServiceNameMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVpsServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceName>>, TError,{serviceName: string;data: NonReadonly<VpsVPSOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<VpsVPSOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Abort ongoing snapshot or autobackup
 */
export const postVpsServiceNameAbortSnapshot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/abortSnapshot`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameAbortSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAbortSnapshot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAbortSnapshot>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameAbortSnapshot>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameAbortSnapshot(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameAbortSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameAbortSnapshot>>>
    
    export type PostVpsServiceNameAbortSnapshotMutationError = unknown

    /**
 * @summary Abort ongoing snapshot or autobackup
 */
export const usePostVpsServiceNameAbortSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAbortSnapshot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameAbortSnapshot>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameAbortSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameAutomatedBackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsAutomatedBackupOVH>(
      {url: `/vps/${serviceName}/automatedBackup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameAutomatedBackupQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/automatedBackup`] as const;
    }

    
export const getGetVpsServiceNameAutomatedBackupQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameAutomatedBackupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>> = ({ signal }) => getVpsServiceNameAutomatedBackup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameAutomatedBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>>
export type GetVpsServiceNameAutomatedBackupQueryError = unknown


export function useGetVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameAutomatedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameAutomatedBackupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Backup attached to your VPS
 */
export const getVpsServiceNameAutomatedBackupAttachedBackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsAutomatedBackupAttachedOVH[]>(
      {url: `/vps/${serviceName}/automatedBackup/attachedBackup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameAutomatedBackupAttachedBackupQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/automatedBackup/attachedBackup`] as const;
    }

    
export const getGetVpsServiceNameAutomatedBackupAttachedBackupQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameAutomatedBackupAttachedBackupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>> = ({ signal }) => getVpsServiceNameAutomatedBackupAttachedBackup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameAutomatedBackupAttachedBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>>
export type GetVpsServiceNameAutomatedBackupAttachedBackupQueryError = unknown


export function useGetVpsServiceNameAutomatedBackupAttachedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAutomatedBackupAttachedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAutomatedBackupAttachedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Backup attached to your VPS
 */

export function useGetVpsServiceNameAutomatedBackupAttachedBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupAttachedBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameAutomatedBackupAttachedBackupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a VPS.Task that will umount a restored backup on your VPS
 */
export const postVpsServiceNameAutomatedBackupDetachBackup = (
    serviceName: string,
    vpsAutomatedBackupDetachBackupPostOVH: VpsAutomatedBackupDetachBackupPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/automatedBackup/detachBackup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsAutomatedBackupDetachBackupPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameAutomatedBackupDetachBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupDetachBackup>>, TError,{serviceName: string;data: VpsAutomatedBackupDetachBackupPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupDetachBackup>>, TError,{serviceName: string;data: VpsAutomatedBackupDetachBackupPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupDetachBackup>>, {serviceName: string;data: VpsAutomatedBackupDetachBackupPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameAutomatedBackupDetachBackup(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameAutomatedBackupDetachBackupMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupDetachBackup>>>
    export type PostVpsServiceNameAutomatedBackupDetachBackupMutationBody = VpsAutomatedBackupDetachBackupPostOVH
    export type PostVpsServiceNameAutomatedBackupDetachBackupMutationError = unknown

    /**
 * @summary Create a VPS.Task that will umount a restored backup on your VPS
 */
export const usePostVpsServiceNameAutomatedBackupDetachBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupDetachBackup>>, TError,{serviceName: string;data: VpsAutomatedBackupDetachBackupPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupDetachBackup>>,
        TError,
        {serviceName: string;data: VpsAutomatedBackupDetachBackupPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameAutomatedBackupDetachBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change the scheduled time of your daily backup
 */
export const postVpsServiceNameAutomatedBackupReschedule = (
    serviceName: string,
    vpsAutomatedBackupReschedulePostOVH: VpsAutomatedBackupReschedulePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/automatedBackup/reschedule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsAutomatedBackupReschedulePostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameAutomatedBackupRescheduleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupReschedule>>, TError,{serviceName: string;data: VpsAutomatedBackupReschedulePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupReschedule>>, TError,{serviceName: string;data: VpsAutomatedBackupReschedulePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupReschedule>>, {serviceName: string;data: VpsAutomatedBackupReschedulePostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameAutomatedBackupReschedule(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameAutomatedBackupRescheduleMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupReschedule>>>
    export type PostVpsServiceNameAutomatedBackupRescheduleMutationBody = VpsAutomatedBackupReschedulePostOVH
    export type PostVpsServiceNameAutomatedBackupRescheduleMutationError = unknown

    /**
 * @summary Change the scheduled time of your daily backup
 */
export const usePostVpsServiceNameAutomatedBackupReschedule = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupReschedule>>, TError,{serviceName: string;data: VpsAutomatedBackupReschedulePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupReschedule>>,
        TError,
        {serviceName: string;data: VpsAutomatedBackupReschedulePostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameAutomatedBackupRescheduleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Creates a VPS.Task that will restore the given restorePoint
 */
export const postVpsServiceNameAutomatedBackupRestore = (
    serviceName: string,
    vpsAutomatedBackupRestorePostOVH: VpsAutomatedBackupRestorePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/automatedBackup/restore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsAutomatedBackupRestorePostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameAutomatedBackupRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupRestore>>, TError,{serviceName: string;data: VpsAutomatedBackupRestorePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupRestore>>, TError,{serviceName: string;data: VpsAutomatedBackupRestorePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupRestore>>, {serviceName: string;data: VpsAutomatedBackupRestorePostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameAutomatedBackupRestore(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameAutomatedBackupRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupRestore>>>
    export type PostVpsServiceNameAutomatedBackupRestoreMutationBody = VpsAutomatedBackupRestorePostOVH
    export type PostVpsServiceNameAutomatedBackupRestoreMutationError = unknown

    /**
 * @summary Creates a VPS.Task that will restore the given restorePoint
 */
export const usePostVpsServiceNameAutomatedBackupRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupRestore>>, TError,{serviceName: string;data: VpsAutomatedBackupRestorePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameAutomatedBackupRestore>>,
        TError,
        {serviceName: string;data: VpsAutomatedBackupRestorePostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameAutomatedBackupRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get available Restore Points
 */
export const getVpsServiceNameAutomatedBackupRestorePoints = (
    serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vps/${serviceName}/automatedBackup/restorePoints`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsServiceNameAutomatedBackupRestorePointsQueryKey = (serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams,) => {
    return [`/vps/${serviceName}/automatedBackup/restorePoints`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsServiceNameAutomatedBackupRestorePointsQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError = unknown>(serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameAutomatedBackupRestorePointsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>> = ({ signal }) => getVpsServiceNameAutomatedBackupRestorePoints(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameAutomatedBackupRestorePointsQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>>
export type GetVpsServiceNameAutomatedBackupRestorePointsQueryError = unknown


export function useGetVpsServiceNameAutomatedBackupRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError = unknown>(
 serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAutomatedBackupRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError = unknown>(
 serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAutomatedBackupRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError = unknown>(
 serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available Restore Points
 */

export function useGetVpsServiceNameAutomatedBackupRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError = unknown>(
 serviceName: string,
    params: GetVpsServiceNameAutomatedBackupRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAutomatedBackupRestorePoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameAutomatedBackupRestorePointsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return all models the virtual server can be upgraded to
 */
export const getVpsServiceNameAvailableUpgrade = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsModelOVH[]>(
      {url: `/vps/${serviceName}/availableUpgrade`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameAvailableUpgradeQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/availableUpgrade`] as const;
    }

    
export const getGetVpsServiceNameAvailableUpgradeQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameAvailableUpgradeQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>> = ({ signal }) => getVpsServiceNameAvailableUpgrade(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameAvailableUpgradeQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>>
export type GetVpsServiceNameAvailableUpgradeQueryError = unknown


export function useGetVpsServiceNameAvailableUpgrade<TData = Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAvailableUpgrade<TData = Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameAvailableUpgrade<TData = Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return all models the virtual server can be upgraded to
 */

export function useGetVpsServiceNameAvailableUpgrade<TData = Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameAvailableUpgrade>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameAvailableUpgradeQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameBackupftp = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsBackupFtpOVH>(
      {url: `/vps/${serviceName}/backupftp`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameBackupftpQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/backupftp`] as const;
    }

    
export const getGetVpsServiceNameBackupftpQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameBackupftpQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>> = ({ signal }) => getVpsServiceNameBackupftp(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameBackupftpQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>>
export type GetVpsServiceNameBackupftpQueryError = unknown


export function useGetVpsServiceNameBackupftp<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftp<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftp<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameBackupftp<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftp>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameBackupftpQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List of IP blocks (and protocols to allow on these blocks) authorized on your backup FTP
 */
export const getVpsServiceNameBackupftpAccess = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/vps/${serviceName}/backupftp/access`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameBackupftpAccessQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/backupftp/access`] as const;
    }

    
export const getGetVpsServiceNameBackupftpAccessQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameBackupftpAccessQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>> = ({ signal }) => getVpsServiceNameBackupftpAccess(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameBackupftpAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>>
export type GetVpsServiceNameBackupftpAccessQueryError = unknown


export function useGetVpsServiceNameBackupftpAccess<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftpAccess<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftpAccess<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of IP blocks (and protocols to allow on these blocks) authorized on your backup FTP
 */

export function useGetVpsServiceNameBackupftpAccess<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameBackupftpAccessQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new Backup FTP ACL
 */
export const postVpsServiceNameBackupftpAccess = (
    serviceName: string,
    vpsBackupftpAccessPostOVH: VpsBackupftpAccessPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/vps/${serviceName}/backupftp/access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsBackupftpAccessPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameBackupftpAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameBackupftpAccess>>, TError,{serviceName: string;data: VpsBackupftpAccessPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameBackupftpAccess>>, TError,{serviceName: string;data: VpsBackupftpAccessPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameBackupftpAccess>>, {serviceName: string;data: VpsBackupftpAccessPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameBackupftpAccess(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameBackupftpAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameBackupftpAccess>>>
    export type PostVpsServiceNameBackupftpAccessMutationBody = VpsBackupftpAccessPostOVH
    export type PostVpsServiceNameBackupftpAccessMutationError = unknown

    /**
 * @summary Create a new Backup FTP ACL
 */
export const usePostVpsServiceNameBackupftpAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameBackupftpAccess>>, TError,{serviceName: string;data: VpsBackupftpAccessPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameBackupftpAccess>>,
        TError,
        {serviceName: string;data: VpsBackupftpAccessPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameBackupftpAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Revoke this ACL
 */
export const deleteVpsServiceNameBackupftpAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/vps/${serviceName}/backupftp/access/${ipBlock}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVpsServiceNameBackupftpAccessIpBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameBackupftpAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameBackupftpAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVpsServiceNameBackupftpAccessIpBlock>>, {serviceName: string;ipBlock: IpBlockOVH}> = (props) => {
          const {serviceName,ipBlock} = props ?? {};

          return  deleteVpsServiceNameBackupftpAccessIpBlock(serviceName,ipBlock,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVpsServiceNameBackupftpAccessIpBlockMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVpsServiceNameBackupftpAccessIpBlock>>>
    
    export type DeleteVpsServiceNameBackupftpAccessIpBlockMutationError = unknown

    /**
 * @summary Revoke this ACL
 */
export const useDeleteVpsServiceNameBackupftpAccessIpBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameBackupftpAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVpsServiceNameBackupftpAccessIpBlock>>,
        TError,
        {serviceName: string;ipBlock: IpBlockOVH},
        TContext
      > => {

      const mutationOptions = getDeleteVpsServiceNameBackupftpAccessIpBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameBackupftpAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerBackupFtpAclOVH>(
      {url: `/vps/${serviceName}/backupftp/access/${ipBlock}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameBackupftpAccessIpBlockQueryKey = (serviceName: string,
    ipBlock: IpBlockOVH,) => {
    return [`/vps/${serviceName}/backupftp/access/${ipBlock}`] as const;
    }

    
export const getGetVpsServiceNameBackupftpAccessIpBlockQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError = unknown>(serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameBackupftpAccessIpBlockQueryKey(serviceName,ipBlock);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>> = ({ signal }) => getVpsServiceNameBackupftpAccessIpBlock(serviceName,ipBlock, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipBlock), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameBackupftpAccessIpBlockQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>>
export type GetVpsServiceNameBackupftpAccessIpBlockQueryError = unknown


export function useGetVpsServiceNameBackupftpAccessIpBlock<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftpAccessIpBlock<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftpAccessIpBlock<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameBackupftpAccessIpBlock<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError = unknown>(
 serviceName: string,
    ipBlock: IpBlockOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAccessIpBlock>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameBackupftpAccessIpBlockQueryOptions(serviceName,ipBlock,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVpsServiceNameBackupftpAccessIpBlock = (
    serviceName: string,
    ipBlock: IpBlockOVH,
    dedicatedServerBackupFtpAclOVH: NonReadonly<DedicatedServerBackupFtpAclOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/backupftp/access/${ipBlock}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedServerBackupFtpAclOVH
    },
      options);
    }
  


export const getPutVpsServiceNameBackupftpAccessIpBlockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameBackupftpAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameBackupftpAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceNameBackupftpAccessIpBlock>>, {serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}> = (props) => {
          const {serviceName,ipBlock,data} = props ?? {};

          return  putVpsServiceNameBackupftpAccessIpBlock(serviceName,ipBlock,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameBackupftpAccessIpBlockMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceNameBackupftpAccessIpBlock>>>
    export type PutVpsServiceNameBackupftpAccessIpBlockMutationBody = NonReadonly<DedicatedServerBackupFtpAclOVH>
    export type PutVpsServiceNameBackupftpAccessIpBlockMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVpsServiceNameBackupftpAccessIpBlock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameBackupftpAccessIpBlock>>, TError,{serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceNameBackupftpAccessIpBlock>>,
        TError,
        {serviceName: string;ipBlock: IpBlockOVH;data: NonReadonly<DedicatedServerBackupFtpAclOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameBackupftpAccessIpBlockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all IP blocks that can be used in the ACL
 */
export const getVpsServiceNameBackupftpAuthorizableBlocks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpBlockOVH[]>(
      {url: `/vps/${serviceName}/backupftp/authorizableBlocks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameBackupftpAuthorizableBlocksQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/backupftp/authorizableBlocks`] as const;
    }

    
export const getGetVpsServiceNameBackupftpAuthorizableBlocksQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameBackupftpAuthorizableBlocksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>> = ({ signal }) => getVpsServiceNameBackupftpAuthorizableBlocks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameBackupftpAuthorizableBlocksQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>>
export type GetVpsServiceNameBackupftpAuthorizableBlocksQueryError = unknown


export function useGetVpsServiceNameBackupftpAuthorizableBlocks<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftpAuthorizableBlocks<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameBackupftpAuthorizableBlocks<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all IP blocks that can be used in the ACL
 */

export function useGetVpsServiceNameBackupftpAuthorizableBlocks<TData = Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameBackupftpAuthorizableBlocks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameBackupftpAuthorizableBlocksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change your Backup FTP password
 */
export const postVpsServiceNameBackupftpPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedServerTaskOVH>(
      {url: `/vps/${serviceName}/backupftp/password`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameBackupftpPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameBackupftpPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameBackupftpPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameBackupftpPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameBackupftpPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameBackupftpPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameBackupftpPassword>>>
    
    export type PostVpsServiceNameBackupftpPasswordMutationError = unknown

    /**
 * @summary Change your Backup FTP password
 */
export const usePostVpsServiceNameBackupftpPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameBackupftpPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameBackupftpPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameBackupftpPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postVpsServiceNameChangeContact = (
    serviceName: string,
    servicesChangeContactOVH: ServicesChangeContactOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesChangeContactOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameChangeContact>>, {serviceName: string;data: ServicesChangeContactOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameChangeContact>>>
    export type PostVpsServiceNameChangeContactMutationBody = ServicesChangeContactOVH
    export type PostVpsServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostVpsServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameChangeContact>>, TError,{serviceName: string;data: ServicesChangeContactOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: ServicesChangeContactOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postVpsServiceNameConfirmTermination = (
    serviceName: string,
    servicesConfirmTerminationOVH: ServicesConfirmTerminationOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/vps/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: servicesConfirmTerminationOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameConfirmTermination>>, {serviceName: string;data: ServicesConfirmTerminationOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameConfirmTermination>>>
    export type PostVpsServiceNameConfirmTerminationMutationBody = ServicesConfirmTerminationOVH
    export type PostVpsServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostVpsServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameConfirmTermination>>, TError,{serviceName: string;data: ServicesConfirmTerminationOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: ServicesConfirmTerminationOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a snapshot of the Virtual Server if the snapshot option is enabled and if there is no existing snapshot
 */
export const postVpsServiceNameCreateSnapshot = (
    serviceName: string,
    vpsCreateSnapshotPostOVH: VpsCreateSnapshotPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/createSnapshot`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsCreateSnapshotPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameCreateSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameCreateSnapshot>>, TError,{serviceName: string;data: VpsCreateSnapshotPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameCreateSnapshot>>, TError,{serviceName: string;data: VpsCreateSnapshotPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameCreateSnapshot>>, {serviceName: string;data: VpsCreateSnapshotPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameCreateSnapshot(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameCreateSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameCreateSnapshot>>>
    export type PostVpsServiceNameCreateSnapshotMutationBody = VpsCreateSnapshotPostOVH
    export type PostVpsServiceNameCreateSnapshotMutationError = unknown

    /**
 * @summary Create a snapshot of the Virtual Server if the snapshot option is enabled and if there is no existing snapshot
 */
export const usePostVpsServiceNameCreateSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameCreateSnapshot>>, TError,{serviceName: string;data: VpsCreateSnapshotPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameCreateSnapshot>>,
        TError,
        {serviceName: string;data: VpsCreateSnapshotPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameCreateSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameDatacenter = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsDatacenterOVH>(
      {url: `/vps/${serviceName}/datacenter`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameDatacenterQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/datacenter`] as const;
    }

    
export const getGetVpsServiceNameDatacenterQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDatacenterQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>> = ({ signal }) => getVpsServiceNameDatacenter(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDatacenterQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>>
export type GetVpsServiceNameDatacenterQueryError = unknown


export function useGetVpsServiceNameDatacenter<TData = Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDatacenter<TData = Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDatacenter<TData = Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameDatacenter<TData = Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDatacenter>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDatacenterQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Disks associated to this virtual server
 */
export const getVpsServiceNameDisks = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/disks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameDisksQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/disks`] as const;
    }

    
export const getGetVpsServiceNameDisksQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDisksQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDisks>>> = ({ signal }) => getVpsServiceNameDisks(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDisksQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDisks>>>
export type GetVpsServiceNameDisksQueryError = unknown


export function useGetVpsServiceNameDisks<TData = Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisks<TData = Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisks<TData = Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Disks associated to this virtual server
 */

export function useGetVpsServiceNameDisks<TData = Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDisksQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameDisksId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsDiskOVH>(
      {url: `/vps/${serviceName}/disks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameDisksIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/vps/${serviceName}/disks/${id}`] as const;
    }

    
export const getGetVpsServiceNameDisksIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDisksIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>> = ({ signal }) => getVpsServiceNameDisksId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDisksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>>
export type GetVpsServiceNameDisksIdQueryError = unknown


export function useGetVpsServiceNameDisksId<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisksId<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisksId<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameDisksId<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDisksIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVpsServiceNameDisksId = (
    serviceName: string,
    id: number,
    vpsDiskOVH: NonReadonly<VpsDiskOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/disks/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vpsDiskOVH
    },
      options);
    }
  


export const getPutVpsServiceNameDisksIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameDisksId>>, TError,{serviceName: string;id: number;data: NonReadonly<VpsDiskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameDisksId>>, TError,{serviceName: string;id: number;data: NonReadonly<VpsDiskOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceNameDisksId>>, {serviceName: string;id: number;data: NonReadonly<VpsDiskOVH>}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  putVpsServiceNameDisksId(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameDisksIdMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceNameDisksId>>>
    export type PutVpsServiceNameDisksIdMutationBody = NonReadonly<VpsDiskOVH>
    export type PutVpsServiceNameDisksIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVpsServiceNameDisksId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameDisksId>>, TError,{serviceName: string;id: number;data: NonReadonly<VpsDiskOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceNameDisksId>>,
        TError,
        {serviceName: string;id: number;data: NonReadonly<VpsDiskOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameDisksIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return many statistics about the disk for a given period
 */
export const getVpsServiceNameDisksIdMonitoring = (
    serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeUnitAndValuesVpsVpsTimestampValueOVH>(
      {url: `/vps/${serviceName}/disks/${id}/monitoring`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsServiceNameDisksIdMonitoringQueryKey = (serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams,) => {
    return [`/vps/${serviceName}/disks/${id}/monitoring`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsServiceNameDisksIdMonitoringQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError = unknown>(serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDisksIdMonitoringQueryKey(serviceName,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>> = ({ signal }) => getVpsServiceNameDisksIdMonitoring(serviceName,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDisksIdMonitoringQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>>
export type GetVpsServiceNameDisksIdMonitoringQueryError = unknown


export function useGetVpsServiceNameDisksIdMonitoring<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisksIdMonitoring<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisksIdMonitoring<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return many statistics about the disk for a given period
 */

export function useGetVpsServiceNameDisksIdMonitoring<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdMonitoringParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdMonitoring>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDisksIdMonitoringQueryOptions(serviceName,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return many statistics about the disk at that time
 */
export const getVpsServiceNameDisksIdUse = (
    serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ComplexTypeUnitAndValueDoubleOVH>(
      {url: `/vps/${serviceName}/disks/${id}/use`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsServiceNameDisksIdUseQueryKey = (serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams,) => {
    return [`/vps/${serviceName}/disks/${id}/use`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsServiceNameDisksIdUseQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError = unknown>(serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDisksIdUseQueryKey(serviceName,id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>> = ({ signal }) => getVpsServiceNameDisksIdUse(serviceName,id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDisksIdUseQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>>
export type GetVpsServiceNameDisksIdUseQueryError = unknown


export function useGetVpsServiceNameDisksIdUse<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisksIdUse<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDisksIdUse<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return many statistics about the disk at that time
 */

export function useGetVpsServiceNameDisksIdUse<TData = Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError = unknown>(
 serviceName: string,
    id: number,
    params: GetVpsServiceNameDisksIdUseParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDisksIdUse>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDisksIdUseQueryOptions(serviceName,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameDistribution = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTemplateOVH>(
      {url: `/vps/${serviceName}/distribution`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameDistributionQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/distribution`] as const;
    }

    
export const getGetVpsServiceNameDistributionQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDistributionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>> = ({ signal }) => getVpsServiceNameDistribution(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDistributionQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>>
export type GetVpsServiceNameDistributionQueryError = unknown


export function useGetVpsServiceNameDistribution<TData = Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDistribution>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDistribution<TData = Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDistribution>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDistribution<TData = Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameDistribution<TData = Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistribution>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDistributionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available softwares for this template Id
 */
export const getVpsServiceNameDistributionSoftware = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/distribution/software`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameDistributionSoftwareQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/distribution/software`] as const;
    }

    
export const getGetVpsServiceNameDistributionSoftwareQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDistributionSoftwareQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>> = ({ signal }) => getVpsServiceNameDistributionSoftware(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDistributionSoftwareQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>>
export type GetVpsServiceNameDistributionSoftwareQueryError = unknown


export function useGetVpsServiceNameDistributionSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDistributionSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDistributionSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available softwares for this template Id
 */

export function useGetVpsServiceNameDistributionSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDistributionSoftwareQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameDistributionSoftwareSoftwareId = (
    serviceName: string,
    softwareId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsSoftwareOVH>(
      {url: `/vps/${serviceName}/distribution/software/${softwareId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameDistributionSoftwareSoftwareIdQueryKey = (serviceName: string,
    softwareId: number,) => {
    return [`/vps/${serviceName}/distribution/software/${softwareId}`] as const;
    }

    
export const getGetVpsServiceNameDistributionSoftwareSoftwareIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError = unknown>(serviceName: string,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameDistributionSoftwareSoftwareIdQueryKey(serviceName,softwareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>> = ({ signal }) => getVpsServiceNameDistributionSoftwareSoftwareId(serviceName,softwareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && softwareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameDistributionSoftwareSoftwareIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>>
export type GetVpsServiceNameDistributionSoftwareSoftwareIdQueryError = unknown


export function useGetVpsServiceNameDistributionSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    softwareId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDistributionSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameDistributionSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameDistributionSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameDistributionSoftwareSoftwareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameDistributionSoftwareSoftwareIdQueryOptions(serviceName,softwareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return the VPS console URL
 */
export const postVpsServiceNameGetConsoleUrl = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/vps/${serviceName}/getConsoleUrl`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameGetConsoleUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameGetConsoleUrl>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameGetConsoleUrl>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameGetConsoleUrl>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameGetConsoleUrl(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameGetConsoleUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameGetConsoleUrl>>>
    
    export type PostVpsServiceNameGetConsoleUrlMutationError = unknown

    /**
 * @summary Return the VPS console URL
 */
export const usePostVpsServiceNameGetConsoleUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameGetConsoleUrl>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameGetConsoleUrl>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameGetConsoleUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Images available for this virtual server
 */
export const getVpsServiceNameImagesAvailable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vps/${serviceName}/images/available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameImagesAvailableQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/images/available`] as const;
    }

    
export const getGetVpsServiceNameImagesAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameImagesAvailableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>> = ({ signal }) => getVpsServiceNameImagesAvailable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameImagesAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>>
export type GetVpsServiceNameImagesAvailableQueryError = unknown


export function useGetVpsServiceNameImagesAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameImagesAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameImagesAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Images available for this virtual server
 */

export function useGetVpsServiceNameImagesAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameImagesAvailableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameImagesAvailableId = (
    serviceName: string,
    id: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsImageOVH>(
      {url: `/vps/${serviceName}/images/available/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameImagesAvailableIdQueryKey = (serviceName: string,
    id: string,) => {
    return [`/vps/${serviceName}/images/available/${id}`] as const;
    }

    
export const getGetVpsServiceNameImagesAvailableIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError = unknown>(serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameImagesAvailableIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>> = ({ signal }) => getVpsServiceNameImagesAvailableId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameImagesAvailableIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>>
export type GetVpsServiceNameImagesAvailableIdQueryError = unknown


export function useGetVpsServiceNameImagesAvailableId<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError = unknown>(
 serviceName: string,
    id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameImagesAvailableId<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameImagesAvailableId<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameImagesAvailableId<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError = unknown>(
 serviceName: string,
    id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesAvailableId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameImagesAvailableIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameImagesCurrent = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsImageOVH>(
      {url: `/vps/${serviceName}/images/current`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameImagesCurrentQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/images/current`] as const;
    }

    
export const getGetVpsServiceNameImagesCurrentQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameImagesCurrentQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>> = ({ signal }) => getVpsServiceNameImagesCurrent(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameImagesCurrentQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>>
export type GetVpsServiceNameImagesCurrentQueryError = unknown


export function useGetVpsServiceNameImagesCurrent<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameImagesCurrent<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameImagesCurrent<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameImagesCurrent<TData = Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameImagesCurrent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameImagesCurrentQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get the countries you can select for your IPs geolocation
 */
export const getVpsServiceNameIpCountryAvailable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsIpGeolocationEnumOVH[]>(
      {url: `/vps/${serviceName}/ipCountryAvailable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameIpCountryAvailableQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/ipCountryAvailable`] as const;
    }

    
export const getGetVpsServiceNameIpCountryAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameIpCountryAvailableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>> = ({ signal }) => getVpsServiceNameIpCountryAvailable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameIpCountryAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>>
export type GetVpsServiceNameIpCountryAvailableQueryError = unknown


export function useGetVpsServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the countries you can select for your IPs geolocation
 */

export function useGetVpsServiceNameIpCountryAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpCountryAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameIpCountryAvailableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ips associated to this virtual server
 */
export const getVpsServiceNameIps = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<IpOVH[]>(
      {url: `/vps/${serviceName}/ips`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameIpsQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/ips`] as const;
    }

    
export const getGetVpsServiceNameIpsQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameIpsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameIps>>> = ({ signal }) => getVpsServiceNameIps(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameIpsQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameIps>>>
export type GetVpsServiceNameIpsQueryError = unknown


export function useGetVpsServiceNameIps<TData = Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameIps<TData = Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameIps>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameIps<TData = Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ips associated to this virtual server
 */

export function useGetVpsServiceNameIps<TData = Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIps>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameIpsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Release a given Ip (Additional Ip)
 */
export const deleteVpsServiceNameIpsIpAddress = (
    serviceName: string,
    ipAddress: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/ips/${ipAddress}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVpsServiceNameIpsIpAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameIpsIpAddress>>, TError,{serviceName: string;ipAddress: IpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameIpsIpAddress>>, TError,{serviceName: string;ipAddress: IpOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVpsServiceNameIpsIpAddress>>, {serviceName: string;ipAddress: IpOVH}> = (props) => {
          const {serviceName,ipAddress} = props ?? {};

          return  deleteVpsServiceNameIpsIpAddress(serviceName,ipAddress,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVpsServiceNameIpsIpAddressMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVpsServiceNameIpsIpAddress>>>
    
    export type DeleteVpsServiceNameIpsIpAddressMutationError = unknown

    /**
 * @summary Release a given Ip (Additional Ip)
 */
export const useDeleteVpsServiceNameIpsIpAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameIpsIpAddress>>, TError,{serviceName: string;ipAddress: IpOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVpsServiceNameIpsIpAddress>>,
        TError,
        {serviceName: string;ipAddress: IpOVH},
        TContext
      > => {

      const mutationOptions = getDeleteVpsServiceNameIpsIpAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameIpsIpAddress = (
    serviceName: string,
    ipAddress: IpOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsIpOVH>(
      {url: `/vps/${serviceName}/ips/${ipAddress}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameIpsIpAddressQueryKey = (serviceName: string,
    ipAddress: IpOVH,) => {
    return [`/vps/${serviceName}/ips/${ipAddress}`] as const;
    }

    
export const getGetVpsServiceNameIpsIpAddressQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError = unknown>(serviceName: string,
    ipAddress: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameIpsIpAddressQueryKey(serviceName,ipAddress);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>> = ({ signal }) => getVpsServiceNameIpsIpAddress(serviceName,ipAddress, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && ipAddress), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameIpsIpAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>>
export type GetVpsServiceNameIpsIpAddressQueryError = unknown


export function useGetVpsServiceNameIpsIpAddress<TData = Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError = unknown>(
 serviceName: string,
    ipAddress: IpOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameIpsIpAddress<TData = Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError = unknown>(
 serviceName: string,
    ipAddress: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameIpsIpAddress<TData = Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError = unknown>(
 serviceName: string,
    ipAddress: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameIpsIpAddress<TData = Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError = unknown>(
 serviceName: string,
    ipAddress: IpOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameIpsIpAddress>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameIpsIpAddressQueryOptions(serviceName,ipAddress,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVpsServiceNameIpsIpAddress = (
    serviceName: string,
    ipAddress: IpOVH,
    vpsIpOVH: NonReadonly<VpsIpOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/ips/${ipAddress}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vpsIpOVH
    },
      options);
    }
  


export const getPutVpsServiceNameIpsIpAddressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameIpsIpAddress>>, TError,{serviceName: string;ipAddress: IpOVH;data: NonReadonly<VpsIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameIpsIpAddress>>, TError,{serviceName: string;ipAddress: IpOVH;data: NonReadonly<VpsIpOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceNameIpsIpAddress>>, {serviceName: string;ipAddress: IpOVH;data: NonReadonly<VpsIpOVH>}> = (props) => {
          const {serviceName,ipAddress,data} = props ?? {};

          return  putVpsServiceNameIpsIpAddress(serviceName,ipAddress,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameIpsIpAddressMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceNameIpsIpAddress>>>
    export type PutVpsServiceNameIpsIpAddressMutationBody = NonReadonly<VpsIpOVH>
    export type PutVpsServiceNameIpsIpAddressMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVpsServiceNameIpsIpAddress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameIpsIpAddress>>, TError,{serviceName: string;ipAddress: IpOVH;data: NonReadonly<VpsIpOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceNameIpsIpAddress>>,
        TError,
        {serviceName: string;ipAddress: IpOVH;data: NonReadonly<VpsIpOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameIpsIpAddressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get metrics token to query prometheus cluster
 */
export const getVpsServiceNameMetricsToken = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsMetricsTokenOVH>(
      {url: `/vps/${serviceName}/metricsToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameMetricsTokenQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/metricsToken`] as const;
    }

    
export const getGetVpsServiceNameMetricsTokenQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameMetricsTokenQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>> = ({ signal }) => getVpsServiceNameMetricsToken(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameMetricsTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>>
export type GetVpsServiceNameMetricsTokenQueryError = unknown


export function useGetVpsServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get metrics token to query prometheus cluster
 */

export function useGetVpsServiceNameMetricsToken<TData = Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMetricsToken>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameMetricsTokenQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information on a possible migration of a VPS 2016/2018 to VPS 2020
 */
export const getVpsServiceNameMigration2018 = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsMigrationVPS2018to2020OVH>(
      {url: `/vps/${serviceName}/migration2018`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameMigration2018QueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/migration2018`] as const;
    }

    
export const getGetVpsServiceNameMigration2018QueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameMigration2018QueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>> = ({ signal }) => getVpsServiceNameMigration2018(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameMigration2018QueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>>
export type GetVpsServiceNameMigration2018QueryError = unknown


export function useGetVpsServiceNameMigration2018<TData = Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameMigration2018<TData = Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameMigration2018<TData = Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information on a possible migration of a VPS 2016/2018 to VPS 2020
 */

export function useGetVpsServiceNameMigration2018<TData = Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameMigration2018>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameMigration2018QueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Schedule the migration of a VPS 2016/2018 to VPS 2020
 */
export const postVpsServiceNameMigration2018 = (
    serviceName: string,
    vpsMigration2018PostOVH: VpsMigration2018PostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/migration2018`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsMigration2018PostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameMigration2018MutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameMigration2018>>, TError,{serviceName: string;data: VpsMigration2018PostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameMigration2018>>, TError,{serviceName: string;data: VpsMigration2018PostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameMigration2018>>, {serviceName: string;data: VpsMigration2018PostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameMigration2018(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameMigration2018MutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameMigration2018>>>
    export type PostVpsServiceNameMigration2018MutationBody = VpsMigration2018PostOVH
    export type PostVpsServiceNameMigration2018MutationError = unknown

    /**
 * @summary Schedule the migration of a VPS 2016/2018 to VPS 2020
 */
export const usePostVpsServiceNameMigration2018 = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameMigration2018>>, TError,{serviceName: string;data: VpsMigration2018PostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameMigration2018>>,
        TError,
        {serviceName: string;data: VpsMigration2018PostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameMigration2018MutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Return all models for the range of the virtual server
 */
export const getVpsServiceNameModels = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsModelOVH[]>(
      {url: `/vps/${serviceName}/models`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameModelsQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/models`] as const;
    }

    
export const getGetVpsServiceNameModelsQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameModelsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameModels>>> = ({ signal }) => getVpsServiceNameModels(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameModelsQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameModels>>>
export type GetVpsServiceNameModelsQueryError = unknown


export function useGetVpsServiceNameModels<TData = Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameModels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameModels<TData = Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameModels>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameModels<TData = Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Return all models for the range of the virtual server
 */

export function useGetVpsServiceNameModels<TData = Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameModels>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameModelsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Return the necessary informations to open a VNC connection to your VPS
 */
export const postVpsServiceNameOpenConsoleAccess = (
    serviceName: string,
    vpsOpenConsoleAccessPostOVH: VpsOpenConsoleAccessPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsVncOVH>(
      {url: `/vps/${serviceName}/openConsoleAccess`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsOpenConsoleAccessPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameOpenConsoleAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameOpenConsoleAccess>>, TError,{serviceName: string;data: VpsOpenConsoleAccessPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameOpenConsoleAccess>>, TError,{serviceName: string;data: VpsOpenConsoleAccessPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameOpenConsoleAccess>>, {serviceName: string;data: VpsOpenConsoleAccessPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameOpenConsoleAccess(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameOpenConsoleAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameOpenConsoleAccess>>>
    export type PostVpsServiceNameOpenConsoleAccessMutationBody = VpsOpenConsoleAccessPostOVH
    export type PostVpsServiceNameOpenConsoleAccessMutationError = unknown

    /**
 * @summary Return the necessary informations to open a VNC connection to your VPS
 */
export const usePostVpsServiceNameOpenConsoleAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameOpenConsoleAccess>>, TError,{serviceName: string;data: VpsOpenConsoleAccessPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameOpenConsoleAccess>>,
        TError,
        {serviceName: string;data: VpsOpenConsoleAccessPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameOpenConsoleAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of VPS options
 */
export const getVpsServiceNameOption = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsVpsOptionEnumOVH[]>(
      {url: `/vps/${serviceName}/option`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameOptionQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/option`] as const;
    }

    
export const getGetVpsServiceNameOptionQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameOptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameOption>>> = ({ signal }) => getVpsServiceNameOption(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameOption>>>
export type GetVpsServiceNameOptionQueryError = unknown


export function useGetVpsServiceNameOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of VPS options
 */

export function useGetVpsServiceNameOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameOptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameOptionOption = (
    serviceName: string,
    option: VpsVpsOptionEnumOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsOptionOVH>(
      {url: `/vps/${serviceName}/option/${option}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameOptionOptionQueryKey = (serviceName: string,
    option: VpsVpsOptionEnumOVH,) => {
    return [`/vps/${serviceName}/option/${option}`] as const;
    }

    
export const getGetVpsServiceNameOptionOptionQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError = unknown>(serviceName: string,
    option: VpsVpsOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameOptionOptionQueryKey(serviceName,option);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>> = ({ signal }) => getVpsServiceNameOptionOption(serviceName,option, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && option), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameOptionOptionQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>>
export type GetVpsServiceNameOptionOptionQueryError = unknown


export function useGetVpsServiceNameOptionOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: VpsVpsOptionEnumOVH, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameOptionOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: VpsVpsOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameOptionOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: VpsVpsOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameOptionOption<TData = Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError = unknown>(
 serviceName: string,
    option: VpsVpsOptionEnumOVH, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameOptionOption>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameOptionOptionQueryOptions(serviceName,option,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request a reboot of the machine
 */
export const postVpsServiceNameReboot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/reboot`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameRebootMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameReboot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameReboot>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameReboot>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameReboot(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameRebootMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameReboot>>>
    
    export type PostVpsServiceNameRebootMutationError = unknown

    /**
 * @summary Request a reboot of the machine
 */
export const usePostVpsServiceNameReboot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameReboot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameReboot>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameRebootMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reinstall the virtual server
 */
export const postVpsServiceNameRebuild = (
    serviceName: string,
    vpsRebuildPostOVH: VpsRebuildPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/rebuild`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsRebuildPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameRebuildMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameRebuild>>, TError,{serviceName: string;data: VpsRebuildPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameRebuild>>, TError,{serviceName: string;data: VpsRebuildPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameRebuild>>, {serviceName: string;data: VpsRebuildPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameRebuild(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameRebuildMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameRebuild>>>
    export type PostVpsServiceNameRebuildMutationBody = VpsRebuildPostOVH
    export type PostVpsServiceNameRebuildMutationError = unknown

    /**
 * @summary Reinstall the virtual server
 */
export const usePostVpsServiceNameRebuild = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameRebuild>>, TError,{serviceName: string;data: VpsRebuildPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameRebuild>>,
        TError,
        {serviceName: string;data: VpsRebuildPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameRebuildMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reinstall the virtual server
 */
export const postVpsServiceNameReinstall = (
    serviceName: string,
    vpsReinstallPostOVH: VpsReinstallPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/reinstall`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsReinstallPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameReinstallMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameReinstall>>, TError,{serviceName: string;data: VpsReinstallPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameReinstall>>, TError,{serviceName: string;data: VpsReinstallPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameReinstall>>, {serviceName: string;data: VpsReinstallPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameReinstall(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameReinstallMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameReinstall>>>
    export type PostVpsServiceNameReinstallMutationBody = VpsReinstallPostOVH
    export type PostVpsServiceNameReinstallMutationError = unknown

    /**
 * @summary Reinstall the virtual server
 */
export const usePostVpsServiceNameReinstall = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameReinstall>>, TError,{serviceName: string;data: VpsReinstallPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameReinstall>>,
        TError,
        {serviceName: string;data: VpsReinstallPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameReinstallMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List of secondary dns domain name
 */
export const getVpsServiceNameSecondaryDnsDomains = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/vps/${serviceName}/secondaryDnsDomains`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameSecondaryDnsDomainsQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/secondaryDnsDomains`] as const;
    }

    
export const getGetVpsServiceNameSecondaryDnsDomainsQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameSecondaryDnsDomainsQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>> = ({ signal }) => getVpsServiceNameSecondaryDnsDomains(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameSecondaryDnsDomainsQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>>
export type GetVpsServiceNameSecondaryDnsDomainsQueryError = unknown


export function useGetVpsServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List of secondary dns domain name
 */

export function useGetVpsServiceNameSecondaryDnsDomains<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomains>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameSecondaryDnsDomainsQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary add a domain on secondary dns
 */
export const postVpsServiceNameSecondaryDnsDomains = (
    serviceName: string,
    vpsSecondaryDnsDomainsPostOVH: VpsSecondaryDnsDomainsPostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/secondaryDnsDomains`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsSecondaryDnsDomainsPostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameSecondaryDnsDomainsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSecondaryDnsDomains>>, TError,{serviceName: string;data: VpsSecondaryDnsDomainsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSecondaryDnsDomains>>, TError,{serviceName: string;data: VpsSecondaryDnsDomainsPostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameSecondaryDnsDomains>>, {serviceName: string;data: VpsSecondaryDnsDomainsPostOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postVpsServiceNameSecondaryDnsDomains(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameSecondaryDnsDomainsMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameSecondaryDnsDomains>>>
    export type PostVpsServiceNameSecondaryDnsDomainsMutationBody = VpsSecondaryDnsDomainsPostOVH
    export type PostVpsServiceNameSecondaryDnsDomainsMutationError = unknown

    /**
 * @summary add a domain on secondary dns
 */
export const usePostVpsServiceNameSecondaryDnsDomains = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSecondaryDnsDomains>>, TError,{serviceName: string;data: VpsSecondaryDnsDomainsPostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameSecondaryDnsDomains>>,
        TError,
        {serviceName: string;data: VpsSecondaryDnsDomainsPostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameSecondaryDnsDomainsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary remove this domain
 */
export const deleteVpsServiceNameSecondaryDnsDomainsDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/secondaryDnsDomains/${domain}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVpsServiceNameSecondaryDnsDomainsDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVpsServiceNameSecondaryDnsDomainsDomain>>, {serviceName: string;domain: string}> = (props) => {
          const {serviceName,domain} = props ?? {};

          return  deleteVpsServiceNameSecondaryDnsDomainsDomain(serviceName,domain,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVpsServiceNameSecondaryDnsDomainsDomainMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVpsServiceNameSecondaryDnsDomainsDomain>>>
    
    export type DeleteVpsServiceNameSecondaryDnsDomainsDomainMutationError = unknown

    /**
 * @summary remove this domain
 */
export const useDeleteVpsServiceNameSecondaryDnsDomainsDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVpsServiceNameSecondaryDnsDomainsDomain>>,
        TError,
        {serviceName: string;domain: string},
        TContext
      > => {

      const mutationOptions = getDeleteVpsServiceNameSecondaryDnsDomainsDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameSecondaryDnsDomainsDomain = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSOVH>(
      {url: `/vps/${serviceName}/secondaryDnsDomains/${domain}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameSecondaryDnsDomainsDomainQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/vps/${serviceName}/secondaryDnsDomains/${domain}`] as const;
    }

    
export const getGetVpsServiceNameSecondaryDnsDomainsDomainQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameSecondaryDnsDomainsDomainQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>> = ({ signal }) => getVpsServiceNameSecondaryDnsDomainsDomain(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameSecondaryDnsDomainsDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>>
export type GetVpsServiceNameSecondaryDnsDomainsDomainQueryError = unknown


export function useGetVpsServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameSecondaryDnsDomainsDomain<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameSecondaryDnsDomainsDomainQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVpsServiceNameSecondaryDnsDomainsDomain = (
    serviceName: string,
    domain: string,
    secondaryDnsSecondaryDNSOVH: NonReadonly<SecondaryDnsSecondaryDNSOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/secondaryDnsDomains/${domain}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: secondaryDnsSecondaryDNSOVH
    },
      options);
    }
  


export const getPutVpsServiceNameSecondaryDnsDomainsDomainMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceNameSecondaryDnsDomainsDomain>>, {serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}> = (props) => {
          const {serviceName,domain,data} = props ?? {};

          return  putVpsServiceNameSecondaryDnsDomainsDomain(serviceName,domain,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameSecondaryDnsDomainsDomainMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceNameSecondaryDnsDomainsDomain>>>
    export type PutVpsServiceNameSecondaryDnsDomainsDomainMutationBody = NonReadonly<SecondaryDnsSecondaryDNSOVH>
    export type PutVpsServiceNameSecondaryDnsDomainsDomainMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVpsServiceNameSecondaryDnsDomainsDomain = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameSecondaryDnsDomainsDomain>>, TError,{serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceNameSecondaryDnsDomainsDomain>>,
        TError,
        {serviceName: string;domain: string;data: NonReadonly<SecondaryDnsSecondaryDNSOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameSecondaryDnsDomainsDomainMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary domain name server informations
 */
export const getVpsServiceNameSecondaryDnsDomainsDomainDnsServer = (
    serviceName: string,
    domain: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSNameServerOVH>(
      {url: `/vps/${serviceName}/secondaryDnsDomains/${domain}/dnsServer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameSecondaryDnsDomainsDomainDnsServerQueryKey = (serviceName: string,
    domain: string,) => {
    return [`/vps/${serviceName}/secondaryDnsDomains/${domain}/dnsServer`] as const;
    }

    
export const getGetVpsServiceNameSecondaryDnsDomainsDomainDnsServerQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameSecondaryDnsDomainsDomainDnsServerQueryKey(serviceName,domain);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>> = ({ signal }) => getVpsServiceNameSecondaryDnsDomainsDomainDnsServer(serviceName,domain, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domain), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameSecondaryDnsDomainsDomainDnsServerQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>>
export type GetVpsServiceNameSecondaryDnsDomainsDomainDnsServerQueryError = unknown


export function useGetVpsServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary domain name server informations
 */

export function useGetVpsServiceNameSecondaryDnsDomainsDomainDnsServer<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError = unknown>(
 serviceName: string,
    domain: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsDomainsDomainDnsServer>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameSecondaryDnsDomainsDomainDnsServerQueryOptions(serviceName,domain,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Secondary nameServer available for your Server
 */
export const getVpsServiceNameSecondaryDnsNameServerAvailable = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SecondaryDnsSecondaryDNSNameServerOVH>(
      {url: `/vps/${serviceName}/secondaryDnsNameServerAvailable`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameSecondaryDnsNameServerAvailableQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/secondaryDnsNameServerAvailable`] as const;
    }

    
export const getGetVpsServiceNameSecondaryDnsNameServerAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameSecondaryDnsNameServerAvailableQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>> = ({ signal }) => getVpsServiceNameSecondaryDnsNameServerAvailable(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameSecondaryDnsNameServerAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>>
export type GetVpsServiceNameSecondaryDnsNameServerAvailableQueryError = unknown


export function useGetVpsServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Secondary nameServer available for your Server
 */

export function useGetVpsServiceNameSecondaryDnsNameServerAvailable<TData = Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSecondaryDnsNameServerAvailable>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameSecondaryDnsNameServerAvailableQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getVpsServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/vps/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetVpsServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>> = ({ signal }) => getVpsServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>>
export type GetVpsServiceNameServiceInfosQueryError = unknown


export function useGetVpsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetVpsServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putVpsServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutVpsServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putVpsServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceNameServiceInfos>>>
    export type PutVpsServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutVpsServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutVpsServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Start the process in order to set the root password of the virtual machine
 */
export const postVpsServiceNameSetPassword = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/setPassword`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameSetPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSetPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSetPassword>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameSetPassword>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameSetPassword(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameSetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameSetPassword>>>
    
    export type PostVpsServiceNameSetPasswordMutationError = unknown

    /**
 * @summary Start the process in order to set the root password of the virtual machine
 */
export const usePostVpsServiceNameSetPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSetPassword>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameSetPassword>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameSetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Creates a vps.Task that will delete the Snapshot
 */
export const deleteVpsServiceNameSnapshot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/snapshot`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVpsServiceNameSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameSnapshot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameSnapshot>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVpsServiceNameSnapshot>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteVpsServiceNameSnapshot(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVpsServiceNameSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVpsServiceNameSnapshot>>>
    
    export type DeleteVpsServiceNameSnapshotMutationError = unknown

    /**
 * @summary Creates a vps.Task that will delete the Snapshot
 */
export const useDeleteVpsServiceNameSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameSnapshot>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVpsServiceNameSnapshot>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteVpsServiceNameSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameSnapshot = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsSnapshotOVH>(
      {url: `/vps/${serviceName}/snapshot`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameSnapshotQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/snapshot`] as const;
    }

    
export const getGetVpsServiceNameSnapshotQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameSnapshotQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>> = ({ signal }) => getVpsServiceNameSnapshot(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>>
export type GetVpsServiceNameSnapshotQueryError = unknown


export function useGetVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameSnapshot<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshot>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameSnapshotQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putVpsServiceNameSnapshot = (
    serviceName: string,
    vpsSnapshotOVH: NonReadonly<VpsSnapshotOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/vps/${serviceName}/snapshot`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vpsSnapshotOVH
    },
      options);
    }
  


export const getPutVpsServiceNameSnapshotMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameSnapshot>>, TError,{serviceName: string;data: NonReadonly<VpsSnapshotOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameSnapshot>>, TError,{serviceName: string;data: NonReadonly<VpsSnapshotOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVpsServiceNameSnapshot>>, {serviceName: string;data: NonReadonly<VpsSnapshotOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putVpsServiceNameSnapshot(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVpsServiceNameSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof putVpsServiceNameSnapshot>>>
    export type PutVpsServiceNameSnapshotMutationBody = NonReadonly<VpsSnapshotOVH>
    export type PutVpsServiceNameSnapshotMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutVpsServiceNameSnapshot = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVpsServiceNameSnapshot>>, TError,{serviceName: string;data: NonReadonly<VpsSnapshotOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putVpsServiceNameSnapshot>>,
        TError,
        {serviceName: string;data: NonReadonly<VpsSnapshotOVH>},
        TContext
      > => {

      const mutationOptions = getPutVpsServiceNameSnapshotMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Download the snapshot
 */
export const getVpsServiceNameSnapshotDownload = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsDownloadSnapshotURLOVH>(
      {url: `/vps/${serviceName}/snapshot/download`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameSnapshotDownloadQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/snapshot/download`] as const;
    }

    
export const getGetVpsServiceNameSnapshotDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameSnapshotDownloadQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>> = ({ signal }) => getVpsServiceNameSnapshotDownload(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameSnapshotDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>>
export type GetVpsServiceNameSnapshotDownloadQueryError = unknown


export function useGetVpsServiceNameSnapshotDownload<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSnapshotDownload<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameSnapshotDownload<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download the snapshot
 */

export function useGetVpsServiceNameSnapshotDownload<TData = Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameSnapshotDownload>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameSnapshotDownloadQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Revert the Virtual Server to this snapshot
 */
export const postVpsServiceNameSnapshotRevert = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/snapshot/revert`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameSnapshotRevertMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSnapshotRevert>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSnapshotRevert>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameSnapshotRevert>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameSnapshotRevert(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameSnapshotRevertMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameSnapshotRevert>>>
    
    export type PostVpsServiceNameSnapshotRevertMutationError = unknown

    /**
 * @summary Revert the Virtual Server to this snapshot
 */
export const usePostVpsServiceNameSnapshotRevert = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameSnapshotRevert>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameSnapshotRevert>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameSnapshotRevertMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Request the machine to start
 */
export const postVpsServiceNameStart = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/start`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameStartMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameStart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameStart>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameStart>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameStart(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameStartMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameStart>>>
    
    export type PostVpsServiceNameStartMutationError = unknown

    /**
 * @summary Request the machine to start
 */
export const usePostVpsServiceNameStart = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameStart>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameStart>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameStartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Give the status of the services of the main IP
 */
export const getVpsServiceNameStatus = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsIpServiceStatusOVH>(
      {url: `/vps/${serviceName}/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameStatusQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/status`] as const;
    }

    
export const getGetVpsServiceNameStatusQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameStatusQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameStatus>>> = ({ signal }) => getVpsServiceNameStatus(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameStatus>>>
export type GetVpsServiceNameStatusQueryError = unknown


export function useGetVpsServiceNameStatus<TData = Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameStatus<TData = Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameStatus<TData = Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Give the status of the services of the main IP
 */

export function useGetVpsServiceNameStatus<TData = Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameStatusQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Request the machine to stop
 */
export const postVpsServiceNameStop = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/stop`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameStopMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameStop>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameStop>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameStop>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameStop(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameStopMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameStop>>>
    
    export type PostVpsServiceNameStopMutationError = unknown

    /**
 * @summary Request the machine to stop
 */
export const usePostVpsServiceNameStop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameStop>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameStop>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameStopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Tasks associated to this virtual server
 */
export const getVpsServiceNameTasks = (
    serviceName: string,
    params?: GetVpsServiceNameTasksParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/tasks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsServiceNameTasksQueryKey = (serviceName: string,
    params?: GetVpsServiceNameTasksParams,) => {
    return [`/vps/${serviceName}/tasks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsServiceNameTasksQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError = unknown>(serviceName: string,
    params?: GetVpsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameTasksQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameTasks>>> = ({ signal }) => getVpsServiceNameTasks(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameTasks>>>
export type GetVpsServiceNameTasksQueryError = unknown


export function useGetVpsServiceNameTasks<TData = Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetVpsServiceNameTasksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTasks<TData = Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetVpsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTasks>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTasks<TData = Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetVpsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Tasks associated to this virtual server
 */

export function useGetVpsServiceNameTasks<TData = Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError = unknown>(
 serviceName: string,
    params?: GetVpsServiceNameTasksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasks>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameTasksQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameTasksId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/tasks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameTasksIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/vps/${serviceName}/tasks/${id}`] as const;
    }

    
export const getGetVpsServiceNameTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameTasksIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>> = ({ signal }) => getVpsServiceNameTasksId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>>
export type GetVpsServiceNameTasksIdQueryError = unknown


export function useGetVpsServiceNameTasksId<TData = Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTasksId<TData = Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTasksId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTasksId<TData = Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameTasksId<TData = Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTasksId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameTasksIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Templates available for this virtual server
 */
export const getVpsServiceNameTemplates = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/templates`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameTemplatesQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/templates`] as const;
    }

    
export const getGetVpsServiceNameTemplatesQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameTemplatesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>> = ({ signal }) => getVpsServiceNameTemplates(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>>
export type GetVpsServiceNameTemplatesQueryError = unknown


export function useGetVpsServiceNameTemplates<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplates<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplates>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplates<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Templates available for this virtual server
 */

export function useGetVpsServiceNameTemplates<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplates>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameTemplatesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameTemplatesId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTemplateOVH>(
      {url: `/vps/${serviceName}/templates/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameTemplatesIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/vps/${serviceName}/templates/${id}`] as const;
    }

    
export const getGetVpsServiceNameTemplatesIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameTemplatesIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>> = ({ signal }) => getVpsServiceNameTemplatesId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameTemplatesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>>
export type GetVpsServiceNameTemplatesIdQueryError = unknown


export function useGetVpsServiceNameTemplatesId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplatesId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplatesId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameTemplatesId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameTemplatesIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available softwares for this template Id
 */
export const getVpsServiceNameTemplatesIdSoftware = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/templates/${id}/software`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameTemplatesIdSoftwareQueryKey = (serviceName: string,
    id: number,) => {
    return [`/vps/${serviceName}/templates/${id}/software`] as const;
    }

    
export const getGetVpsServiceNameTemplatesIdSoftwareQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameTemplatesIdSoftwareQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>> = ({ signal }) => getVpsServiceNameTemplatesIdSoftware(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameTemplatesIdSoftwareQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>>
export type GetVpsServiceNameTemplatesIdSoftwareQueryError = unknown


export function useGetVpsServiceNameTemplatesIdSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplatesIdSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplatesIdSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available softwares for this template Id
 */

export function useGetVpsServiceNameTemplatesIdSoftware<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftware>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameTemplatesIdSoftwareQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameTemplatesIdSoftwareSoftwareId = (
    serviceName: string,
    id: number,
    softwareId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsSoftwareOVH>(
      {url: `/vps/${serviceName}/templates/${id}/software/${softwareId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameTemplatesIdSoftwareSoftwareIdQueryKey = (serviceName: string,
    id: number,
    softwareId: number,) => {
    return [`/vps/${serviceName}/templates/${id}/software/${softwareId}`] as const;
    }

    
export const getGetVpsServiceNameTemplatesIdSoftwareSoftwareIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError = unknown>(serviceName: string,
    id: number,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameTemplatesIdSoftwareSoftwareIdQueryKey(serviceName,id,softwareId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>> = ({ signal }) => getVpsServiceNameTemplatesIdSoftwareSoftwareId(serviceName,id,softwareId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id && softwareId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameTemplatesIdSoftwareSoftwareIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>>
export type GetVpsServiceNameTemplatesIdSoftwareSoftwareIdQueryError = unknown


export function useGetVpsServiceNameTemplatesIdSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    id: number,
    softwareId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplatesIdSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    id: number,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameTemplatesIdSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    id: number,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameTemplatesIdSoftwareSoftwareId<TData = Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError = unknown>(
 serviceName: string,
    id: number,
    softwareId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameTemplatesIdSoftwareSoftwareId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameTemplatesIdSoftwareSoftwareIdQueryOptions(serviceName,id,softwareId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ask for the termination of your service
 */
export const postVpsServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/vps/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostVpsServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postVpsServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameTerminate>>>
    
    export type PostVpsServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostVpsServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameVeeam = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsVeeamOVH>(
      {url: `/vps/${serviceName}/veeam`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameVeeamQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/veeam`] as const;
    }

    
export const getGetVpsServiceNameVeeamQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameVeeamQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>> = ({ signal }) => getVpsServiceNameVeeam(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameVeeamQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>>
export type GetVpsServiceNameVeeamQueryError = unknown


export function useGetVpsServiceNameVeeam<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeam>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeam<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeam>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeam<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameVeeam<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeam>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameVeeamQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Veeam restore points for the VPS
 */
export const getVpsServiceNameVeeamRestorePoints = (
    serviceName: string,
    params?: GetVpsServiceNameVeeamRestorePointsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/vps/${serviceName}/veeam/restorePoints`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetVpsServiceNameVeeamRestorePointsQueryKey = (serviceName: string,
    params?: GetVpsServiceNameVeeamRestorePointsParams,) => {
    return [`/vps/${serviceName}/veeam/restorePoints`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVpsServiceNameVeeamRestorePointsQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError = unknown>(serviceName: string,
    params?: GetVpsServiceNameVeeamRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameVeeamRestorePointsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>> = ({ signal }) => getVpsServiceNameVeeamRestorePoints(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameVeeamRestorePointsQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>>
export type GetVpsServiceNameVeeamRestorePointsQueryError = unknown


export function useGetVpsServiceNameVeeamRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetVpsServiceNameVeeamRestorePointsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeamRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError = unknown>(
 serviceName: string,
    params?: GetVpsServiceNameVeeamRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeamRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError = unknown>(
 serviceName: string,
    params?: GetVpsServiceNameVeeamRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Veeam restore points for the VPS
 */

export function useGetVpsServiceNameVeeamRestorePoints<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError = unknown>(
 serviceName: string,
    params?: GetVpsServiceNameVeeamRestorePointsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePoints>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameVeeamRestorePointsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getVpsServiceNameVeeamRestorePointsId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsVeeamRestorePointOVH>(
      {url: `/vps/${serviceName}/veeam/restorePoints/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameVeeamRestorePointsIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/vps/${serviceName}/veeam/restorePoints/${id}`] as const;
    }

    
export const getGetVpsServiceNameVeeamRestorePointsIdQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameVeeamRestorePointsIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>> = ({ signal }) => getVpsServiceNameVeeamRestorePointsId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameVeeamRestorePointsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>>
export type GetVpsServiceNameVeeamRestorePointsIdQueryError = unknown


export function useGetVpsServiceNameVeeamRestorePointsId<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeamRestorePointsId<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeamRestorePointsId<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameVeeamRestorePointsId<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestorePointsId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameVeeamRestorePointsIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates a VPS.Task that will restore the given restorePoint
 */
export const postVpsServiceNameVeeamRestorePointsIdRestore = (
    serviceName: string,
    id: number,
    vpsVeeamRestorePointsRestorePostOVH: VpsVeeamRestorePointsRestorePostOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/veeam/restorePoints/${id}/restore`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vpsVeeamRestorePointsRestorePostOVH, signal
    },
      options);
    }
  


export const getPostVpsServiceNameVeeamRestorePointsIdRestoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameVeeamRestorePointsIdRestore>>, TError,{serviceName: string;id: number;data: VpsVeeamRestorePointsRestorePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameVeeamRestorePointsIdRestore>>, TError,{serviceName: string;id: number;data: VpsVeeamRestorePointsRestorePostOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVpsServiceNameVeeamRestorePointsIdRestore>>, {serviceName: string;id: number;data: VpsVeeamRestorePointsRestorePostOVH}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postVpsServiceNameVeeamRestorePointsIdRestore(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVpsServiceNameVeeamRestorePointsIdRestoreMutationResult = NonNullable<Awaited<ReturnType<typeof postVpsServiceNameVeeamRestorePointsIdRestore>>>
    export type PostVpsServiceNameVeeamRestorePointsIdRestoreMutationBody = VpsVeeamRestorePointsRestorePostOVH
    export type PostVpsServiceNameVeeamRestorePointsIdRestoreMutationError = unknown

    /**
 * @summary Creates a VPS.Task that will restore the given restorePoint
 */
export const usePostVpsServiceNameVeeamRestorePointsIdRestore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVpsServiceNameVeeamRestorePointsIdRestore>>, TError,{serviceName: string;id: number;data: VpsVeeamRestorePointsRestorePostOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVpsServiceNameVeeamRestorePointsIdRestore>>,
        TError,
        {serviceName: string;id: number;data: VpsVeeamRestorePointsRestorePostOVH},
        TContext
      > => {

      const mutationOptions = getPostVpsServiceNameVeeamRestorePointsIdRestoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Creates a VPS.Task that will unmount the backup
 */
export const deleteVpsServiceNameVeeamRestoredBackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<VpsTaskOVH>(
      {url: `/vps/${serviceName}/veeam/restoredBackup`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVpsServiceNameVeeamRestoredBackupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameVeeamRestoredBackup>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameVeeamRestoredBackup>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVpsServiceNameVeeamRestoredBackup>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  deleteVpsServiceNameVeeamRestoredBackup(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVpsServiceNameVeeamRestoredBackupMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVpsServiceNameVeeamRestoredBackup>>>
    
    export type DeleteVpsServiceNameVeeamRestoredBackupMutationError = unknown

    /**
 * @summary Creates a VPS.Task that will unmount the backup
 */
export const useDeleteVpsServiceNameVeeamRestoredBackup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVpsServiceNameVeeamRestoredBackup>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteVpsServiceNameVeeamRestoredBackup>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getDeleteVpsServiceNameVeeamRestoredBackupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getVpsServiceNameVeeamRestoredBackup = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<VpsVeeamRestoredBackupOVH>(
      {url: `/vps/${serviceName}/veeam/restoredBackup`, method: 'GET', signal
    },
      options);
    }
  

export const getGetVpsServiceNameVeeamRestoredBackupQueryKey = (serviceName: string,) => {
    return [`/vps/${serviceName}/veeam/restoredBackup`] as const;
    }

    
export const getGetVpsServiceNameVeeamRestoredBackupQueryOptions = <TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVpsServiceNameVeeamRestoredBackupQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>> = ({ signal }) => getVpsServiceNameVeeamRestoredBackup(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVpsServiceNameVeeamRestoredBackupQueryResult = NonNullable<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>>
export type GetVpsServiceNameVeeamRestoredBackupQueryError = unknown


export function useGetVpsServiceNameVeeamRestoredBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeamRestoredBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVpsServiceNameVeeamRestoredBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetVpsServiceNameVeeamRestoredBackup<TData = Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVpsServiceNameVeeamRestoredBackup>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVpsServiceNameVeeamRestoredBackupQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





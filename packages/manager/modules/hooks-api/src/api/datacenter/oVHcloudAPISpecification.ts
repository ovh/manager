/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetDatacenterReferenceRegionParams,
  RegionOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available regions and their availability zones
 */
export const getDatacenterReferenceRegion = (
    params?: GetDatacenterReferenceRegionParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<RegionOVH[]>(
      {url: `/datacenter/reference/region`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDatacenterReferenceRegionQueryKey = (params?: GetDatacenterReferenceRegionParams,) => {
    return [`/datacenter/reference/region`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDatacenterReferenceRegionQueryOptions = <TData = Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError = unknown>(params?: GetDatacenterReferenceRegionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDatacenterReferenceRegionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>> = ({ signal }) => getDatacenterReferenceRegion(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDatacenterReferenceRegionQueryResult = NonNullable<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>>
export type GetDatacenterReferenceRegionQueryError = unknown


export function useGetDatacenterReferenceRegion<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError = unknown>(
 params: undefined |  GetDatacenterReferenceRegionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatacenterReferenceRegion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDatacenterReferenceRegion<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError = unknown>(
 params?: GetDatacenterReferenceRegionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatacenterReferenceRegion>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDatacenterReferenceRegion<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError = unknown>(
 params?: GetDatacenterReferenceRegionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available regions and their availability zones
 */

export function useGetDatacenterReferenceRegion<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError = unknown>(
 params?: GetDatacenterReferenceRegionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegion>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDatacenterReferenceRegionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get available region and its availability zones
 */
export const getDatacenterReferenceRegionName = (
    name: string,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<RegionOVH>(
      {url: `/datacenter/reference/region/${name}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDatacenterReferenceRegionNameQueryKey = (name: string,) => {
    return [`/datacenter/reference/region/${name}`] as const;
    }

    
export const getGetDatacenterReferenceRegionNameQueryOptions = <TData = Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError = unknown>(name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDatacenterReferenceRegionNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>> = ({ signal }) => getDatacenterReferenceRegionName(name, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(name), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDatacenterReferenceRegionNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>>
export type GetDatacenterReferenceRegionNameQueryError = unknown


export function useGetDatacenterReferenceRegionName<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError = unknown>(
 name: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDatacenterReferenceRegionName<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDatacenterReferenceRegionName<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get available region and its availability zones
 */

export function useGetDatacenterReferenceRegionName<TData = Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError = unknown>(
 name: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatacenterReferenceRegionName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDatacenterReferenceRegionNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





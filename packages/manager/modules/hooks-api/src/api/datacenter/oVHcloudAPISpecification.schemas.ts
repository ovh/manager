/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
export type GetDatacenterReferenceRegionParams = {
/**
 * Filter by availability zone. Returns regions having this availability zone
 */
availabilityZone?: string;
/**
 * Filter by city ISO code
 */
cityCode?: string;
/**
 * Filter by city name
 */
cityName?: string;
/**
 * Filter by region code
 */
code?: string;
/**
 * Filter by country ISO code
 */
countryCode?: string;
/**
 * Filter by country name
 */
countryName?: string;
/**
 * Filter by geography code
 */
geographyCode?: string;
/**
 * Filter by geography name
 */
geographyName?: string;
/**
 * Filter by region IDs
 */
ids?: number[];
/**
 * Filter by region location
 */
location?: string;
/**
 * Filter by region name
 */
name?: string;
/**
 * Filter by specific region type
 */
specificType?: RegionSpecificTypeEnumOVH;
/**
 * Filter by general region type
 */
type?: RegionTypeEnumOVH;
};

/**
 * Time (e.g., 15:04:05)
 */
export type TimeOVH = string;

/**
 * Typology of the region
 */
export type RegionTypeEnumOVH = typeof RegionTypeEnumOVH[keyof typeof RegionTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegionTypeEnumOVH = {
  '1-AZ': '1-AZ',
  '3-AZ': '3-AZ',
  'LOCAL-ZONE': 'LOCAL-ZONE',
} as const;

/**
 * Typology of the region for non-standard types
 */
export type RegionSpecificTypeEnumOVH = typeof RegionSpecificTypeEnumOVH[keyof typeof RegionSpecificTypeEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegionSpecificTypeEnumOVH = {
  BACKUP: 'BACKUP',
  DCAAS: 'DCAAS',
  LZ: 'LZ',
  SNC: 'SNC',
  STANDARD: 'STANDARD',
} as const;

/**
 * Cardinal direction of the region
 */
export type RegionCardinalPointEnumOVH = typeof RegionCardinalPointEnumOVH[keyof typeof RegionCardinalPointEnumOVH];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegionCardinalPointEnumOVH = {
  CENTRAL: 'CENTRAL',
  EAST: 'EAST',
  NORTH: 'NORTH',
  NORTHEAST: 'NORTHEAST',
  NORTHWEST: 'NORTHWEST',
  SOUTH: 'SOUTH',
  SOUTHEAST: 'SOUTHEAST',
  SOUTHWEST: 'SOUTHWEST',
  WEST: 'WEST',
} as const;

/**
 * Region and its availability zones
 */
export interface RegionOVH {
  /**
   * List of availability zones for the region
   * @nullable
   */
  readonly availabilityZones?: readonly string[] | null;
  /** Cardinal direction where the region is located */
  readonly cardinalPoint?: RegionCardinalPointEnumOVH;
  /** ISO code of the city */
  readonly cityCode?: string;
  /** Geographical latitude of the city */
  readonly cityLatitude?: number;
  /** Geographical longitude of the city */
  readonly cityLongitude?: number;
  /** Full name of the city */
  readonly cityName?: string;
  /** Region's short code */
  readonly code?: string;
  /** ISO code of the country */
  readonly countryCode?: string;
  /** Full name of the country */
  readonly countryName?: string;
  /** Short code representing the geographical area */
  readonly geographyCode?: string;
  /** Name of the geographical area */
  readonly geographyName?: string;
  /** Location of the region */
  readonly location?: string;
  /** Name of the region */
  readonly name?: string;
  /** Year the region was opened */
  readonly openingYear?: number;
  /** Specific typology of the region */
  readonly specificType?: RegionSpecificTypeEnumOVH;
  /** General typology of the region */
  readonly type?: RegionTypeEnumOVH;
}

/**
 * Phone number
 */
export type PhoneNumberOVH = string;

/**
 * MAC address (e.g., 2001:4860:4860::8844)
 */
export type MacAddressOVH = string;

/**
 * IPv6 CIDR notation (e.g., 2001:41d0::/128)
 */
export type Ipv6BlockOVH = string;

/**
 * IPv6 address (e.g., 2001:41d0:1:1994::1)
 */
export type Ipv6OVH = string;

/**
 * IPv4 CIDR notation (e.g., 192.0.2.0/24)
 */
export type Ipv4BlockOVH = string;

/**
 * IPv4 address (e.g., 192.0.2.0)
 */
export type Ipv4OVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpInterfaceOVH = string;

/**
 * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
 */
export type IpBlockOVH = string;

/**
 * IP address (e.g., 192.0.2.0)
 */
export type IpOVH = string;

/**
 * International phone number
 */
export type InternationalPhoneNumberOVH = string;

/**
 * Email address (e.g., api@ml.ovh.net)
 */
export type EmailOVH = string;

/**
 * Duration (e.g., P1Y2M3DT4H6M9S)
 */
export type DurationOVH = string;


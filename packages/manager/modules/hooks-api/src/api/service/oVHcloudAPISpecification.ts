/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetServiceServiceIdRenewForecastParams,
  GetServiceServiceIdRenewParams,
  PostServiceServiceIdRenewBody,
  ServiceListServiceOVH,
  ServiceRenewRenewDescriptionOVH,
  ServiceRenewRenewForecastOVH,
  ServiceRenewRenewOrderOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Services
 */
export const getService = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/service`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServiceQueryKey = () => {
    return [`/service`] as const;
    }

    
export const getGetServiceQueryOptions = <TData = Awaited<ReturnType<typeof getService>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getService>>> = ({ signal }) => getService(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getService>>>
export type GetServiceQueryError = unknown


export function useGetService<TData = Awaited<ReturnType<typeof getService>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetService<TData = Awaited<ReturnType<typeof getService>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getService>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetService<TData = Awaited<ReturnType<typeof getService>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Services
 */

export function useGetService<TData = Awaited<ReturnType<typeof getService>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServiceQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getServiceServiceId = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServiceListServiceOVH>(
      {url: `/service/${serviceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServiceServiceIdQueryKey = (serviceId: number,) => {
    return [`/service/${serviceId}`] as const;
    }

    
export const getGetServiceServiceIdQueryOptions = <TData = Awaited<ReturnType<typeof getServiceServiceId>>, TError = unknown>(serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceServiceIdQueryKey(serviceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServiceServiceId>>> = ({ signal }) => getServiceServiceId(serviceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServiceServiceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getServiceServiceId>>>
export type GetServiceServiceIdQueryError = unknown


export function useGetServiceServiceId<TData = Awaited<ReturnType<typeof getServiceServiceId>>, TError = unknown>(
 serviceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceServiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServiceServiceId<TData = Awaited<ReturnType<typeof getServiceServiceId>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceServiceId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServiceServiceId<TData = Awaited<ReturnType<typeof getServiceServiceId>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetServiceServiceId<TData = Awaited<ReturnType<typeof getServiceServiceId>>, TError = unknown>(
 serviceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServiceServiceIdQueryOptions(serviceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Alter this object properties
 */
export const putServiceServiceId = (
    serviceId: number,
    serviceListServiceOVH: NonReadonly<ServiceListServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/service/${serviceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: serviceListServiceOVH
    },
      options);
    }
  


export const getPutServiceServiceIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServiceServiceId>>, TError,{serviceId: number;data: NonReadonly<ServiceListServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putServiceServiceId>>, TError,{serviceId: number;data: NonReadonly<ServiceListServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putServiceServiceId>>, {serviceId: number;data: NonReadonly<ServiceListServiceOVH>}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  putServiceServiceId(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutServiceServiceIdMutationResult = NonNullable<Awaited<ReturnType<typeof putServiceServiceId>>>
    export type PutServiceServiceIdMutationBody = NonReadonly<ServiceListServiceOVH>
    export type PutServiceServiceIdMutationError = unknown

    /**
 * @summary Alter this object properties
 */
export const usePutServiceServiceId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putServiceServiceId>>, TError,{serviceId: number;data: NonReadonly<ServiceListServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putServiceServiceId>>,
        TError,
        {serviceId: number;data: NonReadonly<ServiceListServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutServiceServiceIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List possible renews for this service
 */
export const getServiceServiceIdRenew = (
    serviceId: string,
    params?: GetServiceServiceIdRenewParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServiceRenewRenewDescriptionOVH[]>(
      {url: `/service/${serviceId}/renew`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServiceServiceIdRenewQueryKey = (serviceId: string,
    params?: GetServiceServiceIdRenewParams,) => {
    return [`/service/${serviceId}/renew`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServiceServiceIdRenewQueryOptions = <TData = Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError = unknown>(serviceId: string,
    params?: GetServiceServiceIdRenewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceServiceIdRenewQueryKey(serviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServiceServiceIdRenew>>> = ({ signal }) => getServiceServiceIdRenew(serviceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServiceServiceIdRenewQueryResult = NonNullable<Awaited<ReturnType<typeof getServiceServiceIdRenew>>>
export type GetServiceServiceIdRenewQueryError = unknown


export function useGetServiceServiceIdRenew<TData = Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError = unknown>(
 serviceId: string,
    params: undefined |  GetServiceServiceIdRenewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceServiceIdRenew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServiceServiceIdRenew<TData = Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError = unknown>(
 serviceId: string,
    params?: GetServiceServiceIdRenewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceServiceIdRenew>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServiceServiceIdRenew<TData = Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError = unknown>(
 serviceId: string,
    params?: GetServiceServiceIdRenewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List possible renews for this service
 */

export function useGetServiceServiceIdRenew<TData = Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError = unknown>(
 serviceId: string,
    params?: GetServiceServiceIdRenewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenew>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServiceServiceIdRenewQueryOptions(serviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a renew order
 */
export const postServiceServiceIdRenew = (
    serviceId: string,
    postServiceServiceIdRenewBody: PostServiceServiceIdRenewBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServiceRenewRenewOrderOVH>(
      {url: `/service/${serviceId}/renew`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postServiceServiceIdRenewBody, signal
    },
      options);
    }
  


export const getPostServiceServiceIdRenewMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdRenew>>, TError,{serviceId: string;data: PostServiceServiceIdRenewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdRenew>>, TError,{serviceId: string;data: PostServiceServiceIdRenewBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceServiceIdRenew>>, {serviceId: string;data: PostServiceServiceIdRenewBody}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  postServiceServiceIdRenew(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceServiceIdRenewMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceServiceIdRenew>>>
    export type PostServiceServiceIdRenewMutationBody = PostServiceServiceIdRenewBody
    export type PostServiceServiceIdRenewMutationError = unknown

    /**
 * @summary Create a renew order
 */
export const usePostServiceServiceIdRenew = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdRenew>>, TError,{serviceId: string;data: PostServiceServiceIdRenewBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServiceServiceIdRenew>>,
        TError,
        {serviceId: string;data: PostServiceServiceIdRenewBody},
        TContext
      > => {

      const mutationOptions = getPostServiceServiceIdRenewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a forecasting of next renewal
 */
export const getServiceServiceIdRenewForecast = (
    serviceId: string,
    params?: GetServiceServiceIdRenewForecastParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServiceRenewRenewForecastOVH>(
      {url: `/service/${serviceId}/renew/forecast`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServiceServiceIdRenewForecastQueryKey = (serviceId: string,
    params?: GetServiceServiceIdRenewForecastParams,) => {
    return [`/service/${serviceId}/renew/forecast`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServiceServiceIdRenewForecastQueryOptions = <TData = Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError = unknown>(serviceId: string,
    params?: GetServiceServiceIdRenewForecastParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceServiceIdRenewForecastQueryKey(serviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>> = ({ signal }) => getServiceServiceIdRenewForecast(serviceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetServiceServiceIdRenewForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>>
export type GetServiceServiceIdRenewForecastQueryError = unknown


export function useGetServiceServiceIdRenewForecast<TData = Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError = unknown>(
 serviceId: string,
    params: undefined |  GetServiceServiceIdRenewForecastParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServiceServiceIdRenewForecast<TData = Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError = unknown>(
 serviceId: string,
    params?: GetServiceServiceIdRenewForecastParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetServiceServiceIdRenewForecast<TData = Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError = unknown>(
 serviceId: string,
    params?: GetServiceServiceIdRenewForecastParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a forecasting of next renewal
 */

export function useGetServiceServiceIdRenewForecast<TData = Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError = unknown>(
 serviceId: string,
    params?: GetServiceServiceIdRenewForecastParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceServiceIdRenewForecast>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetServiceServiceIdRenewForecastQueryOptions(serviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reopen a suspended service
 */
export const postServiceServiceIdReopen = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/service/${serviceId}/reopen`, method: 'POST', signal
    },
      options);
    }
  


export const getPostServiceServiceIdReopenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdReopen>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdReopen>>, TError,{serviceId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceServiceIdReopen>>, {serviceId: number}> = (props) => {
          const {serviceId} = props ?? {};

          return  postServiceServiceIdReopen(serviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceServiceIdReopenMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceServiceIdReopen>>>
    
    export type PostServiceServiceIdReopenMutationError = unknown

    /**
 * @summary Reopen a suspended service
 */
export const usePostServiceServiceIdReopen = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdReopen>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServiceServiceIdReopen>>,
        TError,
        {serviceId: number},
        TContext
      > => {

      const mutationOptions = getPostServiceServiceIdReopenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Suspend the service. The service won't be accessible, but you will still be charged for it
 */
export const postServiceServiceIdSuspend = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/service/${serviceId}/suspend`, method: 'POST', signal
    },
      options);
    }
  


export const getPostServiceServiceIdSuspendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdSuspend>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdSuspend>>, TError,{serviceId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceServiceIdSuspend>>, {serviceId: number}> = (props) => {
          const {serviceId} = props ?? {};

          return  postServiceServiceIdSuspend(serviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceServiceIdSuspendMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceServiceIdSuspend>>>
    
    export type PostServiceServiceIdSuspendMutationError = unknown

    /**
 * @summary Suspend the service. The service won't be accessible, but you will still be charged for it
 */
export const usePostServiceServiceIdSuspend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdSuspend>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServiceServiceIdSuspend>>,
        TError,
        {serviceId: number},
        TContext
      > => {

      const mutationOptions = getPostServiceServiceIdSuspendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Terminates a suspended service
 */
export const postServiceServiceIdTerminate = (
    serviceId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/service/${serviceId}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostServiceServiceIdTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdTerminate>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdTerminate>>, TError,{serviceId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceServiceIdTerminate>>, {serviceId: number}> = (props) => {
          const {serviceId} = props ?? {};

          return  postServiceServiceIdTerminate(serviceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceServiceIdTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceServiceIdTerminate>>>
    
    export type PostServiceServiceIdTerminateMutationError = unknown

    /**
 * @summary Terminates a suspended service
 */
export const usePostServiceServiceIdTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceServiceIdTerminate>>, TError,{serviceId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postServiceServiceIdTerminate>>,
        TError,
        {serviceId: number},
        TContext
      > => {

      const mutationOptions = getPostServiceServiceIdTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

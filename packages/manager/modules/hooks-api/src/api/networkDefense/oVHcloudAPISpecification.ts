/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetNetworkDefenseVacEventParams,
  GetNetworkDefenseVacTrafficParams,
  NetworkDefenseVacEventsResponseOVH,
  NetworkDefenseVacTrafficResponseOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV2 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all Network Defense events
 */
export const getNetworkDefenseVacEvent = (
    params?: GetNetworkDefenseVacEventParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<NetworkDefenseVacEventsResponseOVH>(
      {url: `/networkDefense/vac/event`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNetworkDefenseVacEventQueryKey = (params?: GetNetworkDefenseVacEventParams,) => {
    return [`/networkDefense/vac/event`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNetworkDefenseVacEventQueryOptions = <TData = Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError = unknown>(params?: GetNetworkDefenseVacEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNetworkDefenseVacEventQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>> = ({ signal }) => getNetworkDefenseVacEvent(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNetworkDefenseVacEventQueryResult = NonNullable<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>>
export type GetNetworkDefenseVacEventQueryError = unknown


export function useGetNetworkDefenseVacEvent<TData = Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError = unknown>(
 params: undefined |  GetNetworkDefenseVacEventParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNetworkDefenseVacEvent<TData = Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError = unknown>(
 params?: GetNetworkDefenseVacEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNetworkDefenseVacEvent<TData = Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError = unknown>(
 params?: GetNetworkDefenseVacEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all Network Defense events
 */

export function useGetNetworkDefenseVacEvent<TData = Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError = unknown>(
 params?: GetNetworkDefenseVacEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacEvent>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNetworkDefenseVacEventQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all Network Defense traffic statistics
 */
export const getNetworkDefenseVacTraffic = (
    params: GetNetworkDefenseVacTrafficParams,
 options?: SecondParameter<typeof customInstanceV2>,signal?: AbortSignal
) => {
      
      
      return customInstanceV2<NetworkDefenseVacTrafficResponseOVH>(
      {url: `/networkDefense/vac/traffic`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNetworkDefenseVacTrafficQueryKey = (params: GetNetworkDefenseVacTrafficParams,) => {
    return [`/networkDefense/vac/traffic`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNetworkDefenseVacTrafficQueryOptions = <TData = Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError = unknown>(params: GetNetworkDefenseVacTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNetworkDefenseVacTrafficQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>> = ({ signal }) => getNetworkDefenseVacTraffic(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNetworkDefenseVacTrafficQueryResult = NonNullable<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>>
export type GetNetworkDefenseVacTrafficQueryError = unknown


export function useGetNetworkDefenseVacTraffic<TData = Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError = unknown>(
 params: GetNetworkDefenseVacTrafficParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNetworkDefenseVacTraffic<TData = Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError = unknown>(
 params: GetNetworkDefenseVacTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNetworkDefenseVacTraffic<TData = Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError = unknown>(
 params: GetNetworkDefenseVacTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all Network Defense traffic statistics
 */

export function useGetNetworkDefenseVacTraffic<TData = Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError = unknown>(
 params: GetNetworkDefenseVacTrafficParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNetworkDefenseVacTraffic>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV2>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNetworkDefenseVacTrafficQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





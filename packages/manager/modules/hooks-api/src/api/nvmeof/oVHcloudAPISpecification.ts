/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DedicatedNvmeofACLDataOVH,
  DedicatedNvmeofACLManagementOVH,
  DedicatedNvmeofClusterAccessOVH,
  DedicatedNvmeofClusterWithIAMOVH,
  GetDedicatedNvmeofParams,
  PostDedicatedNvmeofServiceNameChangeContactBody,
  PostDedicatedNvmeofServiceNameConfirmTerminationBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List NVMeoF clusters
 */
export const getDedicatedNvmeof = (
    params?: GetDedicatedNvmeofParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/dedicated/nvmeof`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDedicatedNvmeofQueryKey = (params?: GetDedicatedNvmeofParams,) => {
    return [`/dedicated/nvmeof`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDedicatedNvmeofQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError = unknown>(params?: GetDedicatedNvmeofParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNvmeofQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNvmeof>>> = ({ signal }) => getDedicatedNvmeof(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNvmeofQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNvmeof>>>
export type GetDedicatedNvmeofQueryError = unknown


export function useGetDedicatedNvmeof<TData = Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError = unknown>(
 params: undefined |  GetDedicatedNvmeofParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeof>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeof<TData = Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError = unknown>(
 params?: GetDedicatedNvmeofParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeof>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeof<TData = Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError = unknown>(
 params?: GetDedicatedNvmeofParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List NVMeoF clusters
 */

export function useGetDedicatedNvmeof<TData = Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError = unknown>(
 params?: GetDedicatedNvmeofParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeof>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNvmeofQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get NVMeoF cluster
 */
export const getDedicatedNvmeofServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNvmeofClusterWithIAMOVH>(
      {url: `/dedicated/nvmeof/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNvmeofServiceNameQueryKey = (serviceName: string,) => {
    return [`/dedicated/nvmeof/${serviceName}`] as const;
    }

    
export const getGetDedicatedNvmeofServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNvmeofServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>> = ({ signal }) => getDedicatedNvmeofServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNvmeofServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>>
export type GetDedicatedNvmeofServiceNameQueryError = unknown


export function useGetDedicatedNvmeofServiceName<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceName<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceName<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get NVMeoF cluster
 */

export function useGetDedicatedNvmeofServiceName<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNvmeofServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get information required to access to NVMEoF cluster
 */
export const getDedicatedNvmeofServiceNameAccess = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNvmeofClusterAccessOVH>(
      {url: `/dedicated/nvmeof/${serviceName}/access`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNvmeofServiceNameAccessQueryKey = (serviceName: string,) => {
    return [`/dedicated/nvmeof/${serviceName}/access`] as const;
    }

    
export const getGetDedicatedNvmeofServiceNameAccessQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNvmeofServiceNameAccessQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>> = ({ signal }) => getDedicatedNvmeofServiceNameAccess(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNvmeofServiceNameAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>>
export type GetDedicatedNvmeofServiceNameAccessQueryError = unknown


export function useGetDedicatedNvmeofServiceNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get information required to access to NVMEoF cluster
 */

export function useGetDedicatedNvmeofServiceNameAccess<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAccess>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNvmeofServiceNameAccessQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List ACL entries
 */
export const getDedicatedNvmeofServiceNameAclData = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNvmeofACLDataOVH>(
      {url: `/dedicated/nvmeof/${serviceName}/acl/data`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNvmeofServiceNameAclDataQueryKey = (serviceName: string,) => {
    return [`/dedicated/nvmeof/${serviceName}/acl/data`] as const;
    }

    
export const getGetDedicatedNvmeofServiceNameAclDataQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNvmeofServiceNameAclDataQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>> = ({ signal }) => getDedicatedNvmeofServiceNameAclData(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNvmeofServiceNameAclDataQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>>
export type GetDedicatedNvmeofServiceNameAclDataQueryError = unknown


export function useGetDedicatedNvmeofServiceNameAclData<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameAclData<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameAclData<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List ACL entries
 */

export function useGetDedicatedNvmeofServiceNameAclData<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclData>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNvmeofServiceNameAclDataQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create ACL entry
 */
export const postDedicatedNvmeofServiceNameAclData = (
    serviceName: string,
    dedicatedNvmeofACLDataOVH: DedicatedNvmeofACLDataOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNvmeofACLDataOVH>(
      {url: `/dedicated/nvmeof/${serviceName}/acl/data`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedNvmeofACLDataOVH, signal
    },
      options);
    }
  


export const getPostDedicatedNvmeofServiceNameAclDataMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclData>>, TError,{serviceName: string;data: DedicatedNvmeofACLDataOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclData>>, TError,{serviceName: string;data: DedicatedNvmeofACLDataOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclData>>, {serviceName: string;data: DedicatedNvmeofACLDataOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNvmeofServiceNameAclData(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNvmeofServiceNameAclDataMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclData>>>
    export type PostDedicatedNvmeofServiceNameAclDataMutationBody = DedicatedNvmeofACLDataOVH
    export type PostDedicatedNvmeofServiceNameAclDataMutationError = unknown

    /**
 * @summary Create ACL entry
 */
export const usePostDedicatedNvmeofServiceNameAclData = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclData>>, TError,{serviceName: string;data: DedicatedNvmeofACLDataOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclData>>,
        TError,
        {serviceName: string;data: DedicatedNvmeofACLDataOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNvmeofServiceNameAclDataMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary List ACL entries
 */
export const getDedicatedNvmeofServiceNameAclManagement = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNvmeofACLManagementOVH>(
      {url: `/dedicated/nvmeof/${serviceName}/acl/management`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNvmeofServiceNameAclManagementQueryKey = (serviceName: string,) => {
    return [`/dedicated/nvmeof/${serviceName}/acl/management`] as const;
    }

    
export const getGetDedicatedNvmeofServiceNameAclManagementQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNvmeofServiceNameAclManagementQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>> = ({ signal }) => getDedicatedNvmeofServiceNameAclManagement(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNvmeofServiceNameAclManagementQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>>
export type GetDedicatedNvmeofServiceNameAclManagementQueryError = unknown


export function useGetDedicatedNvmeofServiceNameAclManagement<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameAclManagement<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameAclManagement<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List ACL entries
 */

export function useGetDedicatedNvmeofServiceNameAclManagement<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameAclManagement>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNvmeofServiceNameAclManagementQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create ACL entry
 */
export const postDedicatedNvmeofServiceNameAclManagement = (
    serviceName: string,
    dedicatedNvmeofACLManagementOVH: DedicatedNvmeofACLManagementOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<DedicatedNvmeofACLManagementOVH>(
      {url: `/dedicated/nvmeof/${serviceName}/acl/management`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dedicatedNvmeofACLManagementOVH, signal
    },
      options);
    }
  


export const getPostDedicatedNvmeofServiceNameAclManagementMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclManagement>>, TError,{serviceName: string;data: DedicatedNvmeofACLManagementOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclManagement>>, TError,{serviceName: string;data: DedicatedNvmeofACLManagementOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclManagement>>, {serviceName: string;data: DedicatedNvmeofACLManagementOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNvmeofServiceNameAclManagement(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNvmeofServiceNameAclManagementMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclManagement>>>
    export type PostDedicatedNvmeofServiceNameAclManagementMutationBody = DedicatedNvmeofACLManagementOVH
    export type PostDedicatedNvmeofServiceNameAclManagementMutationError = unknown

    /**
 * @summary Create ACL entry
 */
export const usePostDedicatedNvmeofServiceNameAclManagement = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclManagement>>, TError,{serviceName: string;data: DedicatedNvmeofACLManagementOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameAclManagement>>,
        TError,
        {serviceName: string;data: DedicatedNvmeofACLManagementOVH},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNvmeofServiceNameAclManagementMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Launch a contact change procedure
 */
export const postDedicatedNvmeofServiceNameChangeContact = (
    serviceName: string,
    postDedicatedNvmeofServiceNameChangeContactBody: PostDedicatedNvmeofServiceNameChangeContactBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/dedicated/nvmeof/${serviceName}/changeContact`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNvmeofServiceNameChangeContactBody, signal
    },
      options);
    }
  


export const getPostDedicatedNvmeofServiceNameChangeContactMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedNvmeofServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedNvmeofServiceNameChangeContactBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameChangeContact>>, {serviceName: string;data: PostDedicatedNvmeofServiceNameChangeContactBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNvmeofServiceNameChangeContact(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNvmeofServiceNameChangeContactMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameChangeContact>>>
    export type PostDedicatedNvmeofServiceNameChangeContactMutationBody = PostDedicatedNvmeofServiceNameChangeContactBody
    export type PostDedicatedNvmeofServiceNameChangeContactMutationError = unknown

    /**
 * @summary Launch a contact change procedure
 */
export const usePostDedicatedNvmeofServiceNameChangeContact = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameChangeContact>>, TError,{serviceName: string;data: PostDedicatedNvmeofServiceNameChangeContactBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameChangeContact>>,
        TError,
        {serviceName: string;data: PostDedicatedNvmeofServiceNameChangeContactBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNvmeofServiceNameChangeContactMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm service termination
 */
export const postDedicatedNvmeofServiceNameConfirmTermination = (
    serviceName: string,
    postDedicatedNvmeofServiceNameConfirmTerminationBody: PostDedicatedNvmeofServiceNameConfirmTerminationBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/nvmeof/${serviceName}/confirmTermination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postDedicatedNvmeofServiceNameConfirmTerminationBody, signal
    },
      options);
    }
  


export const getPostDedicatedNvmeofServiceNameConfirmTerminationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedNvmeofServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedNvmeofServiceNameConfirmTerminationBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameConfirmTermination>>, {serviceName: string;data: PostDedicatedNvmeofServiceNameConfirmTerminationBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postDedicatedNvmeofServiceNameConfirmTermination(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNvmeofServiceNameConfirmTerminationMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameConfirmTermination>>>
    export type PostDedicatedNvmeofServiceNameConfirmTerminationMutationBody = PostDedicatedNvmeofServiceNameConfirmTerminationBody
    export type PostDedicatedNvmeofServiceNameConfirmTerminationMutationError = unknown

    /**
 * @summary Confirm service termination
 */
export const usePostDedicatedNvmeofServiceNameConfirmTermination = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameConfirmTermination>>, TError,{serviceName: string;data: PostDedicatedNvmeofServiceNameConfirmTerminationBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameConfirmTermination>>,
        TError,
        {serviceName: string;data: PostDedicatedNvmeofServiceNameConfirmTerminationBody},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNvmeofServiceNameConfirmTerminationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get service information
 */
export const getDedicatedNvmeofServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/dedicated/nvmeof/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDedicatedNvmeofServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/dedicated/nvmeof/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetDedicatedNvmeofServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDedicatedNvmeofServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>> = ({ signal }) => getDedicatedNvmeofServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDedicatedNvmeofServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>>
export type GetDedicatedNvmeofServiceNameServiceInfosQueryError = unknown


export function useGetDedicatedNvmeofServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDedicatedNvmeofServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetDedicatedNvmeofServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDedicatedNvmeofServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDedicatedNvmeofServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putDedicatedNvmeofServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/dedicated/nvmeof/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutDedicatedNvmeofServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNvmeofServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNvmeofServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDedicatedNvmeofServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putDedicatedNvmeofServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDedicatedNvmeofServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putDedicatedNvmeofServiceNameServiceInfos>>>
    export type PutDedicatedNvmeofServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutDedicatedNvmeofServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutDedicatedNvmeofServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDedicatedNvmeofServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDedicatedNvmeofServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutDedicatedNvmeofServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
 * @summary Ask for the termination of your service
 */
export const postDedicatedNvmeofServiceNameTerminate = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string>(
      {url: `/dedicated/nvmeof/${serviceName}/terminate`, method: 'POST', signal
    },
      options);
    }
  


export const getPostDedicatedNvmeofServiceNameTerminateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameTerminate>>, TError,{serviceName: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameTerminate>>, {serviceName: string}> = (props) => {
          const {serviceName} = props ?? {};

          return  postDedicatedNvmeofServiceNameTerminate(serviceName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDedicatedNvmeofServiceNameTerminateMutationResult = NonNullable<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameTerminate>>>
    
    export type PostDedicatedNvmeofServiceNameTerminateMutationError = unknown

    /**
 * @summary Ask for the termination of your service
 */
export const usePostDedicatedNvmeofServiceNameTerminate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameTerminate>>, TError,{serviceName: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDedicatedNvmeofServiceNameTerminate>>,
        TError,
        {serviceName: string},
        TContext
      > => {

      const mutationOptions = getPostDedicatedNvmeofServiceNameTerminateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

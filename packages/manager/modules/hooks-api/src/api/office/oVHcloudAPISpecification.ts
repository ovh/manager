/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetLicenseOfficeParams,
  GetLicenseOfficeServiceNameUsageStatisticsParams,
  GetLicenseOfficeServiceNameUserParams,
  LicenseOfficeDomainNativeOVH,
  LicenseOfficeOfficeCurrentStatisticsNativeOVH,
  LicenseOfficeOfficeSubscriptionOVH,
  LicenseOfficeOfficeTaskNativeOVH,
  LicenseOfficeOfficeTaskOVH,
  LicenseOfficeOfficeTenantNativeOVH,
  LicenseOfficeOfficeTenantNativeWithIAMOVH,
  LicenseOfficeOfficeTenantPostChangePasswordOVH,
  LicenseOfficeOfficeUserNativeOVH,
  LicenseOfficeOfficeUserNativeUpdateOVH,
  LicenseOfficePostUserNativeOVH,
  LicenseOfficeStatisticOVH,
  PostLicenseOfficeServiceNameSubscriptionBody,
  PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody,
  ServicesServiceOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary List available services
 */
export const getLicenseOffice = (
    params?: GetLicenseOfficeParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/office`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseOfficeQueryKey = (params?: GetLicenseOfficeParams,) => {
    return [`/license/office`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseOfficeQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOffice>>, TError = unknown>(params?: GetLicenseOfficeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOffice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOffice>>> = ({ signal }) => getLicenseOffice(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOffice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOffice>>>
export type GetLicenseOfficeQueryError = unknown


export function useGetLicenseOffice<TData = Awaited<ReturnType<typeof getLicenseOffice>>, TError = unknown>(
 params: undefined |  GetLicenseOfficeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOffice>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOffice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOffice<TData = Awaited<ReturnType<typeof getLicenseOffice>>, TError = unknown>(
 params?: GetLicenseOfficeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOffice>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOffice>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOffice<TData = Awaited<ReturnType<typeof getLicenseOffice>>, TError = unknown>(
 params?: GetLicenseOfficeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOffice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseOffice<TData = Awaited<ReturnType<typeof getLicenseOffice>>, TError = unknown>(
 params?: GetLicenseOfficeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOffice>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseOfficeServiceName = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTenantNativeWithIAMOVH>(
      {url: `/license/office/${serviceName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameQueryKey = (serviceName: string,) => {
    return [`/license/office/${serviceName}`] as const;
    }

    
export const getGetLicenseOfficeServiceNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>> = ({ signal }) => getLicenseOfficeServiceName(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>>
export type GetLicenseOfficeServiceNameQueryError = unknown


export function useGetLicenseOfficeServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficeServiceName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify the office service
 */
export const putLicenseOfficeServiceName = (
    serviceName: string,
    licenseOfficeOfficeTenantNativeOVH: NonReadonly<LicenseOfficeOfficeTenantNativeOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/office/${serviceName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficeOfficeTenantNativeOVH
    },
      options);
    }
  


export const getPutLicenseOfficeServiceNameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseOfficeOfficeTenantNativeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseOfficeOfficeTenantNativeOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseOfficeServiceName>>, {serviceName: string;data: NonReadonly<LicenseOfficeOfficeTenantNativeOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseOfficeServiceName(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseOfficeServiceNameMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseOfficeServiceName>>>
    export type PutLicenseOfficeServiceNameMutationBody = NonReadonly<LicenseOfficeOfficeTenantNativeOVH>
    export type PutLicenseOfficeServiceNameMutationError = unknown

    /**
 * @summary Modify the office service
 */
export const usePutLicenseOfficeServiceName = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceName>>, TError,{serviceName: string;data: NonReadonly<LicenseOfficeOfficeTenantNativeOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseOfficeServiceName>>,
        TError,
        {serviceName: string;data: NonReadonly<LicenseOfficeOfficeTenantNativeOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseOfficeServiceNameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the current total available quantity as well as current usage for each existing subscription
 */
export const getLicenseOfficeServiceNameCurrentSubscriptionsUsages = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeStatisticOVH[]>(
      {url: `/license/office/${serviceName}/currentSubscriptionsUsages`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameCurrentSubscriptionsUsagesQueryKey = (serviceName: string,) => {
    return [`/license/office/${serviceName}/currentSubscriptionsUsages`] as const;
    }

    
export const getGetLicenseOfficeServiceNameCurrentSubscriptionsUsagesQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameCurrentSubscriptionsUsagesQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>> = ({ signal }) => getLicenseOfficeServiceNameCurrentSubscriptionsUsages(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameCurrentSubscriptionsUsagesQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>>
export type GetLicenseOfficeServiceNameCurrentSubscriptionsUsagesQueryError = unknown


export function useGetLicenseOfficeServiceNameCurrentSubscriptionsUsages<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameCurrentSubscriptionsUsages<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameCurrentSubscriptionsUsages<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current total available quantity as well as current usage for each existing subscription
 */

export function useGetLicenseOfficeServiceNameCurrentSubscriptionsUsages<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameCurrentSubscriptionsUsages>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameCurrentSubscriptionsUsagesQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List available services
 */
export const getLicenseOfficeServiceNameDomain = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/office/${serviceName}/domain`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameDomainQueryKey = (serviceName: string,) => {
    return [`/license/office/${serviceName}/domain`] as const;
    }

    
export const getGetLicenseOfficeServiceNameDomainQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameDomainQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>> = ({ signal }) => getLicenseOfficeServiceNameDomain(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameDomainQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>>
export type GetLicenseOfficeServiceNameDomainQueryError = unknown


export function useGetLicenseOfficeServiceNameDomain<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameDomain<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameDomain<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List available services
 */

export function useGetLicenseOfficeServiceNameDomain<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomain>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameDomainQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseOfficeServiceNameDomainDomainName = (
    serviceName: string,
    domainName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeDomainNativeOVH>(
      {url: `/license/office/${serviceName}/domain/${domainName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameDomainDomainNameQueryKey = (serviceName: string,
    domainName: string,) => {
    return [`/license/office/${serviceName}/domain/${domainName}`] as const;
    }

    
export const getGetLicenseOfficeServiceNameDomainDomainNameQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError = unknown>(serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameDomainDomainNameQueryKey(serviceName,domainName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>> = ({ signal }) => getLicenseOfficeServiceNameDomainDomainName(serviceName,domainName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && domainName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameDomainDomainNameQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>>
export type GetLicenseOfficeServiceNameDomainDomainNameQueryError = unknown


export function useGetLicenseOfficeServiceNameDomainDomainName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameDomainDomainName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameDomainDomainName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficeServiceNameDomainDomainName<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError = unknown>(
 serviceName: string,
    domainName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameDomainDomainName>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameDomainDomainNameQueryOptions(serviceName,domainName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List pending task
 */
export const getLicenseOfficeServiceNamePendingTask = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/office/${serviceName}/pendingTask`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNamePendingTaskQueryKey = (serviceName: string,) => {
    return [`/license/office/${serviceName}/pendingTask`] as const;
    }

    
export const getGetLicenseOfficeServiceNamePendingTaskQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNamePendingTaskQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>> = ({ signal }) => getLicenseOfficeServiceNamePendingTask(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNamePendingTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>>
export type GetLicenseOfficeServiceNamePendingTaskQueryError = unknown


export function useGetLicenseOfficeServiceNamePendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNamePendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNamePendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List pending task
 */

export function useGetLicenseOfficeServiceNamePendingTask<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTask>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNamePendingTaskQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get this object properties
 */
export const getLicenseOfficeServiceNamePendingTaskId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskNativeOVH>(
      {url: `/license/office/${serviceName}/pendingTask/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNamePendingTaskIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/license/office/${serviceName}/pendingTask/${id}`] as const;
    }

    
export const getGetLicenseOfficeServiceNamePendingTaskIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNamePendingTaskIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>> = ({ signal }) => getLicenseOfficeServiceNamePendingTaskId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNamePendingTaskIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>>
export type GetLicenseOfficeServiceNamePendingTaskIdQueryError = unknown


export function useGetLicenseOfficeServiceNamePendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNamePendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNamePendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficeServiceNamePendingTaskId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNamePendingTaskId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNamePendingTaskIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service information
 */
export const getLicenseOfficeServiceNameServiceInfos = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ServicesServiceOVH>(
      {url: `/license/office/${serviceName}/serviceInfos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameServiceInfosQueryKey = (serviceName: string,) => {
    return [`/license/office/${serviceName}/serviceInfos`] as const;
    }

    
export const getGetLicenseOfficeServiceNameServiceInfosQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameServiceInfosQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>> = ({ signal }) => getLicenseOfficeServiceNameServiceInfos(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameServiceInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>>
export type GetLicenseOfficeServiceNameServiceInfosQueryError = unknown


export function useGetLicenseOfficeServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service information
 */

export function useGetLicenseOfficeServiceNameServiceInfos<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameServiceInfos>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameServiceInfosQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update service information
 */
export const putLicenseOfficeServiceNameServiceInfos = (
    serviceName: string,
    servicesServiceOVH: NonReadonly<ServicesServiceOVH>,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/office/${serviceName}/serviceInfos`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: servicesServiceOVH
    },
      options);
    }
  


export const getPutLicenseOfficeServiceNameServiceInfosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseOfficeServiceNameServiceInfos>>, {serviceName: string;data: NonReadonly<ServicesServiceOVH>}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  putLicenseOfficeServiceNameServiceInfos(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseOfficeServiceNameServiceInfosMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseOfficeServiceNameServiceInfos>>>
    export type PutLicenseOfficeServiceNameServiceInfosMutationBody = NonReadonly<ServicesServiceOVH>
    export type PutLicenseOfficeServiceNameServiceInfosMutationError = unknown

    /**
 * @summary Update service information
 */
export const usePutLicenseOfficeServiceNameServiceInfos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceNameServiceInfos>>, TError,{serviceName: string;data: NonReadonly<ServicesServiceOVH>}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseOfficeServiceNameServiceInfos>>,
        TError,
        {serviceName: string;data: NonReadonly<ServicesServiceOVH>},
        TContext
      > => {

      const mutationOptions = getPutLicenseOfficeServiceNameServiceInfosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Subscriptions associated to this office tenant
 */
export const getLicenseOfficeServiceNameSubscription = (
    serviceName: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/license/office/${serviceName}/subscription`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameSubscriptionQueryKey = (serviceName: string,) => {
    return [`/license/office/${serviceName}/subscription`] as const;
    }

    
export const getGetLicenseOfficeServiceNameSubscriptionQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError = unknown>(serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameSubscriptionQueryKey(serviceName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>> = ({ signal }) => getLicenseOfficeServiceNameSubscription(serviceName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>>
export type GetLicenseOfficeServiceNameSubscriptionQueryError = unknown


export function useGetLicenseOfficeServiceNameSubscription<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameSubscription<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameSubscription<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Subscriptions associated to this office tenant
 */

export function useGetLicenseOfficeServiceNameSubscription<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError = unknown>(
 serviceName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscription>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameSubscriptionQueryOptions(serviceName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a subscription to this tenant
 */
export const postLicenseOfficeServiceNameSubscription = (
    serviceName: string,
    postLicenseOfficeServiceNameSubscriptionBody: PostLicenseOfficeServiceNameSubscriptionBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskOVH>(
      {url: `/license/office/${serviceName}/subscription`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseOfficeServiceNameSubscriptionBody, signal
    },
      options);
    }
  


export const getPostLicenseOfficeServiceNameSubscriptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscription>>, TError,{serviceName: string;data: PostLicenseOfficeServiceNameSubscriptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscription>>, TError,{serviceName: string;data: PostLicenseOfficeServiceNameSubscriptionBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscription>>, {serviceName: string;data: PostLicenseOfficeServiceNameSubscriptionBody}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseOfficeServiceNameSubscription(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficeServiceNameSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscription>>>
    export type PostLicenseOfficeServiceNameSubscriptionMutationBody = PostLicenseOfficeServiceNameSubscriptionBody
    export type PostLicenseOfficeServiceNameSubscriptionMutationError = unknown

    /**
 * @summary Add a subscription to this tenant
 */
export const usePostLicenseOfficeServiceNameSubscription = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscription>>, TError,{serviceName: string;data: PostLicenseOfficeServiceNameSubscriptionBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscription>>,
        TError,
        {serviceName: string;data: PostLicenseOfficeServiceNameSubscriptionBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficeServiceNameSubscriptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a subscription from this tenant
 */
export const deleteLicenseOfficeServiceNameSubscriptionId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskOVH>(
      {url: `/license/office/${serviceName}/subscription/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLicenseOfficeServiceNameSubscriptionIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameSubscriptionId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameSubscriptionId>>, TError,{serviceName: string;id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameSubscriptionId>>, {serviceName: string;id: number}> = (props) => {
          const {serviceName,id} = props ?? {};

          return  deleteLicenseOfficeServiceNameSubscriptionId(serviceName,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLicenseOfficeServiceNameSubscriptionIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameSubscriptionId>>>
    
    export type DeleteLicenseOfficeServiceNameSubscriptionIdMutationError = unknown

    /**
 * @summary Delete a subscription from this tenant
 */
export const useDeleteLicenseOfficeServiceNameSubscriptionId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameSubscriptionId>>, TError,{serviceName: string;id: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameSubscriptionId>>,
        TError,
        {serviceName: string;id: number},
        TContext
      > => {

      const mutationOptions = getDeleteLicenseOfficeServiceNameSubscriptionIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get this object properties
 */
export const getLicenseOfficeServiceNameSubscriptionId = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeSubscriptionOVH>(
      {url: `/license/office/${serviceName}/subscription/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameSubscriptionIdQueryKey = (serviceName: string,
    id: number,) => {
    return [`/license/office/${serviceName}/subscription/${id}`] as const;
    }

    
export const getGetLicenseOfficeServiceNameSubscriptionIdQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameSubscriptionIdQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>> = ({ signal }) => getLicenseOfficeServiceNameSubscriptionId(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameSubscriptionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>>
export type GetLicenseOfficeServiceNameSubscriptionIdQueryError = unknown


export function useGetLicenseOfficeServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get this object properties
 */

export function useGetLicenseOfficeServiceNameSubscriptionId<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameSubscriptionIdQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Change the quantity of seats in the subscription
 */
export const postLicenseOfficeServiceNameSubscriptionIdChangeQuantity = (
    serviceName: string,
    id: number,
    postLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody: PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskOVH>(
      {url: `/license/office/${serviceName}/subscription/${id}/changeQuantity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody, signal
    },
      options);
    }
  


export const getPostLicenseOfficeServiceNameSubscriptionIdChangeQuantityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscriptionIdChangeQuantity>>, TError,{serviceName: string;id: number;data: PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscriptionIdChangeQuantity>>, TError,{serviceName: string;id: number;data: PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscriptionIdChangeQuantity>>, {serviceName: string;id: number;data: PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody}> = (props) => {
          const {serviceName,id,data} = props ?? {};

          return  postLicenseOfficeServiceNameSubscriptionIdChangeQuantity(serviceName,id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscriptionIdChangeQuantity>>>
    export type PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityMutationBody = PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody
    export type PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityMutationError = unknown

    /**
 * @summary Change the quantity of seats in the subscription
 */
export const usePostLicenseOfficeServiceNameSubscriptionIdChangeQuantity = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscriptionIdChangeQuantity>>, TError,{serviceName: string;id: number;data: PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficeServiceNameSubscriptionIdChangeQuantity>>,
        TError,
        {serviceName: string;id: number;data: PostLicenseOfficeServiceNameSubscriptionIdChangeQuantityBody},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficeServiceNameSubscriptionIdChangeQuantityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get the current total available quantity as well as current usage
 */
export const getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics = (
    serviceName: string,
    id: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeStatisticOVH>(
      {url: `/license/office/${serviceName}/subscription/${id}/currentStatistics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameSubscriptionIdCurrentStatisticsQueryKey = (serviceName: string,
    id: number,) => {
    return [`/license/office/${serviceName}/subscription/${id}/currentStatistics`] as const;
    }

    
export const getGetLicenseOfficeServiceNameSubscriptionIdCurrentStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError = unknown>(serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameSubscriptionIdCurrentStatisticsQueryKey(serviceName,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>> = ({ signal }) => getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics(serviceName,id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameSubscriptionIdCurrentStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>>
export type GetLicenseOfficeServiceNameSubscriptionIdCurrentStatisticsQueryError = unknown


export function useGetLicenseOfficeServiceNameSubscriptionIdCurrentStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError = unknown>(
 serviceName: string,
    id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameSubscriptionIdCurrentStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameSubscriptionIdCurrentStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the current total available quantity as well as current usage
 */

export function useGetLicenseOfficeServiceNameSubscriptionIdCurrentStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError = unknown>(
 serviceName: string,
    id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameSubscriptionIdCurrentStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameSubscriptionIdCurrentStatisticsQueryOptions(serviceName,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get day-to-day statistics of license usage and availability
 */
export const getLicenseOfficeServiceNameUsageStatistics = (
    serviceName: string,
    params?: GetLicenseOfficeServiceNameUsageStatisticsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeCurrentStatisticsNativeOVH[]>(
      {url: `/license/office/${serviceName}/usageStatistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameUsageStatisticsQueryKey = (serviceName: string,
    params?: GetLicenseOfficeServiceNameUsageStatisticsParams,) => {
    return [`/license/office/${serviceName}/usageStatistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseOfficeServiceNameUsageStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError = unknown>(serviceName: string,
    params?: GetLicenseOfficeServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameUsageStatisticsQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>> = ({ signal }) => getLicenseOfficeServiceNameUsageStatistics(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameUsageStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>>
export type GetLicenseOfficeServiceNameUsageStatisticsQueryError = unknown


export function useGetLicenseOfficeServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseOfficeServiceNameUsageStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficeServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficeServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get day-to-day statistics of license usage and availability
 */

export function useGetLicenseOfficeServiceNameUsageStatistics<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficeServiceNameUsageStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUsageStatistics>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameUsageStatisticsQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get accounts associated to this office tenant
 */
export const getLicenseOfficeServiceNameUser = (
    serviceName: string,
    params?: GetLicenseOfficeServiceNameUserParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<string[]>(
      {url: `/license/office/${serviceName}/user`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameUserQueryKey = (serviceName: string,
    params?: GetLicenseOfficeServiceNameUserParams,) => {
    return [`/license/office/${serviceName}/user`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLicenseOfficeServiceNameUserQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError = unknown>(serviceName: string,
    params?: GetLicenseOfficeServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameUserQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>> = ({ signal }) => getLicenseOfficeServiceNameUser(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameUserQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>>
export type GetLicenseOfficeServiceNameUserQueryError = unknown


export function useGetLicenseOfficeServiceNameUser<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params: undefined |  GetLicenseOfficeServiceNameUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameUser<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficeServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameUser<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficeServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get accounts associated to this office tenant
 */

export function useGetLicenseOfficeServiceNameUser<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError = unknown>(
 serviceName: string,
    params?: GetLicenseOfficeServiceNameUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUser>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameUserQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new office user
 */
export const postLicenseOfficeServiceNameUser = (
    serviceName: string,
    licenseOfficePostUserNativeOVH: LicenseOfficePostUserNativeOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskNativeOVH>(
      {url: `/license/office/${serviceName}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficePostUserNativeOVH, signal
    },
      options);
    }
  


export const getPostLicenseOfficeServiceNameUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUser>>, TError,{serviceName: string;data: LicenseOfficePostUserNativeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUser>>, TError,{serviceName: string;data: LicenseOfficePostUserNativeOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUser>>, {serviceName: string;data: LicenseOfficePostUserNativeOVH}> = (props) => {
          const {serviceName,data} = props ?? {};

          return  postLicenseOfficeServiceNameUser(serviceName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficeServiceNameUserMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUser>>>
    export type PostLicenseOfficeServiceNameUserMutationBody = LicenseOfficePostUserNativeOVH
    export type PostLicenseOfficeServiceNameUserMutationError = unknown

    /**
 * @summary Create new office user
 */
export const usePostLicenseOfficeServiceNameUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUser>>, TError,{serviceName: string;data: LicenseOfficePostUserNativeOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficeServiceNameUser>>,
        TError,
        {serviceName: string;data: LicenseOfficePostUserNativeOVH},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficeServiceNameUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete existing office user
 */
export const deleteLicenseOfficeServiceNameUserActivationEmail = (
    serviceName: string,
    activationEmail: string,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskNativeOVH>(
      {url: `/license/office/${serviceName}/user/${activationEmail}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLicenseOfficeServiceNameUserActivationEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameUserActivationEmail>>, TError,{serviceName: string;activationEmail: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameUserActivationEmail>>, TError,{serviceName: string;activationEmail: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameUserActivationEmail>>, {serviceName: string;activationEmail: string}> = (props) => {
          const {serviceName,activationEmail} = props ?? {};

          return  deleteLicenseOfficeServiceNameUserActivationEmail(serviceName,activationEmail,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLicenseOfficeServiceNameUserActivationEmailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameUserActivationEmail>>>
    
    export type DeleteLicenseOfficeServiceNameUserActivationEmailMutationError = unknown

    /**
 * @summary Delete existing office user
 */
export const useDeleteLicenseOfficeServiceNameUserActivationEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameUserActivationEmail>>, TError,{serviceName: string;activationEmail: string}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLicenseOfficeServiceNameUserActivationEmail>>,
        TError,
        {serviceName: string;activationEmail: string},
        TContext
      > => {

      const mutationOptions = getDeleteLicenseOfficeServiceNameUserActivationEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get an office user
 */
export const getLicenseOfficeServiceNameUserActivationEmail = (
    serviceName: string,
    activationEmail: string,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeUserNativeOVH>(
      {url: `/license/office/${serviceName}/user/${activationEmail}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLicenseOfficeServiceNameUserActivationEmailQueryKey = (serviceName: string,
    activationEmail: string,) => {
    return [`/license/office/${serviceName}/user/${activationEmail}`] as const;
    }

    
export const getGetLicenseOfficeServiceNameUserActivationEmailQueryOptions = <TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError = unknown>(serviceName: string,
    activationEmail: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicenseOfficeServiceNameUserActivationEmailQueryKey(serviceName,activationEmail);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>> = ({ signal }) => getLicenseOfficeServiceNameUserActivationEmail(serviceName,activationEmail, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && activationEmail), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetLicenseOfficeServiceNameUserActivationEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>>
export type GetLicenseOfficeServiceNameUserActivationEmailQueryError = unknown


export function useGetLicenseOfficeServiceNameUserActivationEmail<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError = unknown>(
 serviceName: string,
    activationEmail: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameUserActivationEmail<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError = unknown>(
 serviceName: string,
    activationEmail: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetLicenseOfficeServiceNameUserActivationEmail<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError = unknown>(
 serviceName: string,
    activationEmail: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an office user
 */

export function useGetLicenseOfficeServiceNameUserActivationEmail<TData = Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError = unknown>(
 serviceName: string,
    activationEmail: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenseOfficeServiceNameUserActivationEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetLicenseOfficeServiceNameUserActivationEmailQueryOptions(serviceName,activationEmail,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Modify the office user
 */
export const putLicenseOfficeServiceNameUserActivationEmail = (
    serviceName: string,
    activationEmail: string,
    licenseOfficeOfficeUserNativeUpdateOVH: LicenseOfficeOfficeUserNativeUpdateOVH,
 options?: SecondParameter<typeof customInstanceV6>,) => {
      
      
      return customInstanceV6<void>(
      {url: `/license/office/${serviceName}/user/${activationEmail}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficeOfficeUserNativeUpdateOVH
    },
      options);
    }
  


export const getPutLicenseOfficeServiceNameUserActivationEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceNameUserActivationEmail>>, TError,{serviceName: string;activationEmail: string;data: LicenseOfficeOfficeUserNativeUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceNameUserActivationEmail>>, TError,{serviceName: string;activationEmail: string;data: LicenseOfficeOfficeUserNativeUpdateOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putLicenseOfficeServiceNameUserActivationEmail>>, {serviceName: string;activationEmail: string;data: LicenseOfficeOfficeUserNativeUpdateOVH}> = (props) => {
          const {serviceName,activationEmail,data} = props ?? {};

          return  putLicenseOfficeServiceNameUserActivationEmail(serviceName,activationEmail,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutLicenseOfficeServiceNameUserActivationEmailMutationResult = NonNullable<Awaited<ReturnType<typeof putLicenseOfficeServiceNameUserActivationEmail>>>
    export type PutLicenseOfficeServiceNameUserActivationEmailMutationBody = LicenseOfficeOfficeUserNativeUpdateOVH
    export type PutLicenseOfficeServiceNameUserActivationEmailMutationError = unknown

    /**
 * @summary Modify the office user
 */
export const usePutLicenseOfficeServiceNameUserActivationEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putLicenseOfficeServiceNameUserActivationEmail>>, TError,{serviceName: string;activationEmail: string;data: LicenseOfficeOfficeUserNativeUpdateOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof putLicenseOfficeServiceNameUserActivationEmail>>,
        TError,
        {serviceName: string;activationEmail: string;data: LicenseOfficeOfficeUserNativeUpdateOVH},
        TContext
      > => {

      const mutationOptions = getPutLicenseOfficeServiceNameUserActivationEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Change password
 */
export const postLicenseOfficeServiceNameUserActivationEmailChangePassword = (
    serviceName: string,
    activationEmail: string,
    licenseOfficeOfficeTenantPostChangePasswordOVH: LicenseOfficeOfficeTenantPostChangePasswordOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<LicenseOfficeOfficeTaskNativeOVH>(
      {url: `/license/office/${serviceName}/user/${activationEmail}/changePassword`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: licenseOfficeOfficeTenantPostChangePasswordOVH, signal
    },
      options);
    }
  


export const getPostLicenseOfficeServiceNameUserActivationEmailChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUserActivationEmailChangePassword>>, TError,{serviceName: string;activationEmail: string;data: LicenseOfficeOfficeTenantPostChangePasswordOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUserActivationEmailChangePassword>>, TError,{serviceName: string;activationEmail: string;data: LicenseOfficeOfficeTenantPostChangePasswordOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUserActivationEmailChangePassword>>, {serviceName: string;activationEmail: string;data: LicenseOfficeOfficeTenantPostChangePasswordOVH}> = (props) => {
          const {serviceName,activationEmail,data} = props ?? {};

          return  postLicenseOfficeServiceNameUserActivationEmailChangePassword(serviceName,activationEmail,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLicenseOfficeServiceNameUserActivationEmailChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUserActivationEmailChangePassword>>>
    export type PostLicenseOfficeServiceNameUserActivationEmailChangePasswordMutationBody = LicenseOfficeOfficeTenantPostChangePasswordOVH
    export type PostLicenseOfficeServiceNameUserActivationEmailChangePasswordMutationError = unknown

    /**
 * @summary Change password
 */
export const usePostLicenseOfficeServiceNameUserActivationEmailChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLicenseOfficeServiceNameUserActivationEmailChangePassword>>, TError,{serviceName: string;activationEmail: string;data: LicenseOfficeOfficeTenantPostChangePasswordOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLicenseOfficeServiceNameUserActivationEmailChangePassword>>,
        TError,
        {serviceName: string;activationEmail: string;data: LicenseOfficeOfficeTenantPostChangePasswordOVH},
        TContext
      > => {

      const mutationOptions = getPostLicenseOfficeServiceNameUserActivationEmailChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

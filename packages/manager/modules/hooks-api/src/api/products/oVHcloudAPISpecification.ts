/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetProductsGlobalRecommenderRecommendationsParams,
  GetProductsPartnersPlansParams,
  ProductsGlobalRecommenderRecommendationOVH,
  ProductsListItemOVH,
  ProductsPartnersPlanOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get recommendations
 */
export const getProductsGlobalRecommenderRecommendations = (
    params: GetProductsGlobalRecommenderRecommendationsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ProductsGlobalRecommenderRecommendationOVH[]>(
      {url: `/products/global-recommender/recommendations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetProductsGlobalRecommenderRecommendationsQueryKey = (params: GetProductsGlobalRecommenderRecommendationsParams,) => {
    return [`/products/global-recommender/recommendations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsGlobalRecommenderRecommendationsQueryOptions = <TData = Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError = unknown>(params: GetProductsGlobalRecommenderRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsGlobalRecommenderRecommendationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>> = ({ signal }) => getProductsGlobalRecommenderRecommendations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductsGlobalRecommenderRecommendationsQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>>
export type GetProductsGlobalRecommenderRecommendationsQueryError = unknown


export function useGetProductsGlobalRecommenderRecommendations<TData = Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError = unknown>(
 params: GetProductsGlobalRecommenderRecommendationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsGlobalRecommenderRecommendations<TData = Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError = unknown>(
 params: GetProductsGlobalRecommenderRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsGlobalRecommenderRecommendations<TData = Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError = unknown>(
 params: GetProductsGlobalRecommenderRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get recommendations
 */

export function useGetProductsGlobalRecommenderRecommendations<TData = Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError = unknown>(
 params: GetProductsGlobalRecommenderRecommendationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsGlobalRecommenderRecommendations>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductsGlobalRecommenderRecommendationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of the products
 */
export const getProductsList = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ProductsListItemOVH[]>(
      {url: `/products/list`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProductsListQueryKey = () => {
    return [`/products/list`] as const;
    }

    
export const getGetProductsListQueryOptions = <TData = Awaited<ReturnType<typeof getProductsList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsList>>> = ({ signal }) => getProductsList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductsListQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsList>>>
export type GetProductsListQueryError = unknown


export function useGetProductsList<TData = Awaited<ReturnType<typeof getProductsList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsList<TData = Awaited<ReturnType<typeof getProductsList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsList>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsList<TData = Awaited<ReturnType<typeof getProductsList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of the products
 */

export function useGetProductsList<TData = Awaited<ReturnType<typeof getProductsList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsList>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductsListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get specific plancode for users with partner level
 */
export const getProductsPartnersPlans = (
    params: GetProductsPartnersPlansParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<ProductsPartnersPlanOVH[]>(
      {url: `/products/partners/plans`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetProductsPartnersPlansQueryKey = (params: GetProductsPartnersPlansParams,) => {
    return [`/products/partners/plans`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsPartnersPlansQueryOptions = <TData = Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError = unknown>(params: GetProductsPartnersPlansParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsPartnersPlansQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsPartnersPlans>>> = ({ signal }) => getProductsPartnersPlans(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductsPartnersPlansQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsPartnersPlans>>>
export type GetProductsPartnersPlansQueryError = unknown


export function useGetProductsPartnersPlans<TData = Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError = unknown>(
 params: GetProductsPartnersPlansParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsPartnersPlans>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsPartnersPlans<TData = Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError = unknown>(
 params: GetProductsPartnersPlansParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsPartnersPlans>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsPartnersPlans<TData = Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError = unknown>(
 params: GetProductsPartnersPlansParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get specific plancode for users with partner level
 */

export function useGetProductsPartnersPlans<TData = Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError = unknown>(
 params: GetProductsPartnersPlansParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsPartnersPlans>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductsPartnersPlansQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





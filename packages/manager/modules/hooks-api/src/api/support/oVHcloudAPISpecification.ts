/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OVHcloud API specification
 * Specification for OVHcloud API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSupportIssueTypes400,
  GetSupportIssueTypes404,
  GetSupportIssueTypes500,
  GetSupportIssueTypesParams,
  GetSupportServiceTypes500,
  GetSupportTicketsParams,
  PostSupportTickets400,
  PostSupportTickets404,
  PostSupportTickets500,
  PostSupportTicketsCreateBody,
  PostSupportTicketsTicketIdReopenBody,
  PostSupportTicketsTicketIdReplyBody,
  PostSupportTicketsTicketIdScoreBody,
  SupportIssueTypeOVH,
  SupportMessageOVH,
  SupportNewMessageInfoOVH,
  SupportNewTicketConfirmationOVH,
  SupportPrequalifiedTicketOVH,
  SupportServiceTypeOVH,
  SupportTicketOVH
} from './oVHcloudAPISpecification.schemas'
import { customInstanceV6 } from '../../../custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get support issue types node
 */
export const getSupportIssueTypes = (
    params: GetSupportIssueTypesParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportIssueTypeOVH[]>(
      {url: `/support/issueTypes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSupportIssueTypesQueryKey = (params: GetSupportIssueTypesParams,) => {
    return [`/support/issueTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSupportIssueTypesQueryOptions = <TData = Awaited<ReturnType<typeof getSupportIssueTypes>>, TError = GetSupportIssueTypes400 | GetSupportIssueTypes404 | GetSupportIssueTypes500>(params: GetSupportIssueTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportIssueTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportIssueTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportIssueTypes>>> = ({ signal }) => getSupportIssueTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportIssueTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportIssueTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportIssueTypes>>>
export type GetSupportIssueTypesQueryError = GetSupportIssueTypes400 | GetSupportIssueTypes404 | GetSupportIssueTypes500


export function useGetSupportIssueTypes<TData = Awaited<ReturnType<typeof getSupportIssueTypes>>, TError = GetSupportIssueTypes400 | GetSupportIssueTypes404 | GetSupportIssueTypes500>(
 params: GetSupportIssueTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportIssueTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportIssueTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportIssueTypes<TData = Awaited<ReturnType<typeof getSupportIssueTypes>>, TError = GetSupportIssueTypes400 | GetSupportIssueTypes404 | GetSupportIssueTypes500>(
 params: GetSupportIssueTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportIssueTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportIssueTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportIssueTypes<TData = Awaited<ReturnType<typeof getSupportIssueTypes>>, TError = GetSupportIssueTypes400 | GetSupportIssueTypes404 | GetSupportIssueTypes500>(
 params: GetSupportIssueTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportIssueTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get support issue types node
 */

export function useGetSupportIssueTypes<TData = Awaited<ReturnType<typeof getSupportIssueTypes>>, TError = GetSupportIssueTypes400 | GetSupportIssueTypes404 | GetSupportIssueTypes500>(
 params: GetSupportIssueTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportIssueTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportIssueTypesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get service types
 */
export const getSupportServiceTypes = (
    
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportServiceTypeOVH[]>(
      {url: `/support/serviceTypes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSupportServiceTypesQueryKey = () => {
    return [`/support/serviceTypes`] as const;
    }

    
export const getGetSupportServiceTypesQueryOptions = <TData = Awaited<ReturnType<typeof getSupportServiceTypes>>, TError = GetSupportServiceTypes500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportServiceTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportServiceTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportServiceTypes>>> = ({ signal }) => getSupportServiceTypes(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportServiceTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportServiceTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportServiceTypes>>>
export type GetSupportServiceTypesQueryError = GetSupportServiceTypes500


export function useGetSupportServiceTypes<TData = Awaited<ReturnType<typeof getSupportServiceTypes>>, TError = GetSupportServiceTypes500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportServiceTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportServiceTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportServiceTypes<TData = Awaited<ReturnType<typeof getSupportServiceTypes>>, TError = GetSupportServiceTypes500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportServiceTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportServiceTypes>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportServiceTypes<TData = Awaited<ReturnType<typeof getSupportServiceTypes>>, TError = GetSupportServiceTypes500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportServiceTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get service types
 */

export function useGetSupportServiceTypes<TData = Awaited<ReturnType<typeof getSupportServiceTypes>>, TError = GetSupportServiceTypes500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportServiceTypes>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportServiceTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List support tickets identifiers for this service
 */
export const getSupportTickets = (
    params?: GetSupportTicketsParams,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<number[]>(
      {url: `/support/tickets`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSupportTicketsQueryKey = (params?: GetSupportTicketsParams,) => {
    return [`/support/tickets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSupportTicketsQueryOptions = <TData = Awaited<ReturnType<typeof getSupportTickets>>, TError = unknown>(params?: GetSupportTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTickets>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportTicketsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportTickets>>> = ({ signal }) => getSupportTickets(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportTickets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportTickets>>>
export type GetSupportTicketsQueryError = unknown


export function useGetSupportTickets<TData = Awaited<ReturnType<typeof getSupportTickets>>, TError = unknown>(
 params: undefined |  GetSupportTicketsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTickets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTickets>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTickets<TData = Awaited<ReturnType<typeof getSupportTickets>>, TError = unknown>(
 params?: GetSupportTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTickets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTickets>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTickets<TData = Awaited<ReturnType<typeof getSupportTickets>>, TError = unknown>(
 params?: GetSupportTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTickets>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List support tickets identifiers for this service
 */

export function useGetSupportTickets<TData = Awaited<ReturnType<typeof getSupportTickets>>, TError = unknown>(
 params?: GetSupportTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTickets>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportTicketsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new support ticket
 */
export const postSupportTickets = (
    supportPrequalifiedTicketOVH: SupportPrequalifiedTicketOVH,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportNewTicketConfirmationOVH>(
      {url: `/support/tickets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: supportPrequalifiedTicketOVH, signal
    },
      options);
    }
  


export const getPostSupportTicketsMutationOptions = <TError = PostSupportTickets400 | PostSupportTickets404 | PostSupportTickets500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTickets>>, TError,{data: SupportPrequalifiedTicketOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSupportTickets>>, TError,{data: SupportPrequalifiedTicketOVH}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupportTickets>>, {data: SupportPrequalifiedTicketOVH}> = (props) => {
          const {data} = props ?? {};

          return  postSupportTickets(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSupportTicketsMutationResult = NonNullable<Awaited<ReturnType<typeof postSupportTickets>>>
    export type PostSupportTicketsMutationBody = SupportPrequalifiedTicketOVH
    export type PostSupportTicketsMutationError = PostSupportTickets400 | PostSupportTickets404 | PostSupportTickets500

    /**
 * @summary Create a new support ticket
 */
export const usePostSupportTickets = <TError = PostSupportTickets400 | PostSupportTickets404 | PostSupportTickets500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTickets>>, TError,{data: SupportPrequalifiedTicketOVH}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSupportTickets>>,
        TError,
        {data: SupportPrequalifiedTicketOVH},
        TContext
      > => {

      const mutationOptions = getPostSupportTicketsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a new ticket
 */
export const postSupportTicketsCreate = (
    postSupportTicketsCreateBody: PostSupportTicketsCreateBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportNewMessageInfoOVH>(
      {url: `/support/tickets/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSupportTicketsCreateBody, signal
    },
      options);
    }
  


export const getPostSupportTicketsCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsCreate>>, TError,{data: PostSupportTicketsCreateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsCreate>>, TError,{data: PostSupportTicketsCreateBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupportTicketsCreate>>, {data: PostSupportTicketsCreateBody}> = (props) => {
          const {data} = props ?? {};

          return  postSupportTicketsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSupportTicketsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postSupportTicketsCreate>>>
    export type PostSupportTicketsCreateMutationBody = PostSupportTicketsCreateBody
    export type PostSupportTicketsCreateMutationError = unknown

    /**
 * @summary Create a new ticket
 */
export const usePostSupportTicketsCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsCreate>>, TError,{data: PostSupportTicketsCreateBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSupportTicketsCreate>>,
        TError,
        {data: PostSupportTicketsCreateBody},
        TContext
      > => {

      const mutationOptions = getPostSupportTicketsCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get ticket
 */
export const getSupportTicketsTicketId = (
    ticketId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportTicketOVH>(
      {url: `/support/tickets/${ticketId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSupportTicketsTicketIdQueryKey = (ticketId: number,) => {
    return [`/support/tickets/${ticketId}`] as const;
    }

    
export const getGetSupportTicketsTicketIdQueryOptions = <TData = Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError = unknown>(ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportTicketsTicketIdQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportTicketsTicketId>>> = ({ signal }) => getSupportTicketsTicketId(ticketId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportTicketsTicketIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportTicketsTicketId>>>
export type GetSupportTicketsTicketIdQueryError = unknown


export function useGetSupportTicketsTicketId<TData = Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError = unknown>(
 ticketId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTicketsTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTicketsTicketId<TData = Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTicketsTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTicketsTicketId<TData = Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get ticket
 */

export function useGetSupportTicketsTicketId<TData = Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketId>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportTicketsTicketIdQueryOptions(ticketId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Checks whether ticket can be scored
 */
export const getSupportTicketsTicketIdCanBeScored = (
    ticketId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<boolean>(
      {url: `/support/tickets/${ticketId}/canBeScored`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSupportTicketsTicketIdCanBeScoredQueryKey = (ticketId: number,) => {
    return [`/support/tickets/${ticketId}/canBeScored`] as const;
    }

    
export const getGetSupportTicketsTicketIdCanBeScoredQueryOptions = <TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError = unknown>(ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportTicketsTicketIdCanBeScoredQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>> = ({ signal }) => getSupportTicketsTicketIdCanBeScored(ticketId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportTicketsTicketIdCanBeScoredQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>>
export type GetSupportTicketsTicketIdCanBeScoredQueryError = unknown


export function useGetSupportTicketsTicketIdCanBeScored<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError = unknown>(
 ticketId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTicketsTicketIdCanBeScored<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTicketsTicketIdCanBeScored<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Checks whether ticket can be scored
 */

export function useGetSupportTicketsTicketIdCanBeScored<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdCanBeScored>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportTicketsTicketIdCanBeScoredQueryOptions(ticketId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Close ticket
 */
export const postSupportTicketsTicketIdClose = (
    ticketId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/support/tickets/${ticketId}/close`, method: 'POST', signal
    },
      options);
    }
  


export const getPostSupportTicketsTicketIdCloseMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdClose>>, TError,{ticketId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdClose>>, TError,{ticketId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupportTicketsTicketIdClose>>, {ticketId: number}> = (props) => {
          const {ticketId} = props ?? {};

          return  postSupportTicketsTicketIdClose(ticketId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSupportTicketsTicketIdCloseMutationResult = NonNullable<Awaited<ReturnType<typeof postSupportTicketsTicketIdClose>>>
    
    export type PostSupportTicketsTicketIdCloseMutationError = unknown

    /**
 * @summary Close ticket
 */
export const usePostSupportTicketsTicketIdClose = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdClose>>, TError,{ticketId: number}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSupportTicketsTicketIdClose>>,
        TError,
        {ticketId: number},
        TContext
      > => {

      const mutationOptions = getPostSupportTicketsTicketIdCloseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get ticket messages
 */
export const getSupportTicketsTicketIdMessages = (
    ticketId: number,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<SupportMessageOVH[]>(
      {url: `/support/tickets/${ticketId}/messages`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSupportTicketsTicketIdMessagesQueryKey = (ticketId: number,) => {
    return [`/support/tickets/${ticketId}/messages`] as const;
    }

    
export const getGetSupportTicketsTicketIdMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError = unknown>(ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportTicketsTicketIdMessagesQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>> = ({ signal }) => getSupportTicketsTicketIdMessages(ticketId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportTicketsTicketIdMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>>
export type GetSupportTicketsTicketIdMessagesQueryError = unknown


export function useGetSupportTicketsTicketIdMessages<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError = unknown>(
 ticketId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTicketsTicketIdMessages<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportTicketsTicketIdMessages<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get ticket messages
 */

export function useGetSupportTicketsTicketIdMessages<TData = Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError = unknown>(
 ticketId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportTicketsTicketIdMessages>>, TError, TData>>, request?: SecondParameter<typeof customInstanceV6>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportTicketsTicketIdMessagesQueryOptions(ticketId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Reopen a ticket
 */
export const postSupportTicketsTicketIdReopen = (
    ticketId: number,
    postSupportTicketsTicketIdReopenBody: PostSupportTicketsTicketIdReopenBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/support/tickets/${ticketId}/reopen`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSupportTicketsTicketIdReopenBody, signal
    },
      options);
    }
  


export const getPostSupportTicketsTicketIdReopenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdReopen>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdReopenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdReopen>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdReopenBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupportTicketsTicketIdReopen>>, {ticketId: number;data: PostSupportTicketsTicketIdReopenBody}> = (props) => {
          const {ticketId,data} = props ?? {};

          return  postSupportTicketsTicketIdReopen(ticketId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSupportTicketsTicketIdReopenMutationResult = NonNullable<Awaited<ReturnType<typeof postSupportTicketsTicketIdReopen>>>
    export type PostSupportTicketsTicketIdReopenMutationBody = PostSupportTicketsTicketIdReopenBody
    export type PostSupportTicketsTicketIdReopenMutationError = unknown

    /**
 * @summary Reopen a ticket
 */
export const usePostSupportTicketsTicketIdReopen = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdReopen>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdReopenBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSupportTicketsTicketIdReopen>>,
        TError,
        {ticketId: number;data: PostSupportTicketsTicketIdReopenBody},
        TContext
      > => {

      const mutationOptions = getPostSupportTicketsTicketIdReopenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Reply to ticket
 */
export const postSupportTicketsTicketIdReply = (
    ticketId: number,
    postSupportTicketsTicketIdReplyBody: PostSupportTicketsTicketIdReplyBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/support/tickets/${ticketId}/reply`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSupportTicketsTicketIdReplyBody, signal
    },
      options);
    }
  


export const getPostSupportTicketsTicketIdReplyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdReply>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdReplyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdReply>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdReplyBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupportTicketsTicketIdReply>>, {ticketId: number;data: PostSupportTicketsTicketIdReplyBody}> = (props) => {
          const {ticketId,data} = props ?? {};

          return  postSupportTicketsTicketIdReply(ticketId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSupportTicketsTicketIdReplyMutationResult = NonNullable<Awaited<ReturnType<typeof postSupportTicketsTicketIdReply>>>
    export type PostSupportTicketsTicketIdReplyMutationBody = PostSupportTicketsTicketIdReplyBody
    export type PostSupportTicketsTicketIdReplyMutationError = unknown

    /**
 * @summary Reply to ticket
 */
export const usePostSupportTicketsTicketIdReply = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdReply>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdReplyBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSupportTicketsTicketIdReply>>,
        TError,
        {ticketId: number;data: PostSupportTicketsTicketIdReplyBody},
        TContext
      > => {

      const mutationOptions = getPostSupportTicketsTicketIdReplyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Set ticket score
 */
export const postSupportTicketsTicketIdScore = (
    ticketId: number,
    postSupportTicketsTicketIdScoreBody: PostSupportTicketsTicketIdScoreBody,
 options?: SecondParameter<typeof customInstanceV6>,signal?: AbortSignal
) => {
      
      
      return customInstanceV6<void>(
      {url: `/support/tickets/${ticketId}/score`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postSupportTicketsTicketIdScoreBody, signal
    },
      options);
    }
  


export const getPostSupportTicketsTicketIdScoreMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdScore>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdScoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdScore>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdScoreBody}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupportTicketsTicketIdScore>>, {ticketId: number;data: PostSupportTicketsTicketIdScoreBody}> = (props) => {
          const {ticketId,data} = props ?? {};

          return  postSupportTicketsTicketIdScore(ticketId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSupportTicketsTicketIdScoreMutationResult = NonNullable<Awaited<ReturnType<typeof postSupportTicketsTicketIdScore>>>
    export type PostSupportTicketsTicketIdScoreMutationBody = PostSupportTicketsTicketIdScoreBody
    export type PostSupportTicketsTicketIdScoreMutationError = unknown

    /**
 * @summary Set ticket score
 */
export const usePostSupportTicketsTicketIdScore = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSupportTicketsTicketIdScore>>, TError,{ticketId: number;data: PostSupportTicketsTicketIdScoreBody}, TContext>, request?: SecondParameter<typeof customInstanceV6>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSupportTicketsTicketIdScore>>,
        TError,
        {ticketId: number;data: PostSupportTicketsTicketIdScoreBody},
        TContext
      > => {

      const mutationOptions = getPostSupportTicketsTicketIdScoreMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
